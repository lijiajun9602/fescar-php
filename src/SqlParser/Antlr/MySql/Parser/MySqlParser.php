<?php

declare(strict_types=1);
/**
 * Copyright 2019-2022 Seata.io Group.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
namespace Hyperf\Seata\SqlParser\Antlr\MySql\Parser;

use Antlr\Antlr4\Runtime\Atn\ATN;
use Antlr\Antlr4\Runtime\Atn\ATNDeserializer;
use Antlr\Antlr4\Runtime\Atn\ParserATNSimulator;
use Antlr\Antlr4\Runtime\Dfa\DFA;
use Antlr\Antlr4\Runtime\Error\Exceptions\FailedPredicateException;
use Antlr\Antlr4\Runtime\Error\Exceptions\NoViableAltException;
use Antlr\Antlr4\Runtime\Error\Exceptions\RecognitionException;
use Antlr\Antlr4\Runtime\Parser;
use Antlr\Antlr4\Runtime\PredictionContexts\PredictionContextCache;
use Antlr\Antlr4\Runtime\RuleContext;
use Antlr\Antlr4\Runtime\RuntimeMetaData;
use Antlr\Antlr4\Runtime\Token;
use Antlr\Antlr4\Runtime\TokenStream;
use Antlr\Antlr4\Runtime\Vocabulary;
use Antlr\Antlr4\Runtime\VocabularyImpl;

final class MySqlParser extends Parser
{
    public const SPACE = 1;

    public const SPEC_MYSQL_COMMENT = 2;

    public const COMMENT_INPUT = 3;

    public const LINE_COMMENT = 4;

    public const ADD = 5;

    public const ALL = 6;

    public const ALTER = 7;

    public const ALWAYS = 8;

    public const ANALYZE = 9;

    public const AND = 10;

    public const ARRAY = 11;

    public const AS = 12;

    public const ASC = 13;

    public const BEFORE = 14;

    public const BETWEEN = 15;

    public const BOTH = 16;

    public const BUCKETS = 17;

    public const BY = 18;

    public const CALL = 19;

    public const CASCADE = 20;

    public const CASE = 21;

    public const CAST = 22;

    public const CHANGE = 23;

    public const CHARACTER = 24;

    public const CHECK = 25;

    public const COLLATE = 26;

    public const COLUMN = 27;

    public const CONDITION = 28;

    public const CONSTRAINT = 29;

    public const CONTINUE = 30;

    public const CONVERT = 31;

    public const CREATE = 32;

    public const CROSS = 33;

    public const CURRENT = 34;

    public const CURRENT_USER = 35;

    public const CURSOR = 36;

    public const DATABASE = 37;

    public const DATABASES = 38;

    public const DECLARE = 39;

    public const DEFAULT = 40;

    public const DELAYED = 41;

    public const DELETE = 42;

    public const DESC = 43;

    public const DESCRIBE = 44;

    public const DETERMINISTIC = 45;

    public const DIAGNOSTICS = 46;

    public const DISTINCT = 47;

    public const DISTINCTROW = 48;

    public const DROP = 49;

    public const EACH = 50;

    public const ELSE = 51;

    public const ELSEIF = 52;

    public const EMPTY = 53;

    public const ENCLOSED = 54;

    public const ESCAPED = 55;

    public const EXCEPT = 56;

    public const EXISTS = 57;

    public const EXIT = 58;

    public const EXPLAIN = 59;

    public const FALSE = 60;

    public const FETCH = 61;

    public const FOR = 62;

    public const FORCE = 63;

    public const FOREIGN = 64;

    public const FROM = 65;

    public const FULLTEXT = 66;

    public const GENERATED = 67;

    public const GET = 68;

    public const GRANT = 69;

    public const GROUP = 70;

    public const HAVING = 71;

    public const HIGH_PRIORITY = 72;

    public const HISTOGRAM = 73;

    public const IF = 74;

    public const IGNORE = 75;

    public const IN = 76;

    public const INDEX = 77;

    public const INFILE = 78;

    public const INNER = 79;

    public const INOUT = 80;

    public const INSERT = 81;

    public const INTERVAL = 82;

    public const INTO = 83;

    public const IS = 84;

    public const ITERATE = 85;

    public const JOIN = 86;

    public const KEY = 87;

    public const KEYS = 88;

    public const KILL = 89;

    public const LEADING = 90;

    public const LEAVE = 91;

    public const LEFT = 92;

    public const LIKE = 93;

    public const LIMIT = 94;

    public const LINEAR = 95;

    public const LINES = 96;

    public const LOAD = 97;

    public const LOCK = 98;

    public const LOOP = 99;

    public const LOW_PRIORITY = 100;

    public const MASTER_BIND = 101;

    public const MASTER_SSL_VERIFY_SERVER_CERT = 102;

    public const MATCH = 103;

    public const MAXVALUE = 104;

    public const MODIFIES = 105;

    public const NATURAL = 106;

    public const NOT = 107;

    public const NO_WRITE_TO_BINLOG = 108;

    public const NULL_LITERAL = 109;

    public const NUMBER = 110;

    public const ON = 111;

    public const OPTIMIZE = 112;

    public const OPTION = 113;

    public const OPTIONALLY = 114;

    public const OR = 115;

    public const ORDER = 116;

    public const OUT = 117;

    public const OVER = 118;

    public const OUTER = 119;

    public const OUTFILE = 120;

    public const PARTITION = 121;

    public const PRIMARY = 122;

    public const PROCEDURE = 123;

    public const PURGE = 124;

    public const RANGE = 125;

    public const READ = 126;

    public const READS = 127;

    public const REFERENCES = 128;

    public const REGEXP = 129;

    public const RELEASE = 130;

    public const RENAME = 131;

    public const REPEAT = 132;

    public const REPLACE = 133;

    public const REQUIRE = 134;

    public const RESIGNAL = 135;

    public const RESTRICT = 136;

    public const RETAIN = 137;

    public const RETURN = 138;

    public const REVOKE = 139;

    public const RIGHT = 140;

    public const RLIKE = 141;

    public const SCHEMA = 142;

    public const SCHEMAS = 143;

    public const SELECT = 144;

    public const SET = 145;

    public const SEPARATOR = 146;

    public const SHOW = 147;

    public const SIGNAL = 148;

    public const SPATIAL = 149;

    public const SQL = 150;

    public const SQLEXCEPTION = 151;

    public const SQLSTATE = 152;

    public const SQLWARNING = 153;

    public const SQL_BIG_RESULT = 154;

    public const SQL_CALC_FOUND_ROWS = 155;

    public const SQL_SMALL_RESULT = 156;

    public const SSL = 157;

    public const STACKED = 158;

    public const STARTING = 159;

    public const STRAIGHT_JOIN = 160;

    public const TABLE = 161;

    public const TERMINATED = 162;

    public const THEN = 163;

    public const TO = 164;

    public const TRAILING = 165;

    public const TRIGGER = 166;

    public const TRUE = 167;

    public const UNDO = 168;

    public const UNION = 169;

    public const UNIQUE = 170;

    public const UNLOCK = 171;

    public const UNSIGNED = 172;

    public const UPDATE = 173;

    public const USAGE = 174;

    public const USE = 175;

    public const USING = 176;

    public const VALUES = 177;

    public const WHEN = 178;

    public const WHERE = 179;

    public const WHILE = 180;

    public const WITH = 181;

    public const WRITE = 182;

    public const XOR = 183;

    public const ZEROFILL = 184;

    public const TINYINT = 185;

    public const SMALLINT = 186;

    public const MEDIUMINT = 187;

    public const MIDDLEINT = 188;

    public const INT = 189;

    public const INT1 = 190;

    public const INT2 = 191;

    public const INT3 = 192;

    public const INT4 = 193;

    public const INT8 = 194;

    public const INTEGER = 195;

    public const BIGINT = 196;

    public const REAL = 197;

    public const DOUBLE = 198;

    public const PRECISION = 199;

    public const FLOAT = 200;

    public const FLOAT4 = 201;

    public const FLOAT8 = 202;

    public const DECIMAL = 203;

    public const DEC = 204;

    public const NUMERIC = 205;

    public const DATE = 206;

    public const TIME = 207;

    public const TIMESTAMP = 208;

    public const DATETIME = 209;

    public const YEAR = 210;

    public const CHAR = 211;

    public const VARCHAR = 212;

    public const NVARCHAR = 213;

    public const NATIONAL = 214;

    public const BINARY = 215;

    public const VARBINARY = 216;

    public const TINYBLOB = 217;

    public const BLOB = 218;

    public const MEDIUMBLOB = 219;

    public const LONG = 220;

    public const LONGBLOB = 221;

    public const TINYTEXT = 222;

    public const TEXT = 223;

    public const MEDIUMTEXT = 224;

    public const LONGTEXT = 225;

    public const ENUM = 226;

    public const VARYING = 227;

    public const SERIAL = 228;

    public const YEAR_MONTH = 229;

    public const DAY_HOUR = 230;

    public const DAY_MINUTE = 231;

    public const DAY_SECOND = 232;

    public const HOUR_MINUTE = 233;

    public const HOUR_SECOND = 234;

    public const MINUTE_SECOND = 235;

    public const SECOND_MICROSECOND = 236;

    public const MINUTE_MICROSECOND = 237;

    public const HOUR_MICROSECOND = 238;

    public const DAY_MICROSECOND = 239;

    public const JSON_ARRAY = 240;

    public const JSON_OBJECT = 241;

    public const JSON_QUOTE = 242;

    public const JSON_CONTAINS = 243;

    public const JSON_CONTAINS_PATH = 244;

    public const JSON_EXTRACT = 245;

    public const JSON_KEYS = 246;

    public const JSON_OVERLAPS = 247;

    public const JSON_SEARCH = 248;

    public const JSON_VALUE = 249;

    public const JSON_ARRAY_APPEND = 250;

    public const JSON_ARRAY_INSERT = 251;

    public const JSON_INSERT = 252;

    public const JSON_MERGE = 253;

    public const JSON_MERGE_PATCH = 254;

    public const JSON_MERGE_PRESERVE = 255;

    public const JSON_REMOVE = 256;

    public const JSON_REPLACE = 257;

    public const JSON_SET = 258;

    public const JSON_UNQUOTE = 259;

    public const JSON_DEPTH = 260;

    public const JSON_LENGTH = 261;

    public const JSON_TYPE = 262;

    public const JSON_VALID = 263;

    public const JSON_TABLE = 264;

    public const JSON_SCHEMA_VALID = 265;

    public const JSON_SCHEMA_VALIDATION_REPORT = 266;

    public const JSON_PRETTY = 267;

    public const JSON_STORAGE_FREE = 268;

    public const JSON_STORAGE_SIZE = 269;

    public const JSON_ARRAYAGG = 270;

    public const JSON_OBJECTAGG = 271;

    public const AVG = 272;

    public const BIT_AND = 273;

    public const BIT_OR = 274;

    public const BIT_XOR = 275;

    public const COUNT = 276;

    public const CUME_DIST = 277;

    public const DENSE_RANK = 278;

    public const FIRST_VALUE = 279;

    public const GROUP_CONCAT = 280;

    public const LAG = 281;

    public const LAST_VALUE = 282;

    public const LEAD = 283;

    public const MAX = 284;

    public const MIN = 285;

    public const NTILE = 286;

    public const NTH_VALUE = 287;

    public const PERCENT_RANK = 288;

    public const RANK = 289;

    public const ROW_NUMBER = 290;

    public const STD = 291;

    public const STDDEV = 292;

    public const STDDEV_POP = 293;

    public const STDDEV_SAMP = 294;

    public const SUM = 295;

    public const VAR_POP = 296;

    public const VAR_SAMP = 297;

    public const VARIANCE = 298;

    public const CURRENT_DATE = 299;

    public const CURRENT_TIME = 300;

    public const CURRENT_TIMESTAMP = 301;

    public const LOCALTIME = 302;

    public const CURDATE = 303;

    public const CURTIME = 304;

    public const DATE_ADD = 305;

    public const DATE_SUB = 306;

    public const EXTRACT = 307;

    public const LOCALTIMESTAMP = 308;

    public const NOW = 309;

    public const POSITION = 310;

    public const SUBSTR = 311;

    public const SUBSTRING = 312;

    public const SYSDATE = 313;

    public const TRIM = 314;

    public const UTC_DATE = 315;

    public const UTC_TIME = 316;

    public const UTC_TIMESTAMP = 317;

    public const ACCOUNT = 318;

    public const ACTION = 319;

    public const AFTER = 320;

    public const AGGREGATE = 321;

    public const ALGORITHM = 322;

    public const ANY = 323;

    public const AT = 324;

    public const AUTHORS = 325;

    public const AUTOCOMMIT = 326;

    public const AUTOEXTEND_SIZE = 327;

    public const AUTO_INCREMENT = 328;

    public const AVG_ROW_LENGTH = 329;

    public const BEGIN = 330;

    public const BINLOG = 331;

    public const BIT = 332;

    public const BLOCK = 333;

    public const BOOL = 334;

    public const BOOLEAN = 335;

    public const BTREE = 336;

    public const CACHE = 337;

    public const CASCADED = 338;

    public const CHAIN = 339;

    public const CHANGED = 340;

    public const CHANNEL = 341;

    public const CHECKSUM = 342;

    public const PAGE_CHECKSUM = 343;

    public const CIPHER = 344;

    public const CLASS_ORIGIN = 345;

    public const CLIENT = 346;

    public const CLOSE = 347;

    public const COALESCE = 348;

    public const CODE = 349;

    public const COLUMNS = 350;

    public const COLUMN_FORMAT = 351;

    public const COLUMN_NAME = 352;

    public const COMMENT = 353;

    public const COMMIT = 354;

    public const COMPACT = 355;

    public const COMPLETION = 356;

    public const COMPRESSED = 357;

    public const COMPRESSION = 358;

    public const CONCURRENT = 359;

    public const CONNECT = 360;

    public const CONNECTION = 361;

    public const CONSISTENT = 362;

    public const CONSTRAINT_CATALOG = 363;

    public const CONSTRAINT_SCHEMA = 364;

    public const CONSTRAINT_NAME = 365;

    public const CONTAINS = 366;

    public const CONTEXT = 367;

    public const CONTRIBUTORS = 368;

    public const COPY = 369;

    public const CPU = 370;

    public const CURSOR_NAME = 371;

    public const DATA = 372;

    public const DATAFILE = 373;

    public const DEALLOCATE = 374;

    public const DEFAULT_AUTH = 375;

    public const DEFINER = 376;

    public const DELAY_KEY_WRITE = 377;

    public const DES_KEY_FILE = 378;

    public const DIRECTORY = 379;

    public const DISABLE = 380;

    public const DISCARD = 381;

    public const DISK = 382;

    public const DO = 383;

    public const DUMPFILE = 384;

    public const DUPLICATE = 385;

    public const DYNAMIC = 386;

    public const ENABLE = 387;

    public const ENCRYPTION = 388;

    public const END = 389;

    public const ENDS = 390;

    public const ENGINE = 391;

    public const ENGINES = 392;

    public const ERROR = 393;

    public const ERRORS = 394;

    public const ESCAPE = 395;

    public const EVEN = 396;

    public const EVENT = 397;

    public const EVENTS = 398;

    public const EVERY = 399;

    public const EXCHANGE = 400;

    public const EXCLUSIVE = 401;

    public const EXPIRE = 402;

    public const EXPORT = 403;

    public const EXTENDED = 404;

    public const EXTENT_SIZE = 405;

    public const FAST = 406;

    public const FAULTS = 407;

    public const FIELDS = 408;

    public const FILE_BLOCK_SIZE = 409;

    public const FILTER = 410;

    public const FIRST = 411;

    public const FIXED = 412;

    public const FLUSH = 413;

    public const FOLLOWING = 414;

    public const FOLLOWS = 415;

    public const FOUND = 416;

    public const FULL = 417;

    public const FUNCTION = 418;

    public const GENERAL = 419;

    public const GLOBAL = 420;

    public const GRANTS = 421;

    public const GROUP_REPLICATION = 422;

    public const HANDLER = 423;

    public const HASH = 424;

    public const HELP = 425;

    public const HOST = 426;

    public const HOSTS = 427;

    public const IDENTIFIED = 428;

    public const IGNORE_SERVER_IDS = 429;

    public const IMPORT = 430;

    public const INDEXES = 431;

    public const INITIAL_SIZE = 432;

    public const INPLACE = 433;

    public const INSERT_METHOD = 434;

    public const INSTALL = 435;

    public const INSTANCE = 436;

    public const INVISIBLE = 437;

    public const INVOKER = 438;

    public const IO = 439;

    public const IO_THREAD = 440;

    public const IPC = 441;

    public const ISOLATION = 442;

    public const ISSUER = 443;

    public const JSON = 444;

    public const KEY_BLOCK_SIZE = 445;

    public const LANGUAGE = 446;

    public const LAST = 447;

    public const LEAVES = 448;

    public const LESS = 449;

    public const LEVEL = 450;

    public const LIST = 451;

    public const LOCAL = 452;

    public const LOGFILE = 453;

    public const LOGS = 454;

    public const MASTER = 455;

    public const MASTER_AUTO_POSITION = 456;

    public const MASTER_CONNECT_RETRY = 457;

    public const MASTER_DELAY = 458;

    public const MASTER_HEARTBEAT_PERIOD = 459;

    public const MASTER_HOST = 460;

    public const MASTER_LOG_FILE = 461;

    public const MASTER_LOG_POS = 462;

    public const MASTER_PASSWORD = 463;

    public const MASTER_PORT = 464;

    public const MASTER_RETRY_COUNT = 465;

    public const MASTER_SSL = 466;

    public const MASTER_SSL_CA = 467;

    public const MASTER_SSL_CAPATH = 468;

    public const MASTER_SSL_CERT = 469;

    public const MASTER_SSL_CIPHER = 470;

    public const MASTER_SSL_CRL = 471;

    public const MASTER_SSL_CRLPATH = 472;

    public const MASTER_SSL_KEY = 473;

    public const MASTER_TLS_VERSION = 474;

    public const MASTER_USER = 475;

    public const MAX_CONNECTIONS_PER_HOUR = 476;

    public const MAX_QUERIES_PER_HOUR = 477;

    public const MAX_ROWS = 478;

    public const MAX_SIZE = 479;

    public const MAX_UPDATES_PER_HOUR = 480;

    public const MAX_USER_CONNECTIONS = 481;

    public const MEDIUM = 482;

    public const MEMBER = 483;

    public const MERGE = 484;

    public const MESSAGE_TEXT = 485;

    public const MID = 486;

    public const MIGRATE = 487;

    public const MIN_ROWS = 488;

    public const MODE = 489;

    public const MODIFY = 490;

    public const MUTEX = 491;

    public const MYSQL = 492;

    public const MYSQL_ERRNO = 493;

    public const NAME = 494;

    public const NAMES = 495;

    public const NCHAR = 496;

    public const NEVER = 497;

    public const NEXT = 498;

    public const NO = 499;

    public const NODEGROUP = 500;

    public const NONE = 501;

    public const ODBC = 502;

    public const OFFLINE = 503;

    public const OFFSET = 504;

    public const OF = 505;

    public const OJ = 506;

    public const OLD_PASSWORD = 507;

    public const ONE = 508;

    public const ONLINE = 509;

    public const ONLY = 510;

    public const OPEN = 511;

    public const OPTIMIZER_COSTS = 512;

    public const OPTIONS = 513;

    public const OWNER = 514;

    public const PACK_KEYS = 515;

    public const PAGE = 516;

    public const PARSER = 517;

    public const PARTIAL = 518;

    public const PARTITIONING = 519;

    public const PARTITIONS = 520;

    public const PASSWORD = 521;

    public const PHASE = 522;

    public const PLUGIN = 523;

    public const PLUGIN_DIR = 524;

    public const PLUGINS = 525;

    public const PORT = 526;

    public const PRECEDES = 527;

    public const PRECEDING = 528;

    public const PREPARE = 529;

    public const PRESERVE = 530;

    public const PREV = 531;

    public const PROCESSLIST = 532;

    public const PROFILE = 533;

    public const PROFILES = 534;

    public const PROXY = 535;

    public const QUERY = 536;

    public const QUICK = 537;

    public const REBUILD = 538;

    public const RECOVER = 539;

    public const REDO_BUFFER_SIZE = 540;

    public const REDUNDANT = 541;

    public const RELAY = 542;

    public const RELAY_LOG_FILE = 543;

    public const RELAY_LOG_POS = 544;

    public const RELAYLOG = 545;

    public const REMOVE = 546;

    public const REORGANIZE = 547;

    public const REPAIR = 548;

    public const REPLICATE_DO_DB = 549;

    public const REPLICATE_DO_TABLE = 550;

    public const REPLICATE_IGNORE_DB = 551;

    public const REPLICATE_IGNORE_TABLE = 552;

    public const REPLICATE_REWRITE_DB = 553;

    public const REPLICATE_WILD_DO_TABLE = 554;

    public const REPLICATE_WILD_IGNORE_TABLE = 555;

    public const REPLICATION = 556;

    public const RESET = 557;

    public const RESUME = 558;

    public const RETURNED_SQLSTATE = 559;

    public const RETURNING = 560;

    public const RETURNS = 561;

    public const ROLE = 562;

    public const ROLLBACK = 563;

    public const ROLLUP = 564;

    public const ROTATE = 565;

    public const ROW = 566;

    public const ROWS = 567;

    public const ROW_FORMAT = 568;

    public const SAVEPOINT = 569;

    public const SCHEDULE = 570;

    public const SECURITY = 571;

    public const SERVER = 572;

    public const SESSION = 573;

    public const SHARE = 574;

    public const SHARED = 575;

    public const SIGNED = 576;

    public const SIMPLE = 577;

    public const SLAVE = 578;

    public const SLOW = 579;

    public const SNAPSHOT = 580;

    public const SOCKET = 581;

    public const SOME = 582;

    public const SONAME = 583;

    public const SOUNDS = 584;

    public const SOURCE = 585;

    public const SQL_AFTER_GTIDS = 586;

    public const SQL_AFTER_MTS_GAPS = 587;

    public const SQL_BEFORE_GTIDS = 588;

    public const SQL_BUFFER_RESULT = 589;

    public const SQL_CACHE = 590;

    public const SQL_NO_CACHE = 591;

    public const SQL_THREAD = 592;

    public const START = 593;

    public const STARTS = 594;

    public const STATS_AUTO_RECALC = 595;

    public const STATS_PERSISTENT = 596;

    public const STATS_SAMPLE_PAGES = 597;

    public const STATUS = 598;

    public const STOP = 599;

    public const STORAGE = 600;

    public const STORED = 601;

    public const STRING = 602;

    public const SUBCLASS_ORIGIN = 603;

    public const SUBJECT = 604;

    public const SUBPARTITION = 605;

    public const SUBPARTITIONS = 606;

    public const SUSPEND = 607;

    public const SWAPS = 608;

    public const SWITCHES = 609;

    public const TABLE_NAME = 610;

    public const TABLESPACE = 611;

    public const TABLE_TYPE = 612;

    public const TEMPORARY = 613;

    public const TEMPTABLE = 614;

    public const THAN = 615;

    public const TRADITIONAL = 616;

    public const TRANSACTION = 617;

    public const TRANSACTIONAL = 618;

    public const TRIGGERS = 619;

    public const TRUNCATE = 620;

    public const UNBOUNDED = 621;

    public const UNDEFINED = 622;

    public const UNDOFILE = 623;

    public const UNDO_BUFFER_SIZE = 624;

    public const UNINSTALL = 625;

    public const UNKNOWN = 626;

    public const UNTIL = 627;

    public const UPGRADE = 628;

    public const USER = 629;

    public const USE_FRM = 630;

    public const USER_RESOURCES = 631;

    public const VALIDATION = 632;

    public const VALUE = 633;

    public const VARIABLES = 634;

    public const VIEW = 635;

    public const VIRTUAL = 636;

    public const VISIBLE = 637;

    public const WAIT = 638;

    public const WARNINGS = 639;

    public const WINDOW = 640;

    public const WITHOUT = 641;

    public const WORK = 642;

    public const WRAPPER = 643;

    public const X509 = 644;

    public const XA = 645;

    public const XML = 646;

    public const EUR = 647;

    public const USA = 648;

    public const JIS = 649;

    public const ISO = 650;

    public const INTERNAL = 651;

    public const QUARTER = 652;

    public const MONTH = 653;

    public const DAY = 654;

    public const HOUR = 655;

    public const MINUTE = 656;

    public const WEEK = 657;

    public const SECOND = 658;

    public const MICROSECOND = 659;

    public const TABLES = 660;

    public const ROUTINE = 661;

    public const EXECUTE = 662;

    public const FILE = 663;

    public const PROCESS = 664;

    public const RELOAD = 665;

    public const SHUTDOWN = 666;

    public const SUPER = 667;

    public const PRIVILEGES = 668;

    public const APPLICATION_PASSWORD_ADMIN = 669;

    public const AUDIT_ADMIN = 670;

    public const BACKUP_ADMIN = 671;

    public const BINLOG_ADMIN = 672;

    public const BINLOG_ENCRYPTION_ADMIN = 673;

    public const CLONE_ADMIN = 674;

    public const CONNECTION_ADMIN = 675;

    public const ENCRYPTION_KEY_ADMIN = 676;

    public const FIREWALL_ADMIN = 677;

    public const FIREWALL_USER = 678;

    public const FLUSH_OPTIMIZER_COSTS = 679;

    public const FLUSH_STATUS = 680;

    public const FLUSH_TABLES = 681;

    public const FLUSH_USER_RESOURCES = 682;

    public const GROUP_REPLICATION_ADMIN = 683;

    public const INNODB_REDO_LOG_ARCHIVE = 684;

    public const INNODB_REDO_LOG_ENABLE = 685;

    public const NDB_STORED_USER = 686;

    public const PERSIST_RO_VARIABLES_ADMIN = 687;

    public const REPLICATION_APPLIER = 688;

    public const REPLICATION_SLAVE_ADMIN = 689;

    public const RESOURCE_GROUP_ADMIN = 690;

    public const RESOURCE_GROUP_USER = 691;

    public const ROLE_ADMIN = 692;

    public const SERVICE_CONNECTION_ADMIN = 693;

    public const SESSION_VARIABLES_ADMIN = 694;

    public const SET_USER_ID = 695;

    public const SHOW_ROUTINE = 696;

    public const SYSTEM_VARIABLES_ADMIN = 697;

    public const TABLE_ENCRYPTION_ADMIN = 698;

    public const VERSION_TOKEN_ADMIN = 699;

    public const XA_RECOVER_ADMIN = 700;

    public const ARMSCII8 = 701;

    public const ASCII = 702;

    public const BIG5 = 703;

    public const CP1250 = 704;

    public const CP1251 = 705;

    public const CP1256 = 706;

    public const CP1257 = 707;

    public const CP850 = 708;

    public const CP852 = 709;

    public const CP866 = 710;

    public const CP932 = 711;

    public const DEC8 = 712;

    public const EUCJPMS = 713;

    public const EUCKR = 714;

    public const GB18030 = 715;

    public const GB2312 = 716;

    public const GBK = 717;

    public const GEOSTD8 = 718;

    public const GREEK = 719;

    public const HEBREW = 720;

    public const HP8 = 721;

    public const KEYBCS2 = 722;

    public const KOI8R = 723;

    public const KOI8U = 724;

    public const LATIN1 = 725;

    public const LATIN2 = 726;

    public const LATIN5 = 727;

    public const LATIN7 = 728;

    public const MACCE = 729;

    public const MACROMAN = 730;

    public const SJIS = 731;

    public const SWE7 = 732;

    public const TIS620 = 733;

    public const UCS2 = 734;

    public const UJIS = 735;

    public const UTF16 = 736;

    public const UTF16LE = 737;

    public const UTF32 = 738;

    public const UTF8 = 739;

    public const UTF8MB3 = 740;

    public const UTF8MB4 = 741;

    public const ARCHIVE = 742;

    public const BLACKHOLE = 743;

    public const CSV = 744;

    public const FEDERATED = 745;

    public const INNODB = 746;

    public const MEMORY = 747;

    public const MRG_MYISAM = 748;

    public const MYISAM = 749;

    public const NDB = 750;

    public const NDBCLUSTER = 751;

    public const PERFORMANCE_SCHEMA = 752;

    public const TOKUDB = 753;

    public const REPEATABLE = 754;

    public const COMMITTED = 755;

    public const UNCOMMITTED = 756;

    public const SERIALIZABLE = 757;

    public const GEOMETRYCOLLECTION = 758;

    public const GEOMCOLLECTION = 759;

    public const GEOMETRY = 760;

    public const LINESTRING = 761;

    public const MULTILINESTRING = 762;

    public const MULTIPOINT = 763;

    public const MULTIPOLYGON = 764;

    public const POINT = 765;

    public const POLYGON = 766;

    public const ABS = 767;

    public const ACOS = 768;

    public const ADDDATE = 769;

    public const ADDTIME = 770;

    public const AES_DECRYPT = 771;

    public const AES_ENCRYPT = 772;

    public const AREA = 773;

    public const ASBINARY = 774;

    public const ASIN = 775;

    public const ASTEXT = 776;

    public const ASWKB = 777;

    public const ASWKT = 778;

    public const ASYMMETRIC_DECRYPT = 779;

    public const ASYMMETRIC_DERIVE = 780;

    public const ASYMMETRIC_ENCRYPT = 781;

    public const ASYMMETRIC_SIGN = 782;

    public const ASYMMETRIC_VERIFY = 783;

    public const ATAN = 784;

    public const ATAN2 = 785;

    public const BENCHMARK = 786;

    public const BIN = 787;

    public const BIT_COUNT = 788;

    public const BIT_LENGTH = 789;

    public const BUFFER = 790;

    public const CATALOG_NAME = 791;

    public const CEIL = 792;

    public const CEILING = 793;

    public const CENTROID = 794;

    public const CHARACTER_LENGTH = 795;

    public const CHARSET = 796;

    public const CHAR_LENGTH = 797;

    public const COERCIBILITY = 798;

    public const COLLATION = 799;

    public const COMPRESS = 800;

    public const CONCAT = 801;

    public const CONCAT_WS = 802;

    public const CONNECTION_ID = 803;

    public const CONV = 804;

    public const CONVERT_TZ = 805;

    public const COS = 806;

    public const COT = 807;

    public const CRC32 = 808;

    public const CREATE_ASYMMETRIC_PRIV_KEY = 809;

    public const CREATE_ASYMMETRIC_PUB_KEY = 810;

    public const CREATE_DH_PARAMETERS = 811;

    public const CREATE_DIGEST = 812;

    public const CROSSES = 813;

    public const DATEDIFF = 814;

    public const DATE_FORMAT = 815;

    public const DAYNAME = 816;

    public const DAYOFMONTH = 817;

    public const DAYOFWEEK = 818;

    public const DAYOFYEAR = 819;

    public const DECODE = 820;

    public const DEGREES = 821;

    public const DES_DECRYPT = 822;

    public const DES_ENCRYPT = 823;

    public const DIMENSION = 824;

    public const DISJOINT = 825;

    public const ELT = 826;

    public const ENCODE = 827;

    public const ENCRYPT = 828;

    public const ENDPOINT = 829;

    public const ENVELOPE = 830;

    public const EQUALS = 831;

    public const EXP = 832;

    public const EXPORT_SET = 833;

    public const EXTERIORRING = 834;

    public const EXTRACTVALUE = 835;

    public const FIELD = 836;

    public const FIND_IN_SET = 837;

    public const FLOOR = 838;

    public const FORMAT = 839;

    public const FOUND_ROWS = 840;

    public const FROM_BASE64 = 841;

    public const FROM_DAYS = 842;

    public const FROM_UNIXTIME = 843;

    public const GEOMCOLLFROMTEXT = 844;

    public const GEOMCOLLFROMWKB = 845;

    public const GEOMETRYCOLLECTIONFROMTEXT = 846;

    public const GEOMETRYCOLLECTIONFROMWKB = 847;

    public const GEOMETRYFROMTEXT = 848;

    public const GEOMETRYFROMWKB = 849;

    public const GEOMETRYN = 850;

    public const GEOMETRYTYPE = 851;

    public const GEOMFROMTEXT = 852;

    public const GEOMFROMWKB = 853;

    public const GET_FORMAT = 854;

    public const GET_LOCK = 855;

    public const GLENGTH = 856;

    public const GREATEST = 857;

    public const GTID_SUBSET = 858;

    public const GTID_SUBTRACT = 859;

    public const HEX = 860;

    public const IFNULL = 861;

    public const INET6_ATON = 862;

    public const INET6_NTOA = 863;

    public const INET_ATON = 864;

    public const INET_NTOA = 865;

    public const INSTR = 866;

    public const INTERIORRINGN = 867;

    public const INTERSECTS = 868;

    public const ISCLOSED = 869;

    public const ISEMPTY = 870;

    public const ISNULL = 871;

    public const ISSIMPLE = 872;

    public const IS_FREE_LOCK = 873;

    public const IS_IPV4 = 874;

    public const IS_IPV4_COMPAT = 875;

    public const IS_IPV4_MAPPED = 876;

    public const IS_IPV6 = 877;

    public const IS_USED_LOCK = 878;

    public const LAST_INSERT_ID = 879;

    public const LCASE = 880;

    public const LEAST = 881;

    public const LENGTH = 882;

    public const LINEFROMTEXT = 883;

    public const LINEFROMWKB = 884;

    public const LINESTRINGFROMTEXT = 885;

    public const LINESTRINGFROMWKB = 886;

    public const LN = 887;

    public const LOAD_FILE = 888;

    public const LOCATE = 889;

    public const LOG = 890;

    public const LOG10 = 891;

    public const LOG2 = 892;

    public const LOWER = 893;

    public const LPAD = 894;

    public const LTRIM = 895;

    public const MAKEDATE = 896;

    public const MAKETIME = 897;

    public const MAKE_SET = 898;

    public const MASTER_POS_WAIT = 899;

    public const MBRCONTAINS = 900;

    public const MBRDISJOINT = 901;

    public const MBREQUAL = 902;

    public const MBRINTERSECTS = 903;

    public const MBROVERLAPS = 904;

    public const MBRTOUCHES = 905;

    public const MBRWITHIN = 906;

    public const MD5 = 907;

    public const MLINEFROMTEXT = 908;

    public const MLINEFROMWKB = 909;

    public const MONTHNAME = 910;

    public const MPOINTFROMTEXT = 911;

    public const MPOINTFROMWKB = 912;

    public const MPOLYFROMTEXT = 913;

    public const MPOLYFROMWKB = 914;

    public const MULTILINESTRINGFROMTEXT = 915;

    public const MULTILINESTRINGFROMWKB = 916;

    public const MULTIPOINTFROMTEXT = 917;

    public const MULTIPOINTFROMWKB = 918;

    public const MULTIPOLYGONFROMTEXT = 919;

    public const MULTIPOLYGONFROMWKB = 920;

    public const NAME_CONST = 921;

    public const NULLIF = 922;

    public const NUMGEOMETRIES = 923;

    public const NUMINTERIORRINGS = 924;

    public const NUMPOINTS = 925;

    public const OCT = 926;

    public const OCTET_LENGTH = 927;

    public const ORD = 928;

    public const OVERLAPS = 929;

    public const PERIOD_ADD = 930;

    public const PERIOD_DIFF = 931;

    public const PI = 932;

    public const POINTFROMTEXT = 933;

    public const POINTFROMWKB = 934;

    public const POINTN = 935;

    public const POLYFROMTEXT = 936;

    public const POLYFROMWKB = 937;

    public const POLYGONFROMTEXT = 938;

    public const POLYGONFROMWKB = 939;

    public const POW = 940;

    public const POWER = 941;

    public const QUOTE = 942;

    public const RADIANS = 943;

    public const RAND = 944;

    public const RANDOM_BYTES = 945;

    public const RELEASE_LOCK = 946;

    public const REVERSE = 947;

    public const ROUND = 948;

    public const ROW_COUNT = 949;

    public const RPAD = 950;

    public const RTRIM = 951;

    public const SEC_TO_TIME = 952;

    public const SESSION_USER = 953;

    public const SHA = 954;

    public const SHA1 = 955;

    public const SHA2 = 956;

    public const SCHEMA_NAME = 957;

    public const SIGN = 958;

    public const SIN = 959;

    public const SLEEP = 960;

    public const SOUNDEX = 961;

    public const SQL_THREAD_WAIT_AFTER_GTIDS = 962;

    public const SQRT = 963;

    public const SRID = 964;

    public const STARTPOINT = 965;

    public const STRCMP = 966;

    public const STR_TO_DATE = 967;

    public const ST_AREA = 968;

    public const ST_ASBINARY = 969;

    public const ST_ASTEXT = 970;

    public const ST_ASWKB = 971;

    public const ST_ASWKT = 972;

    public const ST_BUFFER = 973;

    public const ST_CENTROID = 974;

    public const ST_CONTAINS = 975;

    public const ST_CROSSES = 976;

    public const ST_DIFFERENCE = 977;

    public const ST_DIMENSION = 978;

    public const ST_DISJOINT = 979;

    public const ST_DISTANCE = 980;

    public const ST_ENDPOINT = 981;

    public const ST_ENVELOPE = 982;

    public const ST_EQUALS = 983;

    public const ST_EXTERIORRING = 984;

    public const ST_GEOMCOLLFROMTEXT = 985;

    public const ST_GEOMCOLLFROMTXT = 986;

    public const ST_GEOMCOLLFROMWKB = 987;

    public const ST_GEOMETRYCOLLECTIONFROMTEXT = 988;

    public const ST_GEOMETRYCOLLECTIONFROMWKB = 989;

    public const ST_GEOMETRYFROMTEXT = 990;

    public const ST_GEOMETRYFROMWKB = 991;

    public const ST_GEOMETRYN = 992;

    public const ST_GEOMETRYTYPE = 993;

    public const ST_GEOMFROMTEXT = 994;

    public const ST_GEOMFROMWKB = 995;

    public const ST_INTERIORRINGN = 996;

    public const ST_INTERSECTION = 997;

    public const ST_INTERSECTS = 998;

    public const ST_ISCLOSED = 999;

    public const ST_ISEMPTY = 1000;

    public const ST_ISSIMPLE = 1001;

    public const ST_LINEFROMTEXT = 1002;

    public const ST_LINEFROMWKB = 1003;

    public const ST_LINESTRINGFROMTEXT = 1004;

    public const ST_LINESTRINGFROMWKB = 1005;

    public const ST_NUMGEOMETRIES = 1006;

    public const ST_NUMINTERIORRING = 1007;

    public const ST_NUMINTERIORRINGS = 1008;

    public const ST_NUMPOINTS = 1009;

    public const ST_OVERLAPS = 1010;

    public const ST_POINTFROMTEXT = 1011;

    public const ST_POINTFROMWKB = 1012;

    public const ST_POINTN = 1013;

    public const ST_POLYFROMTEXT = 1014;

    public const ST_POLYFROMWKB = 1015;

    public const ST_POLYGONFROMTEXT = 1016;

    public const ST_POLYGONFROMWKB = 1017;

    public const ST_SRID = 1018;

    public const ST_STARTPOINT = 1019;

    public const ST_SYMDIFFERENCE = 1020;

    public const ST_TOUCHES = 1021;

    public const ST_UNION = 1022;

    public const ST_WITHIN = 1023;

    public const ST_X = 1024;

    public const ST_Y = 1025;

    public const SUBDATE = 1026;

    public const SUBSTRING_INDEX = 1027;

    public const SUBTIME = 1028;

    public const SYSTEM_USER = 1029;

    public const TAN = 1030;

    public const TIMEDIFF = 1031;

    public const TIMESTAMPADD = 1032;

    public const TIMESTAMPDIFF = 1033;

    public const TIME_FORMAT = 1034;

    public const TIME_TO_SEC = 1035;

    public const TOUCHES = 1036;

    public const TO_BASE64 = 1037;

    public const TO_DAYS = 1038;

    public const TO_SECONDS = 1039;

    public const UCASE = 1040;

    public const UNCOMPRESS = 1041;

    public const UNCOMPRESSED_LENGTH = 1042;

    public const UNHEX = 1043;

    public const UNIX_TIMESTAMP = 1044;

    public const UPDATEXML = 1045;

    public const UPPER = 1046;

    public const UUID = 1047;

    public const UUID_SHORT = 1048;

    public const VALIDATE_PASSWORD_STRENGTH = 1049;

    public const VERSION = 1050;

    public const WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 1051;

    public const WEEKDAY = 1052;

    public const WEEKOFYEAR = 1053;

    public const WEIGHT_STRING = 1054;

    public const WITHIN = 1055;

    public const YEARWEEK = 1056;

    public const Y_FUNCTION = 1057;

    public const X_FUNCTION = 1058;

    public const VAR_ASSIGN = 1059;

    public const PLUS_ASSIGN = 1060;

    public const MINUS_ASSIGN = 1061;

    public const MULT_ASSIGN = 1062;

    public const DIV_ASSIGN = 1063;

    public const MOD_ASSIGN = 1064;

    public const AND_ASSIGN = 1065;

    public const XOR_ASSIGN = 1066;

    public const OR_ASSIGN = 1067;

    public const STAR = 1068;

    public const DIVIDE = 1069;

    public const MODULE = 1070;

    public const PLUS = 1071;

    public const MINUS = 1072;

    public const DIV = 1073;

    public const MOD = 1074;

    public const EQUAL_SYMBOL = 1075;

    public const GREATER_SYMBOL = 1076;

    public const LESS_SYMBOL = 1077;

    public const EXCLAMATION_SYMBOL = 1078;

    public const BIT_NOT_OP = 1079;

    public const BIT_OR_OP = 1080;

    public const BIT_AND_OP = 1081;

    public const BIT_XOR_OP = 1082;

    public const DOT = 1083;

    public const LR_BRACKET = 1084;

    public const RR_BRACKET = 1085;

    public const COMMA = 1086;

    public const SEMI = 1087;

    public const AT_SIGN = 1088;

    public const ZERO_DECIMAL = 1089;

    public const ONE_DECIMAL = 1090;

    public const TWO_DECIMAL = 1091;

    public const SINGLE_QUOTE_SYMB = 1092;

    public const DOUBLE_QUOTE_SYMB = 1093;

    public const REVERSE_QUOTE_SYMB = 1094;

    public const COLON_SYMB = 1095;

    public const CHARSET_REVERSE_QOUTE_STRING = 1096;

    public const FILESIZE_LITERAL = 1097;

    public const START_NATIONAL_STRING_LITERAL = 1098;

    public const STRING_LITERAL = 1099;

    public const DECIMAL_LITERAL = 1100;

    public const HEXADECIMAL_LITERAL = 1101;

    public const REAL_LITERAL = 1102;

    public const NULL_SPEC_LITERAL = 1103;

    public const BIT_STRING = 1104;

    public const STRING_CHARSET_NAME = 1105;

    public const DOT_ID = 1106;

    public const ID = 1107;

    public const REVERSE_QUOTE_ID = 1108;

    public const STRING_USER_NAME = 1109;

    public const IP_ADDRESS = 1110;

    public const LOCAL_ID = 1111;

    public const GLOBAL_ID = 1112;

    public const ERROR_RECONGNIGION = 1113;

    public const ADMIN = 1114;

    public const OPTIONAL = 1115;

    public const RULE_root = 0;

    public const RULE_sqlStatements = 1;

    public const RULE_sqlStatement = 2;

    public const RULE_emptyStatement = 3;

    public const RULE_ddlStatement = 4;

    public const RULE_dmlStatement = 5;

    public const RULE_transactionStatement = 6;

    public const RULE_replicationStatement = 7;

    public const RULE_preparedStatement = 8;

    public const RULE_compoundStatement = 9;

    public const RULE_administrationStatement = 10;

    public const RULE_utilityStatement = 11;

    public const RULE_createDatabase = 12;

    public const RULE_createEvent = 13;

    public const RULE_createIndex = 14;

    public const RULE_createLogfileGroup = 15;

    public const RULE_createProcedure = 16;

    public const RULE_createFunction = 17;

    public const RULE_createServer = 18;

    public const RULE_createTable = 19;

    public const RULE_createTablespaceInnodb = 20;

    public const RULE_createTablespaceNdb = 21;

    public const RULE_createTrigger = 22;

    public const RULE_createView = 23;

    public const RULE_createDatabaseOption = 24;

    public const RULE_ownerStatement = 25;

    public const RULE_scheduleExpression = 26;

    public const RULE_timestampValue = 27;

    public const RULE_intervalExpr = 28;

    public const RULE_intervalType = 29;

    public const RULE_enableType = 30;

    public const RULE_indexType = 31;

    public const RULE_indexOption = 32;

    public const RULE_procedureParameter = 33;

    public const RULE_functionParameter = 34;

    public const RULE_routineOption = 35;

    public const RULE_serverOption = 36;

    public const RULE_createDefinitions = 37;

    public const RULE_createDefinition = 38;

    public const RULE_columnDefinition = 39;

    public const RULE_columnConstraint = 40;

    public const RULE_tableConstraint = 41;

    public const RULE_referenceDefinition = 42;

    public const RULE_referenceAction = 43;

    public const RULE_referenceControlType = 44;

    public const RULE_indexColumnDefinition = 45;

    public const RULE_tableOption = 46;

    public const RULE_tableType = 47;

    public const RULE_tablespaceStorage = 48;

    public const RULE_partitionDefinitions = 49;

    public const RULE_partitionFunctionDefinition = 50;

    public const RULE_subpartitionFunctionDefinition = 51;

    public const RULE_partitionDefinition = 52;

    public const RULE_partitionDefinerAtom = 53;

    public const RULE_partitionDefinerVector = 54;

    public const RULE_subpartitionDefinition = 55;

    public const RULE_partitionOption = 56;

    public const RULE_alterDatabase = 57;

    public const RULE_alterEvent = 58;

    public const RULE_alterFunction = 59;

    public const RULE_alterInstance = 60;

    public const RULE_alterLogfileGroup = 61;

    public const RULE_alterProcedure = 62;

    public const RULE_alterServer = 63;

    public const RULE_alterTable = 64;

    public const RULE_alterTablespace = 65;

    public const RULE_alterView = 66;

    public const RULE_alterSpecification = 67;

    public const RULE_dropDatabase = 68;

    public const RULE_dropEvent = 69;

    public const RULE_dropIndex = 70;

    public const RULE_dropLogfileGroup = 71;

    public const RULE_dropProcedure = 72;

    public const RULE_dropFunction = 73;

    public const RULE_dropServer = 74;

    public const RULE_dropTable = 75;

    public const RULE_dropTablespace = 76;

    public const RULE_dropTrigger = 77;

    public const RULE_dropView = 78;

    public const RULE_renameTable = 79;

    public const RULE_renameTableClause = 80;

    public const RULE_truncateTable = 81;

    public const RULE_callStatement = 82;

    public const RULE_deleteStatement = 83;

    public const RULE_doStatement = 84;

    public const RULE_handlerStatement = 85;

    public const RULE_insertStatement = 86;

    public const RULE_loadDataStatement = 87;

    public const RULE_loadXmlStatement = 88;

    public const RULE_replaceStatement = 89;

    public const RULE_selectStatement = 90;

    public const RULE_updateStatement = 91;

    public const RULE_insertStatementValue = 92;

    public const RULE_updatedElement = 93;

    public const RULE_assignmentField = 94;

    public const RULE_lockClause = 95;

    public const RULE_singleDeleteStatement = 96;

    public const RULE_multipleDeleteStatement = 97;

    public const RULE_handlerOpenStatement = 98;

    public const RULE_handlerReadIndexStatement = 99;

    public const RULE_handlerReadStatement = 100;

    public const RULE_handlerCloseStatement = 101;

    public const RULE_singleUpdateStatement = 102;

    public const RULE_multipleUpdateStatement = 103;

    public const RULE_orderByClause = 104;

    public const RULE_orderByExpression = 105;

    public const RULE_tableSources = 106;

    public const RULE_tableSource = 107;

    public const RULE_tableSourceItem = 108;

    public const RULE_indexHint = 109;

    public const RULE_indexHintType = 110;

    public const RULE_joinPart = 111;

    public const RULE_queryExpression = 112;

    public const RULE_queryExpressionNointo = 113;

    public const RULE_querySpecification = 114;

    public const RULE_querySpecificationNointo = 115;

    public const RULE_unionParenthesis = 116;

    public const RULE_unionStatement = 117;

    public const RULE_selectSpec = 118;

    public const RULE_selectElements = 119;

    public const RULE_selectElement = 120;

    public const RULE_selectIntoExpression = 121;

    public const RULE_selectFieldsInto = 122;

    public const RULE_selectLinesInto = 123;

    public const RULE_fromClause = 124;

    public const RULE_groupByClause = 125;

    public const RULE_havingClause = 126;

    public const RULE_windowClause = 127;

    public const RULE_groupByItem = 128;

    public const RULE_limitClause = 129;

    public const RULE_limitClauseAtom = 130;

    public const RULE_startTransaction = 131;

    public const RULE_beginWork = 132;

    public const RULE_commitWork = 133;

    public const RULE_rollbackWork = 134;

    public const RULE_savepointStatement = 135;

    public const RULE_rollbackStatement = 136;

    public const RULE_releaseStatement = 137;

    public const RULE_lockTables = 138;

    public const RULE_unlockTables = 139;

    public const RULE_setAutocommitStatement = 140;

    public const RULE_setTransactionStatement = 141;

    public const RULE_transactionMode = 142;

    public const RULE_lockTableElement = 143;

    public const RULE_lockAction = 144;

    public const RULE_transactionOption = 145;

    public const RULE_transactionLevel = 146;

    public const RULE_changeMaster = 147;

    public const RULE_changeReplicationFilter = 148;

    public const RULE_purgeBinaryLogs = 149;

    public const RULE_resetMaster = 150;

    public const RULE_resetSlave = 151;

    public const RULE_startSlave = 152;

    public const RULE_stopSlave = 153;

    public const RULE_startGroupReplication = 154;

    public const RULE_stopGroupReplication = 155;

    public const RULE_masterOption = 156;

    public const RULE_stringMasterOption = 157;

    public const RULE_decimalMasterOption = 158;

    public const RULE_boolMasterOption = 159;

    public const RULE_channelOption = 160;

    public const RULE_replicationFilter = 161;

    public const RULE_tablePair = 162;

    public const RULE_threadType = 163;

    public const RULE_untilOption = 164;

    public const RULE_connectionOption = 165;

    public const RULE_gtuidSet = 166;

    public const RULE_xaStartTransaction = 167;

    public const RULE_xaEndTransaction = 168;

    public const RULE_xaPrepareStatement = 169;

    public const RULE_xaCommitWork = 170;

    public const RULE_xaRollbackWork = 171;

    public const RULE_xaRecoverWork = 172;

    public const RULE_prepareStatement = 173;

    public const RULE_executeStatement = 174;

    public const RULE_deallocatePrepare = 175;

    public const RULE_routineBody = 176;

    public const RULE_blockStatement = 177;

    public const RULE_caseStatement = 178;

    public const RULE_ifStatement = 179;

    public const RULE_iterateStatement = 180;

    public const RULE_leaveStatement = 181;

    public const RULE_loopStatement = 182;

    public const RULE_repeatStatement = 183;

    public const RULE_returnStatement = 184;

    public const RULE_whileStatement = 185;

    public const RULE_cursorStatement = 186;

    public const RULE_declareVariable = 187;

    public const RULE_declareCondition = 188;

    public const RULE_declareCursor = 189;

    public const RULE_declareHandler = 190;

    public const RULE_handlerConditionValue = 191;

    public const RULE_procedureSqlStatement = 192;

    public const RULE_caseAlternative = 193;

    public const RULE_elifAlternative = 194;

    public const RULE_alterUser = 195;

    public const RULE_createUser = 196;

    public const RULE_dropUser = 197;

    public const RULE_grantStatement = 198;

    public const RULE_roleOption = 199;

    public const RULE_grantProxy = 200;

    public const RULE_renameUser = 201;

    public const RULE_revokeStatement = 202;

    public const RULE_revokeProxy = 203;

    public const RULE_setPasswordStatement = 204;

    public const RULE_userSpecification = 205;

    public const RULE_userAuthOption = 206;

    public const RULE_tlsOption = 207;

    public const RULE_userResourceOption = 208;

    public const RULE_userPasswordOption = 209;

    public const RULE_userLockOption = 210;

    public const RULE_privelegeClause = 211;

    public const RULE_privilege = 212;

    public const RULE_privilegeLevel = 213;

    public const RULE_renameUserClause = 214;

    public const RULE_analyzeTable = 215;

    public const RULE_checkTable = 216;

    public const RULE_checksumTable = 217;

    public const RULE_optimizeTable = 218;

    public const RULE_repairTable = 219;

    public const RULE_checkTableOption = 220;

    public const RULE_createUdfunction = 221;

    public const RULE_installPlugin = 222;

    public const RULE_uninstallPlugin = 223;

    public const RULE_setStatement = 224;

    public const RULE_showStatement = 225;

    public const RULE_variableClause = 226;

    public const RULE_showCommonEntity = 227;

    public const RULE_showFilter = 228;

    public const RULE_showGlobalInfoClause = 229;

    public const RULE_showSchemaEntity = 230;

    public const RULE_showProfileType = 231;

    public const RULE_binlogStatement = 232;

    public const RULE_cacheIndexStatement = 233;

    public const RULE_flushStatement = 234;

    public const RULE_killStatement = 235;

    public const RULE_loadIndexIntoCache = 236;

    public const RULE_resetStatement = 237;

    public const RULE_shutdownStatement = 238;

    public const RULE_tableIndexes = 239;

    public const RULE_flushOption = 240;

    public const RULE_flushTableOption = 241;

    public const RULE_loadedTableIndexes = 242;

    public const RULE_simpleDescribeStatement = 243;

    public const RULE_fullDescribeStatement = 244;

    public const RULE_helpStatement = 245;

    public const RULE_useStatement = 246;

    public const RULE_signalStatement = 247;

    public const RULE_resignalStatement = 248;

    public const RULE_signalConditionInformation = 249;

    public const RULE_diagnosticsStatement = 250;

    public const RULE_diagnosticsConditionInformationName = 251;

    public const RULE_describeObjectClause = 252;

    public const RULE_fullId = 253;

    public const RULE_tableName = 254;

    public const RULE_fullColumnName = 255;

    public const RULE_indexColumnName = 256;

    public const RULE_userName = 257;

    public const RULE_mysqlVariable = 258;

    public const RULE_charsetName = 259;

    public const RULE_collationName = 260;

    public const RULE_engineName = 261;

    public const RULE_uuidSet = 262;

    public const RULE_xid = 263;

    public const RULE_xuidStringId = 264;

    public const RULE_authPlugin = 265;

    public const RULE_uid = 266;

    public const RULE_simpleId = 267;

    public const RULE_dottedId = 268;

    public const RULE_decimalLiteral = 269;

    public const RULE_fileSizeLiteral = 270;

    public const RULE_stringLiteral = 271;

    public const RULE_booleanLiteral = 272;

    public const RULE_hexadecimalLiteral = 273;

    public const RULE_nullNotnull = 274;

    public const RULE_constant = 275;

    public const RULE_dataType = 276;

    public const RULE_collectionOptions = 277;

    public const RULE_convertedDataType = 278;

    public const RULE_lengthOneDimension = 279;

    public const RULE_lengthTwoDimension = 280;

    public const RULE_lengthTwoOptionalDimension = 281;

    public const RULE_uidList = 282;

    public const RULE_tables = 283;

    public const RULE_tableNames = 284;

    public const RULE_indexColumnNames = 285;

    public const RULE_expressions = 286;

    public const RULE_expressionsWithDefaults = 287;

    public const RULE_constants = 288;

    public const RULE_simpleStrings = 289;

    public const RULE_userVariables = 290;

    public const RULE_defaultValue = 291;

    public const RULE_currentTimestamp = 292;

    public const RULE_expressionOrDefault = 293;

    public const RULE_ifExists = 294;

    public const RULE_ifNotExists = 295;

    public const RULE_functionCall = 296;

    public const RULE_specificFunction = 297;

    public const RULE_caseFuncAlternative = 298;

    public const RULE_levelsInWeightString = 299;

    public const RULE_levelInWeightListElement = 300;

    public const RULE_aggregateWindowedFunction = 301;

    public const RULE_nonAggregateWindowedFunction = 302;

    public const RULE_overClause = 303;

    public const RULE_windowSpec = 304;

    public const RULE_windowName = 305;

    public const RULE_frameClause = 306;

    public const RULE_frameUnits = 307;

    public const RULE_frameExtent = 308;

    public const RULE_frameBetween = 309;

    public const RULE_frameRange = 310;

    public const RULE_partitionClause = 311;

    public const RULE_scalarFunctionName = 312;

    public const RULE_passwordFunctionClause = 313;

    public const RULE_functionArgs = 314;

    public const RULE_functionArg = 315;

    public const RULE_expression = 316;

    public const RULE_predicate = 317;

    public const RULE_expressionAtom = 318;

    public const RULE_unaryOperator = 319;

    public const RULE_comparisonOperator = 320;

    public const RULE_logicalOperator = 321;

    public const RULE_bitOperator = 322;

    public const RULE_mathOperator = 323;

    public const RULE_jsonOperator = 324;

    public const RULE_charsetNameBase = 325;

    public const RULE_transactionLevelBase = 326;

    public const RULE_privilegesBase = 327;

    public const RULE_intervalTypeBase = 328;

    public const RULE_dataTypeBase = 329;

    public const RULE_keywordsCanBeId = 330;

    public const RULE_functionNameBase = 331;

    /**
     * @var array<string>
     */
    public const RULE_NAMES = [
        'root', 'sqlStatements', 'sqlStatement', 'emptyStatement', 'ddlStatement',
        'dmlStatement', 'transactionStatement', 'replicationStatement', 'preparedStatement',
        'compoundStatement', 'administrationStatement', 'utilityStatement', 'createDatabase',
        'createEvent', 'createIndex', 'createLogfileGroup', 'createProcedure',
        'createFunction', 'createServer', 'createTable', 'createTablespaceInnodb',
        'createTablespaceNdb', 'createTrigger', 'createView', 'createDatabaseOption',
        'ownerStatement', 'scheduleExpression', 'timestampValue', 'intervalExpr',
        'intervalType', 'enableType', 'indexType', 'indexOption', 'procedureParameter',
        'functionParameter', 'routineOption', 'serverOption', 'createDefinitions',
        'createDefinition', 'columnDefinition', 'columnConstraint', 'tableConstraint',
        'referenceDefinition', 'referenceAction', 'referenceControlType', 'indexColumnDefinition',
        'tableOption', 'tableType', 'tablespaceStorage', 'partitionDefinitions',
        'partitionFunctionDefinition', 'subpartitionFunctionDefinition', 'partitionDefinition',
        'partitionDefinerAtom', 'partitionDefinerVector', 'subpartitionDefinition',
        'partitionOption', 'alterDatabase', 'alterEvent', 'alterFunction', 'alterInstance',
        'alterLogfileGroup', 'alterProcedure', 'alterServer', 'alterTable', 'alterTablespace',
        'alterView', 'alterSpecification', 'dropDatabase', 'dropEvent', 'dropIndex',
        'dropLogfileGroup', 'dropProcedure', 'dropFunction', 'dropServer', 'dropTable',
        'dropTablespace', 'dropTrigger', 'dropView', 'renameTable', 'renameTableClause',
        'truncateTable', 'callStatement', 'deleteStatement', 'doStatement', 'handlerStatement',
        'insertStatement', 'loadDataStatement', 'loadXmlStatement', 'replaceStatement',
        'selectStatement', 'updateStatement', 'insertStatementValue', 'updatedElement',
        'assignmentField', 'lockClause', 'singleDeleteStatement', 'multipleDeleteStatement',
        'handlerOpenStatement', 'handlerReadIndexStatement', 'handlerReadStatement',
        'handlerCloseStatement', 'singleUpdateStatement', 'multipleUpdateStatement',
        'orderByClause', 'orderByExpression', 'tableSources', 'tableSource',
        'tableSourceItem', 'indexHint', 'indexHintType', 'joinPart', 'queryExpression',
        'queryExpressionNointo', 'querySpecification', 'querySpecificationNointo',
        'unionParenthesis', 'unionStatement', 'selectSpec', 'selectElements',
        'selectElement', 'selectIntoExpression', 'selectFieldsInto', 'selectLinesInto',
        'fromClause', 'groupByClause', 'havingClause', 'windowClause', 'groupByItem',
        'limitClause', 'limitClauseAtom', 'startTransaction', 'beginWork', 'commitWork',
        'rollbackWork', 'savepointStatement', 'rollbackStatement', 'releaseStatement',
        'lockTables', 'unlockTables', 'setAutocommitStatement', 'setTransactionStatement',
        'transactionMode', 'lockTableElement', 'lockAction', 'transactionOption',
        'transactionLevel', 'changeMaster', 'changeReplicationFilter', 'purgeBinaryLogs',
        'resetMaster', 'resetSlave', 'startSlave', 'stopSlave', 'startGroupReplication',
        'stopGroupReplication', 'masterOption', 'stringMasterOption', 'decimalMasterOption',
        'boolMasterOption', 'channelOption', 'replicationFilter', 'tablePair',
        'threadType', 'untilOption', 'connectionOption', 'gtuidSet', 'xaStartTransaction',
        'xaEndTransaction', 'xaPrepareStatement', 'xaCommitWork', 'xaRollbackWork',
        'xaRecoverWork', 'prepareStatement', 'executeStatement', 'deallocatePrepare',
        'routineBody', 'blockStatement', 'caseStatement', 'ifStatement', 'iterateStatement',
        'leaveStatement', 'loopStatement', 'repeatStatement', 'returnStatement',
        'whileStatement', 'cursorStatement', 'declareVariable', 'declareCondition',
        'declareCursor', 'declareHandler', 'handlerConditionValue', 'procedureSqlStatement',
        'caseAlternative', 'elifAlternative', 'alterUser', 'createUser', 'dropUser',
        'grantStatement', 'roleOption', 'grantProxy', 'renameUser', 'revokeStatement',
        'revokeProxy', 'setPasswordStatement', 'userSpecification', 'userAuthOption',
        'tlsOption', 'userResourceOption', 'userPasswordOption', 'userLockOption',
        'privelegeClause', 'privilege', 'privilegeLevel', 'renameUserClause',
        'analyzeTable', 'checkTable', 'checksumTable', 'optimizeTable', 'repairTable',
        'checkTableOption', 'createUdfunction', 'installPlugin', 'uninstallPlugin',
        'setStatement', 'showStatement', 'variableClause', 'showCommonEntity',
        'showFilter', 'showGlobalInfoClause', 'showSchemaEntity', 'showProfileType',
        'binlogStatement', 'cacheIndexStatement', 'flushStatement', 'killStatement',
        'loadIndexIntoCache', 'resetStatement', 'shutdownStatement', 'tableIndexes',
        'flushOption', 'flushTableOption', 'loadedTableIndexes', 'simpleDescribeStatement',
        'fullDescribeStatement', 'helpStatement', 'useStatement', 'signalStatement',
        'resignalStatement', 'signalConditionInformation', 'diagnosticsStatement',
        'diagnosticsConditionInformationName', 'describeObjectClause', 'fullId',
        'tableName', 'fullColumnName', 'indexColumnName', 'userName', 'mysqlVariable',
        'charsetName', 'collationName', 'engineName', 'uuidSet', 'xid', 'xuidStringId',
        'authPlugin', 'uid', 'simpleId', 'dottedId', 'decimalLiteral', 'fileSizeLiteral',
        'stringLiteral', 'booleanLiteral', 'hexadecimalLiteral', 'nullNotnull',
        'constant', 'dataType', 'collectionOptions', 'convertedDataType', 'lengthOneDimension',
        'lengthTwoDimension', 'lengthTwoOptionalDimension', 'uidList', 'tables',
        'tableNames', 'indexColumnNames', 'expressions', 'expressionsWithDefaults',
        'constants', 'simpleStrings', 'userVariables', 'defaultValue', 'currentTimestamp',
        'expressionOrDefault', 'ifExists', 'ifNotExists', 'functionCall', 'specificFunction',
        'caseFuncAlternative', 'levelsInWeightString', 'levelInWeightListElement',
        'aggregateWindowedFunction', 'nonAggregateWindowedFunction', 'overClause',
        'windowSpec', 'windowName', 'frameClause', 'frameUnits', 'frameExtent',
        'frameBetween', 'frameRange', 'partitionClause', 'scalarFunctionName',
        'passwordFunctionClause', 'functionArgs', 'functionArg', 'expression',
        'predicate', 'expressionAtom', 'unaryOperator', 'comparisonOperator',
        'logicalOperator', 'bitOperator', 'mathOperator', 'jsonOperator', 'charsetNameBase',
        'transactionLevelBase', 'privilegesBase', 'intervalTypeBase', 'dataTypeBase',
        'keywordsCanBeId', 'functionNameBase',
    ];

    /**
     * @var array<null|string>
     */
    private const LITERAL_NAMES = [
        null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'",
        "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'",
        "'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'",
        "'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'",
        "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'",
        "'CURRENT'", "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'",
        "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'",
        "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'",
        "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'",
        "'ESCAPED'", "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'",
        "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'",
        "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'",
        "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'",
        "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", "'IS'",
        "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", "'LEADING'", "'LEAVE'",
        "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'",
        "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", "'MASTER_SSL_VERIFY_SERVER_CERT'",
        "'MATCH'", "'MAXVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'",
        "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'",
        "'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'",
        "'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'",
        "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'",
        "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'",
        "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'",
        "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'",
        "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'",
        "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'",
        "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'",
        "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'",
        "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'",
        "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'",
        "'SMALLINT'", "'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'",
        "'INT3'", "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'",
        "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'",
        "'NUMERIC'", "'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'",
        "'CHAR'", "'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'",
        "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'",
        "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'",
        "'YEAR_MONTH'", "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'",
        "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'",
        "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'",
        "'JSON_QUOTE'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'",
        "'JSON_KEYS'", "'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'",
        "'JSON_ARRAY_APPEND'", "'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'",
        "'JSON_MERGE_PATCH'", "'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'",
        "'JSON_SET'", "'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'",
        "'JSON_VALID'", "'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'",
        "'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'",
        "'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'",
        "'COUNT'", "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'",
        "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'",
        "'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'",
        "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'",
        "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'",
        "'CURDATE'", "'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'",
        "'LOCALTIMESTAMP'", "'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'",
        "'SYSDATE'", "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'",
        "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", "'ALGORITHM'",
        "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'",
        "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'",
        "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'",
        "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'",
        "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'",
        "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'",
        "'COMMIT'", "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'",
        "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'",
        "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'",
        "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'",
        "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'",
        "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", "'DISK'",
        "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", "'ENABLE'", "'ENCRYPTION'",
        "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", "'ERRORS'",
        "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", "'EXCHANGE'",
        "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'",
        "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'",
        "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'",
        "'FULL'", "'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'",
        "'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'",
        "'IGNORE_SERVER_IDS'", "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'",
        "'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INVISIBLE'",
        "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", "'ISSUER'",
        "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'",
        "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'",
        "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'",
        "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'",
        "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'",
        "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'",
        "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'",
        "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'",
        "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'",
        "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'",
        "'MID'", "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'",
        "'MYSQL'", "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'",
        "'NEXT'", "'NO'", "'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'",
        "'OFFSET'", "'OF'", "'OJ'", "'OLD_PASSWORD'", "'ONE'", "'ONLINE'",
        "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'",
        "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'",
        "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'",
        "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", "'PRESERVE'",
        "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'",
        "'QUICK'", "'REBUILD'", "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'",
        "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'",
        "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'",
        "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'",
        "'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'",
        "'RESET'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", "'RETURNS'",
        "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", "'ROWS'",
        "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SERVER'",
        "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'", "'SLAVE'",
        "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'",
        "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'",
        "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'",
        "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'",
        "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'",
        "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'",
        "'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'",
        "'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'",
        "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'",
        "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'",
        "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'",
        "'VALIDATION'", "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'",
        "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'",
        "'X509'", "'XA'", "'XML'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'",
        "'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'",
        "'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'",
        "'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'",
        "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'",
        "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'",
        "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'",
        "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'",
        "'INNODB_REDO_LOG_ENABLE'", "'NDB_STORED_USER'", "'PERSIST_RO_VARIABLES_ADMIN'",
        "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'",
        "'RESOURCE_GROUP_USER'", "'ROLE_ADMIN'", "'SERVICE_CONNECTION_ADMIN'",
        null, "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'",
        "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'",
        "'ARMSCII8'", "'ASCII'", "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'",
        "'CP1257'", "'CP850'", "'CP852'", "'CP866'", "'CP932'", "'DEC8'",
        "'EUCJPMS'", "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'",
        "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'",
        "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'",
        "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'",
        "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'",
        "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'",
        "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'",
        "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'",
        "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'",
        "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'",
        "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'",
        "'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'",
        "'ASYMMETRIC_DECRYPT'", "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'",
        "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'",
        "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", "'CATALOG_NAME'",
        "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", "'CHARSET'",
        "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'",
        "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", "'COS'",
        "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'",
        "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'",
        "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'",
        "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'",
        "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'",
        "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'",
        "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'",
        "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'",
        "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'",
        "'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'",
        "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'",
        "'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'",
        "'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'",
        "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'",
        "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'",
        "'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'",
        "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'",
        "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'",
        "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'",
        "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'",
        "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'",
        "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'",
        "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'",
        "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'",
        "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'",
        "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'",
        "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'",
        "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'",
        "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'",
        "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'",
        "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'",
        "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'",
        "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'",
        "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'",
        "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'",
        "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'",
        "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'",
        "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'",
        "'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'",
        "'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'",
        "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'",
        "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'",
        "'ST_INTERSECTION'", "'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'",
        "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'",
        "'ST_LINESTRINGFROMWKB'", "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'",
        "'ST_NUMINTERIORRINGS'", "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'",
        "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'",
        "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'",
        "'ST_SYMDIFFERENCE'", "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'",
        "'ST_X'", "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'",
        "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", "'TIMESTAMPDIFF'",
        "'TIME_FORMAT'", "'TIME_TO_SEC'", "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'",
        "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'",
        "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", "'UUID'",
        "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'",
        "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'",
        "'Y'", "'X'", "':='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='",
        "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'",
        "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('",
        "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", "'`'",
        "':'",
    ];

    /**
     * @var array<string>
     */
    private const SYMBOLIC_NAMES = [
        null, 'SPACE', 'SPEC_MYSQL_COMMENT', 'COMMENT_INPUT', 'LINE_COMMENT',
        'ADD', 'ALL', 'ALTER', 'ALWAYS', 'ANALYZE', 'AND', 'ARRAY', 'AS',
        'ASC', 'BEFORE', 'BETWEEN', 'BOTH', 'BUCKETS', 'BY', 'CALL', 'CASCADE',
        'CASE', 'CAST', 'CHANGE', 'CHARACTER', 'CHECK', 'COLLATE', 'COLUMN',
        'CONDITION', 'CONSTRAINT', 'CONTINUE', 'CONVERT', 'CREATE', 'CROSS',
        'CURRENT', 'CURRENT_USER', 'CURSOR', 'DATABASE', 'DATABASES', 'DECLARE',
        'DEFAULT', 'DELAYED', 'DELETE', 'DESC', 'DESCRIBE', 'DETERMINISTIC',
        'DIAGNOSTICS', 'DISTINCT', 'DISTINCTROW', 'DROP', 'EACH', 'ELSE',
        'ELSEIF', 'EMPTY', 'ENCLOSED', 'ESCAPED', 'EXCEPT', 'EXISTS', 'EXIT',
        'EXPLAIN', 'FALSE', 'FETCH', 'FOR', 'FORCE', 'FOREIGN', 'FROM', 'FULLTEXT',
        'GENERATED', 'GET', 'GRANT', 'GROUP', 'HAVING', 'HIGH_PRIORITY', 'HISTOGRAM',
        'IF', 'IGNORE', 'IN', 'INDEX', 'INFILE', 'INNER', 'INOUT', 'INSERT',
        'INTERVAL', 'INTO', 'IS', 'ITERATE', 'JOIN', 'KEY', 'KEYS', 'KILL',
        'LEADING', 'LEAVE', 'LEFT', 'LIKE', 'LIMIT', 'LINEAR', 'LINES', 'LOAD',
        'LOCK', 'LOOP', 'LOW_PRIORITY', 'MASTER_BIND', 'MASTER_SSL_VERIFY_SERVER_CERT',
        'MATCH', 'MAXVALUE', 'MODIFIES', 'NATURAL', 'NOT', 'NO_WRITE_TO_BINLOG',
        'NULL_LITERAL', 'NUMBER', 'ON', 'OPTIMIZE', 'OPTION', 'OPTIONALLY',
        'OR', 'ORDER', 'OUT', 'OVER', 'OUTER', 'OUTFILE', 'PARTITION', 'PRIMARY',
        'PROCEDURE', 'PURGE', 'RANGE', 'READ', 'READS', 'REFERENCES', 'REGEXP',
        'RELEASE', 'RENAME', 'REPEAT', 'REPLACE', 'REQUIRE', 'RESIGNAL', 'RESTRICT',
        'RETAIN', 'RETURN', 'REVOKE', 'RIGHT', 'RLIKE', 'SCHEMA', 'SCHEMAS',
        'SELECT', 'SET', 'SEPARATOR', 'SHOW', 'SIGNAL', 'SPATIAL', 'SQL',
        'SQLEXCEPTION', 'SQLSTATE', 'SQLWARNING', 'SQL_BIG_RESULT', 'SQL_CALC_FOUND_ROWS',
        'SQL_SMALL_RESULT', 'SSL', 'STACKED', 'STARTING', 'STRAIGHT_JOIN',
        'TABLE', 'TERMINATED', 'THEN', 'TO', 'TRAILING', 'TRIGGER', 'TRUE',
        'UNDO', 'UNION', 'UNIQUE', 'UNLOCK', 'UNSIGNED', 'UPDATE', 'USAGE',
        'USE', 'USING', 'VALUES', 'WHEN', 'WHERE', 'WHILE', 'WITH', 'WRITE',
        'XOR', 'ZEROFILL', 'TINYINT', 'SMALLINT', 'MEDIUMINT', 'MIDDLEINT',
        'INT', 'INT1', 'INT2', 'INT3', 'INT4', 'INT8', 'INTEGER', 'BIGINT',
        'REAL', 'DOUBLE', 'PRECISION', 'FLOAT', 'FLOAT4', 'FLOAT8', 'DECIMAL',
        'DEC', 'NUMERIC', 'DATE', 'TIME', 'TIMESTAMP', 'DATETIME', 'YEAR',
        'CHAR', 'VARCHAR', 'NVARCHAR', 'NATIONAL', 'BINARY', 'VARBINARY',
        'TINYBLOB', 'BLOB', 'MEDIUMBLOB', 'LONG', 'LONGBLOB', 'TINYTEXT',
        'TEXT', 'MEDIUMTEXT', 'LONGTEXT', 'ENUM', 'VARYING', 'SERIAL', 'YEAR_MONTH',
        'DAY_HOUR', 'DAY_MINUTE', 'DAY_SECOND', 'HOUR_MINUTE', 'HOUR_SECOND',
        'MINUTE_SECOND', 'SECOND_MICROSECOND', 'MINUTE_MICROSECOND', 'HOUR_MICROSECOND',
        'DAY_MICROSECOND', 'JSON_ARRAY', 'JSON_OBJECT', 'JSON_QUOTE', 'JSON_CONTAINS',
        'JSON_CONTAINS_PATH', 'JSON_EXTRACT', 'JSON_KEYS', 'JSON_OVERLAPS',
        'JSON_SEARCH', 'JSON_VALUE', 'JSON_ARRAY_APPEND', 'JSON_ARRAY_INSERT',
        'JSON_INSERT', 'JSON_MERGE', 'JSON_MERGE_PATCH', 'JSON_MERGE_PRESERVE',
        'JSON_REMOVE', 'JSON_REPLACE', 'JSON_SET', 'JSON_UNQUOTE', 'JSON_DEPTH',
        'JSON_LENGTH', 'JSON_TYPE', 'JSON_VALID', 'JSON_TABLE', 'JSON_SCHEMA_VALID',
        'JSON_SCHEMA_VALIDATION_REPORT', 'JSON_PRETTY', 'JSON_STORAGE_FREE',
        'JSON_STORAGE_SIZE', 'JSON_ARRAYAGG', 'JSON_OBJECTAGG', 'AVG', 'BIT_AND',
        'BIT_OR', 'BIT_XOR', 'COUNT', 'CUME_DIST', 'DENSE_RANK', 'FIRST_VALUE',
        'GROUP_CONCAT', 'LAG', 'LAST_VALUE', 'LEAD', 'MAX', 'MIN', 'NTILE',
        'NTH_VALUE', 'PERCENT_RANK', 'RANK', 'ROW_NUMBER', 'STD', 'STDDEV',
        'STDDEV_POP', 'STDDEV_SAMP', 'SUM', 'VAR_POP', 'VAR_SAMP', 'VARIANCE',
        'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'LOCALTIME',
        'CURDATE', 'CURTIME', 'DATE_ADD', 'DATE_SUB', 'EXTRACT', 'LOCALTIMESTAMP',
        'NOW', 'POSITION', 'SUBSTR', 'SUBSTRING', 'SYSDATE', 'TRIM', 'UTC_DATE',
        'UTC_TIME', 'UTC_TIMESTAMP', 'ACCOUNT', 'ACTION', 'AFTER', 'AGGREGATE',
        'ALGORITHM', 'ANY', 'AT', 'AUTHORS', 'AUTOCOMMIT', 'AUTOEXTEND_SIZE',
        'AUTO_INCREMENT', 'AVG_ROW_LENGTH', 'BEGIN', 'BINLOG', 'BIT', 'BLOCK',
        'BOOL', 'BOOLEAN', 'BTREE', 'CACHE', 'CASCADED', 'CHAIN', 'CHANGED',
        'CHANNEL', 'CHECKSUM', 'PAGE_CHECKSUM', 'CIPHER', 'CLASS_ORIGIN',
        'CLIENT', 'CLOSE', 'COALESCE', 'CODE', 'COLUMNS', 'COLUMN_FORMAT',
        'COLUMN_NAME', 'COMMENT', 'COMMIT', 'COMPACT', 'COMPLETION', 'COMPRESSED',
        'COMPRESSION', 'CONCURRENT', 'CONNECT', 'CONNECTION', 'CONSISTENT',
        'CONSTRAINT_CATALOG', 'CONSTRAINT_SCHEMA', 'CONSTRAINT_NAME', 'CONTAINS',
        'CONTEXT', 'CONTRIBUTORS', 'COPY', 'CPU', 'CURSOR_NAME', 'DATA', 'DATAFILE',
        'DEALLOCATE', 'DEFAULT_AUTH', 'DEFINER', 'DELAY_KEY_WRITE', 'DES_KEY_FILE',
        'DIRECTORY', 'DISABLE', 'DISCARD', 'DISK', 'DO', 'DUMPFILE', 'DUPLICATE',
        'DYNAMIC', 'ENABLE', 'ENCRYPTION', 'END', 'ENDS', 'ENGINE', 'ENGINES',
        'ERROR', 'ERRORS', 'ESCAPE', 'EVEN', 'EVENT', 'EVENTS', 'EVERY', 'EXCHANGE',
        'EXCLUSIVE', 'EXPIRE', 'EXPORT', 'EXTENDED', 'EXTENT_SIZE', 'FAST',
        'FAULTS', 'FIELDS', 'FILE_BLOCK_SIZE', 'FILTER', 'FIRST', 'FIXED',
        'FLUSH', 'FOLLOWING', 'FOLLOWS', 'FOUND', 'FULL', 'FUNCTION', 'GENERAL',
        'GLOBAL', 'GRANTS', 'GROUP_REPLICATION', 'HANDLER', 'HASH', 'HELP',
        'HOST', 'HOSTS', 'IDENTIFIED', 'IGNORE_SERVER_IDS', 'IMPORT', 'INDEXES',
        'INITIAL_SIZE', 'INPLACE', 'INSERT_METHOD', 'INSTALL', 'INSTANCE',
        'INVISIBLE', 'INVOKER', 'IO', 'IO_THREAD', 'IPC', 'ISOLATION', 'ISSUER',
        'JSON', 'KEY_BLOCK_SIZE', 'LANGUAGE', 'LAST', 'LEAVES', 'LESS', 'LEVEL',
        'LIST', 'LOCAL', 'LOGFILE', 'LOGS', 'MASTER', 'MASTER_AUTO_POSITION',
        'MASTER_CONNECT_RETRY', 'MASTER_DELAY', 'MASTER_HEARTBEAT_PERIOD',
        'MASTER_HOST', 'MASTER_LOG_FILE', 'MASTER_LOG_POS', 'MASTER_PASSWORD',
        'MASTER_PORT', 'MASTER_RETRY_COUNT', 'MASTER_SSL', 'MASTER_SSL_CA',
        'MASTER_SSL_CAPATH', 'MASTER_SSL_CERT', 'MASTER_SSL_CIPHER', 'MASTER_SSL_CRL',
        'MASTER_SSL_CRLPATH', 'MASTER_SSL_KEY', 'MASTER_TLS_VERSION', 'MASTER_USER',
        'MAX_CONNECTIONS_PER_HOUR', 'MAX_QUERIES_PER_HOUR', 'MAX_ROWS', 'MAX_SIZE',
        'MAX_UPDATES_PER_HOUR', 'MAX_USER_CONNECTIONS', 'MEDIUM', 'MEMBER',
        'MERGE', 'MESSAGE_TEXT', 'MID', 'MIGRATE', 'MIN_ROWS', 'MODE', 'MODIFY',
        'MUTEX', 'MYSQL', 'MYSQL_ERRNO', 'NAME', 'NAMES', 'NCHAR', 'NEVER',
        'NEXT', 'NO', 'NODEGROUP', 'NONE', 'ODBC', 'OFFLINE', 'OFFSET', 'OF',
        'OJ', 'OLD_PASSWORD', 'ONE', 'ONLINE', 'ONLY', 'OPEN', 'OPTIMIZER_COSTS',
        'OPTIONS', 'OWNER', 'PACK_KEYS', 'PAGE', 'PARSER', 'PARTIAL', 'PARTITIONING',
        'PARTITIONS', 'PASSWORD', 'PHASE', 'PLUGIN', 'PLUGIN_DIR', 'PLUGINS',
        'PORT', 'PRECEDES', 'PRECEDING', 'PREPARE', 'PRESERVE', 'PREV', 'PROCESSLIST',
        'PROFILE', 'PROFILES', 'PROXY', 'QUERY', 'QUICK', 'REBUILD', 'RECOVER',
        'REDO_BUFFER_SIZE', 'REDUNDANT', 'RELAY', 'RELAY_LOG_FILE', 'RELAY_LOG_POS',
        'RELAYLOG', 'REMOVE', 'REORGANIZE', 'REPAIR', 'REPLICATE_DO_DB', 'REPLICATE_DO_TABLE',
        'REPLICATE_IGNORE_DB', 'REPLICATE_IGNORE_TABLE', 'REPLICATE_REWRITE_DB',
        'REPLICATE_WILD_DO_TABLE', 'REPLICATE_WILD_IGNORE_TABLE', 'REPLICATION',
        'RESET', 'RESUME', 'RETURNED_SQLSTATE', 'RETURNING', 'RETURNS', 'ROLE',
        'ROLLBACK', 'ROLLUP', 'ROTATE', 'ROW', 'ROWS', 'ROW_FORMAT', 'SAVEPOINT',
        'SCHEDULE', 'SECURITY', 'SERVER', 'SESSION', 'SHARE', 'SHARED', 'SIGNED',
        'SIMPLE', 'SLAVE', 'SLOW', 'SNAPSHOT', 'SOCKET', 'SOME', 'SONAME',
        'SOUNDS', 'SOURCE', 'SQL_AFTER_GTIDS', 'SQL_AFTER_MTS_GAPS', 'SQL_BEFORE_GTIDS',
        'SQL_BUFFER_RESULT', 'SQL_CACHE', 'SQL_NO_CACHE', 'SQL_THREAD', 'START',
        'STARTS', 'STATS_AUTO_RECALC', 'STATS_PERSISTENT', 'STATS_SAMPLE_PAGES',
        'STATUS', 'STOP', 'STORAGE', 'STORED', 'STRING', 'SUBCLASS_ORIGIN',
        'SUBJECT', 'SUBPARTITION', 'SUBPARTITIONS', 'SUSPEND', 'SWAPS', 'SWITCHES',
        'TABLE_NAME', 'TABLESPACE', 'TABLE_TYPE', 'TEMPORARY', 'TEMPTABLE',
        'THAN', 'TRADITIONAL', 'TRANSACTION', 'TRANSACTIONAL', 'TRIGGERS',
        'TRUNCATE', 'UNBOUNDED', 'UNDEFINED', 'UNDOFILE', 'UNDO_BUFFER_SIZE',
        'UNINSTALL', 'UNKNOWN', 'UNTIL', 'UPGRADE', 'USER', 'USE_FRM', 'USER_RESOURCES',
        'VALIDATION', 'VALUE', 'VARIABLES', 'VIEW', 'VIRTUAL', 'VISIBLE',
        'WAIT', 'WARNINGS', 'WINDOW', 'WITHOUT', 'WORK', 'WRAPPER', 'X509',
        'XA', 'XML', 'EUR', 'USA', 'JIS', 'ISO', 'INTERNAL', 'QUARTER', 'MONTH',
        'DAY', 'HOUR', 'MINUTE', 'WEEK', 'SECOND', 'MICROSECOND', 'TABLES',
        'ROUTINE', 'EXECUTE', 'FILE', 'PROCESS', 'RELOAD', 'SHUTDOWN', 'SUPER',
        'PRIVILEGES', 'APPLICATION_PASSWORD_ADMIN', 'AUDIT_ADMIN', 'BACKUP_ADMIN',
        'BINLOG_ADMIN', 'BINLOG_ENCRYPTION_ADMIN', 'CLONE_ADMIN', 'CONNECTION_ADMIN',
        'ENCRYPTION_KEY_ADMIN', 'FIREWALL_ADMIN', 'FIREWALL_USER', 'FLUSH_OPTIMIZER_COSTS',
        'FLUSH_STATUS', 'FLUSH_TABLES', 'FLUSH_USER_RESOURCES', 'GROUP_REPLICATION_ADMIN',
        'INNODB_REDO_LOG_ARCHIVE', 'INNODB_REDO_LOG_ENABLE', 'NDB_STORED_USER',
        'PERSIST_RO_VARIABLES_ADMIN', 'REPLICATION_APPLIER', 'REPLICATION_SLAVE_ADMIN',
        'RESOURCE_GROUP_ADMIN', 'RESOURCE_GROUP_USER', 'ROLE_ADMIN', 'SERVICE_CONNECTION_ADMIN',
        'SESSION_VARIABLES_ADMIN', 'SET_USER_ID', 'SHOW_ROUTINE', 'SYSTEM_VARIABLES_ADMIN',
        'TABLE_ENCRYPTION_ADMIN', 'VERSION_TOKEN_ADMIN', 'XA_RECOVER_ADMIN',
        'ARMSCII8', 'ASCII', 'BIG5', 'CP1250', 'CP1251', 'CP1256', 'CP1257',
        'CP850', 'CP852', 'CP866', 'CP932', 'DEC8', 'EUCJPMS', 'EUCKR', 'GB18030',
        'GB2312', 'GBK', 'GEOSTD8', 'GREEK', 'HEBREW', 'HP8', 'KEYBCS2', 'KOI8R',
        'KOI8U', 'LATIN1', 'LATIN2', 'LATIN5', 'LATIN7', 'MACCE', 'MACROMAN',
        'SJIS', 'SWE7', 'TIS620', 'UCS2', 'UJIS', 'UTF16', 'UTF16LE', 'UTF32',
        'UTF8', 'UTF8MB3', 'UTF8MB4', 'ARCHIVE', 'BLACKHOLE', 'CSV', 'FEDERATED',
        'INNODB', 'MEMORY', 'MRG_MYISAM', 'MYISAM', 'NDB', 'NDBCLUSTER', 'PERFORMANCE_SCHEMA',
        'TOKUDB', 'REPEATABLE', 'COMMITTED', 'UNCOMMITTED', 'SERIALIZABLE',
        'GEOMETRYCOLLECTION', 'GEOMCOLLECTION', 'GEOMETRY', 'LINESTRING',
        'MULTILINESTRING', 'MULTIPOINT', 'MULTIPOLYGON', 'POINT', 'POLYGON',
        'ABS', 'ACOS', 'ADDDATE', 'ADDTIME', 'AES_DECRYPT', 'AES_ENCRYPT',
        'AREA', 'ASBINARY', 'ASIN', 'ASTEXT', 'ASWKB', 'ASWKT', 'ASYMMETRIC_DECRYPT',
        'ASYMMETRIC_DERIVE', 'ASYMMETRIC_ENCRYPT', 'ASYMMETRIC_SIGN', 'ASYMMETRIC_VERIFY',
        'ATAN', 'ATAN2', 'BENCHMARK', 'BIN', 'BIT_COUNT', 'BIT_LENGTH', 'BUFFER',
        'CATALOG_NAME', 'CEIL', 'CEILING', 'CENTROID', 'CHARACTER_LENGTH',
        'CHARSET', 'CHAR_LENGTH', 'COERCIBILITY', 'COLLATION', 'COMPRESS',
        'CONCAT', 'CONCAT_WS', 'CONNECTION_ID', 'CONV', 'CONVERT_TZ', 'COS',
        'COT', 'CRC32', 'CREATE_ASYMMETRIC_PRIV_KEY', 'CREATE_ASYMMETRIC_PUB_KEY',
        'CREATE_DH_PARAMETERS', 'CREATE_DIGEST', 'CROSSES', 'DATEDIFF', 'DATE_FORMAT',
        'DAYNAME', 'DAYOFMONTH', 'DAYOFWEEK', 'DAYOFYEAR', 'DECODE', 'DEGREES',
        'DES_DECRYPT', 'DES_ENCRYPT', 'DIMENSION', 'DISJOINT', 'ELT', 'ENCODE',
        'ENCRYPT', 'ENDPOINT', 'ENVELOPE', 'EQUALS', 'EXP', 'EXPORT_SET',
        'EXTERIORRING', 'EXTRACTVALUE', 'FIELD', 'FIND_IN_SET', 'FLOOR', 'FORMAT',
        'FOUND_ROWS', 'FROM_BASE64', 'FROM_DAYS', 'FROM_UNIXTIME', 'GEOMCOLLFROMTEXT',
        'GEOMCOLLFROMWKB', 'GEOMETRYCOLLECTIONFROMTEXT', 'GEOMETRYCOLLECTIONFROMWKB',
        'GEOMETRYFROMTEXT', 'GEOMETRYFROMWKB', 'GEOMETRYN', 'GEOMETRYTYPE',
        'GEOMFROMTEXT', 'GEOMFROMWKB', 'GET_FORMAT', 'GET_LOCK', 'GLENGTH',
        'GREATEST', 'GTID_SUBSET', 'GTID_SUBTRACT', 'HEX', 'IFNULL', 'INET6_ATON',
        'INET6_NTOA', 'INET_ATON', 'INET_NTOA', 'INSTR', 'INTERIORRINGN',
        'INTERSECTS', 'ISCLOSED', 'ISEMPTY', 'ISNULL', 'ISSIMPLE', 'IS_FREE_LOCK',
        'IS_IPV4', 'IS_IPV4_COMPAT', 'IS_IPV4_MAPPED', 'IS_IPV6', 'IS_USED_LOCK',
        'LAST_INSERT_ID', 'LCASE', 'LEAST', 'LENGTH', 'LINEFROMTEXT', 'LINEFROMWKB',
        'LINESTRINGFROMTEXT', 'LINESTRINGFROMWKB', 'LN', 'LOAD_FILE', 'LOCATE',
        'LOG', 'LOG10', 'LOG2', 'LOWER', 'LPAD', 'LTRIM', 'MAKEDATE', 'MAKETIME',
        'MAKE_SET', 'MASTER_POS_WAIT', 'MBRCONTAINS', 'MBRDISJOINT', 'MBREQUAL',
        'MBRINTERSECTS', 'MBROVERLAPS', 'MBRTOUCHES', 'MBRWITHIN', 'MD5',
        'MLINEFROMTEXT', 'MLINEFROMWKB', 'MONTHNAME', 'MPOINTFROMTEXT', 'MPOINTFROMWKB',
        'MPOLYFROMTEXT', 'MPOLYFROMWKB', 'MULTILINESTRINGFROMTEXT', 'MULTILINESTRINGFROMWKB',
        'MULTIPOINTFROMTEXT', 'MULTIPOINTFROMWKB', 'MULTIPOLYGONFROMTEXT',
        'MULTIPOLYGONFROMWKB', 'NAME_CONST', 'NULLIF', 'NUMGEOMETRIES', 'NUMINTERIORRINGS',
        'NUMPOINTS', 'OCT', 'OCTET_LENGTH', 'ORD', 'OVERLAPS', 'PERIOD_ADD',
        'PERIOD_DIFF', 'PI', 'POINTFROMTEXT', 'POINTFROMWKB', 'POINTN', 'POLYFROMTEXT',
        'POLYFROMWKB', 'POLYGONFROMTEXT', 'POLYGONFROMWKB', 'POW', 'POWER',
        'QUOTE', 'RADIANS', 'RAND', 'RANDOM_BYTES', 'RELEASE_LOCK', 'REVERSE',
        'ROUND', 'ROW_COUNT', 'RPAD', 'RTRIM', 'SEC_TO_TIME', 'SESSION_USER',
        'SHA', 'SHA1', 'SHA2', 'SCHEMA_NAME', 'SIGN', 'SIN', 'SLEEP', 'SOUNDEX',
        'SQL_THREAD_WAIT_AFTER_GTIDS', 'SQRT', 'SRID', 'STARTPOINT', 'STRCMP',
        'STR_TO_DATE', 'ST_AREA', 'ST_ASBINARY', 'ST_ASTEXT', 'ST_ASWKB',
        'ST_ASWKT', 'ST_BUFFER', 'ST_CENTROID', 'ST_CONTAINS', 'ST_CROSSES',
        'ST_DIFFERENCE', 'ST_DIMENSION', 'ST_DISJOINT', 'ST_DISTANCE', 'ST_ENDPOINT',
        'ST_ENVELOPE', 'ST_EQUALS', 'ST_EXTERIORRING', 'ST_GEOMCOLLFROMTEXT',
        'ST_GEOMCOLLFROMTXT', 'ST_GEOMCOLLFROMWKB', 'ST_GEOMETRYCOLLECTIONFROMTEXT',
        'ST_GEOMETRYCOLLECTIONFROMWKB', 'ST_GEOMETRYFROMTEXT', 'ST_GEOMETRYFROMWKB',
        'ST_GEOMETRYN', 'ST_GEOMETRYTYPE', 'ST_GEOMFROMTEXT', 'ST_GEOMFROMWKB',
        'ST_INTERIORRINGN', 'ST_INTERSECTION', 'ST_INTERSECTS', 'ST_ISCLOSED',
        'ST_ISEMPTY', 'ST_ISSIMPLE', 'ST_LINEFROMTEXT', 'ST_LINEFROMWKB',
        'ST_LINESTRINGFROMTEXT', 'ST_LINESTRINGFROMWKB', 'ST_NUMGEOMETRIES',
        'ST_NUMINTERIORRING', 'ST_NUMINTERIORRINGS', 'ST_NUMPOINTS', 'ST_OVERLAPS',
        'ST_POINTFROMTEXT', 'ST_POINTFROMWKB', 'ST_POINTN', 'ST_POLYFROMTEXT',
        'ST_POLYFROMWKB', 'ST_POLYGONFROMTEXT', 'ST_POLYGONFROMWKB', 'ST_SRID',
        'ST_STARTPOINT', 'ST_SYMDIFFERENCE', 'ST_TOUCHES', 'ST_UNION', 'ST_WITHIN',
        'ST_X', 'ST_Y', 'SUBDATE', 'SUBSTRING_INDEX', 'SUBTIME', 'SYSTEM_USER',
        'TAN', 'TIMEDIFF', 'TIMESTAMPADD', 'TIMESTAMPDIFF', 'TIME_FORMAT',
        'TIME_TO_SEC', 'TOUCHES', 'TO_BASE64', 'TO_DAYS', 'TO_SECONDS', 'UCASE',
        'UNCOMPRESS', 'UNCOMPRESSED_LENGTH', 'UNHEX', 'UNIX_TIMESTAMP', 'UPDATEXML',
        'UPPER', 'UUID', 'UUID_SHORT', 'VALIDATE_PASSWORD_STRENGTH', 'VERSION',
        'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS', 'WEEKDAY', 'WEEKOFYEAR', 'WEIGHT_STRING',
        'WITHIN', 'YEARWEEK', 'Y_FUNCTION', 'X_FUNCTION', 'VAR_ASSIGN', 'PLUS_ASSIGN',
        'MINUS_ASSIGN', 'MULT_ASSIGN', 'DIV_ASSIGN', 'MOD_ASSIGN', 'AND_ASSIGN',
        'XOR_ASSIGN', 'OR_ASSIGN', 'STAR', 'DIVIDE', 'MODULE', 'PLUS', 'MINUS',
        'DIV', 'MOD', 'EQUAL_SYMBOL', 'GREATER_SYMBOL', 'LESS_SYMBOL', 'EXCLAMATION_SYMBOL',
        'BIT_NOT_OP', 'BIT_OR_OP', 'BIT_AND_OP', 'BIT_XOR_OP', 'DOT', 'LR_BRACKET',
        'RR_BRACKET', 'COMMA', 'SEMI', 'AT_SIGN', 'ZERO_DECIMAL', 'ONE_DECIMAL',
        'TWO_DECIMAL', 'SINGLE_QUOTE_SYMB', 'DOUBLE_QUOTE_SYMB', 'REVERSE_QUOTE_SYMB',
        'COLON_SYMB', 'CHARSET_REVERSE_QOUTE_STRING', 'FILESIZE_LITERAL',
        'START_NATIONAL_STRING_LITERAL', 'STRING_LITERAL', 'DECIMAL_LITERAL',
        'HEXADECIMAL_LITERAL', 'REAL_LITERAL', 'NULL_SPEC_LITERAL', 'BIT_STRING',
        'STRING_CHARSET_NAME', 'DOT_ID', 'ID', 'REVERSE_QUOTE_ID', 'STRING_USER_NAME',
        'IP_ADDRESS', 'LOCAL_ID', 'GLOBAL_ID', 'ERROR_RECONGNIGION', 'ADMIN',
        'OPTIONAL',
    ];

    /**
     * @var string
     */
    private const SERIALIZED_ATN =
        "\u{3}\u{608B}\u{A72A}\u{8133}\u{B9ED}\u{417C}\u{3BE7}\u{7786}\u{5964}" .
        "\u{3}\u{45D}\u{1A9B}\u{4}\u{2}\u{9}\u{2}\u{4}\u{3}\u{9}\u{3}\u{4}" .
        "\u{4}\u{9}\u{4}\u{4}\u{5}\u{9}\u{5}\u{4}\u{6}\u{9}\u{6}\u{4}\u{7}" .
        "\u{9}\u{7}\u{4}\u{8}\u{9}\u{8}\u{4}\u{9}\u{9}\u{9}\u{4}\u{A}\u{9}" .
        "\u{A}\u{4}\u{B}\u{9}\u{B}\u{4}\u{C}\u{9}\u{C}\u{4}\u{D}\u{9}\u{D}" .
        "\u{4}\u{E}\u{9}\u{E}\u{4}\u{F}\u{9}\u{F}\u{4}\u{10}\u{9}\u{10}\u{4}" .
        "\u{11}\u{9}\u{11}\u{4}\u{12}\u{9}\u{12}\u{4}\u{13}\u{9}\u{13}\u{4}" .
        "\u{14}\u{9}\u{14}\u{4}\u{15}\u{9}\u{15}\u{4}\u{16}\u{9}\u{16}\u{4}" .
        "\u{17}\u{9}\u{17}\u{4}\u{18}\u{9}\u{18}\u{4}\u{19}\u{9}\u{19}\u{4}" .
        "\u{1A}\u{9}\u{1A}\u{4}\u{1B}\u{9}\u{1B}\u{4}\u{1C}\u{9}\u{1C}\u{4}" .
        "\u{1D}\u{9}\u{1D}\u{4}\u{1E}\u{9}\u{1E}\u{4}\u{1F}\u{9}\u{1F}\u{4}" .
        "\u{20}\u{9}\u{20}\u{4}\u{21}\u{9}\u{21}\u{4}\u{22}\u{9}\u{22}\u{4}" .
        "\u{23}\u{9}\u{23}\u{4}\u{24}\u{9}\u{24}\u{4}\u{25}\u{9}\u{25}\u{4}" .
        "\u{26}\u{9}\u{26}\u{4}\u{27}\u{9}\u{27}\u{4}\u{28}\u{9}\u{28}\u{4}" .
        "\u{29}\u{9}\u{29}\u{4}\u{2A}\u{9}\u{2A}\u{4}\u{2B}\u{9}\u{2B}\u{4}" .
        "\u{2C}\u{9}\u{2C}\u{4}\u{2D}\u{9}\u{2D}\u{4}\u{2E}\u{9}\u{2E}\u{4}" .
        "\u{2F}\u{9}\u{2F}\u{4}\u{30}\u{9}\u{30}\u{4}\u{31}\u{9}\u{31}\u{4}" .
        "\u{32}\u{9}\u{32}\u{4}\u{33}\u{9}\u{33}\u{4}\u{34}\u{9}\u{34}\u{4}" .
        "\u{35}\u{9}\u{35}\u{4}\u{36}\u{9}\u{36}\u{4}\u{37}\u{9}\u{37}\u{4}" .
        "\u{38}\u{9}\u{38}\u{4}\u{39}\u{9}\u{39}\u{4}\u{3A}\u{9}\u{3A}\u{4}" .
        "\u{3B}\u{9}\u{3B}\u{4}\u{3C}\u{9}\u{3C}\u{4}\u{3D}\u{9}\u{3D}\u{4}" .
        "\u{3E}\u{9}\u{3E}\u{4}\u{3F}\u{9}\u{3F}\u{4}\u{40}\u{9}\u{40}\u{4}" .
        "\u{41}\u{9}\u{41}\u{4}\u{42}\u{9}\u{42}\u{4}\u{43}\u{9}\u{43}\u{4}" .
        "\u{44}\u{9}\u{44}\u{4}\u{45}\u{9}\u{45}\u{4}\u{46}\u{9}\u{46}\u{4}" .
        "\u{47}\u{9}\u{47}\u{4}\u{48}\u{9}\u{48}\u{4}\u{49}\u{9}\u{49}\u{4}" .
        "\u{4A}\u{9}\u{4A}\u{4}\u{4B}\u{9}\u{4B}\u{4}\u{4C}\u{9}\u{4C}\u{4}" .
        "\u{4D}\u{9}\u{4D}\u{4}\u{4E}\u{9}\u{4E}\u{4}\u{4F}\u{9}\u{4F}\u{4}" .
        "\u{50}\u{9}\u{50}\u{4}\u{51}\u{9}\u{51}\u{4}\u{52}\u{9}\u{52}\u{4}" .
        "\u{53}\u{9}\u{53}\u{4}\u{54}\u{9}\u{54}\u{4}\u{55}\u{9}\u{55}\u{4}" .
        "\u{56}\u{9}\u{56}\u{4}\u{57}\u{9}\u{57}\u{4}\u{58}\u{9}\u{58}\u{4}" .
        "\u{59}\u{9}\u{59}\u{4}\u{5A}\u{9}\u{5A}\u{4}\u{5B}\u{9}\u{5B}\u{4}" .
        "\u{5C}\u{9}\u{5C}\u{4}\u{5D}\u{9}\u{5D}\u{4}\u{5E}\u{9}\u{5E}\u{4}" .
        "\u{5F}\u{9}\u{5F}\u{4}\u{60}\u{9}\u{60}\u{4}\u{61}\u{9}\u{61}\u{4}" .
        "\u{62}\u{9}\u{62}\u{4}\u{63}\u{9}\u{63}\u{4}\u{64}\u{9}\u{64}\u{4}" .
        "\u{65}\u{9}\u{65}\u{4}\u{66}\u{9}\u{66}\u{4}\u{67}\u{9}\u{67}\u{4}" .
        "\u{68}\u{9}\u{68}\u{4}\u{69}\u{9}\u{69}\u{4}\u{6A}\u{9}\u{6A}\u{4}" .
        "\u{6B}\u{9}\u{6B}\u{4}\u{6C}\u{9}\u{6C}\u{4}\u{6D}\u{9}\u{6D}\u{4}" .
        "\u{6E}\u{9}\u{6E}\u{4}\u{6F}\u{9}\u{6F}\u{4}\u{70}\u{9}\u{70}\u{4}" .
        "\u{71}\u{9}\u{71}\u{4}\u{72}\u{9}\u{72}\u{4}\u{73}\u{9}\u{73}\u{4}" .
        "\u{74}\u{9}\u{74}\u{4}\u{75}\u{9}\u{75}\u{4}\u{76}\u{9}\u{76}\u{4}" .
        "\u{77}\u{9}\u{77}\u{4}\u{78}\u{9}\u{78}\u{4}\u{79}\u{9}\u{79}\u{4}" .
        "\u{7A}\u{9}\u{7A}\u{4}\u{7B}\u{9}\u{7B}\u{4}\u{7C}\u{9}\u{7C}\u{4}" .
        "\u{7D}\u{9}\u{7D}\u{4}\u{7E}\u{9}\u{7E}\u{4}\u{7F}\u{9}\u{7F}\u{4}" .
        "\u{80}\u{9}\u{80}\u{4}\u{81}\u{9}\u{81}\u{4}\u{82}\u{9}\u{82}\u{4}" .
        "\u{83}\u{9}\u{83}\u{4}\u{84}\u{9}\u{84}\u{4}\u{85}\u{9}\u{85}\u{4}" .
        "\u{86}\u{9}\u{86}\u{4}\u{87}\u{9}\u{87}\u{4}\u{88}\u{9}\u{88}\u{4}" .
        "\u{89}\u{9}\u{89}\u{4}\u{8A}\u{9}\u{8A}\u{4}\u{8B}\u{9}\u{8B}\u{4}" .
        "\u{8C}\u{9}\u{8C}\u{4}\u{8D}\u{9}\u{8D}\u{4}\u{8E}\u{9}\u{8E}\u{4}" .
        "\u{8F}\u{9}\u{8F}\u{4}\u{90}\u{9}\u{90}\u{4}\u{91}\u{9}\u{91}\u{4}" .
        "\u{92}\u{9}\u{92}\u{4}\u{93}\u{9}\u{93}\u{4}\u{94}\u{9}\u{94}\u{4}" .
        "\u{95}\u{9}\u{95}\u{4}\u{96}\u{9}\u{96}\u{4}\u{97}\u{9}\u{97}\u{4}" .
        "\u{98}\u{9}\u{98}\u{4}\u{99}\u{9}\u{99}\u{4}\u{9A}\u{9}\u{9A}\u{4}" .
        "\u{9B}\u{9}\u{9B}\u{4}\u{9C}\u{9}\u{9C}\u{4}\u{9D}\u{9}\u{9D}\u{4}" .
        "\u{9E}\u{9}\u{9E}\u{4}\u{9F}\u{9}\u{9F}\u{4}\u{A0}\u{9}\u{A0}\u{4}" .
        "\u{A1}\u{9}\u{A1}\u{4}\u{A2}\u{9}\u{A2}\u{4}\u{A3}\u{9}\u{A3}\u{4}" .
        "\u{A4}\u{9}\u{A4}\u{4}\u{A5}\u{9}\u{A5}\u{4}\u{A6}\u{9}\u{A6}\u{4}" .
        "\u{A7}\u{9}\u{A7}\u{4}\u{A8}\u{9}\u{A8}\u{4}\u{A9}\u{9}\u{A9}\u{4}" .
        "\u{AA}\u{9}\u{AA}\u{4}\u{AB}\u{9}\u{AB}\u{4}\u{AC}\u{9}\u{AC}\u{4}" .
        "\u{AD}\u{9}\u{AD}\u{4}\u{AE}\u{9}\u{AE}\u{4}\u{AF}\u{9}\u{AF}\u{4}" .
        "\u{B0}\u{9}\u{B0}\u{4}\u{B1}\u{9}\u{B1}\u{4}\u{B2}\u{9}\u{B2}\u{4}" .
        "\u{B3}\u{9}\u{B3}\u{4}\u{B4}\u{9}\u{B4}\u{4}\u{B5}\u{9}\u{B5}\u{4}" .
        "\u{B6}\u{9}\u{B6}\u{4}\u{B7}\u{9}\u{B7}\u{4}\u{B8}\u{9}\u{B8}\u{4}" .
        "\u{B9}\u{9}\u{B9}\u{4}\u{BA}\u{9}\u{BA}\u{4}\u{BB}\u{9}\u{BB}\u{4}" .
        "\u{BC}\u{9}\u{BC}\u{4}\u{BD}\u{9}\u{BD}\u{4}\u{BE}\u{9}\u{BE}\u{4}" .
        "\u{BF}\u{9}\u{BF}\u{4}\u{C0}\u{9}\u{C0}\u{4}\u{C1}\u{9}\u{C1}\u{4}" .
        "\u{C2}\u{9}\u{C2}\u{4}\u{C3}\u{9}\u{C3}\u{4}\u{C4}\u{9}\u{C4}\u{4}" .
        "\u{C5}\u{9}\u{C5}\u{4}\u{C6}\u{9}\u{C6}\u{4}\u{C7}\u{9}\u{C7}\u{4}" .
        "\u{C8}\u{9}\u{C8}\u{4}\u{C9}\u{9}\u{C9}\u{4}\u{CA}\u{9}\u{CA}\u{4}" .
        "\u{CB}\u{9}\u{CB}\u{4}\u{CC}\u{9}\u{CC}\u{4}\u{CD}\u{9}\u{CD}\u{4}" .
        "\u{CE}\u{9}\u{CE}\u{4}\u{CF}\u{9}\u{CF}\u{4}\u{D0}\u{9}\u{D0}\u{4}" .
        "\u{D1}\u{9}\u{D1}\u{4}\u{D2}\u{9}\u{D2}\u{4}\u{D3}\u{9}\u{D3}\u{4}" .
        "\u{D4}\u{9}\u{D4}\u{4}\u{D5}\u{9}\u{D5}\u{4}\u{D6}\u{9}\u{D6}\u{4}" .
        "\u{D7}\u{9}\u{D7}\u{4}\u{D8}\u{9}\u{D8}\u{4}\u{D9}\u{9}\u{D9}\u{4}" .
        "\u{DA}\u{9}\u{DA}\u{4}\u{DB}\u{9}\u{DB}\u{4}\u{DC}\u{9}\u{DC}\u{4}" .
        "\u{DD}\u{9}\u{DD}\u{4}\u{DE}\u{9}\u{DE}\u{4}\u{DF}\u{9}\u{DF}\u{4}" .
        "\u{E0}\u{9}\u{E0}\u{4}\u{E1}\u{9}\u{E1}\u{4}\u{E2}\u{9}\u{E2}\u{4}" .
        "\u{E3}\u{9}\u{E3}\u{4}\u{E4}\u{9}\u{E4}\u{4}\u{E5}\u{9}\u{E5}\u{4}" .
        "\u{E6}\u{9}\u{E6}\u{4}\u{E7}\u{9}\u{E7}\u{4}\u{E8}\u{9}\u{E8}\u{4}" .
        "\u{E9}\u{9}\u{E9}\u{4}\u{EA}\u{9}\u{EA}\u{4}\u{EB}\u{9}\u{EB}\u{4}" .
        "\u{EC}\u{9}\u{EC}\u{4}\u{ED}\u{9}\u{ED}\u{4}\u{EE}\u{9}\u{EE}\u{4}" .
        "\u{EF}\u{9}\u{EF}\u{4}\u{F0}\u{9}\u{F0}\u{4}\u{F1}\u{9}\u{F1}\u{4}" .
        "\u{F2}\u{9}\u{F2}\u{4}\u{F3}\u{9}\u{F3}\u{4}\u{F4}\u{9}\u{F4}\u{4}" .
        "\u{F5}\u{9}\u{F5}\u{4}\u{F6}\u{9}\u{F6}\u{4}\u{F7}\u{9}\u{F7}\u{4}" .
        "\u{F8}\u{9}\u{F8}\u{4}\u{F9}\u{9}\u{F9}\u{4}\u{FA}\u{9}\u{FA}\u{4}" .
        "\u{FB}\u{9}\u{FB}\u{4}\u{FC}\u{9}\u{FC}\u{4}\u{FD}\u{9}\u{FD}\u{4}" .
        "\u{FE}\u{9}\u{FE}\u{4}\u{FF}\u{9}\u{FF}\u{4}\u{100}\u{9}\u{100}\u{4}" .
        "\u{101}\u{9}\u{101}\u{4}\u{102}\u{9}\u{102}\u{4}\u{103}\u{9}\u{103}" .
        "\u{4}\u{104}\u{9}\u{104}\u{4}\u{105}\u{9}\u{105}\u{4}\u{106}\u{9}" .
        "\u{106}\u{4}\u{107}\u{9}\u{107}\u{4}\u{108}\u{9}\u{108}\u{4}\u{109}" .
        "\u{9}\u{109}\u{4}\u{10A}\u{9}\u{10A}\u{4}\u{10B}\u{9}\u{10B}\u{4}" .
        "\u{10C}\u{9}\u{10C}\u{4}\u{10D}\u{9}\u{10D}\u{4}\u{10E}\u{9}\u{10E}" .
        "\u{4}\u{10F}\u{9}\u{10F}\u{4}\u{110}\u{9}\u{110}\u{4}\u{111}\u{9}" .
        "\u{111}\u{4}\u{112}\u{9}\u{112}\u{4}\u{113}\u{9}\u{113}\u{4}\u{114}" .
        "\u{9}\u{114}\u{4}\u{115}\u{9}\u{115}\u{4}\u{116}\u{9}\u{116}\u{4}" .
        "\u{117}\u{9}\u{117}\u{4}\u{118}\u{9}\u{118}\u{4}\u{119}\u{9}\u{119}" .
        "\u{4}\u{11A}\u{9}\u{11A}\u{4}\u{11B}\u{9}\u{11B}\u{4}\u{11C}\u{9}" .
        "\u{11C}\u{4}\u{11D}\u{9}\u{11D}\u{4}\u{11E}\u{9}\u{11E}\u{4}\u{11F}" .
        "\u{9}\u{11F}\u{4}\u{120}\u{9}\u{120}\u{4}\u{121}\u{9}\u{121}\u{4}" .
        "\u{122}\u{9}\u{122}\u{4}\u{123}\u{9}\u{123}\u{4}\u{124}\u{9}\u{124}" .
        "\u{4}\u{125}\u{9}\u{125}\u{4}\u{126}\u{9}\u{126}\u{4}\u{127}\u{9}" .
        "\u{127}\u{4}\u{128}\u{9}\u{128}\u{4}\u{129}\u{9}\u{129}\u{4}\u{12A}" .
        "\u{9}\u{12A}\u{4}\u{12B}\u{9}\u{12B}\u{4}\u{12C}\u{9}\u{12C}\u{4}" .
        "\u{12D}\u{9}\u{12D}\u{4}\u{12E}\u{9}\u{12E}\u{4}\u{12F}\u{9}\u{12F}" .
        "\u{4}\u{130}\u{9}\u{130}\u{4}\u{131}\u{9}\u{131}\u{4}\u{132}\u{9}" .
        "\u{132}\u{4}\u{133}\u{9}\u{133}\u{4}\u{134}\u{9}\u{134}\u{4}\u{135}" .
        "\u{9}\u{135}\u{4}\u{136}\u{9}\u{136}\u{4}\u{137}\u{9}\u{137}\u{4}" .
        "\u{138}\u{9}\u{138}\u{4}\u{139}\u{9}\u{139}\u{4}\u{13A}\u{9}\u{13A}" .
        "\u{4}\u{13B}\u{9}\u{13B}\u{4}\u{13C}\u{9}\u{13C}\u{4}\u{13D}\u{9}" .
        "\u{13D}\u{4}\u{13E}\u{9}\u{13E}\u{4}\u{13F}\u{9}\u{13F}\u{4}\u{140}" .
        "\u{9}\u{140}\u{4}\u{141}\u{9}\u{141}\u{4}\u{142}\u{9}\u{142}\u{4}" .
        "\u{143}\u{9}\u{143}\u{4}\u{144}\u{9}\u{144}\u{4}\u{145}\u{9}\u{145}" .
        "\u{4}\u{146}\u{9}\u{146}\u{4}\u{147}\u{9}\u{147}\u{4}\u{148}\u{9}" .
        "\u{148}\u{4}\u{149}\u{9}\u{149}\u{4}\u{14A}\u{9}\u{14A}\u{4}\u{14B}" .
        "\u{9}\u{14B}\u{4}\u{14C}\u{9}\u{14C}\u{4}\u{14D}\u{9}\u{14D}\u{3}" .
        "\u{2}\u{5}\u{2}\u{29C}\u{A}\u{2}\u{3}\u{2}\u{3}\u{2}\u{5}\u{2}\u{2A0}" .
        "\u{A}\u{2}\u{3}\u{2}\u{3}\u{2}\u{3}\u{3}\u{3}\u{3}\u{3}\u{3}\u{5}" .
        "\u{3}\u{2A7}\u{A}\u{3}\u{3}\u{3}\u{5}\u{3}\u{2AA}\u{A}\u{3}\u{3}\u{3}" .
        "\u{7}\u{3}\u{2AD}\u{A}\u{3}\u{C}\u{3}\u{E}\u{3}\u{2B0}\u{B}\u{3}\u{3}" .
        "\u{3}\u{3}\u{3}\u{3}\u{3}\u{5}\u{3}\u{2B5}\u{A}\u{3}\u{3}\u{3}\u{5}" .
        "\u{3}\u{2B8}\u{A}\u{3}\u{3}\u{3}\u{5}\u{3}\u{2BB}\u{A}\u{3}\u{3}\u{4}" .
        "\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{3}\u{4}\u{5}" .
        "\u{4}\u{2C4}\u{A}\u{4}\u{3}\u{5}\u{3}\u{5}\u{3}\u{6}\u{3}\u{6}\u{3}" .
        "\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
        "\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}" .
        "\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
        "\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}" .
        "\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}\u{3}\u{6}" .
        "\u{5}\u{6}\u{2EB}\u{A}\u{6}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}" .
        "\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{3}\u{7}\u{5}" .
        "\u{7}\u{2F7}\u{A}\u{7}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}" .
        "\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{3}\u{8}\u{5}\u{8}\u{302}\u{A}" .
        "\u{8}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}" .
        "\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}\u{9}\u{3}" .
        "\u{9}\u{3}\u{9}\u{3}\u{9}\u{5}\u{9}\u{313}\u{A}\u{9}\u{3}\u{A}\u{3}" .
        "\u{A}\u{3}\u{A}\u{5}\u{A}\u{318}\u{A}\u{A}\u{3}\u{B}\u{3}\u{B}\u{3}" .
        "\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}\u{3}\u{B}" .
        "\u{3}\u{B}\u{5}\u{B}\u{324}\u{A}\u{B}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}" .
        "\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}" .
        "\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}" .
        "\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}\u{C}\u{3}" .
        "\u{C}\u{3}\u{C}\u{3}\u{C}\u{5}\u{C}\u{33F}\u{A}\u{C}\u{3}\u{D}\u{3}" .
        "\u{D}\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}\u{3}\u{D}\u{5}\u{D}" .
        "\u{348}\u{A}\u{D}\u{3}\u{E}\u{3}\u{E}\u{3}\u{E}\u{5}\u{E}\u{34D}\u{A}" .
        "\u{E}\u{3}\u{E}\u{3}\u{E}\u{7}\u{E}\u{351}\u{A}\u{E}\u{C}\u{E}\u{E}" .
        "\u{E}\u{354}\u{B}\u{E}\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{358}\u{A}\u{F}" .
        "\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{35C}\u{A}\u{F}\u{3}\u{F}\u{3}\u{F}" .
        "\u{3}\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{365}" .
        "\u{A}\u{F}\u{3}\u{F}\u{5}\u{F}\u{368}\u{A}\u{F}\u{3}\u{F}\u{5}\u{F}" .
        "\u{36B}\u{A}\u{F}\u{3}\u{F}\u{3}\u{F}\u{5}\u{F}\u{36F}\u{A}\u{F}\u{3}" .
        "\u{F}\u{3}\u{F}\u{3}\u{F}\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{376}" .
        "\u{A}\u{10}\u{3}\u{10}\u{5}\u{10}\u{379}\u{A}\u{10}\u{3}\u{10}\u{3}" .
        "\u{10}\u{3}\u{10}\u{5}\u{10}\u{37E}\u{A}\u{10}\u{3}\u{10}\u{3}\u{10}" .
        "\u{3}\u{10}\u{3}\u{10}\u{7}\u{10}\u{384}\u{A}\u{10}\u{C}\u{10}\u{E}" .
        "\u{10}\u{387}\u{B}\u{10}\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{38B}\u{A}" .
        "\u{10}\u{3}\u{10}\u{3}\u{10}\u{3}\u{10}\u{5}\u{10}\u{390}\u{A}\u{10}" .
        "\u{3}\u{10}\u{7}\u{10}\u{393}\u{A}\u{10}\u{C}\u{10}\u{E}\u{10}\u{396}" .
        "\u{B}\u{10}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}" .
        "\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3A1}\u{A}" .
        "\u{11}\u{3}\u{11}\u{5}\u{11}\u{3A4}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}" .
        "\u{5}\u{11}\u{3A8}\u{A}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3AB}\u{A}\u{11}" .
        "\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3AF}\u{A}\u{11}\u{3}\u{11}\u{5}" .
        "\u{11}\u{3B2}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3B6}\u{A}" .
        "\u{11}\u{3}\u{11}\u{5}\u{11}\u{3B9}\u{A}\u{11}\u{3}\u{11}\u{5}\u{11}" .
        "\u{3BC}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}\u{11}\u{3C0}\u{A}\u{11}" .
        "\u{3}\u{11}\u{5}\u{11}\u{3C3}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{5}" .
        "\u{11}\u{3C7}\u{A}\u{11}\u{3}\u{11}\u{3}\u{11}\u{3}\u{12}\u{3}\u{12}" .
        "\u{5}\u{12}\u{3CD}\u{A}\u{12}\u{3}\u{12}\u{3}\u{12}\u{3}\u{12}\u{3}" .
        "\u{12}\u{5}\u{12}\u{3D3}\u{A}\u{12}\u{3}\u{12}\u{3}\u{12}\u{7}\u{12}" .
        "\u{3D7}\u{A}\u{12}\u{C}\u{12}\u{E}\u{12}\u{3DA}\u{B}\u{12}\u{3}\u{12}" .
        "\u{3}\u{12}\u{7}\u{12}\u{3DE}\u{A}\u{12}\u{C}\u{12}\u{E}\u{12}\u{3E1}" .
        "\u{B}\u{12}\u{3}\u{12}\u{3}\u{12}\u{3}\u{13}\u{3}\u{13}\u{5}\u{13}" .
        "\u{3E7}\u{A}\u{13}\u{3}\u{13}\u{3}\u{13}\u{3}\u{13}\u{3}\u{13}\u{5}" .
        "\u{13}\u{3ED}\u{A}\u{13}\u{3}\u{13}\u{3}\u{13}\u{7}\u{13}\u{3F1}\u{A}" .
        "\u{13}\u{C}\u{13}\u{E}\u{13}\u{3F4}\u{B}\u{13}\u{3}\u{13}\u{3}\u{13}" .
        "\u{3}\u{13}\u{3}\u{13}\u{7}\u{13}\u{3FA}\u{A}\u{13}\u{C}\u{13}\u{E}" .
        "\u{13}\u{3FD}\u{B}\u{13}\u{3}\u{13}\u{3}\u{13}\u{5}\u{13}\u{401}\u{A}" .
        "\u{13}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}" .
        "\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}" .
        "\u{14}\u{7}\u{14}\u{40F}\u{A}\u{14}\u{C}\u{14}\u{E}\u{14}\u{412}\u{B}" .
        "\u{14}\u{3}\u{14}\u{3}\u{14}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{418}" .
        "\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{41C}\u{A}\u{15}\u{3}" .
        "\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}" .
        "\u{15}\u{3}\u{15}\u{5}\u{15}\u{426}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}" .
        "\u{5}\u{15}\u{42A}\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{42E}" .
        "\u{A}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{432}\u{A}\u{15}\u{3}" .
        "\u{15}\u{3}\u{15}\u{5}\u{15}\u{436}\u{A}\u{15}\u{3}\u{15}\u{7}\u{15}" .
        "\u{439}\u{A}\u{15}\u{C}\u{15}\u{E}\u{15}\u{43C}\u{B}\u{15}\u{5}\u{15}" .
        "\u{43E}\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{441}\u{A}\u{15}\u{3}\u{15}" .
        "\u{5}\u{15}\u{444}\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{447}\u{A}\u{15}" .
        "\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{44D}\u{A}" .
        "\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{451}\u{A}\u{15}\u{3}\u{15}" .
        "\u{3}\u{15}\u{3}\u{15}\u{3}\u{15}\u{5}\u{15}\u{457}\u{A}\u{15}\u{3}" .
        "\u{15}\u{7}\u{15}\u{45A}\u{A}\u{15}\u{C}\u{15}\u{E}\u{15}\u{45D}\u{B}" .
        "\u{15}\u{5}\u{15}\u{45F}\u{A}\u{15}\u{3}\u{15}\u{5}\u{15}\u{462}\u{A}" .
        "\u{15}\u{5}\u{15}\u{464}\u{A}\u{15}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}" .
        "\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}\u{3}\u{16}" .
        "\u{5}\u{16}\u{46F}\u{A}\u{16}\u{3}\u{16}\u{3}\u{16}\u{5}\u{16}\u{473}" .
        "\u{A}\u{16}\u{3}\u{16}\u{5}\u{16}\u{476}\u{A}\u{16}\u{3}\u{17}\u{3}" .
        "\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}" .
        "\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{484}" .
        "\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{487}\u{A}\u{17}\u{3}\u{17}\u{3}" .
        "\u{17}\u{5}\u{17}\u{48B}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{48E}\u{A}" .
        "\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{492}\u{A}\u{17}\u{3}\u{17}" .
        "\u{5}\u{17}\u{495}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{499}" .
        "\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{49C}\u{A}\u{17}\u{3}\u{17}\u{3}" .
        "\u{17}\u{5}\u{17}\u{4A0}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{4A3}\u{A}" .
        "\u{17}\u{3}\u{17}\u{5}\u{17}\u{4A6}\u{A}\u{17}\u{3}\u{17}\u{3}\u{17}" .
        "\u{5}\u{17}\u{4AA}\u{A}\u{17}\u{3}\u{17}\u{5}\u{17}\u{4AD}\u{A}\u{17}" .
        "\u{3}\u{17}\u{3}\u{17}\u{5}\u{17}\u{4B1}\u{A}\u{17}\u{3}\u{17}\u{3}" .
        "\u{17}\u{3}\u{18}\u{3}\u{18}\u{5}\u{18}\u{4B7}\u{A}\u{18}\u{3}\u{18}" .
        "\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}" .
        "\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{18}\u{5}\u{18}\u{4C4}\u{A}" .
        "\u{18}\u{3}\u{18}\u{3}\u{18}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}" .
        "\u{19}\u{4CB}\u{A}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}" .
        "\u{4D0}\u{A}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4D3}\u{A}\u{19}\u{3}\u{19}" .
        "\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4D8}\u{A}\u{19}\u{3}\u{19}\u{3}" .
        "\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4E0}" .
        "\u{A}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}" .
        "\u{4E6}\u{A}\u{19}\u{3}\u{19}\u{3}\u{19}\u{5}\u{19}\u{4EA}\u{A}\u{19}" .
        "\u{3}\u{1A}\u{5}\u{1A}\u{4ED}\u{A}\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{3}" .
        "\u{1A}\u{5}\u{1A}\u{4F2}\u{A}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{4F5}\u{A}" .
        "\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{4F9}\u{A}\u{1A}\u{3}\u{1A}" .
        "\u{5}\u{1A}\u{4FC}\u{A}\u{1A}\u{3}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{500}" .
        "\u{A}\u{1A}\u{3}\u{1A}\u{5}\u{1A}\u{503}\u{A}\u{1A}\u{3}\u{1B}\u{3}" .
        "\u{1B}\u{3}\u{1B}\u{3}\u{1B}\u{3}\u{1B}\u{3}\u{1B}\u{5}\u{1B}\u{50B}" .
        "\u{A}\u{1B}\u{5}\u{1B}\u{50D}\u{A}\u{1B}\u{3}\u{1C}\u{3}\u{1C}\u{3}" .
        "\u{1C}\u{7}\u{1C}\u{512}\u{A}\u{1C}\u{C}\u{1C}\u{E}\u{1C}\u{515}\u{B}" .
        "\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{5}\u{1C}\u{51A}\u{A}\u{1C}" .
        "\u{3}\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{7}\u{1C}\u{520}\u{A}" .
        "\u{1C}\u{C}\u{1C}\u{E}\u{1C}\u{523}\u{B}\u{1C}\u{5}\u{1C}\u{525}\u{A}" .
        "\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{3}\u{1C}\u{7}\u{1C}\u{52A}\u{A}\u{1C}" .
        "\u{C}\u{1C}\u{E}\u{1C}\u{52D}\u{B}\u{1C}\u{5}\u{1C}\u{52F}\u{A}\u{1C}" .
        "\u{5}\u{1C}\u{531}\u{A}\u{1C}\u{3}\u{1D}\u{3}\u{1D}\u{3}\u{1D}\u{3}" .
        "\u{1D}\u{5}\u{1D}\u{537}\u{A}\u{1D}\u{3}\u{1E}\u{3}\u{1E}\u{3}\u{1E}" .
        "\u{3}\u{1E}\u{5}\u{1E}\u{53D}\u{A}\u{1E}\u{3}\u{1E}\u{3}\u{1E}\u{3}" .
        "\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}" .
        "\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}\u{1F}\u{3}" .
        "\u{1F}\u{5}\u{1F}\u{54E}\u{A}\u{1F}\u{3}\u{20}\u{3}\u{20}\u{3}\u{20}" .
        "\u{3}\u{20}\u{3}\u{20}\u{5}\u{20}\u{555}\u{A}\u{20}\u{3}\u{21}\u{3}" .
        "\u{21}\u{3}\u{21}\u{3}\u{22}\u{3}\u{22}\u{5}\u{22}\u{55C}\u{A}\u{22}" .
        "\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}" .
        "\u{3}\u{22}\u{3}\u{22}\u{3}\u{22}\u{5}\u{22}\u{567}\u{A}\u{22}\u{3}" .
        "\u{23}\u{5}\u{23}\u{56A}\u{A}\u{23}\u{3}\u{23}\u{3}\u{23}\u{3}\u{23}" .
        "\u{3}\u{24}\u{3}\u{24}\u{3}\u{24}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}" .
        "\u{3}\u{25}\u{3}\u{25}\u{5}\u{25}\u{577}\u{A}\u{25}\u{3}\u{25}\u{3}" .
        "\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}" .
        "\u{25}\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{5}\u{25}\u{584}\u{A}\u{25}" .
        "\u{3}\u{25}\u{3}\u{25}\u{3}\u{25}\u{5}\u{25}\u{589}\u{A}\u{25}\u{3}" .
        "\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}" .
        "\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}\u{26}\u{3}" .
        "\u{26}\u{3}\u{26}\u{5}\u{26}\u{599}\u{A}\u{26}\u{3}\u{27}\u{3}\u{27}" .
        "\u{3}\u{27}\u{3}\u{27}\u{7}\u{27}\u{59F}\u{A}\u{27}\u{C}\u{27}\u{E}" .
        "\u{27}\u{5A2}\u{B}\u{27}\u{3}\u{27}\u{3}\u{27}\u{3}\u{28}\u{3}\u{28}" .
        "\u{3}\u{28}\u{3}\u{28}\u{3}\u{28}\u{5}\u{28}\u{5AB}\u{A}\u{28}\u{3}" .
        "\u{29}\u{3}\u{29}\u{7}\u{29}\u{5AF}\u{A}\u{29}\u{C}\u{29}\u{E}\u{29}" .
        "\u{5B2}\u{B}\u{29}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}" .
        "\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5BD}" .
        "\u{A}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5C0}\u{A}\u{2A}\u{3}\u{2A}\u{3}" .
        "\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5C5}\u{A}\u{2A}\u{3}\u{2A}\u{3}\u{2A}" .
        "\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}" .
        "\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5D2}\u{A}\u{2A}\u{3}" .
        "\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5D9}" .
        "\u{A}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}" .
        "\u{5}\u{2A}\u{5E0}\u{A}\u{2A}\u{5}\u{2A}\u{5E2}\u{A}\u{2A}\u{3}\u{2A}" .
        "\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{3}\u{2A}\u{5}\u{2A}\u{5E9}\u{A}" .
        "\u{2A}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5ED}\u{A}\u{2B}\u{5}\u{2B}" .
        "\u{5EF}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5F4}" .
        "\u{A}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{5F7}\u{A}\u{2B}\u{3}\u{2B}\u{3}" .
        "\u{2B}\u{7}\u{2B}\u{5FB}\u{A}\u{2B}\u{C}\u{2B}\u{E}\u{2B}\u{5FE}\u{B}" .
        "\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{602}\u{A}\u{2B}\u{5}\u{2B}" .
        "\u{604}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{608}\u{A}\u{2B}" .
        "\u{3}\u{2B}\u{5}\u{2B}\u{60B}\u{A}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{60E}" .
        "\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{7}\u{2B}\u{612}\u{A}\u{2B}\u{C}" .
        "\u{2B}\u{E}\u{2B}\u{615}\u{B}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}" .
        "\u{619}\u{A}\u{2B}\u{5}\u{2B}\u{61B}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}" .
        "\u{3}\u{2B}\u{5}\u{2B}\u{620}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}" .
        "\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{5}\u{2B}\u{627}\u{A}\u{2B}\u{5}\u{2B}" .
        "\u{629}\u{A}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}\u{2B}\u{3}" .
        "\u{2B}\u{5}\u{2B}\u{630}\u{A}\u{2B}\u{3}\u{2C}\u{3}\u{2C}\u{3}\u{2C}" .
        "\u{5}\u{2C}\u{635}\u{A}\u{2C}\u{3}\u{2C}\u{3}\u{2C}\u{5}\u{2C}\u{639}" .
        "\u{A}\u{2C}\u{3}\u{2C}\u{5}\u{2C}\u{63C}\u{A}\u{2C}\u{3}\u{2D}\u{3}" .
        "\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{5}\u{2D}\u{644}" .
        "\u{A}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}\u{3}\u{2D}" .
        "\u{3}\u{2D}\u{5}\u{2D}\u{64C}\u{A}\u{2D}\u{5}\u{2D}\u{64E}\u{A}\u{2D}" .
        "\u{3}\u{2E}\u{3}\u{2E}\u{3}\u{2E}\u{3}\u{2E}\u{3}\u{2E}\u{3}\u{2E}" .
        "\u{5}\u{2E}\u{656}\u{A}\u{2E}\u{3}\u{2F}\u{3}\u{2F}\u{5}\u{2F}\u{65A}" .
        "\u{A}\u{2F}\u{3}\u{2F}\u{5}\u{2F}\u{65D}\u{A}\u{2F}\u{3}\u{2F}\u{3}" .
        "\u{2F}\u{7}\u{2F}\u{661}\u{A}\u{2F}\u{C}\u{2F}\u{E}\u{2F}\u{664}\u{B}" .
        "\u{2F}\u{3}\u{2F}\u{3}\u{2F}\u{5}\u{2F}\u{668}\u{A}\u{2F}\u{3}\u{2F}" .
        "\u{5}\u{2F}\u{66B}\u{A}\u{2F}\u{3}\u{2F}\u{3}\u{2F}\u{7}\u{2F}\u{66F}" .
        "\u{A}\u{2F}\u{C}\u{2F}\u{E}\u{2F}\u{672}\u{B}\u{2F}\u{5}\u{2F}\u{674}" .
        "\u{A}\u{2F}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{678}\u{A}\u{30}\u{3}" .
        "\u{30}\u{5}\u{30}\u{67B}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
        "\u{67F}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{684}" .
        "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{688}\u{A}\u{30}\u{3}" .
        "\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{68D}\u{A}\u{30}\u{3}\u{30}" .
        "\u{5}\u{30}\u{690}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{694}" .
        "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{698}\u{A}\u{30}\u{3}" .
        "\u{30}\u{3}\u{30}\u{5}\u{30}\u{69C}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}" .
        "\u{5}\u{30}\u{6A0}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}" .
        "\u{30}\u{6A5}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
        "\u{6AA}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6AF}" .
        "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}" .
        "\u{6B5}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6BA}" .
        "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6BF}\u{A}" .
        "\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6C5}" .
        "\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6CA}\u{A}" .
        "\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6CF}\u{A}\u{30}" .
        "\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6D4}\u{A}\u{30}\u{3}" .
        "\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6D9}\u{A}\u{30}\u{3}\u{30}" .
        "\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{6DE}\u{A}\u{30}\u{3}\u{30}\u{3}" .
        "\u{30}\u{3}\u{30}\u{5}\u{30}\u{6E3}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}" .
        "\u{3}\u{30}\u{5}\u{30}\u{6E8}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}" .
        "\u{30}\u{5}\u{30}\u{6ED}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}" .
        "\u{5}\u{30}\u{6F2}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}" .
        "\u{30}\u{6F7}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}" .
        "\u{5}\u{30}\u{6FD}\u{A}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{3}" .
        "\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{705}\u{A}\u{30}\u{3}\u{30}" .
        "\u{3}\u{30}\u{3}\u{30}\u{3}\u{30}\u{5}\u{30}\u{70B}\u{A}\u{30}\u{3}" .
        "\u{31}\u{3}\u{31}\u{3}\u{32}\u{3}\u{32}\u{3}\u{32}\u{3}\u{33}\u{3}" .
        "\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}\u{717}\u{A}\u{33}" .
        "\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}" .
        "\u{71E}\u{A}\u{33}\u{5}\u{33}\u{720}\u{A}\u{33}\u{3}\u{33}\u{3}\u{33}" .
        "\u{3}\u{33}\u{3}\u{33}\u{7}\u{33}\u{726}\u{A}\u{33}\u{C}\u{33}\u{E}" .
        "\u{33}\u{729}\u{B}\u{33}\u{3}\u{33}\u{3}\u{33}\u{5}\u{33}\u{72D}\u{A}" .
        "\u{33}\u{3}\u{34}\u{5}\u{34}\u{730}\u{A}\u{34}\u{3}\u{34}\u{3}\u{34}" .
        "\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{5}\u{34}\u{738}\u{A}" .
        "\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{5}\u{34}\u{73E}" .
        "\u{A}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}" .
        "\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}" .
        "\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{5}\u{34}\u{74E}\u{A}\u{34}\u{3}" .
        "\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}" .
        "\u{34}\u{3}\u{34}\u{3}\u{34}\u{3}\u{34}\u{5}\u{34}\u{75A}\u{A}\u{34}" .
        "\u{5}\u{34}\u{75C}\u{A}\u{34}\u{3}\u{35}\u{5}\u{35}\u{75F}\u{A}\u{35}" .
        "\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}" .
        "\u{5}\u{35}\u{767}\u{A}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}" .
        "\u{35}\u{5}\u{35}\u{76D}\u{A}\u{35}\u{3}\u{35}\u{3}\u{35}\u{3}\u{35}" .
        "\u{3}\u{35}\u{5}\u{35}\u{773}\u{A}\u{35}\u{3}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{7}\u{36}\u{77E}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{781}\u{B}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}\u{785}\u{A}\u{36}\u{C}\u{36}" .
        "\u{E}\u{36}\u{788}\u{B}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{7}\u{36}\u{78E}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{791}\u{B}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{5}\u{36}\u{795}\u{A}\u{36}\u{3}\u{36}" .
        "\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}" .
        "\u{7}\u{36}\u{79E}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7A1}\u{B}\u{36}" .
        "\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}\u{7A7}\u{A}" .
        "\u{36}\u{C}\u{36}\u{E}\u{36}\u{7AA}\u{B}\u{36}\u{3}\u{36}\u{3}\u{36}" .
        "\u{5}\u{36}\u{7AE}\u{A}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}\u{7B8}" .
        "\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7BB}\u{B}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{7}\u{36}\u{7BF}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7C2}\u{B}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}\u{7C8}" .
        "\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7CB}\u{B}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{5}\u{36}\u{7CF}\u{A}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}" .
        "\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}" .
        "\u{7D9}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7DC}\u{B}\u{36}\u{3}\u{36}" .
        "\u{3}\u{36}\u{7}\u{36}\u{7E0}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7E3}" .
        "\u{B}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}" .
        "\u{7E9}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7EC}\u{B}\u{36}\u{3}\u{36}" .
        "\u{3}\u{36}\u{5}\u{36}\u{7F0}\u{A}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{7}\u{36}\u{7F5}\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{7F8}\u{B}" .
        "\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{3}\u{36}\u{7}\u{36}\u{7FE}" .
        "\u{A}\u{36}\u{C}\u{36}\u{E}\u{36}\u{801}\u{B}\u{36}\u{3}\u{36}\u{3}" .
        "\u{36}\u{5}\u{36}\u{805}\u{A}\u{36}\u{5}\u{36}\u{807}\u{A}\u{36}\u{3}" .
        "\u{37}\u{3}\u{37}\u{3}\u{37}\u{5}\u{37}\u{80C}\u{A}\u{37}\u{3}\u{38}" .
        "\u{3}\u{38}\u{3}\u{38}\u{3}\u{38}\u{6}\u{38}\u{812}\u{A}\u{38}\u{D}" .
        "\u{38}\u{E}\u{38}\u{813}\u{3}\u{38}\u{3}\u{38}\u{3}\u{39}\u{3}\u{39}" .
        "\u{3}\u{39}\u{7}\u{39}\u{81B}\u{A}\u{39}\u{C}\u{39}\u{E}\u{39}\u{81E}" .
        "\u{B}\u{39}\u{3}\u{3A}\u{5}\u{3A}\u{821}\u{A}\u{3A}\u{3}\u{3A}\u{5}" .
        "\u{3A}\u{824}\u{A}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{828}\u{A}" .
        "\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{82D}\u{A}\u{3A}" .
        "\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{833}\u{A}" .
        "\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{839}" .
        "\u{A}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{83E}\u{A}" .
        "\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{843}\u{A}\u{3A}" .
        "\u{3}\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{848}\u{A}\u{3A}\u{3}" .
        "\u{3A}\u{3}\u{3A}\u{3}\u{3A}\u{5}\u{3A}\u{84D}\u{A}\u{3A}\u{3}\u{3A}" .
        "\u{5}\u{3A}\u{850}\u{A}\u{3A}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{5}" .
        "\u{3B}\u{855}\u{A}\u{3B}\u{3}\u{3B}\u{6}\u{3B}\u{858}\u{A}\u{3B}\u{D}" .
        "\u{3B}\u{E}\u{3B}\u{859}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}" .
        "\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{3}\u{3B}\u{5}\u{3B}\u{864}\u{A}" .
        "\u{3B}\u{3}\u{3C}\u{3}\u{3C}\u{5}\u{3C}\u{868}\u{A}\u{3C}\u{3}\u{3C}" .
        "\u{3}\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{5}\u{3C}\u{86F}\u{A}" .
        "\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{5}\u{3C}\u{874}\u{A}\u{3C}" .
        "\u{3}\u{3C}\u{5}\u{3C}\u{877}\u{A}\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{3}" .
        "\u{3C}\u{5}\u{3C}\u{87C}\u{A}\u{3C}\u{3}\u{3C}\u{5}\u{3C}\u{87F}\u{A}" .
        "\u{3C}\u{3}\u{3C}\u{3}\u{3C}\u{5}\u{3C}\u{883}\u{A}\u{3C}\u{3}\u{3C}" .
        "\u{3}\u{3C}\u{5}\u{3C}\u{887}\u{A}\u{3C}\u{3}\u{3D}\u{3}\u{3D}\u{3}" .
        "\u{3D}\u{3}\u{3D}\u{7}\u{3D}\u{88D}\u{A}\u{3D}\u{C}\u{3D}\u{E}\u{3D}" .
        "\u{890}\u{B}\u{3D}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}" .
        "\u{3E}\u{3}\u{3E}\u{3}\u{3E}\u{3}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{3}" .
        "\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{5}" .
        "\u{3F}\u{8A2}\u{A}\u{3F}\u{3}\u{3F}\u{5}\u{3F}\u{8A5}\u{A}\u{3F}\u{3}" .
        "\u{3F}\u{5}\u{3F}\u{8A8}\u{A}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{5}\u{3F}" .
        "\u{8AC}\u{A}\u{3F}\u{3}\u{3F}\u{3}\u{3F}\u{3}\u{40}\u{3}\u{40}\u{3}" .
        "\u{40}\u{3}\u{40}\u{7}\u{40}\u{8B4}\u{A}\u{40}\u{C}\u{40}\u{E}\u{40}" .
        "\u{8B7}\u{B}\u{40}\u{3}\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}" .
        "\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}\u{41}\u{7}\u{41}\u{8C1}\u{A}\u{41}" .
        "\u{C}\u{41}\u{E}\u{41}\u{8C4}\u{B}\u{41}\u{3}\u{41}\u{3}\u{41}\u{3}" .
        "\u{42}\u{3}\u{42}\u{5}\u{42}\u{8CA}\u{A}\u{42}\u{3}\u{42}\u{5}\u{42}" .
        "\u{8CD}\u{A}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}\u{42}\u{3}" .
        "\u{42}\u{7}\u{42}\u{8D4}\u{A}\u{42}\u{C}\u{42}\u{E}\u{42}\u{8D7}\u{B}" .
        "\u{42}\u{5}\u{42}\u{8D9}\u{A}\u{42}\u{3}\u{42}\u{5}\u{42}\u{8DC}\u{A}" .
        "\u{42}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}" .
        "\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{43}\u{5}\u{43}\u{8E7}\u{A}\u{43}" .
        "\u{3}\u{43}\u{5}\u{43}\u{8EA}\u{A}\u{43}\u{3}\u{43}\u{3}\u{43}\u{5}" .
        "\u{43}\u{8EE}\u{A}\u{43}\u{3}\u{43}\u{3}\u{43}\u{3}\u{44}\u{3}\u{44}" .
        "\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{8F6}\u{A}\u{44}\u{3}\u{44}\u{5}" .
        "\u{44}\u{8F9}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}" .
        "\u{8FE}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}\u{44}\u{3}" .
        "\u{44}\u{3}\u{44}\u{5}\u{44}\u{906}\u{A}\u{44}\u{3}\u{44}\u{3}\u{44}" .
        "\u{3}\u{44}\u{3}\u{44}\u{5}\u{44}\u{90C}\u{A}\u{44}\u{3}\u{44}\u{3}" .
        "\u{44}\u{5}\u{44}\u{910}\u{A}\u{44}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}" .
        "\u{914}\u{A}\u{45}\u{3}\u{45}\u{7}\u{45}\u{917}\u{A}\u{45}\u{C}\u{45}" .
        "\u{E}\u{45}\u{91A}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{91E}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{5}\u{45}\u{925}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{929}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{7}\u{45}\u{932}\u{A}\u{45}\u{C}\u{45}\u{E}" .
        "\u{45}\u{935}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{5}\u{45}\u{93C}\u{A}\u{45}\u{3}\u{45}\u{5}\u{45}\u{93F}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{7}\u{45}\u{943}\u{A}\u{45}\u{C}" .
        "\u{45}\u{E}\u{45}\u{946}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{5}\u{45}\u{94B}\u{A}\u{45}\u{5}\u{45}\u{94D}\u{A}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{952}\u{A}\u{45}\u{3}\u{45}\u{5}" .
        "\u{45}\u{955}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{7}\u{45}\u{959}\u{A}" .
        "\u{45}\u{C}\u{45}\u{E}\u{45}\u{95C}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{5}\u{45}\u{961}\u{A}\u{45}\u{5}\u{45}\u{963}\u{A}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{967}\u{A}\u{45}\u{3}\u{45}\u{5}" .
        "\u{45}\u{96A}\u{A}\u{45}\u{3}\u{45}\u{5}\u{45}\u{96D}\u{A}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{7}\u{45}\u{971}\u{A}\u{45}\u{C}\u{45}\u{E}\u{45}" .
        "\u{974}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{979}" .
        "\u{A}\u{45}\u{3}\u{45}\u{5}\u{45}\u{97C}\u{A}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{7}\u{45}\u{980}\u{A}\u{45}\u{C}\u{45}\u{E}\u{45}\u{983}\u{B}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{988}\u{A}\u{45}" .
        "\u{5}\u{45}\u{98A}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}" .
        "\u{45}\u{98F}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{997}\u{A}\u{45}\u{5}\u{45}\u{999}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9A2}\u{A}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{5}\u{45}\u{9A7}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9AF}\u{A}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9B3}\u{A}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}" .
        "\u{9BB}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9C5}\u{A}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9CA}\u{A}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9D1}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9D5}\u{A}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{5}\u{45}\u{9D9}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9F9}\u{A}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{9FD}\u{A}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A09}\u{A}\u{45}\u{3}" .
        "\u{45}\u{5}\u{45}\u{A0C}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A15}\u{A}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{7}\u{45}\u{A24}\u{A}\u{45}\u{C}\u{45}\u{E}\u{45}" .
        "\u{A27}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A32}" .
        "\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{5}\u{45}\u{A39}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{5}\u{45}\u{A40}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{7}\u{45}\u{A4D}\u{A}\u{45}\u{C}" .
        "\u{45}\u{E}\u{45}\u{A50}\u{B}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{5}\u{45}\u{A5C}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{5}\u{45}\u{A62}\u{A}\u{45}\u{3}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A68}\u{A}\u{45}\u{3}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A6E}\u{A}\u{45}\u{3}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A74}\u{A}\u{45}\u{3}" .
        "\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A7A}\u{A}\u{45}" .
        "\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{3}\u{45}\u{5}\u{45}\u{A80}\u{A}" .
        "\u{45}\u{3}\u{46}\u{3}\u{46}\u{3}\u{46}\u{5}\u{46}\u{A85}\u{A}\u{46}" .
        "\u{3}\u{46}\u{3}\u{46}\u{3}\u{47}\u{3}\u{47}\u{3}\u{47}\u{5}\u{47}" .
        "\u{A8C}\u{A}\u{47}\u{3}\u{47}\u{3}\u{47}\u{3}\u{48}\u{3}\u{48}\u{3}" .
        "\u{48}\u{5}\u{48}\u{A93}\u{A}\u{48}\u{3}\u{48}\u{3}\u{48}\u{3}\u{48}" .
        "\u{3}\u{48}\u{3}\u{48}\u{5}\u{48}\u{A9A}\u{A}\u{48}\u{3}\u{48}\u{3}" .
        "\u{48}\u{3}\u{48}\u{5}\u{48}\u{A9F}\u{A}\u{48}\u{3}\u{48}\u{7}\u{48}" .
        "\u{AA2}\u{A}\u{48}\u{C}\u{48}\u{E}\u{48}\u{AA5}\u{B}\u{48}\u{3}\u{49}" .
        "\u{3}\u{49}\u{3}\u{49}\u{3}\u{49}\u{3}\u{49}\u{3}\u{49}\u{3}\u{49}" .
        "\u{3}\u{49}\u{3}\u{4A}\u{3}\u{4A}\u{3}\u{4A}\u{5}\u{4A}\u{AB2}\u{A}" .
        "\u{4A}\u{3}\u{4A}\u{3}\u{4A}\u{3}\u{4B}\u{3}\u{4B}\u{3}\u{4B}\u{5}" .
        "\u{4B}\u{AB9}\u{A}\u{4B}\u{3}\u{4B}\u{3}\u{4B}\u{3}\u{4C}\u{3}\u{4C}" .
        "\u{3}\u{4C}\u{5}\u{4C}\u{AC0}\u{A}\u{4C}\u{3}\u{4C}\u{3}\u{4C}\u{3}" .
        "\u{4D}\u{3}\u{4D}\u{5}\u{4D}\u{AC6}\u{A}\u{4D}\u{3}\u{4D}\u{3}\u{4D}" .
        "\u{5}\u{4D}\u{ACA}\u{A}\u{4D}\u{3}\u{4D}\u{3}\u{4D}\u{5}\u{4D}\u{ACE}" .
        "\u{A}\u{4D}\u{3}\u{4E}\u{3}\u{4E}\u{3}\u{4E}\u{3}\u{4E}\u{3}\u{4E}" .
        "\u{5}\u{4E}\u{AD5}\u{A}\u{4E}\u{3}\u{4E}\u{5}\u{4E}\u{AD8}\u{A}\u{4E}" .
        "\u{3}\u{4F}\u{3}\u{4F}\u{3}\u{4F}\u{5}\u{4F}\u{ADD}\u{A}\u{4F}\u{3}" .
        "\u{4F}\u{3}\u{4F}\u{3}\u{50}\u{3}\u{50}\u{3}\u{50}\u{5}\u{50}\u{AE4}" .
        "\u{A}\u{50}\u{3}\u{50}\u{3}\u{50}\u{3}\u{50}\u{7}\u{50}\u{AE9}\u{A}" .
        "\u{50}\u{C}\u{50}\u{E}\u{50}\u{AEC}\u{B}\u{50}\u{3}\u{50}\u{5}\u{50}" .
        "\u{AEF}\u{A}\u{50}\u{3}\u{51}\u{3}\u{51}\u{3}\u{51}\u{3}\u{51}\u{3}" .
        "\u{51}\u{7}\u{51}\u{AF6}\u{A}\u{51}\u{C}\u{51}\u{E}\u{51}\u{AF9}\u{B}" .
        "\u{51}\u{3}\u{52}\u{3}\u{52}\u{3}\u{52}\u{3}\u{52}\u{3}\u{53}\u{3}" .
        "\u{53}\u{5}\u{53}\u{B01}\u{A}\u{53}\u{3}\u{53}\u{3}\u{53}\u{3}\u{54}" .
        "\u{3}\u{54}\u{3}\u{54}\u{3}\u{54}\u{3}\u{54}\u{5}\u{54}\u{B0A}\u{A}" .
        "\u{54}\u{3}\u{54}\u{5}\u{54}\u{B0D}\u{A}\u{54}\u{3}\u{55}\u{3}\u{55}" .
        "\u{5}\u{55}\u{B11}\u{A}\u{55}\u{3}\u{56}\u{3}\u{56}\u{3}\u{56}\u{3}" .
        "\u{57}\u{3}\u{57}\u{3}\u{57}\u{3}\u{57}\u{5}\u{57}\u{B1A}\u{A}\u{57}" .
        "\u{3}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B1E}\u{A}\u{58}\u{3}\u{58}\u{5}" .
        "\u{58}\u{B21}\u{A}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B24}\u{A}\u{58}\u{3}" .
        "\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{5}\u{58}\u{B2A}\u{A}\u{58}" .
        "\u{3}\u{58}\u{5}\u{58}\u{B2D}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}" .
        "\u{58}\u{3}\u{58}\u{5}\u{58}\u{B33}\u{A}\u{58}\u{3}\u{58}\u{3}\u{58}" .
        "\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{7}\u{58}\u{B3A}\u{A}\u{58}\u{C}" .
        "\u{58}\u{E}\u{58}\u{B3D}\u{B}\u{58}\u{5}\u{58}\u{B3F}\u{A}\u{58}\u{3}" .
        "\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}\u{58}\u{3}" .
        "\u{58}\u{7}\u{58}\u{B48}\u{A}\u{58}\u{C}\u{58}\u{E}\u{58}\u{B4B}\u{B}" .
        "\u{58}\u{5}\u{58}\u{B4D}\u{A}\u{58}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}" .
        "\u{5}\u{59}\u{B52}\u{A}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B55}\u{A}\u{59}" .
        "\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B5A}\u{A}\u{59}\u{3}" .
        "\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}" .
        "\u{59}\u{3}\u{59}\u{5}\u{59}\u{B64}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}" .
        "\u{3}\u{59}\u{5}\u{59}\u{B69}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{6}" .
        "\u{59}\u{B6D}\u{A}\u{59}\u{D}\u{59}\u{E}\u{59}\u{B6E}\u{5}\u{59}\u{B71}" .
        "\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{6}\u{59}\u{B75}\u{A}\u{59}\u{D}" .
        "\u{59}\u{E}\u{59}\u{B76}\u{5}\u{59}\u{B79}\u{A}\u{59}\u{3}\u{59}\u{3}" .
        "\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}\u{B7F}\u{A}\u{59}\u{3}\u{59}" .
        "\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{7}\u{59}\u{B85}\u{A}\u{59}\u{C}" .
        "\u{59}\u{E}\u{59}\u{B88}\u{B}\u{59}\u{3}\u{59}\u{3}\u{59}\u{5}\u{59}" .
        "\u{B8C}\u{A}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{3}\u{59}\u{7}" .
        "\u{59}\u{B92}\u{A}\u{59}\u{C}\u{59}\u{E}\u{59}\u{B95}\u{B}\u{59}\u{5}" .
        "\u{59}\u{B97}\u{A}\u{59}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{5}\u{5A}" .
        "\u{B9C}\u{A}\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{B9F}\u{A}\u{5A}\u{3}\u{5A}" .
        "\u{3}\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{BA4}\u{A}\u{5A}\u{3}\u{5A}\u{3}" .
        "\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{BAC}" .
        "\u{A}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}" .
        "\u{3}\u{5A}\u{5}\u{5A}\u{BB4}\u{A}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}" .
        "\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{BBA}\u{A}\u{5A}\u{3}\u{5A}\u{3}\u{5A}" .
        "\u{3}\u{5A}\u{3}\u{5A}\u{7}\u{5A}\u{BC0}\u{A}\u{5A}\u{C}\u{5A}\u{E}" .
        "\u{5A}\u{BC3}\u{B}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{5}\u{5A}\u{BC7}\u{A}" .
        "\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{3}\u{5A}\u{7}\u{5A}\u{BCD}" .
        "\u{A}\u{5A}\u{C}\u{5A}\u{E}\u{5A}\u{BD0}\u{B}\u{5A}\u{5}\u{5A}\u{BD2}" .
        "\u{A}\u{5A}\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BD6}\u{A}\u{5B}\u{3}" .
        "\u{5B}\u{5}\u{5B}\u{BD9}\u{A}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}" .
        "\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BE1}\u{A}\u{5B}\u{3}" .
        "\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{5}\u{5B}\u{BE7}\u{A}\u{5B}" .
        "\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{3}\u{5B}\u{7}\u{5B}" .
        "\u{BEE}\u{A}\u{5B}\u{C}\u{5B}\u{E}\u{5B}\u{BF1}\u{B}\u{5B}\u{5}\u{5B}" .
        "\u{BF3}\u{A}\u{5B}\u{3}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{BF7}\u{A}\u{5C}" .
        "\u{3}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{BFB}\u{A}\u{5C}\u{3}\u{5C}\u{3}" .
        "\u{5C}\u{6}\u{5C}\u{BFF}\u{A}\u{5C}\u{D}\u{5C}\u{E}\u{5C}\u{C00}\u{3}" .
        "\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{C05}\u{A}\u{5C}\u{3}\u{5C}\u{3}\u{5C}" .
        "\u{5}\u{5C}\u{C09}\u{A}\u{5C}\u{5}\u{5C}\u{C0B}\u{A}\u{5C}\u{3}\u{5C}" .
        "\u{5}\u{5C}\u{C0E}\u{A}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{C11}\u{A}\u{5C}" .
        "\u{3}\u{5C}\u{5}\u{5C}\u{C14}\u{A}\u{5C}\u{3}\u{5C}\u{3}\u{5C}\u{6}" .
        "\u{5C}\u{C18}\u{A}\u{5C}\u{D}\u{5C}\u{E}\u{5C}\u{C19}\u{3}\u{5C}\u{3}" .
        "\u{5C}\u{5}\u{5C}\u{C1E}\u{A}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{C21}\u{A}" .
        "\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{C24}\u{A}\u{5C}\u{3}\u{5C}\u{5}\u{5C}" .
        "\u{C27}\u{A}\u{5C}\u{3}\u{5C}\u{5}\u{5C}\u{C2A}\u{A}\u{5C}\u{5}\u{5C}" .
        "\u{C2C}\u{A}\u{5C}\u{3}\u{5D}\u{3}\u{5D}\u{5}\u{5D}\u{C30}\u{A}\u{5D}" .
        "\u{3}\u{5E}\u{3}\u{5E}\u{3}\u{5E}\u{3}\u{5E}\u{5}\u{5E}\u{C36}\u{A}" .
        "\u{5E}\u{3}\u{5E}\u{3}\u{5E}\u{3}\u{5E}\u{3}\u{5E}\u{5}\u{5E}\u{C3C}" .
        "\u{A}\u{5E}\u{3}\u{5E}\u{7}\u{5E}\u{C3F}\u{A}\u{5E}\u{C}\u{5E}\u{E}" .
        "\u{5E}\u{C42}\u{B}\u{5E}\u{5}\u{5E}\u{C44}\u{A}\u{5E}\u{3}\u{5F}\u{3}" .
        "\u{5F}\u{3}\u{5F}\u{3}\u{5F}\u{5}\u{5F}\u{C4A}\u{A}\u{5F}\u{3}\u{60}" .
        "\u{3}\u{60}\u{5}\u{60}\u{C4E}\u{A}\u{60}\u{3}\u{61}\u{3}\u{61}\u{3}" .
        "\u{61}\u{3}\u{61}\u{3}\u{61}\u{3}\u{61}\u{5}\u{61}\u{C56}\u{A}\u{61}" .
        "\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C5A}\u{A}\u{62}\u{3}\u{62}\u{5}" .
        "\u{62}\u{C5D}\u{A}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C60}\u{A}\u{62}\u{3}" .
        "\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}\u{62}\u{3}" .
        "\u{62}\u{5}\u{62}\u{C69}\u{A}\u{62}\u{3}\u{62}\u{3}\u{62}\u{5}\u{62}" .
        "\u{C6D}\u{A}\u{62}\u{3}\u{62}\u{5}\u{62}\u{C70}\u{A}\u{62}\u{3}\u{62}" .
        "\u{3}\u{62}\u{5}\u{62}\u{C74}\u{A}\u{62}\u{3}\u{63}\u{3}\u{63}\u{5}" .
        "\u{63}\u{C78}\u{A}\u{63}\u{3}\u{63}\u{5}\u{63}\u{C7B}\u{A}\u{63}\u{3}" .
        "\u{63}\u{5}\u{63}\u{C7E}\u{A}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}" .
        "\u{5}\u{63}\u{C83}\u{A}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}" .
        "\u{63}\u{5}\u{63}\u{C89}\u{A}\u{63}\u{7}\u{63}\u{C8B}\u{A}\u{63}\u{C}" .
        "\u{63}\u{E}\u{63}\u{C8E}\u{B}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}" .
        "\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{5}\u{63}\u{C97}\u{A}" .
        "\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{5}\u{63}\u{C9D}" .
        "\u{A}\u{63}\u{7}\u{63}\u{C9F}\u{A}\u{63}\u{C}\u{63}\u{E}\u{63}\u{CA2}" .
        "\u{B}\u{63}\u{3}\u{63}\u{3}\u{63}\u{3}\u{63}\u{5}\u{63}\u{CA7}\u{A}" .
        "\u{63}\u{3}\u{63}\u{3}\u{63}\u{5}\u{63}\u{CAB}\u{A}\u{63}\u{3}\u{64}" .
        "\u{3}\u{64}\u{3}\u{64}\u{3}\u{64}\u{5}\u{64}\u{CB1}\u{A}\u{64}\u{3}" .
        "\u{64}\u{5}\u{64}\u{CB4}\u{A}\u{64}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}" .
        "\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}\u{3}\u{65}" .
        "\u{3}\u{65}\u{5}\u{65}\u{CC0}\u{A}\u{65}\u{3}\u{65}\u{3}\u{65}\u{5}" .
        "\u{65}\u{CC4}\u{A}\u{65}\u{3}\u{65}\u{3}\u{65}\u{5}\u{65}\u{CC8}\u{A}" .
        "\u{65}\u{3}\u{66}\u{3}\u{66}\u{3}\u{66}\u{3}\u{66}\u{3}\u{66}\u{3}" .
        "\u{66}\u{5}\u{66}\u{CD0}\u{A}\u{66}\u{3}\u{66}\u{3}\u{66}\u{5}\u{66}" .
        "\u{CD4}\u{A}\u{66}\u{3}\u{67}\u{3}\u{67}\u{3}\u{67}\u{3}\u{67}\u{3}" .
        "\u{68}\u{3}\u{68}\u{5}\u{68}\u{CDC}\u{A}\u{68}\u{3}\u{68}\u{5}\u{68}" .
        "\u{CDF}\u{A}\u{68}\u{3}\u{68}\u{3}\u{68}\u{5}\u{68}\u{CE3}\u{A}\u{68}" .
        "\u{3}\u{68}\u{5}\u{68}\u{CE6}\u{A}\u{68}\u{3}\u{68}\u{3}\u{68}\u{3}" .
        "\u{68}\u{3}\u{68}\u{7}\u{68}\u{CEC}\u{A}\u{68}\u{C}\u{68}\u{E}\u{68}" .
        "\u{CEF}\u{B}\u{68}\u{3}\u{68}\u{3}\u{68}\u{5}\u{68}\u{CF3}\u{A}\u{68}" .
        "\u{3}\u{68}\u{5}\u{68}\u{CF6}\u{A}\u{68}\u{3}\u{68}\u{5}\u{68}\u{CF9}" .
        "\u{A}\u{68}\u{3}\u{69}\u{3}\u{69}\u{5}\u{69}\u{CFD}\u{A}\u{69}\u{3}" .
        "\u{69}\u{5}\u{69}\u{D00}\u{A}\u{69}\u{3}\u{69}\u{3}\u{69}\u{3}\u{69}" .
        "\u{3}\u{69}\u{3}\u{69}\u{7}\u{69}\u{D07}\u{A}\u{69}\u{C}\u{69}\u{E}" .
        "\u{69}\u{D0A}\u{B}\u{69}\u{3}\u{69}\u{3}\u{69}\u{5}\u{69}\u{D0E}\u{A}" .
        "\u{69}\u{3}\u{6A}\u{3}\u{6A}\u{3}\u{6A}\u{3}\u{6A}\u{3}\u{6A}\u{7}" .
        "\u{6A}\u{D15}\u{A}\u{6A}\u{C}\u{6A}\u{E}\u{6A}\u{D18}\u{B}\u{6A}\u{3}" .
        "\u{6B}\u{3}\u{6B}\u{5}\u{6B}\u{D1C}\u{A}\u{6B}\u{3}\u{6C}\u{3}\u{6C}" .
        "\u{3}\u{6C}\u{7}\u{6C}\u{D21}\u{A}\u{6C}\u{C}\u{6C}\u{E}\u{6C}\u{D24}" .
        "\u{B}\u{6C}\u{3}\u{6D}\u{3}\u{6D}\u{7}\u{6D}\u{D28}\u{A}\u{6D}\u{C}" .
        "\u{6D}\u{E}\u{6D}\u{D2B}\u{B}\u{6D}\u{3}\u{6D}\u{3}\u{6D}\u{3}\u{6D}" .
        "\u{7}\u{6D}\u{D30}\u{A}\u{6D}\u{C}\u{6D}\u{E}\u{6D}\u{D33}\u{B}\u{6D}" .
        "\u{3}\u{6D}\u{3}\u{6D}\u{5}\u{6D}\u{D37}\u{A}\u{6D}\u{3}\u{6E}\u{3}" .
        "\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{5}\u{6E}\u{D3F}" .
        "\u{A}\u{6E}\u{3}\u{6E}\u{5}\u{6E}\u{D42}\u{A}\u{6E}\u{3}\u{6E}\u{5}" .
        "\u{6E}\u{D45}\u{A}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{7}\u{6E}" .
        "\u{D4A}\u{A}\u{6E}\u{C}\u{6E}\u{E}\u{6E}\u{D4D}\u{B}\u{6E}\u{5}\u{6E}" .
        "\u{D4F}\u{A}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}" .
        "\u{6E}\u{5}\u{6E}\u{D56}\u{A}\u{6E}\u{3}\u{6E}\u{5}\u{6E}\u{D59}\u{A}" .
        "\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}\u{6E}\u{3}" .
        "\u{6E}\u{5}\u{6E}\u{D61}\u{A}\u{6E}\u{3}\u{6F}\u{3}\u{6F}\u{3}\u{6F}" .
        "\u{3}\u{6F}\u{5}\u{6F}\u{D67}\u{A}\u{6F}\u{3}\u{6F}\u{3}\u{6F}\u{3}" .
        "\u{6F}\u{3}\u{6F}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}\u{70}\u{3}" .
        "\u{70}\u{5}\u{70}\u{D72}\u{A}\u{70}\u{3}\u{71}\u{5}\u{71}\u{D75}\u{A}" .
        "\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}" .
        "\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{5}\u{71}\u{D80}\u{A}\u{71}" .
        "\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{5}\u{71}\u{D86}\u{A}" .
        "\u{71}\u{3}\u{71}\u{3}\u{71}\u{5}\u{71}\u{D8A}\u{A}\u{71}\u{3}\u{71}" .
        "\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}\u{3}\u{71}" .
        "\u{3}\u{71}\u{3}\u{71}\u{5}\u{71}\u{D95}\u{A}\u{71}\u{3}\u{71}\u{3}" .
        "\u{71}\u{3}\u{71}\u{5}\u{71}\u{D9A}\u{A}\u{71}\u{5}\u{71}\u{D9C}\u{A}" .
        "\u{71}\u{3}\u{71}\u{3}\u{71}\u{5}\u{71}\u{DA0}\u{A}\u{71}\u{3}\u{72}" .
        "\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}\u{3}\u{72}" .
        "\u{3}\u{72}\u{5}\u{72}\u{DAA}\u{A}\u{72}\u{3}\u{73}\u{3}\u{73}\u{3}" .
        "\u{73}\u{3}\u{73}\u{3}\u{73}\u{3}\u{73}\u{3}\u{73}\u{3}\u{73}\u{5}" .
        "\u{73}\u{DB4}\u{A}\u{73}\u{3}\u{74}\u{3}\u{74}\u{7}\u{74}\u{DB8}\u{A}" .
        "\u{74}\u{C}\u{74}\u{E}\u{74}\u{DBB}\u{B}\u{74}\u{3}\u{74}\u{3}\u{74}" .
        "\u{5}\u{74}\u{DBF}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DC2}\u{A}\u{74}" .
        "\u{3}\u{74}\u{5}\u{74}\u{DC5}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DC8}" .
        "\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DCB}\u{A}\u{74}\u{3}\u{74}\u{5}" .
        "\u{74}\u{DCE}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DD1}\u{A}\u{74}\u{3}" .
        "\u{74}\u{3}\u{74}\u{7}\u{74}\u{DD5}\u{A}\u{74}\u{C}\u{74}\u{E}\u{74}" .
        "\u{DD8}\u{B}\u{74}\u{3}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DDC}\u{A}\u{74}" .
        "\u{3}\u{74}\u{5}\u{74}\u{DDF}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DE2}" .
        "\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DE5}\u{A}\u{74}\u{3}\u{74}\u{5}" .
        "\u{74}\u{DE8}\u{A}\u{74}\u{3}\u{74}\u{5}\u{74}\u{DEB}\u{A}\u{74}\u{3}" .
        "\u{74}\u{5}\u{74}\u{DEE}\u{A}\u{74}\u{5}\u{74}\u{DF0}\u{A}\u{74}\u{3}" .
        "\u{75}\u{3}\u{75}\u{7}\u{75}\u{DF4}\u{A}\u{75}\u{C}\u{75}\u{E}\u{75}" .
        "\u{DF7}\u{B}\u{75}\u{3}\u{75}\u{3}\u{75}\u{5}\u{75}\u{DFB}\u{A}\u{75}" .
        "\u{3}\u{75}\u{5}\u{75}\u{DFE}\u{A}\u{75}\u{3}\u{75}\u{5}\u{75}\u{E01}" .
        "\u{A}\u{75}\u{3}\u{75}\u{5}\u{75}\u{E04}\u{A}\u{75}\u{3}\u{75}\u{5}" .
        "\u{75}\u{E07}\u{A}\u{75}\u{3}\u{75}\u{5}\u{75}\u{E0A}\u{A}\u{75}\u{3}" .
        "\u{76}\u{3}\u{76}\u{5}\u{76}\u{E0E}\u{A}\u{76}\u{3}\u{76}\u{3}\u{76}" .
        "\u{3}\u{77}\u{3}\u{77}\u{5}\u{77}\u{E14}\u{A}\u{77}\u{3}\u{77}\u{3}" .
        "\u{77}\u{5}\u{77}\u{E18}\u{A}\u{77}\u{3}\u{78}\u{3}\u{78}\u{3}\u{78}" .
        "\u{3}\u{78}\u{3}\u{78}\u{3}\u{78}\u{3}\u{78}\u{3}\u{78}\u{5}\u{78}" .
        "\u{E22}\u{A}\u{78}\u{3}\u{79}\u{3}\u{79}\u{5}\u{79}\u{E26}\u{A}\u{79}" .
        "\u{3}\u{79}\u{3}\u{79}\u{7}\u{79}\u{E2A}\u{A}\u{79}\u{C}\u{79}\u{E}" .
        "\u{79}\u{E2D}\u{B}\u{79}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{3}\u{7A}" .
        "\u{3}\u{7A}\u{3}\u{7A}\u{5}\u{7A}\u{E35}\u{A}\u{7A}\u{3}\u{7A}\u{5}" .
        "\u{7A}\u{E38}\u{A}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{5}\u{7A}\u{E3C}\u{A}" .
        "\u{7A}\u{3}\u{7A}\u{5}\u{7A}\u{E3F}\u{A}\u{7A}\u{3}\u{7A}\u{3}\u{7A}" .
        "\u{5}\u{7A}\u{E43}\u{A}\u{7A}\u{3}\u{7A}\u{3}\u{7A}\u{5}\u{7A}\u{E47}" .
        "\u{A}\u{7A}\u{3}\u{7A}\u{5}\u{7A}\u{E4A}\u{A}\u{7A}\u{5}\u{7A}\u{E4C}" .
        "\u{A}\u{7A}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{7}\u{7B}" .
        "\u{E52}\u{A}\u{7B}\u{C}\u{7B}\u{E}\u{7B}\u{E55}\u{B}\u{7B}\u{3}\u{7B}" .
        "\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{3}\u{7B}" .
        "\u{3}\u{7B}\u{3}\u{7B}\u{5}\u{7B}\u{E60}\u{A}\u{7B}\u{3}\u{7B}\u{3}" .
        "\u{7B}\u{6}\u{7B}\u{E64}\u{A}\u{7B}\u{D}\u{7B}\u{E}\u{7B}\u{E65}\u{5}" .
        "\u{7B}\u{E68}\u{A}\u{7B}\u{3}\u{7B}\u{3}\u{7B}\u{6}\u{7B}\u{E6C}\u{A}" .
        "\u{7B}\u{D}\u{7B}\u{E}\u{7B}\u{E6D}\u{5}\u{7B}\u{E70}\u{A}\u{7B}\u{5}" .
        "\u{7B}\u{E72}\u{A}\u{7B}\u{3}\u{7C}\u{3}\u{7C}\u{3}\u{7C}\u{3}\u{7C}" .
        "\u{5}\u{7C}\u{E78}\u{A}\u{7C}\u{3}\u{7C}\u{3}\u{7C}\u{3}\u{7C}\u{3}" .
        "\u{7C}\u{3}\u{7C}\u{3}\u{7C}\u{5}\u{7C}\u{E80}\u{A}\u{7C}\u{3}\u{7D}" .
        "\u{3}\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{3}\u{7D}\u{5}\u{7D}" .
        "\u{E88}\u{A}\u{7D}\u{3}\u{7E}\u{3}\u{7E}\u{5}\u{7E}\u{E8C}\u{A}\u{7E}" .
        "\u{3}\u{7E}\u{3}\u{7E}\u{5}\u{7E}\u{E90}\u{A}\u{7E}\u{3}\u{7F}\u{3}" .
        "\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{7}\u{7F}\u{E97}\u{A}\u{7F}" .
        "\u{C}\u{7F}\u{E}\u{7F}\u{E9A}\u{B}\u{7F}\u{3}\u{7F}\u{3}\u{7F}\u{5}" .
        "\u{7F}\u{E9E}\u{A}\u{7F}\u{3}\u{80}\u{3}\u{80}\u{3}\u{80}\u{3}\u{81}" .
        "\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}" .
        "\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}\u{3}\u{81}" .
        "\u{7}\u{81}\u{EB0}\u{A}\u{81}\u{C}\u{81}\u{E}\u{81}\u{EB3}\u{B}\u{81}" .
        "\u{3}\u{82}\u{3}\u{82}\u{5}\u{82}\u{EB7}\u{A}\u{82}\u{3}\u{83}\u{3}" .
        "\u{83}\u{3}\u{83}\u{3}\u{83}\u{5}\u{83}\u{EBD}\u{A}\u{83}\u{3}\u{83}" .
        "\u{3}\u{83}\u{3}\u{83}\u{3}\u{83}\u{3}\u{83}\u{5}\u{83}\u{EC4}\u{A}" .
        "\u{83}\u{3}\u{84}\u{3}\u{84}\u{3}\u{84}\u{5}\u{84}\u{EC9}\u{A}\u{84}" .
        "\u{3}\u{85}\u{3}\u{85}\u{3}\u{85}\u{3}\u{85}\u{3}\u{85}\u{7}\u{85}" .
        "\u{ED0}\u{A}\u{85}\u{C}\u{85}\u{E}\u{85}\u{ED3}\u{B}\u{85}\u{5}\u{85}" .
        "\u{ED5}\u{A}\u{85}\u{3}\u{86}\u{3}\u{86}\u{5}\u{86}\u{ED9}\u{A}\u{86}" .
        "\u{3}\u{87}\u{3}\u{87}\u{5}\u{87}\u{EDD}\u{A}\u{87}\u{3}\u{87}\u{3}" .
        "\u{87}\u{5}\u{87}\u{EE1}\u{A}\u{87}\u{3}\u{87}\u{5}\u{87}\u{EE4}\u{A}" .
        "\u{87}\u{3}\u{87}\u{5}\u{87}\u{EE7}\u{A}\u{87}\u{3}\u{87}\u{5}\u{87}" .
        "\u{EEA}\u{A}\u{87}\u{3}\u{88}\u{3}\u{88}\u{5}\u{88}\u{EEE}\u{A}\u{88}" .
        "\u{3}\u{88}\u{3}\u{88}\u{5}\u{88}\u{EF2}\u{A}\u{88}\u{3}\u{88}\u{5}" .
        "\u{88}\u{EF5}\u{A}\u{88}\u{3}\u{88}\u{5}\u{88}\u{EF8}\u{A}\u{88}\u{3}" .
        "\u{88}\u{5}\u{88}\u{EFB}\u{A}\u{88}\u{3}\u{89}\u{3}\u{89}\u{3}\u{89}" .
        "\u{3}\u{8A}\u{3}\u{8A}\u{5}\u{8A}\u{F02}\u{A}\u{8A}\u{3}\u{8A}\u{3}" .
        "\u{8A}\u{5}\u{8A}\u{F06}\u{A}\u{8A}\u{3}\u{8A}\u{3}\u{8A}\u{3}\u{8B}" .
        "\u{3}\u{8B}\u{3}\u{8B}\u{3}\u{8B}\u{3}\u{8C}\u{3}\u{8C}\u{3}\u{8C}" .
        "\u{3}\u{8C}\u{3}\u{8C}\u{7}\u{8C}\u{F13}\u{A}\u{8C}\u{C}\u{8C}\u{E}" .
        "\u{8C}\u{F16}\u{B}\u{8C}\u{3}\u{8D}\u{3}\u{8D}\u{3}\u{8D}\u{3}\u{8E}" .
        "\u{3}\u{8E}\u{3}\u{8E}\u{3}\u{8E}\u{3}\u{8E}\u{3}\u{8F}\u{3}\u{8F}" .
        "\u{5}\u{8F}\u{F22}\u{A}\u{8F}\u{3}\u{8F}\u{3}\u{8F}\u{3}\u{8F}\u{3}" .
        "\u{8F}\u{7}\u{8F}\u{F28}\u{A}\u{8F}\u{C}\u{8F}\u{E}\u{8F}\u{F2B}\u{B}" .
        "\u{8F}\u{3}\u{90}\u{3}\u{90}\u{3}\u{90}\u{3}\u{90}\u{3}\u{90}\u{3}" .
        "\u{90}\u{3}\u{90}\u{5}\u{90}\u{F34}\u{A}\u{90}\u{3}\u{91}\u{3}\u{91}" .
        "\u{5}\u{91}\u{F38}\u{A}\u{91}\u{3}\u{91}\u{5}\u{91}\u{F3B}\u{A}\u{91}" .
        "\u{3}\u{91}\u{3}\u{91}\u{3}\u{92}\u{3}\u{92}\u{5}\u{92}\u{F41}\u{A}" .
        "\u{92}\u{3}\u{92}\u{5}\u{92}\u{F44}\u{A}\u{92}\u{3}\u{92}\u{5}\u{92}" .
        "\u{F47}\u{A}\u{92}\u{3}\u{93}\u{3}\u{93}\u{3}\u{93}\u{3}\u{93}\u{3}" .
        "\u{93}\u{3}\u{93}\u{3}\u{93}\u{5}\u{93}\u{F50}\u{A}\u{93}\u{3}\u{94}" .
        "\u{3}\u{94}\u{3}\u{94}\u{3}\u{94}\u{3}\u{94}\u{3}\u{94}\u{3}\u{94}" .
        "\u{5}\u{94}\u{F59}\u{A}\u{94}\u{3}\u{95}\u{3}\u{95}\u{3}\u{95}\u{3}" .
        "\u{95}\u{3}\u{95}\u{3}\u{95}\u{7}\u{95}\u{F61}\u{A}\u{95}\u{C}\u{95}" .
        "\u{E}\u{95}\u{F64}\u{B}\u{95}\u{3}\u{95}\u{5}\u{95}\u{F67}\u{A}\u{95}" .
        "\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}\u{3}\u{96}" .
        "\u{7}\u{96}\u{F6F}\u{A}\u{96}\u{C}\u{96}\u{E}\u{96}\u{F72}\u{B}\u{96}" .
        "\u{3}\u{97}\u{3}\u{97}\u{3}\u{97}\u{3}\u{97}\u{3}\u{97}\u{3}\u{97}" .
        "\u{3}\u{97}\u{5}\u{97}\u{F7B}\u{A}\u{97}\u{3}\u{98}\u{3}\u{98}\u{3}" .
        "\u{98}\u{3}\u{99}\u{3}\u{99}\u{3}\u{99}\u{5}\u{99}\u{F83}\u{A}\u{99}" .
        "\u{3}\u{99}\u{5}\u{99}\u{F86}\u{A}\u{99}\u{3}\u{9A}\u{3}\u{9A}\u{3}" .
        "\u{9A}\u{3}\u{9A}\u{3}\u{9A}\u{7}\u{9A}\u{F8D}\u{A}\u{9A}\u{C}\u{9A}" .
        "\u{E}\u{9A}\u{F90}\u{B}\u{9A}\u{5}\u{9A}\u{F92}\u{A}\u{9A}\u{3}\u{9A}" .
        "\u{3}\u{9A}\u{5}\u{9A}\u{F96}\u{A}\u{9A}\u{3}\u{9A}\u{7}\u{9A}\u{F99}" .
        "\u{A}\u{9A}\u{C}\u{9A}\u{E}\u{9A}\u{F9C}\u{B}\u{9A}\u{3}\u{9A}\u{5}" .
        "\u{9A}\u{F9F}\u{A}\u{9A}\u{3}\u{9B}\u{3}\u{9B}\u{3}\u{9B}\u{3}\u{9B}" .
        "\u{3}\u{9B}\u{7}\u{9B}\u{FA6}\u{A}\u{9B}\u{C}\u{9B}\u{E}\u{9B}\u{FA9}" .
        "\u{B}\u{9B}\u{5}\u{9B}\u{FAB}\u{A}\u{9B}\u{3}\u{9C}\u{3}\u{9C}\u{3}" .
        "\u{9C}\u{3}\u{9D}\u{3}\u{9D}\u{3}\u{9D}\u{3}\u{9E}\u{3}\u{9E}\u{3}" .
        "\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}" .
        "\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}" .
        "\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}\u{9E}\u{3}" .
        "\u{9E}\u{7}\u{9E}\u{FC8}\u{A}\u{9E}\u{C}\u{9E}\u{E}\u{9E}\u{FCB}\u{B}" .
        "\u{9E}\u{5}\u{9E}\u{FCD}\u{A}\u{9E}\u{3}\u{9E}\u{5}\u{9E}\u{FD0}\u{A}" .
        "\u{9E}\u{3}\u{9F}\u{3}\u{9F}\u{3}\u{A0}\u{3}\u{A0}\u{3}\u{A1}\u{3}" .
        "\u{A1}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A2}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{3}\u{A3}\u{7}\u{A3}\u{1006}" .
        "\u{A}\u{A3}\u{C}\u{A3}\u{E}\u{A3}\u{1009}\u{B}\u{A3}\u{3}\u{A3}\u{3}" .
        "\u{A3}\u{5}\u{A3}\u{100D}\u{A}\u{A3}\u{3}\u{A4}\u{3}\u{A4}\u{3}\u{A4}" .
        "\u{3}\u{A4}\u{3}\u{A4}\u{3}\u{A4}\u{3}\u{A5}\u{3}\u{A5}\u{3}\u{A6}" .
        "\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}" .
        "\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}" .
        "\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{3}\u{A6}\u{5}\u{A6}" .
        "\u{1029}\u{A}\u{A6}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}" .
        "\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}\u{A7}\u{3}" .
        "\u{A7}\u{3}\u{A7}\u{5}\u{A7}\u{1037}\u{A}\u{A7}\u{3}\u{A8}\u{3}\u{A8}" .
        "\u{3}\u{A8}\u{7}\u{A8}\u{103C}\u{A}\u{A8}\u{C}\u{A8}\u{E}\u{A8}\u{103F}" .
        "\u{B}\u{A8}\u{3}\u{A8}\u{5}\u{A8}\u{1042}\u{A}\u{A8}\u{3}\u{A9}\u{3}" .
        "\u{A9}\u{3}\u{A9}\u{3}\u{A9}\u{5}\u{A9}\u{1048}\u{A}\u{A9}\u{3}\u{AA}" .
        "\u{3}\u{AA}\u{3}\u{AA}\u{3}\u{AA}\u{3}\u{AA}\u{3}\u{AA}\u{5}\u{AA}" .
        "\u{1050}\u{A}\u{AA}\u{5}\u{AA}\u{1052}\u{A}\u{AA}\u{3}\u{AB}\u{3}" .
        "\u{AB}\u{3}\u{AB}\u{3}\u{AB}\u{3}\u{AC}\u{3}\u{AC}\u{3}\u{AC}\u{3}" .
        "\u{AC}\u{3}\u{AC}\u{5}\u{AC}\u{105D}\u{A}\u{AC}\u{3}\u{AD}\u{3}\u{AD}" .
        "\u{3}\u{AD}\u{3}\u{AD}\u{3}\u{AE}\u{3}\u{AE}\u{3}\u{AE}\u{3}\u{AE}" .
        "\u{5}\u{AE}\u{1067}\u{A}\u{AE}\u{3}\u{AF}\u{3}\u{AF}\u{3}\u{AF}\u{3}" .
        "\u{AF}\u{3}\u{AF}\u{5}\u{AF}\u{106E}\u{A}\u{AF}\u{3}\u{B0}\u{3}\u{B0}" .
        "\u{3}\u{B0}\u{3}\u{B0}\u{5}\u{B0}\u{1074}\u{A}\u{B0}\u{3}\u{B1}\u{3}" .
        "\u{B1}\u{3}\u{B1}\u{3}\u{B1}\u{3}\u{B2}\u{3}\u{B2}\u{5}\u{B2}\u{107C}" .
        "\u{A}\u{B2}\u{3}\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{5}\u{B3}\u{1081}\u{A}" .
        "\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{7}\u{B3}\u{1087}" .
        "\u{A}\u{B3}\u{C}\u{B3}\u{E}\u{B3}\u{108A}\u{B}\u{B3}\u{3}\u{B3}\u{3}" .
        "\u{B3}\u{3}\u{B3}\u{7}\u{B3}\u{108F}\u{A}\u{B3}\u{C}\u{B3}\u{E}\u{B3}" .
        "\u{1092}\u{B}\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{3}\u{B3}\u{7}\u{B3}\u{1097}" .
        "\u{A}\u{B3}\u{C}\u{B3}\u{E}\u{B3}\u{109A}\u{B}\u{B3}\u{3}\u{B3}\u{3}" .
        "\u{B3}\u{3}\u{B3}\u{7}\u{B3}\u{109F}\u{A}\u{B3}\u{C}\u{B3}\u{E}\u{B3}" .
        "\u{10A2}\u{B}\u{B3}\u{3}\u{B3}\u{7}\u{B3}\u{10A5}\u{A}\u{B3}\u{C}" .
        "\u{B3}\u{E}\u{B3}\u{10A8}\u{B}\u{B3}\u{5}\u{B3}\u{10AA}\u{A}\u{B3}" .
        "\u{3}\u{B3}\u{3}\u{B3}\u{5}\u{B3}\u{10AE}\u{A}\u{B3}\u{3}\u{B4}\u{3}" .
        "\u{B4}\u{3}\u{B4}\u{5}\u{B4}\u{10B3}\u{A}\u{B4}\u{3}\u{B4}\u{6}\u{B4}" .
        "\u{10B6}\u{A}\u{B4}\u{D}\u{B4}\u{E}\u{B4}\u{10B7}\u{3}\u{B4}\u{3}" .
        "\u{B4}\u{6}\u{B4}\u{10BC}\u{A}\u{B4}\u{D}\u{B4}\u{E}\u{B4}\u{10BD}" .
        "\u{5}\u{B4}\u{10C0}\u{A}\u{B4}\u{3}\u{B4}\u{3}\u{B4}\u{3}\u{B4}\u{3}" .
        "\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{6}\u{B5}\u{10C9}\u{A}\u{B5}" .
        "\u{D}\u{B5}\u{E}\u{B5}\u{10CA}\u{3}\u{B5}\u{7}\u{B5}\u{10CE}\u{A}" .
        "\u{B5}\u{C}\u{B5}\u{E}\u{B5}\u{10D1}\u{B}\u{B5}\u{3}\u{B5}\u{3}\u{B5}" .
        "\u{6}\u{B5}\u{10D5}\u{A}\u{B5}\u{D}\u{B5}\u{E}\u{B5}\u{10D6}\u{5}" .
        "\u{B5}\u{10D9}\u{A}\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{3}\u{B5}\u{3}\u{B6}" .
        "\u{3}\u{B6}\u{3}\u{B6}\u{3}\u{B7}\u{3}\u{B7}\u{3}\u{B7}\u{3}\u{B8}" .
        "\u{3}\u{B8}\u{3}\u{B8}\u{5}\u{B8}\u{10E7}\u{A}\u{B8}\u{3}\u{B8}\u{3}" .
        "\u{B8}\u{6}\u{B8}\u{10EB}\u{A}\u{B8}\u{D}\u{B8}\u{E}\u{B8}\u{10EC}" .
        "\u{3}\u{B8}\u{3}\u{B8}\u{3}\u{B8}\u{5}\u{B8}\u{10F2}\u{A}\u{B8}\u{3}" .
        "\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{5}\u{B9}\u{10F7}\u{A}\u{B9}\u{3}\u{B9}" .
        "\u{3}\u{B9}\u{6}\u{B9}\u{10FB}\u{A}\u{B9}\u{D}\u{B9}\u{E}\u{B9}\u{10FC}" .
        "\u{3}\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{3}\u{B9}\u{5}\u{B9}" .
        "\u{1104}\u{A}\u{B9}\u{3}\u{BA}\u{3}\u{BA}\u{3}\u{BA}\u{3}\u{BB}\u{3}" .
        "\u{BB}\u{3}\u{BB}\u{5}\u{BB}\u{110C}\u{A}\u{BB}\u{3}\u{BB}\u{3}\u{BB}" .
        "\u{3}\u{BB}\u{3}\u{BB}\u{6}\u{BB}\u{1112}\u{A}\u{BB}\u{D}\u{BB}\u{E}" .
        "\u{BB}\u{1113}\u{3}\u{BB}\u{3}\u{BB}\u{3}\u{BB}\u{5}\u{BB}\u{1119}" .
        "\u{A}\u{BB}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{5}\u{BC}" .
        "\u{111F}\u{A}\u{BC}\u{3}\u{BC}\u{5}\u{BC}\u{1122}\u{A}\u{BC}\u{3}" .
        "\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{3}\u{BC}\u{5}" .
        "\u{BC}\u{112A}\u{A}\u{BC}\u{3}\u{BD}\u{3}\u{BD}\u{3}\u{BD}\u{3}\u{BD}" .
        "\u{3}\u{BD}\u{5}\u{BD}\u{1131}\u{A}\u{BD}\u{3}\u{BE}\u{3}\u{BE}\u{3}" .
        "\u{BE}\u{3}\u{BE}\u{3}\u{BE}\u{3}\u{BE}\u{3}\u{BE}\u{5}\u{BE}\u{113A}" .
        "\u{A}\u{BE}\u{3}\u{BE}\u{5}\u{BE}\u{113D}\u{A}\u{BE}\u{3}\u{BF}\u{3}" .
        "\u{BF}\u{3}\u{BF}\u{3}\u{BF}\u{3}\u{BF}\u{3}\u{BF}\u{3}\u{C0}\u{3}" .
        "\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C0}\u{7}" .
        "\u{C0}\u{114C}\u{A}\u{C0}\u{C}\u{C0}\u{E}\u{C0}\u{114F}\u{B}\u{C0}" .
        "\u{3}\u{C0}\u{3}\u{C0}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{5}\u{C1}" .
        "\u{1156}\u{A}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}\u{C1}\u{3}" .
        "\u{C1}\u{3}\u{C1}\u{5}\u{C1}\u{115E}\u{A}\u{C1}\u{3}\u{C2}\u{3}\u{C2}" .
        "\u{5}\u{C2}\u{1162}\u{A}\u{C2}\u{3}\u{C2}\u{3}\u{C2}\u{3}\u{C3}\u{3}" .
        "\u{C3}\u{3}\u{C3}\u{5}\u{C3}\u{1169}\u{A}\u{C3}\u{3}\u{C3}\u{3}\u{C3}" .
        "\u{6}\u{C3}\u{116D}\u{A}\u{C3}\u{D}\u{C3}\u{E}\u{C3}\u{116E}\u{3}" .
        "\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{3}\u{C4}\u{6}\u{C4}\u{1175}\u{A}\u{C4}" .
        "\u{D}\u{C4}\u{E}\u{C4}\u{1176}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}" .
        "\u{C5}\u{3}\u{C5}\u{7}\u{C5}\u{117E}\u{A}\u{C5}\u{C}\u{C5}\u{E}\u{C5}" .
        "\u{1181}\u{B}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{5}\u{C5}\u{1186}" .
        "\u{A}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{7}\u{C5}\u{118B}\u{A}" .
        "\u{C5}\u{C}\u{C5}\u{E}\u{C5}\u{118E}\u{B}\u{C5}\u{3}\u{C5}\u{3}\u{C5}" .
        "\u{3}\u{C5}\u{3}\u{C5}\u{5}\u{C5}\u{1194}\u{A}\u{C5}\u{3}\u{C5}\u{7}" .
        "\u{C5}\u{1197}\u{A}\u{C5}\u{C}\u{C5}\u{E}\u{C5}\u{119A}\u{B}\u{C5}" .
        "\u{5}\u{C5}\u{119C}\u{A}\u{C5}\u{5}\u{C5}\u{119E}\u{A}\u{C5}\u{3}" .
        "\u{C5}\u{3}\u{C5}\u{6}\u{C5}\u{11A2}\u{A}\u{C5}\u{D}\u{C5}\u{E}\u{C5}" .
        "\u{11A3}\u{5}\u{C5}\u{11A6}\u{A}\u{C5}\u{3}\u{C5}\u{3}\u{C5}\u{7}" .
        "\u{C5}\u{11AA}\u{A}\u{C5}\u{C}\u{C5}\u{E}\u{C5}\u{11AD}\u{B}\u{C5}" .
        "\u{5}\u{C5}\u{11AF}\u{A}\u{C5}\u{3}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{3}" .
        "\u{C6}\u{3}\u{C6}\u{7}\u{C6}\u{11B6}\u{A}\u{C6}\u{C}\u{C6}\u{E}\u{C6}" .
        "\u{11B9}\u{B}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{5}\u{C6}\u{11BE}" .
        "\u{A}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{7}\u{C6}\u{11C3}\u{A}" .
        "\u{C6}\u{C}\u{C6}\u{E}\u{C6}\u{11C6}\u{B}\u{C6}\u{3}\u{C6}\u{3}\u{C6}" .
        "\u{3}\u{C6}\u{3}\u{C6}\u{5}\u{C6}\u{11CC}\u{A}\u{C6}\u{3}\u{C6}\u{7}" .
        "\u{C6}\u{11CF}\u{A}\u{C6}\u{C}\u{C6}\u{E}\u{C6}\u{11D2}\u{B}\u{C6}" .
        "\u{5}\u{C6}\u{11D4}\u{A}\u{C6}\u{5}\u{C6}\u{11D6}\u{A}\u{C6}\u{3}" .
        "\u{C6}\u{3}\u{C6}\u{6}\u{C6}\u{11DA}\u{A}\u{C6}\u{D}\u{C6}\u{E}\u{C6}" .
        "\u{11DB}\u{5}\u{C6}\u{11DE}\u{A}\u{C6}\u{3}\u{C6}\u{3}\u{C6}\u{7}" .
        "\u{C6}\u{11E2}\u{A}\u{C6}\u{C}\u{C6}\u{E}\u{C6}\u{11E5}\u{B}\u{C6}" .
        "\u{5}\u{C6}\u{11E7}\u{A}\u{C6}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{5}" .
        "\u{C7}\u{11EC}\u{A}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{3}\u{C7}\u{7}\u{C7}" .
        "\u{11F1}\u{A}\u{C7}\u{C}\u{C7}\u{E}\u{C7}\u{11F4}\u{B}\u{C7}\u{3}" .
        "\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{7}\u{C8}\u{11FA}\u{A}\u{C8}" .
        "\u{C}\u{C8}\u{E}\u{C8}\u{11FD}\u{B}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}" .
        "\u{C8}\u{1201}\u{A}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}" .
        "\u{3}\u{C8}\u{7}\u{C8}\u{1208}\u{A}\u{C8}\u{C}\u{C8}\u{E}\u{C8}\u{120B}" .
        "\u{B}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}" .
        "\u{1211}\u{A}\u{C8}\u{3}\u{C8}\u{7}\u{C8}\u{1214}\u{A}\u{C8}\u{C}" .
        "\u{C8}\u{E}\u{C8}\u{1217}\u{B}\u{C8}\u{5}\u{C8}\u{1219}\u{A}\u{C8}" .
        "\u{5}\u{C8}\u{121B}\u{A}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}" .
        "\u{C8}\u{7}\u{C8}\u{1221}\u{A}\u{C8}\u{C}\u{C8}\u{E}\u{C8}\u{1224}" .
        "\u{B}\u{C8}\u{5}\u{C8}\u{1226}\u{A}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}" .
        "\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{122E}\u{A}\u{C8}" .
        "\u{3}\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{1233}\u{A}\u{C8}\u{3}" .
        "\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{1238}\u{A}\u{C8}\u{7}\u{C8}" .
        "\u{123A}\u{A}\u{C8}\u{C}\u{C8}\u{E}\u{C8}\u{123D}\u{B}\u{C8}\u{3}" .
        "\u{C8}\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{1242}\u{A}\u{C8}\u{3}\u{C8}" .
        "\u{3}\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{1247}\u{A}\u{C8}\u{7}\u{C8}\u{1249}" .
        "\u{A}\u{C8}\u{C}\u{C8}\u{E}\u{C8}\u{124C}\u{B}\u{C8}\u{3}\u{C8}\u{3}" .
        "\u{C8}\u{3}\u{C8}\u{5}\u{C8}\u{1251}\u{A}\u{C8}\u{5}\u{C8}\u{1253}" .
        "\u{A}\u{C8}\u{3}\u{C9}\u{3}\u{C9}\u{3}\u{C9}\u{3}\u{C9}\u{3}\u{C9}" .
        "\u{3}\u{C9}\u{3}\u{C9}\u{7}\u{C9}\u{125C}\u{A}\u{C9}\u{C}\u{C9}\u{E}" .
        "\u{C9}\u{125F}\u{B}\u{C9}\u{5}\u{C9}\u{1261}\u{A}\u{C9}\u{3}\u{C9}" .
        "\u{3}\u{C9}\u{3}\u{C9}\u{7}\u{C9}\u{1266}\u{A}\u{C9}\u{C}\u{C9}\u{E}" .
        "\u{C9}\u{1269}\u{B}\u{C9}\u{5}\u{C9}\u{126B}\u{A}\u{C9}\u{3}\u{CA}" .
        "\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}" .
        "\u{3}\u{CA}\u{7}\u{CA}\u{1275}\u{A}\u{CA}\u{C}\u{CA}\u{E}\u{CA}\u{1278}" .
        "\u{B}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{3}\u{CA}\u{5}\u{CA}\u{127D}\u{A}" .
        "\u{CA}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{3}\u{CB}\u{7}" .
        "\u{CB}\u{1284}\u{A}\u{CB}\u{C}\u{CB}\u{E}\u{CB}\u{1287}\u{B}\u{CB}" .
        "\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{7}\u{CC}\u{128D}\u{A}" .
        "\u{CC}\u{C}\u{CC}\u{E}\u{CC}\u{1290}\u{B}\u{CC}\u{3}\u{CC}\u{3}\u{CC}" .
        "\u{5}\u{CC}\u{1294}\u{A}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}" .
        "\u{CC}\u{3}\u{CC}\u{7}\u{CC}\u{129B}\u{A}\u{CC}\u{C}\u{CC}\u{E}\u{CC}" .
        "\u{129E}\u{B}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{5}\u{CC}\u{12A3}" .
        "\u{A}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}" .
        "\u{3}\u{CC}\u{3}\u{CC}\u{7}\u{CC}\u{12AC}\u{A}\u{CC}\u{C}\u{CC}\u{E}" .
        "\u{CC}\u{12AF}\u{B}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}" .
        "\u{7}\u{CC}\u{12B5}\u{A}\u{CC}\u{C}\u{CC}\u{E}\u{CC}\u{12B8}\u{B}" .
        "\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{5}\u{CC}\u{12BD}\u{A}\u{CC}" .
        "\u{3}\u{CC}\u{3}\u{CC}\u{3}\u{CC}\u{5}\u{CC}\u{12C2}\u{A}\u{CC}\u{7}" .
        "\u{CC}\u{12C4}\u{A}\u{CC}\u{C}\u{CC}\u{E}\u{CC}\u{12C7}\u{B}\u{CC}" .
        "\u{5}\u{CC}\u{12C9}\u{A}\u{CC}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}" .
        "\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{3}\u{CD}\u{7}\u{CD}\u{12D3}" .
        "\u{A}\u{CD}\u{C}\u{CD}\u{E}\u{CD}\u{12D6}\u{B}\u{CD}\u{3}\u{CE}\u{3}" .
        "\u{CE}\u{3}\u{CE}\u{3}\u{CE}\u{5}\u{CE}\u{12DC}\u{A}\u{CE}\u{3}\u{CE}" .
        "\u{3}\u{CE}\u{3}\u{CE}\u{5}\u{CE}\u{12E1}\u{A}\u{CE}\u{3}\u{CF}\u{3}" .
        "\u{CF}\u{3}\u{CF}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}" .
        "\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{5}" .
        "\u{D0}\u{12F0}\u{A}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}" .
        "\u{3}\u{D0}\u{5}\u{D0}\u{12F7}\u{A}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}" .
        "\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{3}\u{D0}\u{5}\u{D0}\u{12FF}\u{A}\u{D0}" .
        "\u{3}\u{D0}\u{5}\u{D0}\u{1302}\u{A}\u{D0}\u{3}\u{D1}\u{3}\u{D1}\u{3}" .
        "\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{3}\u{D1}\u{5}" .
        "\u{D1}\u{130C}\u{A}\u{D1}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}" .
        "\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{3}\u{D2}\u{5}\u{D2}\u{1316}\u{A}" .
        "\u{D2}\u{3}\u{D3}\u{3}\u{D3}\u{3}\u{D3}\u{3}\u{D3}\u{3}\u{D3}\u{3}" .
        "\u{D3}\u{3}\u{D3}\u{3}\u{D3}\u{5}\u{D3}\u{1320}\u{A}\u{D3}\u{3}\u{D4}" .
        "\u{3}\u{D4}\u{3}\u{D4}\u{3}\u{D5}\u{3}\u{D5}\u{3}\u{D5}\u{3}\u{D5}" .
        "\u{3}\u{D5}\u{5}\u{D5}\u{132A}\u{A}\u{D5}\u{3}\u{D6}\u{3}\u{D6}\u{5}" .
        "\u{D6}\u{132E}\u{A}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{5}\u{D6}\u{1332}" .
        "\u{A}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{5}\u{D6}\u{133C}\u{A}\u{D6}\u{3}" .
        "\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{5}\u{D6}\u{1341}\u{A}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}\u{3}\u{D6}" .
        "\u{3}\u{D6}\u{5}\u{D6}\u{137B}\u{A}\u{D6}\u{3}\u{D7}\u{3}\u{D7}\u{3}" .
        "\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}" .
        "\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}\u{D7}\u{3}" .
        "\u{D7}\u{3}\u{D7}\u{5}\u{D7}\u{138D}\u{A}\u{D7}\u{3}\u{D8}\u{3}\u{D8}" .
        "\u{3}\u{D8}\u{3}\u{D8}\u{3}\u{D9}\u{3}\u{D9}\u{5}\u{D9}\u{1395}\u{A}" .
        "\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}" .
        "\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{7}\u{D9}\u{139F}\u{A}\u{D9}\u{C}\u{D9}" .
        "\u{E}\u{D9}\u{13A2}\u{B}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}" .
        "\u{D9}\u{5}\u{D9}\u{13A8}\u{A}\u{D9}\u{5}\u{D9}\u{13AA}\u{A}\u{D9}" .
        "\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}\u{3}\u{D9}" .
        "\u{7}\u{D9}\u{13B2}\u{A}\u{D9}\u{C}\u{D9}\u{E}\u{D9}\u{13B5}\u{B}" .
        "\u{D9}\u{5}\u{D9}\u{13B7}\u{A}\u{D9}\u{3}\u{DA}\u{3}\u{DA}\u{3}\u{DA}" .
        "\u{3}\u{DA}\u{7}\u{DA}\u{13BD}\u{A}\u{DA}\u{C}\u{DA}\u{E}\u{DA}\u{13C0}" .
        "\u{B}\u{DA}\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}\u{3}\u{DB}\u{5}\u{DB}" .
        "\u{13C6}\u{A}\u{DB}\u{3}\u{DC}\u{3}\u{DC}\u{5}\u{DC}\u{13CA}\u{A}" .
        "\u{DC}\u{3}\u{DC}\u{3}\u{DC}\u{3}\u{DC}\u{3}\u{DD}\u{3}\u{DD}\u{5}" .
        "\u{DD}\u{13D1}\u{A}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{3}\u{DD}\u{5}\u{DD}" .
        "\u{13D6}\u{A}\u{DD}\u{3}\u{DD}\u{5}\u{DD}\u{13D9}\u{A}\u{DD}\u{3}" .
        "\u{DD}\u{5}\u{DD}\u{13DC}\u{A}\u{DD}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}" .
        "\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{3}\u{DE}\u{5}\u{DE}\u{13E5}\u{A}" .
        "\u{DE}\u{3}\u{DF}\u{3}\u{DF}\u{5}\u{DF}\u{13E9}\u{A}\u{DF}\u{3}\u{DF}" .
        "\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}\u{3}\u{DF}" .
        "\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}\u{3}\u{E0}" .
        "\u{3}\u{E1}\u{3}\u{E1}\u{3}\u{E1}\u{3}\u{E1}\u{3}\u{E2}\u{3}\u{E2}" .
        "\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}" .
        "\u{3}\u{E2}\u{7}\u{E2}\u{1405}\u{A}\u{E2}\u{C}\u{E2}\u{E}\u{E2}\u{1408}" .
        "\u{B}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{5}\u{E2}" .
        "\u{140E}\u{A}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{5}\u{E2}\u{1412}\u{A}" .
        "\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{5}" .
        "\u{E2}\u{1419}\u{A}\u{E2}\u{3}\u{E2}\u{5}\u{E2}\u{141C}\u{A}\u{E2}" .
        "\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}" .
        "\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}\u{3}\u{E2}" .
        "\u{7}\u{E2}\u{142A}\u{A}\u{E2}\u{C}\u{E2}\u{E}\u{E2}\u{142D}\u{B}" .
        "\u{E2}\u{5}\u{E2}\u{142F}\u{A}\u{E2}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}" .
        "\u{1439}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{143D}\u{A}" .
        "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{1443}" .
        "\u{A}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{1446}\u{A}\u{E3}\u{3}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{144B}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{5}\u{E3}\u{144F}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{1456}\u{A}\u{E3}\u{3}\u{E3}\u{5}\u{E3}" .
        "\u{1459}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}" .
        "\u{E3}\u{145F}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{5}\u{E3}\u{1477}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{1484}\u{A}\u{E3}\u{3}\u{E3}\u{5}\u{E3}" .
        "\u{1487}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{1491}\u{A}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{5}\u{E3}\u{1499}\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{149D}" .
        "\u{A}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{5}\u{E3}\u{14A4}\u{A}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{14A7}\u{A}" .
        "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{7}" .
        "\u{E3}\u{14AE}\u{A}\u{E3}\u{C}\u{E3}\u{E}\u{E3}\u{14B1}\u{B}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{14B6}\u{A}\u{E3}\u{3}" .
        "\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{14BC}\u{A}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}\u{3}\u{E3}" .
        "\u{3}\u{E3}\u{3}\u{E3}\u{5}\u{E3}\u{14C6}\u{A}\u{E3}\u{5}\u{E3}\u{14C8}" .
        "\u{A}\u{E3}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{3}\u{E4}\u{5}\u{E4}" .
        "\u{14CE}\u{A}\u{E4}\u{3}\u{E4}\u{5}\u{E4}\u{14D1}\u{A}\u{E4}\u{3}" .
        "\u{E4}\u{5}\u{E4}\u{14D4}\u{A}\u{E4}\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}" .
        "\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}\u{3}\u{E5}" .
        "\u{3}\u{E5}\u{5}\u{E5}\u{14E0}\u{A}\u{E5}\u{3}\u{E5}\u{5}\u{E5}\u{14E3}" .
        "\u{A}\u{E5}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{3}\u{E6}\u{5}\u{E6}" .
        "\u{14E9}\u{A}\u{E6}\u{3}\u{E7}\u{5}\u{E7}\u{14EC}\u{A}\u{E7}\u{3}" .
        "\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{5}" .
        "\u{E7}\u{14F4}\u{A}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}\u{3}\u{E7}" .
        "\u{3}\u{E7}\u{3}\u{E7}\u{5}\u{E7}\u{14FC}\u{A}\u{E7}\u{3}\u{E8}\u{3}" .
        "\u{E8}\u{3}\u{E8}\u{3}\u{E8}\u{5}\u{E8}\u{1502}\u{A}\u{E8}\u{3}\u{E8}" .
        "\u{3}\u{E8}\u{5}\u{E8}\u{1506}\u{A}\u{E8}\u{3}\u{E9}\u{3}\u{E9}\u{3}" .
        "\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}" .
        "\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{3}\u{E9}\u{5}\u{E9}\u{1514}\u{A}\u{E9}" .
        "\u{3}\u{EA}\u{3}\u{EA}\u{3}\u{EA}\u{3}\u{EB}\u{3}\u{EB}\u{3}\u{EB}" .
        "\u{3}\u{EB}\u{3}\u{EB}\u{7}\u{EB}\u{151E}\u{A}\u{EB}\u{C}\u{EB}\u{E}" .
        "\u{EB}\u{1521}\u{B}\u{EB}\u{3}\u{EB}\u{3}\u{EB}\u{3}\u{EB}\u{3}\u{EB}" .
        "\u{5}\u{EB}\u{1527}\u{A}\u{EB}\u{3}\u{EB}\u{5}\u{EB}\u{152A}\u{A}" .
        "\u{EB}\u{3}\u{EB}\u{3}\u{EB}\u{3}\u{EB}\u{3}\u{EC}\u{3}\u{EC}\u{5}" .
        "\u{EC}\u{1531}\u{A}\u{EC}\u{3}\u{EC}\u{3}\u{EC}\u{3}\u{EC}\u{7}\u{EC}" .
        "\u{1536}\u{A}\u{EC}\u{C}\u{EC}\u{E}\u{EC}\u{1539}\u{B}\u{EC}\u{3}" .
        "\u{ED}\u{3}\u{ED}\u{5}\u{ED}\u{153D}\u{A}\u{ED}\u{3}\u{ED}\u{6}\u{ED}" .
        "\u{1540}\u{A}\u{ED}\u{D}\u{ED}\u{E}\u{ED}\u{1541}\u{3}\u{EE}\u{3}" .
        "\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{3}\u{EE}\u{7}" .
        "\u{EE}\u{154B}\u{A}\u{EE}\u{C}\u{EE}\u{E}\u{EE}\u{154E}\u{B}\u{EE}" .
        "\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{EF}\u{3}\u{F0}\u{3}\u{F0}" .
        "\u{3}\u{F1}\u{3}\u{F1}\u{5}\u{F1}\u{1558}\u{A}\u{F1}\u{3}\u{F1}\u{3}" .
        "\u{F1}\u{3}\u{F1}\u{3}\u{F1}\u{5}\u{F1}\u{155E}\u{A}\u{F1}\u{3}\u{F2}" .
        "\u{3}\u{F2}\u{3}\u{F2}\u{5}\u{F2}\u{1563}\u{A}\u{F2}\u{3}\u{F2}\u{3}" .
        "\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}" .
        "\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{5}\u{F2}\u{1570}\u{A}\u{F2}" .
        "\u{5}\u{F2}\u{1572}\u{A}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{5}" .
        "\u{F2}\u{1577}\u{A}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{3}\u{F2}\u{5}\u{F2}" .
        "\u{157C}\u{A}\u{F2}\u{5}\u{F2}\u{157E}\u{A}\u{F2}\u{3}\u{F3}\u{3}" .
        "\u{F3}\u{3}\u{F3}\u{3}\u{F3}\u{3}\u{F3}\u{5}\u{F3}\u{1585}\u{A}\u{F3}" .
        "\u{3}\u{F4}\u{3}\u{F4}\u{3}\u{F4}\u{3}\u{F4}\u{3}\u{F4}\u{5}\u{F4}" .
        "\u{158C}\u{A}\u{F4}\u{3}\u{F4}\u{5}\u{F4}\u{158F}\u{A}\u{F4}\u{3}" .
        "\u{F4}\u{5}\u{F4}\u{1592}\u{A}\u{F4}\u{3}\u{F4}\u{3}\u{F4}\u{3}\u{F4}" .
        "\u{3}\u{F4}\u{5}\u{F4}\u{1598}\u{A}\u{F4}\u{3}\u{F4}\u{3}\u{F4}\u{5}" .
        "\u{F4}\u{159C}\u{A}\u{F4}\u{3}\u{F5}\u{3}\u{F5}\u{3}\u{F5}\u{3}\u{F5}" .
        "\u{5}\u{F5}\u{15A2}\u{A}\u{F5}\u{3}\u{F6}\u{3}\u{F6}\u{3}\u{F6}\u{3}" .
        "\u{F6}\u{5}\u{F6}\u{15A8}\u{A}\u{F6}\u{3}\u{F6}\u{3}\u{F6}\u{3}\u{F7}" .
        "\u{3}\u{F7}\u{3}\u{F7}\u{3}\u{F8}\u{3}\u{F8}\u{3}\u{F8}\u{3}\u{F9}" .
        "\u{3}\u{F9}\u{3}\u{F9}\u{5}\u{F9}\u{15B5}\u{A}\u{F9}\u{3}\u{F9}\u{3}" .
        "\u{F9}\u{3}\u{F9}\u{5}\u{F9}\u{15BA}\u{A}\u{F9}\u{3}\u{F9}\u{3}\u{F9}" .
        "\u{3}\u{F9}\u{3}\u{F9}\u{7}\u{F9}\u{15C0}\u{A}\u{F9}\u{C}\u{F9}\u{E}" .
        "\u{F9}\u{15C3}\u{B}\u{F9}\u{5}\u{F9}\u{15C5}\u{A}\u{F9}\u{3}\u{FA}" .
        "\u{3}\u{FA}\u{3}\u{FA}\u{5}\u{FA}\u{15CA}\u{A}\u{FA}\u{3}\u{FA}\u{3}" .
        "\u{FA}\u{3}\u{FA}\u{5}\u{FA}\u{15CF}\u{A}\u{FA}\u{3}\u{FA}\u{3}\u{FA}" .
        "\u{3}\u{FA}\u{3}\u{FA}\u{7}\u{FA}\u{15D5}\u{A}\u{FA}\u{C}\u{FA}\u{E}" .
        "\u{FA}\u{15D8}\u{B}\u{FA}\u{5}\u{FA}\u{15DA}\u{A}\u{FA}\u{3}\u{FB}" .
        "\u{3}\u{FB}\u{3}\u{FB}\u{3}\u{FB}\u{3}\u{FB}\u{3}\u{FB}\u{5}\u{FB}" .
        "\u{15E2}\u{A}\u{FB}\u{3}\u{FC}\u{3}\u{FC}\u{5}\u{FC}\u{15E6}\u{A}" .
        "\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}" .
        "\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{7}\u{FC}\u{15F1}\u{A}\u{FC}" .
        "\u{C}\u{FC}\u{E}\u{FC}\u{15F4}\u{B}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}" .
        "\u{FC}\u{5}\u{FC}\u{15F9}\u{A}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}" .
        "\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{3}\u{FC}\u{7}\u{FC}" .
        "\u{1603}\u{A}\u{FC}\u{C}\u{FC}\u{E}\u{FC}\u{1606}\u{B}\u{FC}\u{5}" .
        "\u{FC}\u{1608}\u{A}\u{FC}\u{3}\u{FD}\u{3}\u{FD}\u{3}\u{FE}\u{3}\u{FE}" .
        "\u{3}\u{FE}\u{3}\u{FE}\u{3}\u{FE}\u{5}\u{FE}\u{1611}\u{A}\u{FE}\u{3}" .
        "\u{FE}\u{3}\u{FE}\u{3}\u{FE}\u{5}\u{FE}\u{1616}\u{A}\u{FE}\u{3}\u{FF}" .
        "\u{3}\u{FF}\u{3}\u{FF}\u{3}\u{FF}\u{5}\u{FF}\u{161C}\u{A}\u{FF}\u{3}" .
        "\u{100}\u{3}\u{100}\u{3}\u{101}\u{3}\u{101}\u{3}\u{101}\u{5}\u{101}" .
        "\u{1623}\u{A}\u{101}\u{5}\u{101}\u{1625}\u{A}\u{101}\u{3}\u{101}\u{3}" .
        "\u{101}\u{3}\u{101}\u{5}\u{101}\u{162A}\u{A}\u{101}\u{5}\u{101}\u{162C}" .
        "\u{A}\u{101}\u{3}\u{102}\u{3}\u{102}\u{5}\u{102}\u{1630}\u{A}\u{102}" .
        "\u{3}\u{102}\u{3}\u{102}\u{3}\u{102}\u{3}\u{102}\u{5}\u{102}\u{1636}" .
        "\u{A}\u{102}\u{3}\u{102}\u{5}\u{102}\u{1639}\u{A}\u{102}\u{3}\u{102}" .
        "\u{5}\u{102}\u{163C}\u{A}\u{102}\u{3}\u{103}\u{3}\u{103}\u{3}\u{104}" .
        "\u{3}\u{104}\u{3}\u{105}\u{3}\u{105}\u{3}\u{105}\u{3}\u{105}\u{5}" .
        "\u{105}\u{1646}\u{A}\u{105}\u{3}\u{106}\u{3}\u{106}\u{5}\u{106}\u{164A}" .
        "\u{A}\u{106}\u{3}\u{107}\u{3}\u{107}\u{3}\u{108}\u{3}\u{108}\u{3}" .
        "\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}" .
        "\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}\u{108}\u{3}" .
        "\u{108}\u{6}\u{108}\u{165C}\u{A}\u{108}\u{D}\u{108}\u{E}\u{108}\u{165D}" .
        "\u{3}\u{109}\u{3}\u{109}\u{3}\u{109}\u{3}\u{109}\u{3}\u{109}\u{5}" .
        "\u{109}\u{1665}\u{A}\u{109}\u{5}\u{109}\u{1667}\u{A}\u{109}\u{3}\u{10A}" .
        "\u{3}\u{10A}\u{3}\u{10A}\u{6}\u{10A}\u{166C}\u{A}\u{10A}\u{D}\u{10A}" .
        "\u{E}\u{10A}\u{166D}\u{5}\u{10A}\u{1670}\u{A}\u{10A}\u{3}\u{10B}\u{3}" .
        "\u{10B}\u{5}\u{10B}\u{1674}\u{A}\u{10B}\u{3}\u{10C}\u{3}\u{10C}\u{3}" .
        "\u{10C}\u{5}\u{10C}\u{1679}\u{A}\u{10C}\u{3}\u{10D}\u{3}\u{10D}\u{3}" .
        "\u{10D}\u{3}\u{10D}\u{3}\u{10D}\u{3}\u{10D}\u{3}\u{10D}\u{3}\u{10D}" .
        "\u{3}\u{10D}\u{5}\u{10D}\u{1684}\u{A}\u{10D}\u{3}\u{10E}\u{3}\u{10E}" .
        "\u{3}\u{10E}\u{5}\u{10E}\u{1689}\u{A}\u{10E}\u{3}\u{10F}\u{3}\u{10F}" .
        "\u{3}\u{110}\u{3}\u{110}\u{5}\u{110}\u{168F}\u{A}\u{110}\u{3}\u{111}" .
        "\u{5}\u{111}\u{1692}\u{A}\u{111}\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}" .
        "\u{1696}\u{A}\u{111}\u{3}\u{111}\u{6}\u{111}\u{1699}\u{A}\u{111}\u{D}" .
        "\u{111}\u{E}\u{111}\u{169A}\u{3}\u{111}\u{5}\u{111}\u{169E}\u{A}\u{111}" .
        "\u{3}\u{111}\u{3}\u{111}\u{5}\u{111}\u{16A2}\u{A}\u{111}\u{3}\u{111}" .
        "\u{3}\u{111}\u{5}\u{111}\u{16A6}\u{A}\u{111}\u{5}\u{111}\u{16A8}\u{A}" .
        "\u{111}\u{3}\u{112}\u{3}\u{112}\u{3}\u{113}\u{5}\u{113}\u{16AD}\u{A}" .
        "\u{113}\u{3}\u{113}\u{3}\u{113}\u{3}\u{114}\u{5}\u{114}\u{16B2}\u{A}" .
        "\u{114}\u{3}\u{114}\u{3}\u{114}\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}" .
        "\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}\u{115}\u{3}" .
        "\u{115}\u{5}\u{115}\u{16BF}\u{A}\u{115}\u{3}\u{115}\u{5}\u{115}\u{16C2}" .
        "\u{A}\u{115}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16C6}\u{A}\u{116}" .
        "\u{3}\u{116}\u{5}\u{116}\u{16C9}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}" .
        "\u{16CC}\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}" .
        "\u{16D1}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16D4}\u{A}\u{116}\u{3}" .
        "\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16D9}\u{A}\u{116}\u{3}" .
        "\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16DE}\u{A}\u{116}\u{3}" .
        "\u{116}\u{5}\u{116}\u{16E1}\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}" .
        "\u{116}\u{5}\u{116}\u{16E6}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16E9}" .
        "\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}" .
        "\u{116}\u{16EF}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16F2}\u{A}\u{116}" .
        "\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16F6}\u{A}\u{116}\u{3}\u{116}" .
        "\u{5}\u{116}\u{16F9}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{16FC}\u{A}" .
        "\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{1700}\u{A}\u{116}\u{3}" .
        "\u{116}\u{5}\u{116}\u{1703}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{1706}" .
        "\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{170A}\u{A}\u{116}" .
        "\u{3}\u{116}\u{5}\u{116}\u{170D}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}" .
        "\u{1710}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{1713}\u{A}\u{116}\u{3}" .
        "\u{116}\u{3}\u{116}\u{5}\u{116}\u{1717}\u{A}\u{116}\u{3}\u{116}\u{5}" .
        "\u{116}\u{171A}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{171D}\u{A}\u{116}" .
        "\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{1722}\u{A}\u{116}" .
        "\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{1727}\u{A}\u{116}" .
        "\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}\u{172C}\u{A}\u{116}" .
        "\u{3}\u{116}\u{5}\u{116}\u{172F}\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}" .
        "\u{3}\u{116}\u{5}\u{116}\u{1734}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}" .
        "\u{1737}\u{A}\u{116}\u{3}\u{116}\u{3}\u{116}\u{3}\u{116}\u{5}\u{116}" .
        "\u{173C}\u{A}\u{116}\u{3}\u{116}\u{5}\u{116}\u{173F}\u{A}\u{116}\u{3}" .
        "\u{116}\u{3}\u{116}\u{5}\u{116}\u{1743}\u{A}\u{116}\u{3}\u{116}\u{3}" .
        "\u{116}\u{5}\u{116}\u{1747}\u{A}\u{116}\u{3}\u{117}\u{3}\u{117}\u{3}" .
        "\u{117}\u{3}\u{117}\u{7}\u{117}\u{174D}\u{A}\u{117}\u{C}\u{117}\u{E}" .
        "\u{117}\u{1750}\u{B}\u{117}\u{3}\u{117}\u{3}\u{117}\u{3}\u{118}\u{3}" .
        "\u{118}\u{5}\u{118}\u{1756}\u{A}\u{118}\u{3}\u{118}\u{3}\u{118}\u{5}" .
        "\u{118}\u{175A}\u{A}\u{118}\u{3}\u{118}\u{3}\u{118}\u{3}\u{118}\u{5}" .
        "\u{118}\u{175F}\u{A}\u{118}\u{3}\u{118}\u{5}\u{118}\u{1762}\u{A}\u{118}" .
        "\u{3}\u{118}\u{3}\u{118}\u{3}\u{118}\u{5}\u{118}\u{1767}\u{A}\u{118}" .
        "\u{3}\u{118}\u{3}\u{118}\u{5}\u{118}\u{176B}\u{A}\u{118}\u{5}\u{118}" .
        "\u{176D}\u{A}\u{118}\u{3}\u{118}\u{5}\u{118}\u{1770}\u{A}\u{118}\u{3}" .
        "\u{119}\u{3}\u{119}\u{3}\u{119}\u{3}\u{119}\u{3}\u{11A}\u{3}\u{11A}" .
        "\u{3}\u{11A}\u{3}\u{11A}\u{3}\u{11A}\u{3}\u{11A}\u{3}\u{11B}\u{3}" .
        "\u{11B}\u{3}\u{11B}\u{3}\u{11B}\u{5}\u{11B}\u{1780}\u{A}\u{11B}\u{3}" .
        "\u{11B}\u{3}\u{11B}\u{3}\u{11C}\u{3}\u{11C}\u{3}\u{11C}\u{7}\u{11C}" .
        "\u{1787}\u{A}\u{11C}\u{C}\u{11C}\u{E}\u{11C}\u{178A}\u{B}\u{11C}\u{3}" .
        "\u{11D}\u{3}\u{11D}\u{3}\u{11D}\u{7}\u{11D}\u{178F}\u{A}\u{11D}\u{C}" .
        "\u{11D}\u{E}\u{11D}\u{1792}\u{B}\u{11D}\u{3}\u{11E}\u{3}\u{11E}\u{3}" .
        "\u{11E}\u{7}\u{11E}\u{1797}\u{A}\u{11E}\u{C}\u{11E}\u{E}\u{11E}\u{179A}" .
        "\u{B}\u{11E}\u{3}\u{11F}\u{3}\u{11F}\u{3}\u{11F}\u{3}\u{11F}\u{7}" .
        "\u{11F}\u{17A0}\u{A}\u{11F}\u{C}\u{11F}\u{E}\u{11F}\u{17A3}\u{B}\u{11F}" .
        "\u{3}\u{11F}\u{3}\u{11F}\u{3}\u{120}\u{3}\u{120}\u{3}\u{120}\u{7}" .
        "\u{120}\u{17AA}\u{A}\u{120}\u{C}\u{120}\u{E}\u{120}\u{17AD}\u{B}\u{120}" .
        "\u{3}\u{121}\u{3}\u{121}\u{3}\u{121}\u{7}\u{121}\u{17B2}\u{A}\u{121}" .
        "\u{C}\u{121}\u{E}\u{121}\u{17B5}\u{B}\u{121}\u{3}\u{122}\u{3}\u{122}" .
        "\u{3}\u{122}\u{7}\u{122}\u{17BA}\u{A}\u{122}\u{C}\u{122}\u{E}\u{122}" .
        "\u{17BD}\u{B}\u{122}\u{3}\u{123}\u{3}\u{123}\u{3}\u{123}\u{7}\u{123}" .
        "\u{17C2}\u{A}\u{123}\u{C}\u{123}\u{E}\u{123}\u{17C5}\u{B}\u{123}\u{3}" .
        "\u{124}\u{3}\u{124}\u{3}\u{124}\u{7}\u{124}\u{17CA}\u{A}\u{124}\u{C}" .
        "\u{124}\u{E}\u{124}\u{17CD}\u{B}\u{124}\u{3}\u{125}\u{3}\u{125}\u{5}" .
        "\u{125}\u{17D1}\u{A}\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}\u{125}\u{3}" .
        "\u{125}\u{3}\u{125}\u{3}\u{125}\u{5}\u{125}\u{17D9}\u{A}\u{125}\u{3}" .
        "\u{125}\u{3}\u{125}\u{3}\u{125}\u{5}\u{125}\u{17DE}\u{A}\u{125}\u{3}" .
        "\u{126}\u{3}\u{126}\u{3}\u{126}\u{5}\u{126}\u{17E3}\u{A}\u{126}\u{3}" .
        "\u{126}\u{5}\u{126}\u{17E6}\u{A}\u{126}\u{3}\u{126}\u{3}\u{126}\u{3}" .
        "\u{126}\u{5}\u{126}\u{17EB}\u{A}\u{126}\u{3}\u{126}\u{5}\u{126}\u{17EE}" .
        "\u{A}\u{126}\u{3}\u{127}\u{3}\u{127}\u{5}\u{127}\u{17F2}\u{A}\u{127}" .
        "\u{3}\u{128}\u{3}\u{128}\u{3}\u{128}\u{3}\u{129}\u{3}\u{129}\u{3}" .
        "\u{129}\u{3}\u{129}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}" .
        "\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{1801}\u{A}\u{12A}\u{3}\u{12A}" .
        "\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{1808}" .
        "\u{A}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{3}\u{12A}\u{5}\u{12A}\u{180D}" .
        "\u{A}\u{12A}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1812}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{6}\u{12B}\u{1831}\u{A}\u{12B}\u{D}" .
        "\u{12B}\u{E}\u{12B}\u{1832}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1837}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{6}" .
        "\u{12B}\u{183D}\u{A}\u{12B}\u{D}\u{12B}\u{E}\u{12B}\u{183E}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{5}\u{12B}\u{1843}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}" .
        "\u{12B}\u{184C}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1854}\u{A}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1859}\u{A}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{5}\u{12B}\u{1861}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{5}\u{12B}\u{1866}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{5}\u{12B}\u{186B}\u{A}\u{12B}\u{5}\u{12B}\u{186D}\u{A}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{5}\u{12B}\u{1876}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{5}\u{12B}\u{187B}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1883}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1888}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{1890}\u{A}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}" .
        "\u{1898}\u{A}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{189B}\u{A}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{18A5}\u{A}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}" .
        "\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}" .
        "\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{18B7}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}" .
        "\u{12B}\u{18BD}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{18C1}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}" .
        "\u{12B}\u{18C7}\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{18CB}" .
        "\u{A}\u{12B}\u{3}\u{12B}\u{3}\u{12B}\u{5}\u{12B}\u{18CF}\u{A}\u{12B}" .
        "\u{3}\u{12C}\u{3}\u{12C}\u{3}\u{12C}\u{3}\u{12C}\u{3}\u{12C}\u{3}" .
        "\u{12D}\u{3}\u{12D}\u{3}\u{12D}\u{3}\u{12D}\u{7}\u{12D}\u{18DA}\u{A}" .
        "\u{12D}\u{C}\u{12D}\u{E}\u{12D}\u{18DD}\u{B}\u{12D}\u{3}\u{12D}\u{3}" .
        "\u{12D}\u{3}\u{12D}\u{3}\u{12D}\u{3}\u{12D}\u{5}\u{12D}\u{18E4}\u{A}" .
        "\u{12D}\u{3}\u{12E}\u{3}\u{12E}\u{5}\u{12E}\u{18E8}\u{A}\u{12E}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{18ED}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{18F2}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{18F8}\u{A}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{18FD}\u{A}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{1901}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{1906}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{190B}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{1910}\u{A}\u{12F}\u{3}" .
        "\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{3}\u{12F}" .
        "\u{7}\u{12F}\u{1918}\u{A}\u{12F}\u{C}\u{12F}\u{E}\u{12F}\u{191B}\u{B}" .
        "\u{12F}\u{5}\u{12F}\u{191D}\u{A}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}" .
        "\u{12F}\u{1921}\u{A}\u{12F}\u{3}\u{12F}\u{3}\u{12F}\u{5}\u{12F}\u{1925}" .
        "\u{A}\u{12F}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
        "\u{130}\u{5}\u{130}\u{192C}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{5}" .
        "\u{130}\u{1930}\u{A}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
        "\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}" .
        "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
        "\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}" .
        "\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}\u{130}\u{3}" .
        "\u{130}\u{3}\u{130}\u{5}\u{130}\u{194D}\u{A}\u{130}\u{3}\u{131}\u{3}" .
        "\u{131}\u{3}\u{131}\u{5}\u{131}\u{1952}\u{A}\u{131}\u{3}\u{131}\u{3}" .
        "\u{131}\u{5}\u{131}\u{1956}\u{A}\u{131}\u{3}\u{132}\u{5}\u{132}\u{1959}" .
        "\u{A}\u{132}\u{3}\u{132}\u{5}\u{132}\u{195C}\u{A}\u{132}\u{3}\u{132}" .
        "\u{5}\u{132}\u{195F}\u{A}\u{132}\u{3}\u{132}\u{5}\u{132}\u{1962}\u{A}" .
        "\u{132}\u{3}\u{133}\u{3}\u{133}\u{3}\u{134}\u{3}\u{134}\u{3}\u{134}" .
        "\u{3}\u{135}\u{3}\u{135}\u{3}\u{136}\u{3}\u{136}\u{5}\u{136}\u{196D}" .
        "\u{A}\u{136}\u{3}\u{137}\u{3}\u{137}\u{3}\u{137}\u{3}\u{137}\u{3}" .
        "\u{137}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}\u{3}\u{138}" .
        "\u{3}\u{138}\u{3}\u{138}\u{5}\u{138}\u{197B}\u{A}\u{138}\u{3}\u{139}" .
        "\u{3}\u{139}\u{3}\u{139}\u{3}\u{139}\u{3}\u{139}\u{7}\u{139}\u{1982}" .
        "\u{A}\u{139}\u{C}\u{139}\u{E}\u{139}\u{1985}\u{B}\u{139}\u{3}\u{13A}" .
        "\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}" .
        "\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}" .
        "\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}" .
        "\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}\u{3}\u{13A}" .
        "\u{5}\u{13A}\u{199E}\u{A}\u{13A}\u{3}\u{13B}\u{3}\u{13B}\u{3}\u{13B}" .
        "\u{3}\u{13B}\u{3}\u{13B}\u{3}\u{13C}\u{3}\u{13C}\u{3}\u{13C}\u{3}" .
        "\u{13C}\u{5}\u{13C}\u{19A9}\u{A}\u{13C}\u{3}\u{13C}\u{3}\u{13C}\u{3}" .
        "\u{13C}\u{3}\u{13C}\u{3}\u{13C}\u{5}\u{13C}\u{19B0}\u{A}\u{13C}\u{7}" .
        "\u{13C}\u{19B2}\u{A}\u{13C}\u{C}\u{13C}\u{E}\u{13C}\u{19B5}\u{B}\u{13C}" .
        "\u{3}\u{13D}\u{3}\u{13D}\u{3}\u{13D}\u{3}\u{13D}\u{5}\u{13D}\u{19BB}" .
        "\u{A}\u{13D}\u{3}\u{13E}\u{3}\u{13E}\u{3}\u{13E}\u{3}\u{13E}\u{3}" .
        "\u{13E}\u{3}\u{13E}\u{5}\u{13E}\u{19C3}\u{A}\u{13E}\u{3}\u{13E}\u{3}" .
        "\u{13E}\u{3}\u{13E}\u{5}\u{13E}\u{19C8}\u{A}\u{13E}\u{3}\u{13E}\u{3}" .
        "\u{13E}\u{3}\u{13E}\u{3}\u{13E}\u{7}\u{13E}\u{19CE}\u{A}\u{13E}\u{C}" .
        "\u{13E}\u{E}\u{13E}\u{19D1}\u{B}\u{13E}\u{3}\u{13F}\u{3}\u{13F}\u{3}" .
        "\u{13F}\u{5}\u{13F}\u{19D6}\u{A}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}" .
        "\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}" .
        "\u{5}\u{13F}\u{19E0}\u{A}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}" .
        "\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}" .
        "\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{5}\u{13F}\u{19ED}\u{A}\u{13F}\u{3}" .
        "\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{5}\u{13F}\u{19F3}\u{A}" .
        "\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{5}\u{13F}" .
        "\u{19F9}\u{A}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}" .
        "\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}" .
        "\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{5}\u{13F}" .
        "\u{1A09}\u{A}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}" .
        "\u{5}\u{13F}\u{1A0F}\u{A}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}" .
        "\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{3}\u{13F}\u{7}\u{13F}\u{1A18}" .
        "\u{A}\u{13F}\u{C}\u{13F}\u{E}\u{13F}\u{1A1B}\u{B}\u{13F}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}" .
        "\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{7}\u{140}\u{1A2B}\u{A}\u{140}\u{C}\u{140}" .
        "\u{E}\u{140}\u{1A2E}\u{B}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{6}\u{140}\u{1A37}" .
        "\u{A}\u{140}\u{D}\u{140}\u{E}\u{140}\u{1A38}\u{3}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}" .
        "\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{5}\u{140}\u{1A4A}\u{A}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}" .
        "\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}" .
        "\u{3}\u{140}\u{3}\u{140}\u{3}\u{140}\u{7}\u{140}\u{1A5B}\u{A}\u{140}" .
        "\u{C}\u{140}\u{E}\u{140}\u{1A5E}\u{B}\u{140}\u{3}\u{141}\u{3}\u{141}" .
        "\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}" .
        "\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}" .
        "\u{3}\u{142}\u{3}\u{142}\u{3}\u{142}\u{5}\u{142}\u{1A70}\u{A}\u{142}" .
        "\u{3}\u{143}\u{3}\u{143}\u{3}\u{143}\u{3}\u{143}\u{3}\u{143}\u{3}" .
        "\u{143}\u{3}\u{143}\u{5}\u{143}\u{1A79}\u{A}\u{143}\u{3}\u{144}\u{3}" .
        "\u{144}\u{3}\u{144}\u{3}\u{144}\u{3}\u{144}\u{3}\u{144}\u{3}\u{144}" .
        "\u{5}\u{144}\u{1A82}\u{A}\u{144}\u{3}\u{145}\u{3}\u{145}\u{3}\u{146}" .
        "\u{3}\u{146}\u{3}\u{146}\u{3}\u{146}\u{3}\u{146}\u{5}\u{146}\u{1A8B}" .
        "\u{A}\u{146}\u{3}\u{147}\u{3}\u{147}\u{3}\u{148}\u{3}\u{148}\u{3}" .
        "\u{149}\u{3}\u{149}\u{3}\u{14A}\u{3}\u{14A}\u{3}\u{14B}\u{3}\u{14B}" .
        "\u{3}\u{14C}\u{3}\u{14C}\u{3}\u{14D}\u{3}\u{14D}\u{3}\u{14D}\u{2}" .
        "\u{5}\u{27A}\u{27C}\u{27E}\u{14E}\u{2}\u{4}\u{6}\u{8}\u{A}\u{C}\u{E}" .
        "\u{10}\u{12}\u{14}\u{16}\u{18}\u{1A}\u{1C}\u{1E}\u{20}\u{22}\u{24}" .
        "\u{26}\u{28}\u{2A}\u{2C}\u{2E}\u{30}\u{32}\u{34}\u{36}\u{38}\u{3A}" .
        "\u{3C}\u{3E}\u{40}\u{42}\u{44}\u{46}\u{48}\u{4A}\u{4C}\u{4E}\u{50}" .
        "\u{52}\u{54}\u{56}\u{58}\u{5A}\u{5C}\u{5E}\u{60}\u{62}\u{64}\u{66}" .
        "\u{68}\u{6A}\u{6C}\u{6E}\u{70}\u{72}\u{74}\u{76}\u{78}\u{7A}\u{7C}" .
        "\u{7E}\u{80}\u{82}\u{84}\u{86}\u{88}\u{8A}\u{8C}\u{8E}\u{90}\u{92}" .
        "\u{94}\u{96}\u{98}\u{9A}\u{9C}\u{9E}\u{A0}\u{A2}\u{A4}\u{A6}\u{A8}" .
        "\u{AA}\u{AC}\u{AE}\u{B0}\u{B2}\u{B4}\u{B6}\u{B8}\u{BA}\u{BC}\u{BE}" .
        "\u{C0}\u{C2}\u{C4}\u{C6}\u{C8}\u{CA}\u{CC}\u{CE}\u{D0}\u{D2}\u{D4}" .
        "\u{D6}\u{D8}\u{DA}\u{DC}\u{DE}\u{E0}\u{E2}\u{E4}\u{E6}\u{E8}\u{EA}" .
        "\u{EC}\u{EE}\u{F0}\u{F2}\u{F4}\u{F6}\u{F8}\u{FA}\u{FC}\u{FE}\u{100}" .
        "\u{102}\u{104}\u{106}\u{108}\u{10A}\u{10C}\u{10E}\u{110}\u{112}\u{114}" .
        "\u{116}\u{118}\u{11A}\u{11C}\u{11E}\u{120}\u{122}\u{124}\u{126}\u{128}" .
        "\u{12A}\u{12C}\u{12E}\u{130}\u{132}\u{134}\u{136}\u{138}\u{13A}\u{13C}" .
        "\u{13E}\u{140}\u{142}\u{144}\u{146}\u{148}\u{14A}\u{14C}\u{14E}\u{150}" .
        "\u{152}\u{154}\u{156}\u{158}\u{15A}\u{15C}\u{15E}\u{160}\u{162}\u{164}" .
        "\u{166}\u{168}\u{16A}\u{16C}\u{16E}\u{170}\u{172}\u{174}\u{176}\u{178}" .
        "\u{17A}\u{17C}\u{17E}\u{180}\u{182}\u{184}\u{186}\u{188}\u{18A}\u{18C}" .
        "\u{18E}\u{190}\u{192}\u{194}\u{196}\u{198}\u{19A}\u{19C}\u{19E}\u{1A0}" .
        "\u{1A2}\u{1A4}\u{1A6}\u{1A8}\u{1AA}\u{1AC}\u{1AE}\u{1B0}\u{1B2}\u{1B4}" .
        "\u{1B6}\u{1B8}\u{1BA}\u{1BC}\u{1BE}\u{1C0}\u{1C2}\u{1C4}\u{1C6}\u{1C8}" .
        "\u{1CA}\u{1CC}\u{1CE}\u{1D0}\u{1D2}\u{1D4}\u{1D6}\u{1D8}\u{1DA}\u{1DC}" .
        "\u{1DE}\u{1E0}\u{1E2}\u{1E4}\u{1E6}\u{1E8}\u{1EA}\u{1EC}\u{1EE}\u{1F0}" .
        "\u{1F2}\u{1F4}\u{1F6}\u{1F8}\u{1FA}\u{1FC}\u{1FE}\u{200}\u{202}\u{204}" .
        "\u{206}\u{208}\u{20A}\u{20C}\u{20E}\u{210}\u{212}\u{214}\u{216}\u{218}" .
        "\u{21A}\u{21C}\u{21E}\u{220}\u{222}\u{224}\u{226}\u{228}\u{22A}\u{22C}" .
        "\u{22E}\u{230}\u{232}\u{234}\u{236}\u{238}\u{23A}\u{23C}\u{23E}\u{240}" .
        "\u{242}\u{244}\u{246}\u{248}\u{24A}\u{24C}\u{24E}\u{250}\u{252}\u{254}" .
        "\u{256}\u{258}\u{25A}\u{25C}\u{25E}\u{260}\u{262}\u{264}\u{266}\u{268}" .
        "\u{26A}\u{26C}\u{26E}\u{270}\u{272}\u{274}\u{276}\u{278}\u{27A}\u{27C}" .
        "\u{27E}\u{280}\u{282}\u{284}\u{286}\u{288}\u{28A}\u{28C}\u{28E}\u{290}" .
        "\u{292}\u{294}\u{296}\u{298}\u{2}\u{88}\u{4}\u{2}\u{27}\u{27}\u{90}" .
        "\u{90}\u{4}\u{2}\u{1F9}\u{1F9}\u{1FF}\u{1FF}\u{5}\u{2}\u{44}\u{44}" .
        "\u{97}\u{97}\u{AC}\u{AC}\u{5}\u{2}\u{2A}\u{2A}\u{173}\u{173}\u{1B3}" .
        "\u{1B3}\u{6}\u{2}\u{2A}\u{2A}\u{193}\u{193}\u{1F7}\u{1F7}\u{241}\u{241}" .
        "\u{4}\u{2}\u{1EE}\u{1EE}\u{44D}\u{44D}\u{4}\u{2}\u{4D}\u{4D}\u{87}" .
        "\u{87}\u{4}\u{2}\u{10}\u{10}\u{142}\u{142}\u{5}\u{2}\u{2C}\u{2C}\u{53}" .
        "\u{53}\u{AF}\u{AF}\u{4}\u{2}\u{1A1}\u{1A1}\u{211}\u{211}\u{5}\u{2}" .
        "\u{1E6}\u{1E6}\u{268}\u{268}\u{270}\u{270}\u{4}\u{2}\u{17A}\u{17A}" .
        "\u{1B8}\u{1B8}\u{4}\u{2}\u{154}\u{154}\u{1C6}\u{1C6}\u{4}\u{2}\u{152}" .
        "\u{152}\u{1AA}\u{1AA}\u{5}\u{2}\u{4E}\u{4E}\u{52}\u{52}\u{77}\u{77}" .
        "\u{5}\u{2}\u{2A}\u{2A}\u{184}\u{184}\u{19E}\u{19E}\u{5}\u{2}\u{2A}" .
        "\u{2A}\u{180}\u{180}\u{2ED}\u{2ED}\u{4}\u{2}\u{25B}\u{25B}\u{27E}" .
        "\u{27E}\u{4}\u{2}\u{4F}\u{4F}\u{59}\u{59}\u{5}\u{2}\u{1A3}\u{1A3}" .
        "\u{208}\u{208}\u{243}\u{243}\u{4}\u{2}\u{44}\u{44}\u{97}\u{97}\u{3}" .
        "\u{2}\u{158}\u{159}\u{3}\u{2}\u{443}\u{444}\u{4}\u{2}\u{44D}\u{44D}" .
        "\u{455}\u{455}\u{5}\u{2}\u{19D}\u{19D}\u{1C1}\u{1C1}\u{1F5}\u{1F5}" .
        "\u{4}\u{2}\u{2A}\u{2A}\u{443}\u{444}\u{9}\u{2}\u{2A}\u{2A}\u{165}" .
        "\u{165}\u{167}\u{167}\u{184}\u{184}\u{19E}\u{19E}\u{21F}\u{21F}\u{455}" .
        "\u{455}\u{4}\u{2}\u{1EE}\u{1EE}\u{1F8}\u{1F8}\u{3}\u{2}\u{444}\u{445}" .
        "\u{4}\u{2}\u{7}\u{7}\u{33}\u{33}\u{4}\u{2}\u{1B}\u{1B}\u{1F}\u{1F}" .
        "\u{4}\u{2}\u{1B7}\u{1B7}\u{27F}\u{27F}\u{4}\u{2}\u{E}\u{E}\u{A6}\u{A6}" .
        "\u{4}\u{2}\u{B7}\u{B7}\u{283}\u{283}\u{4}\u{2}\u{16}\u{16}\u{8A}\u{8A}" .
        "\u{5}\u{2}\u{2B}\u{2B}\u{4A}\u{4A}\u{66}\u{66}\u{4}\u{2}\u{66}\u{66}" .
        "\u{169}\u{169}\u{4}\u{2}\u{160}\u{160}\u{19A}\u{19A}\u{4}\u{2}\u{62}" .
        "\u{62}\u{239}\u{239}\u{4}\u{2}\u{2B}\u{2B}\u{66}\u{66}\u{4}\u{2}\u{8}" .
        "\u{8}\u{31}\u{31}\u{4}\u{2}\u{B3}\u{B3}\u{27B}\u{27B}\u{6}\u{2}\u{19D}" .
        "\u{19D}\u{1C1}\u{1C1}\u{1F4}\u{1F4}\u{215}\u{215}\u{4}\u{2}\u{19D}" .
        "\u{19D}\u{1F4}\u{1F4}\u{4}\u{2}\u{F}\u{F}\u{2D}\u{2D}\u{5}\u{2}\u{41}" .
        "\u{41}\u{4D}\u{4D}\u{B1}\u{B1}\u{4}\u{2}\u{23}\u{23}\u{51}\u{51}\u{4}" .
        "\u{2}\u{5E}\u{5E}\u{8E}\u{8E}\u{4}\u{2}\u{8}\u{8}\u{31}\u{32}\u{3}" .
        "\u{2}\u{250}\u{251}\u{4}\u{2}\u{1A6}\u{1A6}\u{23F}\u{23F}\u{4}\u{2}" .
        "\u{D9}\u{D9}\u{1C9}\u{1C9}\u{7}\u{2}\u{67}\u{67}\u{1CE}\u{1CF}\u{1D1}" .
        "\u{1D1}\u{1D5}\u{1DD}\u{221}\u{221}\u{6}\u{2}\u{1CB}\u{1CC}\u{1D0}" .
        "\u{1D0}\u{1D2}\u{1D3}\u{222}\u{222}\u{5}\u{2}\u{68}\u{68}\u{1CA}\u{1CA}" .
        "\u{1D4}\u{1D4}\u{4}\u{2}\u{1BA}\u{1BA}\u{252}\u{252}\u{4}\u{2}\u{24C}" .
        "\u{24C}\u{24E}\u{24E}\u{4}\u{2}\u{14C}\u{14C}\u{253}\u{253}\u{4}\u{2}" .
        "\u{58}\u{58}\u{230}\u{230}\u{4}\u{2}\u{33}\u{33}\u{178}\u{178}\u{5}" .
        "\u{2}\u{20}\u{20}\u{3C}\u{3C}\u{AA}\u{AA}\u{5}\u{2}\u{7D}\u{7D}\u{A3}" .
        "\u{A3}\u{1A4}\u{1A4}\u{4}\u{2}\u{64}\u{64}\u{AD}\u{AD}\u{4}\u{2}\u{15C}" .
        "\u{15C}\u{244}\u{244}\u{4}\u{2}\u{28}\u{28}\u{27D}\u{27D}\u{4}\u{2}" .
        "\u{6E}\u{6E}\u{1C6}\u{1C6}\u{4}\u{2}\u{196}\u{196}\u{21B}\u{21B}\u{4}" .
        "\u{2}\u{A3}\u{A3}\u{296}\u{296}\u{6}\u{2}\u{C5}\u{C5}\u{C7}\u{C7}" .
        "\u{CD}\u{CD}\u{25C}\u{25C}\u{4}\u{2}\u{425}\u{425}\u{435}\u{435}\u{4}" .
        "\u{2}\u{14D}\u{14D}\u{223}\u{223}\u{4}\u{2}\u{43}\u{43}\u{4E}\u{4E}" .
        "\u{8}\u{2}\u{7D}\u{7D}\u{A3}\u{A3}\u{A8}\u{A8}\u{18F}\u{18F}\u{1A4}" .
        "\u{1A4}\u{27D}\u{27D}\u{4}\u{2}\u{1ED}\u{1ED}\u{258}\u{258}\u{4}\u{2}" .
        "\u{18C}\u{18C}\u{281}\u{281}\u{4}\u{2}\u{7D}\u{7D}\u{1A4}\u{1A4}\u{5}" .
        "\u{2}\u{4F}\u{4F}\u{5A}\u{5A}\u{1B1}\u{1B1}\u{5}\u{2}\u{1A6}\u{1A6}" .
        "\u{1C6}\u{1C6}\u{23F}\u{23F}\u{4}\u{2}\u{258}\u{258}\u{27C}\u{27C}" .
        "\u{4}\u{2}\u{16B}\u{16B}\u{21A}\u{21A}\u{8}\u{2}\u{D9}\u{D9}\u{189}" .
        "\u{189}\u{18B}\u{18B}\u{1A5}\u{1A5}\u{220}\u{220}\u{245}\u{245}\u{4}" .
        "\u{2}\u{2D}\u{2E}\u{3D}\u{3D}\u{5}\u{2}\u{196}\u{196}\u{20A}\u{20A}" .
        "\u{349}\u{349}\u{4}\u{2}\u{1BE}\u{1BE}\u{26A}\u{26A}\u{C}\u{2}\u{15B}" .
        "\u{15B}\u{162}\u{162}\u{16D}\u{16F}\u{175}\u{175}\u{1E7}\u{1E7}\u{1EF}" .
        "\u{1EF}\u{25D}\u{25D}\u{264}\u{264}\u{319}\u{319}\u{3BF}\u{3BF}\u{4}" .
        "\u{2}\u{24}\u{24}\u{A0}\u{A0}\u{4}\u{2}\u{70}\u{70}\u{3B7}\u{3B7}" .
        "\u{D}\u{2}\u{15B}\u{15B}\u{162}\u{162}\u{16D}\u{16F}\u{175}\u{175}" .
        "\u{1E7}\u{1E7}\u{1EF}\u{1EF}\u{231}\u{231}\u{25D}\u{25D}\u{264}\u{264}" .
        "\u{319}\u{319}\u{3BF}\u{3BF}\u{5}\u{2}\u{44D}\u{44D}\u{455}\u{455}" .
        "\u{457}\u{457}\u{3}\u{2}\u{459}\u{45A}\u{6}\u{2}\u{16A}\u{16A}\u{2E8}" .
        "\u{2F3}\u{44D}\u{44D}\u{455}\u{456}\u{5}\u{2}\u{443}\u{445}\u{44E}" .
        "\u{44E}\u{450}\u{450}\u{4}\u{2}\u{3E}\u{3E}\u{A9}\u{A9}\u{4}\u{2}" .
        "\u{6F}\u{6F}\u{451}\u{451}\u{7}\u{2}\u{1A}\u{1A}\u{D5}\u{D7}\u{DE}" .
        "\u{DE}\u{E0}\u{E3}\u{1F2}\u{1F2}\u{4}\u{2}\u{1A}\u{1A}\u{D6}\u{D6}" .
        "\u{4}\u{2}\u{1A}\u{1A}\u{D5}\u{D5}\u{3}\u{2}\u{BB}\u{C6}\u{4}\u{2}" .
        "\u{AE}\u{AE}\u{242}\u{242}\u{4}\u{2}\u{CA}\u{CF}\u{19E}\u{19E}\u{8}" .
        "\u{2}\u{D0}\u{D0}\u{DB}\u{DB}\u{DD}\u{DD}\u{DF}\u{DF}\u{E6}\u{E6}" .
        "\u{150}\u{151}\u{6}\u{2}\u{D1}\u{D4}\u{D9}\u{DA}\u{DC}\u{DC}\u{14E}" .
        "\u{14E}\u{4}\u{2}\u{93}\u{93}\u{E4}\u{E4}\u{4}\u{2}\u{1BE}\u{1BE}" .
        "\u{2F8}\u{300}\u{4}\u{2}\u{D9}\u{D9}\u{1F2}\u{1F2}\u{7}\u{2}\u{BF}" .
        "\u{BF}\u{C5}\u{C5}\u{D0}\u{D1}\u{D3}\u{D3}\u{1BE}\u{1BE}\u{4}\u{2}" .
        "\u{12F}\u{130}\u{136}\u{136}\u{4}\u{2}\u{25}\u{25}\u{12D}\u{130}\u{3}" .
        "\u{2}\u{139}\u{13A}\u{5}\u{2}\u{12}\u{12}\u{5C}\u{5C}\u{A7}\u{A7}" .
        "\u{4}\u{2}\u{D5}\u{D5}\u{D9}\u{D9}\u{4}\u{2}\u{D0}\u{D1}\u{D3}\u{D3}" .
        "\u{5}\u{2}\u{F}\u{F}\u{2D}\u{2D}\u{3B5}\u{3B5}\u{5}\u{2}\u{112}\u{112}" .
        "\u{11E}\u{11F}\u{129}\u{129}\u{5}\u{2}\u{113}\u{115}\u{125}\u{128}" .
        "\u{12A}\u{12C}\u{4}\u{2}\u{11B}\u{11B}\u{11D}\u{11D}\u{4}\u{2}\u{119}" .
        "\u{119}\u{11C}\u{11C}\u{4}\u{2}\u{117}\u{118}\u{122}\u{124}\u{4}\u{2}" .
        "\u{7F}\u{7F}\u{239}\u{239}\u{4}\u{2}\u{1A0}\u{1A0}\u{212}\u{212}\u{4}" .
        "\u{2}\u{1FD}\u{1FD}\u{20B}\u{20B}\u{4}\u{2}\u{6D}\u{6D}\u{438}\u{438}" .
        "\u{5}\u{2}\u{3E}\u{3E}\u{A9}\u{A9}\u{274}\u{274}\u{4}\u{2}\u{83}\u{83}" .
        "\u{8F}\u{8F}\u{5}\u{2}\u{8}\u{8}\u{145}\u{145}\u{248}\u{248}\u{5}" .
        "\u{2}\u{6D}\u{6D}\u{431}\u{432}\u{438}\u{439}\u{3}\u{2}\u{42E}\u{434}" .
        "\u{4}\u{2}\u{D9}\u{D9}\u{2BF}\u{2E7}\u{3}\u{2}\u{2F4}\u{2F7}\u{3}" .
        "\u{2}\u{296}\u{29E}\u{3}\u{2}\u{28E}\u{295}\u{5}\u{2}\u{D0}\u{D4}" .
        "\u{E1}\u{E1}\u{E4}\u{E4}\u{20}\u{2}\u{24}\u{24}\u{30}\u{30}\u{3A}" .
        "\u{3A}\u{48}\u{48}\u{70}\u{70}\u{76}\u{76}\u{A0}\u{A0}\u{E6}\u{E6}" .
        "\u{112}\u{116}\u{11A}\u{11A}\u{11E}\u{11F}\u{125}\u{12C}\u{140}\u{19F}" .
        "\u{1A1}\u{1B6}\u{1B8}\u{211}\u{213}\u{231}\u{233}\u{25A}\u{25C}\u{265}" .
        "\u{267}\u{26E}\u{270}\u{27D}\u{280}\u{281}\u{283}\u{28D}\u{2A0}\u{2A8}" .
        "\u{2AD}\u{2AE}\u{2B0}\u{2B6}\u{2B8}\u{2BE}\u{2ED}\u{2ED}\u{319}\u{319}" .
        "\u{3BF}\u{3BF}\u{45D}\u{45D}\u{14}\u{2}\u{27}\u{27}\u{5E}\u{5E}\u{8E}" .
        "\u{8E}\u{90}\u{90}\u{D0}\u{D2}\u{D4}\u{D4}\u{F2}\u{111}\u{116}\u{116}" .
        "\u{138}\u{138}\u{1B7}\u{1B7}\u{27F}\u{27F}\u{28E}\u{295}\u{2B8}\u{2B8}" .
        "\u{2F8}\u{2F8}\u{2FB}\u{318}\u{31A}\u{3BE}\u{3C0}\u{424}\u{434}\u{434}" .
        "\u{2}\u{1F48}\u{2}\u{29B}\u{3}\u{2}\u{2}\u{2}\u{4}\u{2AE}\u{3}\u{2}" .
        "\u{2}\u{2}\u{6}\u{2C3}\u{3}\u{2}\u{2}\u{2}\u{8}\u{2C5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{A}\u{2EA}\u{3}\u{2}\u{2}\u{2}\u{C}\u{2F6}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E}\u{301}\u{3}\u{2}\u{2}\u{2}\u{10}\u{312}\u{3}\u{2}\u{2}\u{2}" .
        "\u{12}\u{317}\u{3}\u{2}\u{2}\u{2}\u{14}\u{323}\u{3}\u{2}\u{2}\u{2}" .
        "\u{16}\u{33E}\u{3}\u{2}\u{2}\u{2}\u{18}\u{347}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1A}\u{349}\u{3}\u{2}\u{2}\u{2}\u{1C}\u{355}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1E}\u{373}\u{3}\u{2}\u{2}\u{2}\u{20}\u{397}\u{3}\u{2}\u{2}\u{2}" .
        "\u{22}\u{3CA}\u{3}\u{2}\u{2}\u{2}\u{24}\u{3E4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{26}\u{402}\u{3}\u{2}\u{2}\u{2}\u{28}\u{463}\u{3}\u{2}\u{2}\u{2}" .
        "\u{2A}\u{465}\u{3}\u{2}\u{2}\u{2}\u{2C}\u{477}\u{3}\u{2}\u{2}\u{2}" .
        "\u{2E}\u{4B4}\u{3}\u{2}\u{2}\u{2}\u{30}\u{4C7}\u{3}\u{2}\u{2}\u{2}" .
        "\u{32}\u{502}\u{3}\u{2}\u{2}\u{2}\u{34}\u{504}\u{3}\u{2}\u{2}\u{2}" .
        "\u{36}\u{530}\u{3}\u{2}\u{2}\u{2}\u{38}\u{536}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3A}\u{538}\u{3}\u{2}\u{2}\u{2}\u{3C}\u{54D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3E}\u{554}\u{3}\u{2}\u{2}\u{2}\u{40}\u{556}\u{3}\u{2}\u{2}\u{2}" .
        "\u{42}\u{566}\u{3}\u{2}\u{2}\u{2}\u{44}\u{569}\u{3}\u{2}\u{2}\u{2}" .
        "\u{46}\u{56E}\u{3}\u{2}\u{2}\u{2}\u{48}\u{588}\u{3}\u{2}\u{2}\u{2}" .
        "\u{4A}\u{598}\u{3}\u{2}\u{2}\u{2}\u{4C}\u{59A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{4E}\u{5AA}\u{3}\u{2}\u{2}\u{2}\u{50}\u{5AC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{52}\u{5E8}\u{3}\u{2}\u{2}\u{2}\u{54}\u{62F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{56}\u{631}\u{3}\u{2}\u{2}\u{2}\u{58}\u{64D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5A}\u{655}\u{3}\u{2}\u{2}\u{2}\u{5C}\u{673}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5E}\u{70A}\u{3}\u{2}\u{2}\u{2}\u{60}\u{70C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{62}\u{70E}\u{3}\u{2}\u{2}\u{2}\u{64}\u{711}\u{3}\u{2}\u{2}\u{2}" .
        "\u{66}\u{75B}\u{3}\u{2}\u{2}\u{2}\u{68}\u{772}\u{3}\u{2}\u{2}\u{2}" .
        "\u{6A}\u{806}\u{3}\u{2}\u{2}\u{2}\u{6C}\u{80B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{6E}\u{80D}\u{3}\u{2}\u{2}\u{2}\u{70}\u{817}\u{3}\u{2}\u{2}\u{2}" .
        "\u{72}\u{84F}\u{3}\u{2}\u{2}\u{2}\u{74}\u{863}\u{3}\u{2}\u{2}\u{2}" .
        "\u{76}\u{865}\u{3}\u{2}\u{2}\u{2}\u{78}\u{888}\u{3}\u{2}\u{2}\u{2}" .
        "\u{7A}\u{891}\u{3}\u{2}\u{2}\u{2}\u{7C}\u{898}\u{3}\u{2}\u{2}\u{2}" .
        "\u{7E}\u{8AF}\u{3}\u{2}\u{2}\u{2}\u{80}\u{8B8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{82}\u{8C7}\u{3}\u{2}\u{2}\u{2}\u{84}\u{8DD}\u{3}\u{2}\u{2}\u{2}" .
        "\u{86}\u{8F1}\u{3}\u{2}\u{2}\u{2}\u{88}\u{A7F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{8A}\u{A81}\u{3}\u{2}\u{2}\u{2}\u{8C}\u{A88}\u{3}\u{2}\u{2}\u{2}" .
        "\u{8E}\u{A8F}\u{3}\u{2}\u{2}\u{2}\u{90}\u{AA6}\u{3}\u{2}\u{2}\u{2}" .
        "\u{92}\u{AAE}\u{3}\u{2}\u{2}\u{2}\u{94}\u{AB5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{96}\u{ABC}\u{3}\u{2}\u{2}\u{2}\u{98}\u{AC3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9A}\u{ACF}\u{3}\u{2}\u{2}\u{2}\u{9C}\u{AD9}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9E}\u{AE0}\u{3}\u{2}\u{2}\u{2}\u{A0}\u{AF0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A2}\u{AFA}\u{3}\u{2}\u{2}\u{2}\u{A4}\u{AFE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A6}\u{B04}\u{3}\u{2}\u{2}\u{2}\u{A8}\u{B10}\u{3}\u{2}\u{2}\u{2}" .
        "\u{AA}\u{B12}\u{3}\u{2}\u{2}\u{2}\u{AC}\u{B19}\u{3}\u{2}\u{2}\u{2}" .
        "\u{AE}\u{B1B}\u{3}\u{2}\u{2}\u{2}\u{B0}\u{B4E}\u{3}\u{2}\u{2}\u{2}" .
        "\u{B2}\u{B98}\u{3}\u{2}\u{2}\u{2}\u{B4}\u{BD3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{B6}\u{C2B}\u{3}\u{2}\u{2}\u{2}\u{B8}\u{C2F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BA}\u{C43}\u{3}\u{2}\u{2}\u{2}\u{BC}\u{C45}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BE}\u{C4D}\u{3}\u{2}\u{2}\u{2}\u{C0}\u{C55}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C2}\u{C57}\u{3}\u{2}\u{2}\u{2}\u{C4}\u{C75}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C6}\u{CAC}\u{3}\u{2}\u{2}\u{2}\u{C8}\u{CB5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{CA}\u{CC9}\u{3}\u{2}\u{2}\u{2}\u{CC}\u{CD5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{CE}\u{CD9}\u{3}\u{2}\u{2}\u{2}\u{D0}\u{CFA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D2}\u{D0F}\u{3}\u{2}\u{2}\u{2}\u{D4}\u{D19}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D6}\u{D1D}\u{3}\u{2}\u{2}\u{2}\u{D8}\u{D36}\u{3}\u{2}\u{2}\u{2}" .
        "\u{DA}\u{D60}\u{3}\u{2}\u{2}\u{2}\u{DC}\u{D62}\u{3}\u{2}\u{2}\u{2}" .
        "\u{DE}\u{D71}\u{3}\u{2}\u{2}\u{2}\u{E0}\u{D9F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E2}\u{DA9}\u{3}\u{2}\u{2}\u{2}\u{E4}\u{DB3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E6}\u{DEF}\u{3}\u{2}\u{2}\u{2}\u{E8}\u{DF1}\u{3}\u{2}\u{2}\u{2}" .
        "\u{EA}\u{E0B}\u{3}\u{2}\u{2}\u{2}\u{EC}\u{E11}\u{3}\u{2}\u{2}\u{2}" .
        "\u{EE}\u{E21}\u{3}\u{2}\u{2}\u{2}\u{F0}\u{E25}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F2}\u{E4B}\u{3}\u{2}\u{2}\u{2}\u{F4}\u{E71}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F6}\u{E7F}\u{3}\u{2}\u{2}\u{2}\u{F8}\u{E87}\u{3}\u{2}\u{2}\u{2}" .
        "\u{FA}\u{E8B}\u{3}\u{2}\u{2}\u{2}\u{FC}\u{E91}\u{3}\u{2}\u{2}\u{2}" .
        "\u{FE}\u{E9F}\u{3}\u{2}\u{2}\u{2}\u{100}\u{EA2}\u{3}\u{2}\u{2}\u{2}" .
        "\u{102}\u{EB4}\u{3}\u{2}\u{2}\u{2}\u{104}\u{EB8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{106}\u{EC8}\u{3}\u{2}\u{2}\u{2}\u{108}\u{ECA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{10A}\u{ED6}\u{3}\u{2}\u{2}\u{2}\u{10C}\u{EDA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{10E}\u{EEB}\u{3}\u{2}\u{2}\u{2}\u{110}\u{EFC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{112}\u{EFF}\u{3}\u{2}\u{2}\u{2}\u{114}\u{F09}\u{3}\u{2}\u{2}\u{2}" .
        "\u{116}\u{F0D}\u{3}\u{2}\u{2}\u{2}\u{118}\u{F17}\u{3}\u{2}\u{2}\u{2}" .
        "\u{11A}\u{F1A}\u{3}\u{2}\u{2}\u{2}\u{11C}\u{F1F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{11E}\u{F33}\u{3}\u{2}\u{2}\u{2}\u{120}\u{F35}\u{3}\u{2}\u{2}\u{2}" .
        "\u{122}\u{F46}\u{3}\u{2}\u{2}\u{2}\u{124}\u{F4F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{126}\u{F58}\u{3}\u{2}\u{2}\u{2}\u{128}\u{F5A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{12A}\u{F68}\u{3}\u{2}\u{2}\u{2}\u{12C}\u{F73}\u{3}\u{2}\u{2}\u{2}" .
        "\u{12E}\u{F7C}\u{3}\u{2}\u{2}\u{2}\u{130}\u{F7F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{132}\u{F87}\u{3}\u{2}\u{2}\u{2}\u{134}\u{FA0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{136}\u{FAC}\u{3}\u{2}\u{2}\u{2}\u{138}\u{FAF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{13A}\u{FCF}\u{3}\u{2}\u{2}\u{2}\u{13C}\u{FD1}\u{3}\u{2}\u{2}\u{2}" .
        "\u{13E}\u{FD3}\u{3}\u{2}\u{2}\u{2}\u{140}\u{FD5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{142}\u{FD7}\u{3}\u{2}\u{2}\u{2}\u{144}\u{100C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{146}\u{100E}\u{3}\u{2}\u{2}\u{2}\u{148}\u{1014}\u{3}\u{2}\u{2}" .
        "\u{2}\u{14A}\u{1028}\u{3}\u{2}\u{2}\u{2}\u{14C}\u{1036}\u{3}\u{2}" .
        "\u{2}\u{2}\u{14E}\u{1041}\u{3}\u{2}\u{2}\u{2}\u{150}\u{1043}\u{3}" .
        "\u{2}\u{2}\u{2}\u{152}\u{1049}\u{3}\u{2}\u{2}\u{2}\u{154}\u{1053}" .
        "\u{3}\u{2}\u{2}\u{2}\u{156}\u{1057}\u{3}\u{2}\u{2}\u{2}\u{158}\u{105E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15A}\u{1062}\u{3}\u{2}\u{2}\u{2}\u{15C}\u{1068}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15E}\u{106F}\u{3}\u{2}\u{2}\u{2}\u{160}\u{1075}" .
        "\u{3}\u{2}\u{2}\u{2}\u{162}\u{107B}\u{3}\u{2}\u{2}\u{2}\u{164}\u{1080}" .
        "\u{3}\u{2}\u{2}\u{2}\u{166}\u{10AF}\u{3}\u{2}\u{2}\u{2}\u{168}\u{10C4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16A}\u{10DD}\u{3}\u{2}\u{2}\u{2}\u{16C}\u{10E0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16E}\u{10E6}\u{3}\u{2}\u{2}\u{2}\u{170}\u{10F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{172}\u{1105}\u{3}\u{2}\u{2}\u{2}\u{174}\u{110B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176}\u{1129}\u{3}\u{2}\u{2}\u{2}\u{178}\u{112B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17A}\u{1132}\u{3}\u{2}\u{2}\u{2}\u{17C}\u{113E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17E}\u{1144}\u{3}\u{2}\u{2}\u{2}\u{180}\u{115D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{182}\u{1161}\u{3}\u{2}\u{2}\u{2}\u{184}\u{1165}" .
        "\u{3}\u{2}\u{2}\u{2}\u{186}\u{1170}\u{3}\u{2}\u{2}\u{2}\u{188}\u{11AE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18A}\u{11E6}\u{3}\u{2}\u{2}\u{2}\u{18C}\u{11E8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18E}\u{1252}\u{3}\u{2}\u{2}\u{2}\u{190}\u{126A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{192}\u{126C}\u{3}\u{2}\u{2}\u{2}\u{194}\u{127E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{196}\u{12C8}\u{3}\u{2}\u{2}\u{2}\u{198}\u{12CA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19A}\u{12D7}\u{3}\u{2}\u{2}\u{2}\u{19C}\u{12E2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19E}\u{1301}\u{3}\u{2}\u{2}\u{2}\u{1A0}\u{130B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A2}\u{1315}\u{3}\u{2}\u{2}\u{2}\u{1A4}\u{1317}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A6}\u{1321}\u{3}\u{2}\u{2}\u{2}\u{1A8}\u{1324}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1AA}\u{137A}\u{3}\u{2}\u{2}\u{2}\u{1AC}\u{138C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1AE}\u{138E}\u{3}\u{2}\u{2}\u{2}\u{1B0}\u{1392}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1B2}\u{13B8}\u{3}\u{2}\u{2}\u{2}\u{1B4}\u{13C1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1B6}\u{13C7}\u{3}\u{2}\u{2}\u{2}\u{1B8}\u{13CE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1BA}\u{13E4}\u{3}\u{2}\u{2}\u{2}\u{1BC}\u{13E6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1BE}\u{13F1}\u{3}\u{2}\u{2}\u{2}\u{1C0}\u{13F7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1C2}\u{142E}\u{3}\u{2}\u{2}\u{2}\u{1C4}\u{14C7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1C6}\u{14D3}\u{3}\u{2}\u{2}\u{2}\u{1C8}\u{14E2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1CA}\u{14E8}\u{3}\u{2}\u{2}\u{2}\u{1CC}\u{14FB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1CE}\u{1505}\u{3}\u{2}\u{2}\u{2}\u{1D0}\u{1513}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1D2}\u{1515}\u{3}\u{2}\u{2}\u{2}\u{1D4}\u{1518}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1D6}\u{152E}\u{3}\u{2}\u{2}\u{2}\u{1D8}\u{153A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1DA}\u{1543}\u{3}\u{2}\u{2}\u{2}\u{1DC}\u{154F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1DE}\u{1553}\u{3}\u{2}\u{2}\u{2}\u{1E0}\u{1555}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1E2}\u{157D}\u{3}\u{2}\u{2}\u{2}\u{1E4}\u{1584}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1E6}\u{1586}\u{3}\u{2}\u{2}\u{2}\u{1E8}\u{159D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1EA}\u{15A3}\u{3}\u{2}\u{2}\u{2}\u{1EC}\u{15AB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1EE}\u{15AE}\u{3}\u{2}\u{2}\u{2}\u{1F0}\u{15B1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1F2}\u{15C6}\u{3}\u{2}\u{2}\u{2}\u{1F4}\u{15DB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1F6}\u{15E3}\u{3}\u{2}\u{2}\u{2}\u{1F8}\u{1609}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1FA}\u{1615}\u{3}\u{2}\u{2}\u{2}\u{1FC}\u{1617}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1FE}\u{161D}\u{3}\u{2}\u{2}\u{2}\u{200}\u{162B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{202}\u{1638}\u{3}\u{2}\u{2}\u{2}\u{204}\u{163D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{206}\u{163F}\u{3}\u{2}\u{2}\u{2}\u{208}\u{1645}" .
        "\u{3}\u{2}\u{2}\u{2}\u{20A}\u{1649}\u{3}\u{2}\u{2}\u{2}\u{20C}\u{164B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{20E}\u{164D}\u{3}\u{2}\u{2}\u{2}\u{210}\u{165F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{212}\u{166F}\u{3}\u{2}\u{2}\u{2}\u{214}\u{1673}" .
        "\u{3}\u{2}\u{2}\u{2}\u{216}\u{1678}\u{3}\u{2}\u{2}\u{2}\u{218}\u{1683}" .
        "\u{3}\u{2}\u{2}\u{2}\u{21A}\u{1688}\u{3}\u{2}\u{2}\u{2}\u{21C}\u{168A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{21E}\u{168E}\u{3}\u{2}\u{2}\u{2}\u{220}\u{16A7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{222}\u{16A9}\u{3}\u{2}\u{2}\u{2}\u{224}\u{16AC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{226}\u{16B1}\u{3}\u{2}\u{2}\u{2}\u{228}\u{16C1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{22A}\u{1746}\u{3}\u{2}\u{2}\u{2}\u{22C}\u{1748}" .
        "\u{3}\u{2}\u{2}\u{2}\u{22E}\u{176C}\u{3}\u{2}\u{2}\u{2}\u{230}\u{1771}" .
        "\u{3}\u{2}\u{2}\u{2}\u{232}\u{1775}\u{3}\u{2}\u{2}\u{2}\u{234}\u{177B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{236}\u{1783}\u{3}\u{2}\u{2}\u{2}\u{238}\u{178B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{23A}\u{1793}\u{3}\u{2}\u{2}\u{2}\u{23C}\u{179B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{23E}\u{17A6}\u{3}\u{2}\u{2}\u{2}\u{240}\u{17AE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{242}\u{17B6}\u{3}\u{2}\u{2}\u{2}\u{244}\u{17BE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{246}\u{17C6}\u{3}\u{2}\u{2}\u{2}\u{248}\u{17D8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{24A}\u{17ED}\u{3}\u{2}\u{2}\u{2}\u{24C}\u{17F1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{24E}\u{17F3}\u{3}\u{2}\u{2}\u{2}\u{250}\u{17F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{252}\u{180C}\u{3}\u{2}\u{2}\u{2}\u{254}\u{18CE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{256}\u{18D0}\u{3}\u{2}\u{2}\u{2}\u{258}\u{18E3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{25A}\u{18E5}\u{3}\u{2}\u{2}\u{2}\u{25C}\u{1924}" .
        "\u{3}\u{2}\u{2}\u{2}\u{25E}\u{194C}\u{3}\u{2}\u{2}\u{2}\u{260}\u{194E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{262}\u{1958}\u{3}\u{2}\u{2}\u{2}\u{264}\u{1963}" .
        "\u{3}\u{2}\u{2}\u{2}\u{266}\u{1965}\u{3}\u{2}\u{2}\u{2}\u{268}\u{1968}" .
        "\u{3}\u{2}\u{2}\u{2}\u{26A}\u{196C}\u{3}\u{2}\u{2}\u{2}\u{26C}\u{196E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{26E}\u{197A}\u{3}\u{2}\u{2}\u{2}\u{270}\u{197C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{272}\u{199D}\u{3}\u{2}\u{2}\u{2}\u{274}\u{199F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{276}\u{19A8}\u{3}\u{2}\u{2}\u{2}\u{278}\u{19BA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{27A}\u{19C7}\u{3}\u{2}\u{2}\u{2}\u{27C}\u{19D2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{27E}\u{1A49}\u{3}\u{2}\u{2}\u{2}\u{280}\u{1A5F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{282}\u{1A6F}\u{3}\u{2}\u{2}\u{2}\u{284}\u{1A78}" .
        "\u{3}\u{2}\u{2}\u{2}\u{286}\u{1A81}\u{3}\u{2}\u{2}\u{2}\u{288}\u{1A83}" .
        "\u{3}\u{2}\u{2}\u{2}\u{28A}\u{1A8A}\u{3}\u{2}\u{2}\u{2}\u{28C}\u{1A8C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{28E}\u{1A8E}\u{3}\u{2}\u{2}\u{2}\u{290}\u{1A90}" .
        "\u{3}\u{2}\u{2}\u{2}\u{292}\u{1A92}\u{3}\u{2}\u{2}\u{2}\u{294}\u{1A94}" .
        "\u{3}\u{2}\u{2}\u{2}\u{296}\u{1A96}\u{3}\u{2}\u{2}\u{2}\u{298}\u{1A98}" .
        "\u{3}\u{2}\u{2}\u{2}\u{29A}\u{29C}\u{5}\u{4}\u{3}\u{2}\u{29B}\u{29A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{29B}\u{29C}\u{3}\u{2}\u{2}\u{2}\u{29C}\u{29F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{29D}\u{29E}\u{7}\u{432}\u{2}\u{2}\u{29E}\u{2A0}" .
        "\u{7}\u{432}\u{2}\u{2}\u{29F}\u{29D}\u{3}\u{2}\u{2}\u{2}\u{29F}\u{2A0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2A0}\u{2A1}\u{3}\u{2}\u{2}\u{2}\u{2A1}\u{2A2}" .
        "\u{7}\u{2}\u{2}\u{3}\u{2A2}\u{3}\u{3}\u{2}\u{2}\u{2}\u{2A3}\u{2A6}" .
        "\u{5}\u{6}\u{4}\u{2}\u{2A4}\u{2A5}\u{7}\u{432}\u{2}\u{2}\u{2A5}\u{2A7}" .
        "\u{7}\u{432}\u{2}\u{2}\u{2A6}\u{2A4}\u{3}\u{2}\u{2}\u{2}\u{2A6}\u{2A7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2A7}\u{2A9}\u{3}\u{2}\u{2}\u{2}\u{2A8}\u{2AA}" .
        "\u{7}\u{441}\u{2}\u{2}\u{2A9}\u{2A8}\u{3}\u{2}\u{2}\u{2}\u{2A9}\u{2AA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2AA}\u{2AD}\u{3}\u{2}\u{2}\u{2}\u{2AB}\u{2AD}" .
        "\u{5}\u{8}\u{5}\u{2}\u{2AC}\u{2A3}\u{3}\u{2}\u{2}\u{2}\u{2AC}\u{2AB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2AD}\u{2B0}\u{3}\u{2}\u{2}\u{2}\u{2AE}\u{2AC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2AE}\u{2AF}\u{3}\u{2}\u{2}\u{2}\u{2AF}\u{2BA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2B0}\u{2AE}\u{3}\u{2}\u{2}\u{2}\u{2B1}\u{2B7}" .
        "\u{5}\u{6}\u{4}\u{2}\u{2B2}\u{2B3}\u{7}\u{432}\u{2}\u{2}\u{2B3}\u{2B5}" .
        "\u{7}\u{432}\u{2}\u{2}\u{2B4}\u{2B2}\u{3}\u{2}\u{2}\u{2}\u{2B4}\u{2B5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2B5}\u{2B6}\u{3}\u{2}\u{2}\u{2}\u{2B6}\u{2B8}" .
        "\u{7}\u{441}\u{2}\u{2}\u{2B7}\u{2B4}\u{3}\u{2}\u{2}\u{2}\u{2B7}\u{2B8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2B8}\u{2BB}\u{3}\u{2}\u{2}\u{2}\u{2B9}\u{2BB}" .
        "\u{5}\u{8}\u{5}\u{2}\u{2BA}\u{2B1}\u{3}\u{2}\u{2}\u{2}\u{2BA}\u{2B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2BB}\u{5}\u{3}\u{2}\u{2}\u{2}\u{2BC}\u{2C4}" .
        "\u{5}\u{A}\u{6}\u{2}\u{2BD}\u{2C4}\u{5}\u{C}\u{7}\u{2}\u{2BE}\u{2C4}" .
        "\u{5}\u{E}\u{8}\u{2}\u{2BF}\u{2C4}\u{5}\u{10}\u{9}\u{2}\u{2C0}\u{2C4}" .
        "\u{5}\u{12}\u{A}\u{2}\u{2C1}\u{2C4}\u{5}\u{16}\u{C}\u{2}\u{2C2}\u{2C4}" .
        "\u{5}\u{18}\u{D}\u{2}\u{2C3}\u{2BC}\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2BD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2BE}\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2BF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2C0}\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2C1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2C3}\u{2C2}\u{3}\u{2}\u{2}\u{2}\u{2C4}\u{7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2C5}\u{2C6}\u{7}\u{441}\u{2}\u{2}\u{2C6}\u{9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2C7}\u{2EB}\u{5}\u{1A}\u{E}\u{2}\u{2C8}\u{2EB}" .
        "\u{5}\u{1C}\u{F}\u{2}\u{2C9}\u{2EB}\u{5}\u{1E}\u{10}\u{2}\u{2CA}\u{2EB}" .
        "\u{5}\u{20}\u{11}\u{2}\u{2CB}\u{2EB}\u{5}\u{22}\u{12}\u{2}\u{2CC}" .
        "\u{2EB}\u{5}\u{24}\u{13}\u{2}\u{2CD}\u{2EB}\u{5}\u{26}\u{14}\u{2}" .
        "\u{2CE}\u{2EB}\u{5}\u{28}\u{15}\u{2}\u{2CF}\u{2EB}\u{5}\u{2A}\u{16}" .
        "\u{2}\u{2D0}\u{2EB}\u{5}\u{2C}\u{17}\u{2}\u{2D1}\u{2EB}\u{5}\u{2E}" .
        "\u{18}\u{2}\u{2D2}\u{2EB}\u{5}\u{30}\u{19}\u{2}\u{2D3}\u{2EB}\u{5}" .
        "\u{74}\u{3B}\u{2}\u{2D4}\u{2EB}\u{5}\u{76}\u{3C}\u{2}\u{2D5}\u{2EB}" .
        "\u{5}\u{78}\u{3D}\u{2}\u{2D6}\u{2EB}\u{5}\u{7A}\u{3E}\u{2}\u{2D7}" .
        "\u{2EB}\u{5}\u{7C}\u{3F}\u{2}\u{2D8}\u{2EB}\u{5}\u{7E}\u{40}\u{2}" .
        "\u{2D9}\u{2EB}\u{5}\u{80}\u{41}\u{2}\u{2DA}\u{2EB}\u{5}\u{82}\u{42}" .
        "\u{2}\u{2DB}\u{2EB}\u{5}\u{84}\u{43}\u{2}\u{2DC}\u{2EB}\u{5}\u{86}" .
        "\u{44}\u{2}\u{2DD}\u{2EB}\u{5}\u{8A}\u{46}\u{2}\u{2DE}\u{2EB}\u{5}" .
        "\u{8C}\u{47}\u{2}\u{2DF}\u{2EB}\u{5}\u{8E}\u{48}\u{2}\u{2E0}\u{2EB}" .
        "\u{5}\u{90}\u{49}\u{2}\u{2E1}\u{2EB}\u{5}\u{92}\u{4A}\u{2}\u{2E2}" .
        "\u{2EB}\u{5}\u{94}\u{4B}\u{2}\u{2E3}\u{2EB}\u{5}\u{96}\u{4C}\u{2}" .
        "\u{2E4}\u{2EB}\u{5}\u{98}\u{4D}\u{2}\u{2E5}\u{2EB}\u{5}\u{9A}\u{4E}" .
        "\u{2}\u{2E6}\u{2EB}\u{5}\u{9C}\u{4F}\u{2}\u{2E7}\u{2EB}\u{5}\u{9E}" .
        "\u{50}\u{2}\u{2E8}\u{2EB}\u{5}\u{A0}\u{51}\u{2}\u{2E9}\u{2EB}\u{5}" .
        "\u{A4}\u{53}\u{2}\u{2EA}\u{2C7}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2C8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2C9}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CB}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CD}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2CF}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D1}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D3}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D5}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D7}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2D9}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DB}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DD}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2DF}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E1}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E3}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E5}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E7}\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EA}\u{2E9}\u{3}\u{2}\u{2}\u{2}\u{2EB}\u{B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{2EC}\u{2F7}\u{5}\u{B6}\u{5C}\u{2}\u{2ED}\u{2F7}" .
        "\u{5}\u{AE}\u{58}\u{2}\u{2EE}\u{2F7}\u{5}\u{B8}\u{5D}\u{2}\u{2EF}" .
        "\u{2F7}\u{5}\u{A8}\u{55}\u{2}\u{2F0}\u{2F7}\u{5}\u{B4}\u{5B}\u{2}" .
        "\u{2F1}\u{2F7}\u{5}\u{A6}\u{54}\u{2}\u{2F2}\u{2F7}\u{5}\u{B0}\u{59}" .
        "\u{2}\u{2F3}\u{2F7}\u{5}\u{B2}\u{5A}\u{2}\u{2F4}\u{2F7}\u{5}\u{AA}" .
        "\u{56}\u{2}\u{2F5}\u{2F7}\u{5}\u{AC}\u{57}\u{2}\u{2F6}\u{2EC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F6}\u{2ED}\u{3}\u{2}\u{2}\u{2}\u{2F6}\u{2EE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F6}\u{2EF}\u{3}\u{2}\u{2}\u{2}\u{2F6}\u{2F0}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F6}\u{2F1}\u{3}\u{2}\u{2}\u{2}\u{2F6}\u{2F2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F6}\u{2F3}\u{3}\u{2}\u{2}\u{2}\u{2F6}\u{2F4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F6}\u{2F5}\u{3}\u{2}\u{2}\u{2}\u{2F7}\u{D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{2F8}\u{302}\u{5}\u{108}\u{85}\u{2}\u{2F9}\u{302}" .
        "\u{5}\u{10A}\u{86}\u{2}\u{2FA}\u{302}\u{5}\u{10C}\u{87}\u{2}\u{2FB}" .
        "\u{302}\u{5}\u{10E}\u{88}\u{2}\u{2FC}\u{302}\u{5}\u{110}\u{89}\u{2}" .
        "\u{2FD}\u{302}\u{5}\u{112}\u{8A}\u{2}\u{2FE}\u{302}\u{5}\u{114}\u{8B}" .
        "\u{2}\u{2FF}\u{302}\u{5}\u{116}\u{8C}\u{2}\u{300}\u{302}\u{5}\u{118}" .
        "\u{8D}\u{2}\u{301}\u{2F8}\u{3}\u{2}\u{2}\u{2}\u{301}\u{2F9}\u{3}\u{2}" .
        "\u{2}\u{2}\u{301}\u{2FA}\u{3}\u{2}\u{2}\u{2}\u{301}\u{2FB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{301}\u{2FC}\u{3}\u{2}\u{2}\u{2}\u{301}\u{2FD}\u{3}\u{2}" .
        "\u{2}\u{2}\u{301}\u{2FE}\u{3}\u{2}\u{2}\u{2}\u{301}\u{2FF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{301}\u{300}\u{3}\u{2}\u{2}\u{2}\u{302}\u{F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{303}\u{313}\u{5}\u{128}\u{95}\u{2}\u{304}\u{313}\u{5}" .
        "\u{12A}\u{96}\u{2}\u{305}\u{313}\u{5}\u{12C}\u{97}\u{2}\u{306}\u{313}" .
        "\u{5}\u{12E}\u{98}\u{2}\u{307}\u{313}\u{5}\u{130}\u{99}\u{2}\u{308}" .
        "\u{313}\u{5}\u{132}\u{9A}\u{2}\u{309}\u{313}\u{5}\u{134}\u{9B}\u{2}" .
        "\u{30A}\u{313}\u{5}\u{136}\u{9C}\u{2}\u{30B}\u{313}\u{5}\u{138}\u{9D}" .
        "\u{2}\u{30C}\u{313}\u{5}\u{150}\u{A9}\u{2}\u{30D}\u{313}\u{5}\u{152}" .
        "\u{AA}\u{2}\u{30E}\u{313}\u{5}\u{154}\u{AB}\u{2}\u{30F}\u{313}\u{5}" .
        "\u{156}\u{AC}\u{2}\u{310}\u{313}\u{5}\u{158}\u{AD}\u{2}\u{311}\u{313}" .
        "\u{5}\u{15A}\u{AE}\u{2}\u{312}\u{303}\u{3}\u{2}\u{2}\u{2}\u{312}\u{304}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{305}\u{3}\u{2}\u{2}\u{2}\u{312}\u{306}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{307}\u{3}\u{2}\u{2}\u{2}\u{312}\u{308}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{309}\u{3}\u{2}\u{2}\u{2}\u{312}\u{30A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{30B}\u{3}\u{2}\u{2}\u{2}\u{312}\u{30C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{30D}\u{3}\u{2}\u{2}\u{2}\u{312}\u{30E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{30F}\u{3}\u{2}\u{2}\u{2}\u{312}\u{310}" .
        "\u{3}\u{2}\u{2}\u{2}\u{312}\u{311}\u{3}\u{2}\u{2}\u{2}\u{313}\u{11}" .
        "\u{3}\u{2}\u{2}\u{2}\u{314}\u{318}\u{5}\u{15C}\u{AF}\u{2}\u{315}\u{318}" .
        "\u{5}\u{15E}\u{B0}\u{2}\u{316}\u{318}\u{5}\u{160}\u{B1}\u{2}\u{317}" .
        "\u{314}\u{3}\u{2}\u{2}\u{2}\u{317}\u{315}\u{3}\u{2}\u{2}\u{2}\u{317}" .
        "\u{316}\u{3}\u{2}\u{2}\u{2}\u{318}\u{13}\u{3}\u{2}\u{2}\u{2}\u{319}" .
        "\u{324}\u{5}\u{164}\u{B3}\u{2}\u{31A}\u{324}\u{5}\u{166}\u{B4}\u{2}" .
        "\u{31B}\u{324}\u{5}\u{168}\u{B5}\u{2}\u{31C}\u{324}\u{5}\u{16C}\u{B7}" .
        "\u{2}\u{31D}\u{324}\u{5}\u{16E}\u{B8}\u{2}\u{31E}\u{324}\u{5}\u{170}" .
        "\u{B9}\u{2}\u{31F}\u{324}\u{5}\u{174}\u{BB}\u{2}\u{320}\u{324}\u{5}" .
        "\u{16A}\u{B6}\u{2}\u{321}\u{324}\u{5}\u{172}\u{BA}\u{2}\u{322}\u{324}" .
        "\u{5}\u{176}\u{BC}\u{2}\u{323}\u{319}\u{3}\u{2}\u{2}\u{2}\u{323}\u{31A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{323}\u{31B}\u{3}\u{2}\u{2}\u{2}\u{323}\u{31C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{323}\u{31D}\u{3}\u{2}\u{2}\u{2}\u{323}\u{31E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{323}\u{31F}\u{3}\u{2}\u{2}\u{2}\u{323}\u{320}" .
        "\u{3}\u{2}\u{2}\u{2}\u{323}\u{321}\u{3}\u{2}\u{2}\u{2}\u{323}\u{322}" .
        "\u{3}\u{2}\u{2}\u{2}\u{324}\u{15}\u{3}\u{2}\u{2}\u{2}\u{325}\u{33F}" .
        "\u{5}\u{188}\u{C5}\u{2}\u{326}\u{33F}\u{5}\u{18A}\u{C6}\u{2}\u{327}" .
        "\u{33F}\u{5}\u{18C}\u{C7}\u{2}\u{328}\u{33F}\u{5}\u{18E}\u{C8}\u{2}" .
        "\u{329}\u{33F}\u{5}\u{192}\u{CA}\u{2}\u{32A}\u{33F}\u{5}\u{194}\u{CB}" .
        "\u{2}\u{32B}\u{33F}\u{5}\u{196}\u{CC}\u{2}\u{32C}\u{33F}\u{5}\u{198}" .
        "\u{CD}\u{2}\u{32D}\u{33F}\u{5}\u{1B0}\u{D9}\u{2}\u{32E}\u{33F}\u{5}" .
        "\u{1B2}\u{DA}\u{2}\u{32F}\u{33F}\u{5}\u{1B4}\u{DB}\u{2}\u{330}\u{33F}" .
        "\u{5}\u{1B6}\u{DC}\u{2}\u{331}\u{33F}\u{5}\u{1B8}\u{DD}\u{2}\u{332}" .
        "\u{33F}\u{5}\u{1BC}\u{DF}\u{2}\u{333}\u{33F}\u{5}\u{1BE}\u{E0}\u{2}" .
        "\u{334}\u{33F}\u{5}\u{1C0}\u{E1}\u{2}\u{335}\u{33F}\u{5}\u{1C2}\u{E2}" .
        "\u{2}\u{336}\u{33F}\u{5}\u{1C4}\u{E3}\u{2}\u{337}\u{33F}\u{5}\u{1D2}" .
        "\u{EA}\u{2}\u{338}\u{33F}\u{5}\u{1D4}\u{EB}\u{2}\u{339}\u{33F}\u{5}" .
        "\u{1D6}\u{EC}\u{2}\u{33A}\u{33F}\u{5}\u{1D8}\u{ED}\u{2}\u{33B}\u{33F}" .
        "\u{5}\u{1DA}\u{EE}\u{2}\u{33C}\u{33F}\u{5}\u{1DC}\u{EF}\u{2}\u{33D}" .
        "\u{33F}\u{5}\u{1DE}\u{F0}\u{2}\u{33E}\u{325}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{326}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{327}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{328}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{329}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{32A}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{32B}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{32C}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{32D}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{32E}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{32F}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{330}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{331}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{332}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{333}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{334}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{335}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{336}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{337}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{338}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{339}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{33A}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{33B}\u{3}\u{2}\u{2}\u{2}\u{33E}" .
        "\u{33C}\u{3}\u{2}\u{2}\u{2}\u{33E}\u{33D}\u{3}\u{2}\u{2}\u{2}\u{33F}" .
        "\u{17}\u{3}\u{2}\u{2}\u{2}\u{340}\u{348}\u{5}\u{1E8}\u{F5}\u{2}\u{341}" .
        "\u{348}\u{5}\u{1EA}\u{F6}\u{2}\u{342}\u{348}\u{5}\u{1EC}\u{F7}\u{2}" .
        "\u{343}\u{348}\u{5}\u{1EE}\u{F8}\u{2}\u{344}\u{348}\u{5}\u{1F0}\u{F9}" .
        "\u{2}\u{345}\u{348}\u{5}\u{1F2}\u{FA}\u{2}\u{346}\u{348}\u{5}\u{1F6}" .
        "\u{FC}\u{2}\u{347}\u{340}\u{3}\u{2}\u{2}\u{2}\u{347}\u{341}\u{3}\u{2}" .
        "\u{2}\u{2}\u{347}\u{342}\u{3}\u{2}\u{2}\u{2}\u{347}\u{343}\u{3}\u{2}" .
        "\u{2}\u{2}\u{347}\u{344}\u{3}\u{2}\u{2}\u{2}\u{347}\u{345}\u{3}\u{2}" .
        "\u{2}\u{2}\u{347}\u{346}\u{3}\u{2}\u{2}\u{2}\u{348}\u{19}\u{3}\u{2}" .
        "\u{2}\u{2}\u{349}\u{34A}\u{7}\u{22}\u{2}\u{2}\u{34A}\u{34C}\u{9}\u{2}" .
        "\u{2}\u{2}\u{34B}\u{34D}\u{5}\u{250}\u{129}\u{2}\u{34C}\u{34B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{34C}\u{34D}\u{3}\u{2}\u{2}\u{2}\u{34D}\u{34E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{34E}\u{352}\u{5}\u{216}\u{10C}\u{2}\u{34F}\u{351}" .
        "\u{5}\u{32}\u{1A}\u{2}\u{350}\u{34F}\u{3}\u{2}\u{2}\u{2}\u{351}\u{354}" .
        "\u{3}\u{2}\u{2}\u{2}\u{352}\u{350}\u{3}\u{2}\u{2}\u{2}\u{352}\u{353}" .
        "\u{3}\u{2}\u{2}\u{2}\u{353}\u{1B}\u{3}\u{2}\u{2}\u{2}\u{354}\u{352}" .
        "\u{3}\u{2}\u{2}\u{2}\u{355}\u{357}\u{7}\u{22}\u{2}\u{2}\u{356}\u{358}" .
        "\u{5}\u{34}\u{1B}\u{2}\u{357}\u{356}\u{3}\u{2}\u{2}\u{2}\u{357}\u{358}" .
        "\u{3}\u{2}\u{2}\u{2}\u{358}\u{359}\u{3}\u{2}\u{2}\u{2}\u{359}\u{35B}" .
        "\u{7}\u{18F}\u{2}\u{2}\u{35A}\u{35C}\u{5}\u{250}\u{129}\u{2}\u{35B}" .
        "\u{35A}\u{3}\u{2}\u{2}\u{2}\u{35B}\u{35C}\u{3}\u{2}\u{2}\u{2}\u{35C}" .
        "\u{35D}\u{3}\u{2}\u{2}\u{2}\u{35D}\u{35E}\u{5}\u{1FC}\u{FF}\u{2}\u{35E}" .
        "\u{35F}\u{7}\u{71}\u{2}\u{2}\u{35F}\u{360}\u{7}\u{23C}\u{2}\u{2}\u{360}" .
        "\u{367}\u{5}\u{36}\u{1C}\u{2}\u{361}\u{362}\u{7}\u{71}\u{2}\u{2}\u{362}" .
        "\u{364}\u{7}\u{166}\u{2}\u{2}\u{363}\u{365}\u{7}\u{6D}\u{2}\u{2}\u{364}" .
        "\u{363}\u{3}\u{2}\u{2}\u{2}\u{364}\u{365}\u{3}\u{2}\u{2}\u{2}\u{365}" .
        "\u{366}\u{3}\u{2}\u{2}\u{2}\u{366}\u{368}\u{7}\u{214}\u{2}\u{2}\u{367}" .
        "\u{361}\u{3}\u{2}\u{2}\u{2}\u{367}\u{368}\u{3}\u{2}\u{2}\u{2}\u{368}" .
        "\u{36A}\u{3}\u{2}\u{2}\u{2}\u{369}\u{36B}\u{5}\u{3E}\u{20}\u{2}\u{36A}" .
        "\u{369}\u{3}\u{2}\u{2}\u{2}\u{36A}\u{36B}\u{3}\u{2}\u{2}\u{2}\u{36B}" .
        "\u{36E}\u{3}\u{2}\u{2}\u{2}\u{36C}\u{36D}\u{7}\u{163}\u{2}\u{2}\u{36D}" .
        "\u{36F}\u{7}\u{44D}\u{2}\u{2}\u{36E}\u{36C}\u{3}\u{2}\u{2}\u{2}\u{36E}" .
        "\u{36F}\u{3}\u{2}\u{2}\u{2}\u{36F}\u{370}\u{3}\u{2}\u{2}\u{2}\u{370}" .
        "\u{371}\u{7}\u{181}\u{2}\u{2}\u{371}\u{372}\u{5}\u{162}\u{B2}\u{2}" .
        "\u{372}\u{1D}\u{3}\u{2}\u{2}\u{2}\u{373}\u{375}\u{7}\u{22}\u{2}\u{2}" .
        "\u{374}\u{376}\u{9}\u{3}\u{2}\u{2}\u{375}\u{374}\u{3}\u{2}\u{2}\u{2}" .
        "\u{375}\u{376}\u{3}\u{2}\u{2}\u{2}\u{376}\u{378}\u{3}\u{2}\u{2}\u{2}" .
        "\u{377}\u{379}\u{9}\u{4}\u{2}\u{2}\u{378}\u{377}\u{3}\u{2}\u{2}\u{2}" .
        "\u{378}\u{379}\u{3}\u{2}\u{2}\u{2}\u{379}\u{37A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{37A}\u{37B}\u{7}\u{4F}\u{2}\u{2}\u{37B}\u{37D}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{37C}\u{37E}\u{5}\u{40}\u{21}\u{2}\u{37D}\u{37C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{37D}\u{37E}\u{3}\u{2}\u{2}\u{2}\u{37E}\u{37F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{37F}\u{380}\u{7}\u{71}\u{2}\u{2}\u{380}\u{381}\u{5}\u{1FE}" .
        "\u{100}\u{2}\u{381}\u{385}\u{5}\u{23C}\u{11F}\u{2}\u{382}\u{384}\u{5}" .
        "\u{42}\u{22}\u{2}\u{383}\u{382}\u{3}\u{2}\u{2}\u{2}\u{384}\u{387}" .
        "\u{3}\u{2}\u{2}\u{2}\u{385}\u{383}\u{3}\u{2}\u{2}\u{2}\u{385}\u{386}" .
        "\u{3}\u{2}\u{2}\u{2}\u{386}\u{394}\u{3}\u{2}\u{2}\u{2}\u{387}\u{385}" .
        "\u{3}\u{2}\u{2}\u{2}\u{388}\u{38A}\u{7}\u{144}\u{2}\u{2}\u{389}\u{38B}" .
        "\u{7}\u{435}\u{2}\u{2}\u{38A}\u{389}\u{3}\u{2}\u{2}\u{2}\u{38A}\u{38B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{38B}\u{38C}\u{3}\u{2}\u{2}\u{2}\u{38C}\u{393}" .
        "\u{9}\u{5}\u{2}\u{2}\u{38D}\u{38F}\u{7}\u{64}\u{2}\u{2}\u{38E}\u{390}" .
        "\u{7}\u{435}\u{2}\u{2}\u{38F}\u{38E}\u{3}\u{2}\u{2}\u{2}\u{38F}\u{390}" .
        "\u{3}\u{2}\u{2}\u{2}\u{390}\u{391}\u{3}\u{2}\u{2}\u{2}\u{391}\u{393}" .
        "\u{9}\u{6}\u{2}\u{2}\u{392}\u{388}\u{3}\u{2}\u{2}\u{2}\u{392}\u{38D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{393}\u{396}\u{3}\u{2}\u{2}\u{2}\u{394}\u{392}" .
        "\u{3}\u{2}\u{2}\u{2}\u{394}\u{395}\u{3}\u{2}\u{2}\u{2}\u{395}\u{1F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{396}\u{394}\u{3}\u{2}\u{2}\u{2}\u{397}\u{398}" .
        "\u{7}\u{22}\u{2}\u{2}\u{398}\u{399}\u{7}\u{1C7}\u{2}\u{2}\u{399}\u{39A}" .
        "\u{7}\u{48}\u{2}\u{2}\u{39A}\u{39B}\u{5}\u{216}\u{10C}\u{2}\u{39B}" .
        "\u{39C}\u{7}\u{7}\u{2}\u{2}\u{39C}\u{39D}\u{7}\u{271}\u{2}\u{2}\u{39D}" .
        "\u{3A3}\u{7}\u{44D}\u{2}\u{2}\u{39E}\u{3A0}\u{7}\u{1B2}\u{2}\u{2}" .
        "\u{39F}\u{3A1}\u{7}\u{435}\u{2}\u{2}\u{3A0}\u{39F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3A0}\u{3A1}\u{3}\u{2}\u{2}\u{2}\u{3A1}\u{3A2}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3A2}\u{3A4}\u{5}\u{21E}\u{110}\u{2}\u{3A3}\u{39E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{3A3}\u{3A4}\u{3}\u{2}\u{2}\u{2}\u{3A4}\u{3AA}\u{3}\u{2}" .
        "\u{2}\u{2}\u{3A5}\u{3A7}\u{7}\u{272}\u{2}\u{2}\u{3A6}\u{3A8}\u{7}" .
        "\u{435}\u{2}\u{2}\u{3A7}\u{3A6}\u{3}\u{2}\u{2}\u{2}\u{3A7}\u{3A8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3A8}\u{3A9}\u{3}\u{2}\u{2}\u{2}\u{3A9}\u{3AB}" .
        "\u{5}\u{21E}\u{110}\u{2}\u{3AA}\u{3A5}\u{3}\u{2}\u{2}\u{2}\u{3AA}" .
        "\u{3AB}\u{3}\u{2}\u{2}\u{2}\u{3AB}\u{3B1}\u{3}\u{2}\u{2}\u{2}\u{3AC}" .
        "\u{3AE}\u{7}\u{21E}\u{2}\u{2}\u{3AD}\u{3AF}\u{7}\u{435}\u{2}\u{2}" .
        "\u{3AE}\u{3AD}\u{3}\u{2}\u{2}\u{2}\u{3AE}\u{3AF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3AF}\u{3B0}\u{3}\u{2}\u{2}\u{2}\u{3B0}\u{3B2}\u{5}\u{21E}\u{110}" .
        "\u{2}\u{3B1}\u{3AC}\u{3}\u{2}\u{2}\u{2}\u{3B1}\u{3B2}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3B2}\u{3B8}\u{3}\u{2}\u{2}\u{2}\u{3B3}\u{3B5}\u{7}\u{1F6}" .
        "\u{2}\u{2}\u{3B4}\u{3B6}\u{7}\u{435}\u{2}\u{2}\u{3B5}\u{3B4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{3B5}\u{3B6}\u{3}\u{2}\u{2}\u{2}\u{3B6}\u{3B7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{3B7}\u{3B9}\u{5}\u{216}\u{10C}\u{2}\u{3B8}\u{3B3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3B8}\u{3B9}\u{3}\u{2}\u{2}\u{2}\u{3B9}\u{3BB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3BA}\u{3BC}\u{7}\u{280}\u{2}\u{2}\u{3BB}\u{3BA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3BB}\u{3BC}\u{3}\u{2}\u{2}\u{2}\u{3BC}\u{3C2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3BD}\u{3BF}\u{7}\u{163}\u{2}\u{2}\u{3BE}\u{3C0}" .
        "\u{7}\u{435}\u{2}\u{2}\u{3BF}\u{3BE}\u{3}\u{2}\u{2}\u{2}\u{3BF}\u{3C0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3C0}\u{3C1}\u{3}\u{2}\u{2}\u{2}\u{3C1}\u{3C3}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{3C2}\u{3BD}\u{3}\u{2}\u{2}\u{2}\u{3C2}\u{3C3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3C3}\u{3C4}\u{3}\u{2}\u{2}\u{2}\u{3C4}\u{3C6}" .
        "\u{7}\u{189}\u{2}\u{2}\u{3C5}\u{3C7}\u{7}\u{435}\u{2}\u{2}\u{3C6}" .
        "\u{3C5}\u{3}\u{2}\u{2}\u{2}\u{3C6}\u{3C7}\u{3}\u{2}\u{2}\u{2}\u{3C7}" .
        "\u{3C8}\u{3}\u{2}\u{2}\u{2}\u{3C8}\u{3C9}\u{5}\u{20C}\u{107}\u{2}" .
        "\u{3C9}\u{21}\u{3}\u{2}\u{2}\u{2}\u{3CA}\u{3CC}\u{7}\u{22}\u{2}\u{2}" .
        "\u{3CB}\u{3CD}\u{5}\u{34}\u{1B}\u{2}\u{3CC}\u{3CB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3CC}\u{3CD}\u{3}\u{2}\u{2}\u{2}\u{3CD}\u{3CE}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3CE}\u{3CF}\u{7}\u{7D}\u{2}\u{2}\u{3CF}\u{3D0}\u{5}\u{1FC}" .
        "\u{FF}\u{2}\u{3D0}\u{3D2}\u{7}\u{43E}\u{2}\u{2}\u{3D1}\u{3D3}\u{5}" .
        "\u{44}\u{23}\u{2}\u{3D2}\u{3D1}\u{3}\u{2}\u{2}\u{2}\u{3D2}\u{3D3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3D3}\u{3D8}\u{3}\u{2}\u{2}\u{2}\u{3D4}\u{3D5}" .
        "\u{7}\u{440}\u{2}\u{2}\u{3D5}\u{3D7}\u{5}\u{44}\u{23}\u{2}\u{3D6}" .
        "\u{3D4}\u{3}\u{2}\u{2}\u{2}\u{3D7}\u{3DA}\u{3}\u{2}\u{2}\u{2}\u{3D8}" .
        "\u{3D6}\u{3}\u{2}\u{2}\u{2}\u{3D8}\u{3D9}\u{3}\u{2}\u{2}\u{2}\u{3D9}" .
        "\u{3DB}\u{3}\u{2}\u{2}\u{2}\u{3DA}\u{3D8}\u{3}\u{2}\u{2}\u{2}\u{3DB}" .
        "\u{3DF}\u{7}\u{43F}\u{2}\u{2}\u{3DC}\u{3DE}\u{5}\u{48}\u{25}\u{2}" .
        "\u{3DD}\u{3DC}\u{3}\u{2}\u{2}\u{2}\u{3DE}\u{3E1}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3DF}\u{3DD}\u{3}\u{2}\u{2}\u{2}\u{3DF}\u{3E0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3E0}\u{3E2}\u{3}\u{2}\u{2}\u{2}\u{3E1}\u{3DF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{3E2}\u{3E3}\u{5}\u{162}\u{B2}\u{2}\u{3E3}\u{23}\u{3}\u{2}\u{2}" .
        "\u{2}\u{3E4}\u{3E6}\u{7}\u{22}\u{2}\u{2}\u{3E5}\u{3E7}\u{5}\u{34}" .
        "\u{1B}\u{2}\u{3E6}\u{3E5}\u{3}\u{2}\u{2}\u{2}\u{3E6}\u{3E7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{3E7}\u{3E8}\u{3}\u{2}\u{2}\u{2}\u{3E8}\u{3E9}\u{7}\u{1A4}" .
        "\u{2}\u{2}\u{3E9}\u{3EA}\u{5}\u{1FC}\u{FF}\u{2}\u{3EA}\u{3EC}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{3EB}\u{3ED}\u{5}\u{46}\u{24}\u{2}\u{3EC}\u{3EB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3EC}\u{3ED}\u{3}\u{2}\u{2}\u{2}\u{3ED}\u{3F2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3EE}\u{3EF}\u{7}\u{440}\u{2}\u{2}\u{3EF}\u{3F1}" .
        "\u{5}\u{46}\u{24}\u{2}\u{3F0}\u{3EE}\u{3}\u{2}\u{2}\u{2}\u{3F1}\u{3F4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3F2}\u{3F0}\u{3}\u{2}\u{2}\u{2}\u{3F2}\u{3F3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3F3}\u{3F5}\u{3}\u{2}\u{2}\u{2}\u{3F4}\u{3F2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{3F5}\u{3F6}\u{7}\u{43F}\u{2}\u{2}\u{3F6}\u{3F7}" .
        "\u{7}\u{233}\u{2}\u{2}\u{3F7}\u{3FB}\u{5}\u{22A}\u{116}\u{2}\u{3F8}" .
        "\u{3FA}\u{5}\u{48}\u{25}\u{2}\u{3F9}\u{3F8}\u{3}\u{2}\u{2}\u{2}\u{3FA}" .
        "\u{3FD}\u{3}\u{2}\u{2}\u{2}\u{3FB}\u{3F9}\u{3}\u{2}\u{2}\u{2}\u{3FB}" .
        "\u{3FC}\u{3}\u{2}\u{2}\u{2}\u{3FC}\u{400}\u{3}\u{2}\u{2}\u{2}\u{3FD}" .
        "\u{3FB}\u{3}\u{2}\u{2}\u{2}\u{3FE}\u{401}\u{5}\u{162}\u{B2}\u{2}\u{3FF}" .
        "\u{401}\u{5}\u{172}\u{BA}\u{2}\u{400}\u{3FE}\u{3}\u{2}\u{2}\u{2}\u{400}" .
        "\u{3FF}\u{3}\u{2}\u{2}\u{2}\u{401}\u{25}\u{3}\u{2}\u{2}\u{2}\u{402}" .
        "\u{403}\u{7}\u{22}\u{2}\u{2}\u{403}\u{404}\u{7}\u{23E}\u{2}\u{2}\u{404}" .
        "\u{405}\u{5}\u{216}\u{10C}\u{2}\u{405}\u{406}\u{7}\u{42}\u{2}\u{2}" .
        "\u{406}\u{407}\u{7}\u{176}\u{2}\u{2}\u{407}\u{408}\u{7}\u{285}\u{2}" .
        "\u{2}\u{408}\u{409}\u{9}\u{7}\u{2}\u{2}\u{409}\u{40A}\u{7}\u{203}" .
        "\u{2}\u{2}\u{40A}\u{40B}\u{7}\u{43E}\u{2}\u{2}\u{40B}\u{410}\u{5}" .
        "\u{4A}\u{26}\u{2}\u{40C}\u{40D}\u{7}\u{440}\u{2}\u{2}\u{40D}\u{40F}" .
        "\u{5}\u{4A}\u{26}\u{2}\u{40E}\u{40C}\u{3}\u{2}\u{2}\u{2}\u{40F}\u{412}" .
        "\u{3}\u{2}\u{2}\u{2}\u{410}\u{40E}\u{3}\u{2}\u{2}\u{2}\u{410}\u{411}" .
        "\u{3}\u{2}\u{2}\u{2}\u{411}\u{413}\u{3}\u{2}\u{2}\u{2}\u{412}\u{410}" .
        "\u{3}\u{2}\u{2}\u{2}\u{413}\u{414}\u{7}\u{43F}\u{2}\u{2}\u{414}\u{27}" .
        "\u{3}\u{2}\u{2}\u{2}\u{415}\u{417}\u{7}\u{22}\u{2}\u{2}\u{416}\u{418}" .
        "\u{7}\u{267}\u{2}\u{2}\u{417}\u{416}\u{3}\u{2}\u{2}\u{2}\u{417}\u{418}" .
        "\u{3}\u{2}\u{2}\u{2}\u{418}\u{419}\u{3}\u{2}\u{2}\u{2}\u{419}\u{41B}" .
        "\u{7}\u{A3}\u{2}\u{2}\u{41A}\u{41C}\u{5}\u{250}\u{129}\u{2}\u{41B}" .
        "\u{41A}\u{3}\u{2}\u{2}\u{2}\u{41B}\u{41C}\u{3}\u{2}\u{2}\u{2}\u{41C}" .
        "\u{41D}\u{3}\u{2}\u{2}\u{2}\u{41D}\u{425}\u{5}\u{1FE}\u{100}\u{2}" .
        "\u{41E}\u{41F}\u{7}\u{5F}\u{2}\u{2}\u{41F}\u{426}\u{5}\u{1FE}\u{100}" .
        "\u{2}\u{420}\u{421}\u{7}\u{43E}\u{2}\u{2}\u{421}\u{422}\u{7}\u{5F}" .
        "\u{2}\u{2}\u{422}\u{423}\u{5}\u{1FE}\u{100}\u{2}\u{423}\u{424}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{424}\u{426}\u{3}\u{2}\u{2}\u{2}\u{425}\u{41E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{425}\u{420}\u{3}\u{2}\u{2}\u{2}\u{426}\u{464}" .
        "\u{3}\u{2}\u{2}\u{2}\u{427}\u{429}\u{7}\u{22}\u{2}\u{2}\u{428}\u{42A}" .
        "\u{7}\u{267}\u{2}\u{2}\u{429}\u{428}\u{3}\u{2}\u{2}\u{2}\u{429}\u{42A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{42A}\u{42B}\u{3}\u{2}\u{2}\u{2}\u{42B}\u{42D}" .
        "\u{7}\u{A3}\u{2}\u{2}\u{42C}\u{42E}\u{5}\u{250}\u{129}\u{2}\u{42D}" .
        "\u{42C}\u{3}\u{2}\u{2}\u{2}\u{42D}\u{42E}\u{3}\u{2}\u{2}\u{2}\u{42E}" .
        "\u{42F}\u{3}\u{2}\u{2}\u{2}\u{42F}\u{431}\u{5}\u{1FE}\u{100}\u{2}" .
        "\u{430}\u{432}\u{5}\u{4C}\u{27}\u{2}\u{431}\u{430}\u{3}\u{2}\u{2}" .
        "\u{2}\u{431}\u{432}\u{3}\u{2}\u{2}\u{2}\u{432}\u{43D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{433}\u{43A}\u{5}\u{5E}\u{30}\u{2}\u{434}\u{436}\u{7}\u{440}" .
        "\u{2}\u{2}\u{435}\u{434}\u{3}\u{2}\u{2}\u{2}\u{435}\u{436}\u{3}\u{2}" .
        "\u{2}\u{2}\u{436}\u{437}\u{3}\u{2}\u{2}\u{2}\u{437}\u{439}\u{5}\u{5E}" .
        "\u{30}\u{2}\u{438}\u{435}\u{3}\u{2}\u{2}\u{2}\u{439}\u{43C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{43A}\u{438}\u{3}\u{2}\u{2}\u{2}\u{43A}\u{43B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{43B}\u{43E}\u{3}\u{2}\u{2}\u{2}\u{43C}\u{43A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{43D}\u{433}\u{3}\u{2}\u{2}\u{2}\u{43D}\u{43E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{43E}\u{440}\u{3}\u{2}\u{2}\u{2}\u{43F}\u{441}\u{5}\u{64}" .
        "\u{33}\u{2}\u{440}\u{43F}\u{3}\u{2}\u{2}\u{2}\u{440}\u{441}\u{3}\u{2}" .
        "\u{2}\u{2}\u{441}\u{443}\u{3}\u{2}\u{2}\u{2}\u{442}\u{444}\u{9}\u{8}" .
        "\u{2}\u{2}\u{443}\u{442}\u{3}\u{2}\u{2}\u{2}\u{443}\u{444}\u{3}\u{2}" .
        "\u{2}\u{2}\u{444}\u{446}\u{3}\u{2}\u{2}\u{2}\u{445}\u{447}\u{7}\u{E}" .
        "\u{2}\u{2}\u{446}\u{445}\u{3}\u{2}\u{2}\u{2}\u{446}\u{447}\u{3}\u{2}" .
        "\u{2}\u{2}\u{447}\u{448}\u{3}\u{2}\u{2}\u{2}\u{448}\u{449}\u{5}\u{B6}" .
        "\u{5C}\u{2}\u{449}\u{464}\u{3}\u{2}\u{2}\u{2}\u{44A}\u{44C}\u{7}\u{22}" .
        "\u{2}\u{2}\u{44B}\u{44D}\u{7}\u{267}\u{2}\u{2}\u{44C}\u{44B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{44C}\u{44D}\u{3}\u{2}\u{2}\u{2}\u{44D}\u{44E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{44E}\u{450}\u{7}\u{A3}\u{2}\u{2}\u{44F}\u{451}\u{5}" .
        "\u{250}\u{129}\u{2}\u{450}\u{44F}\u{3}\u{2}\u{2}\u{2}\u{450}\u{451}" .
        "\u{3}\u{2}\u{2}\u{2}\u{451}\u{452}\u{3}\u{2}\u{2}\u{2}\u{452}\u{453}" .
        "\u{5}\u{1FE}\u{100}\u{2}\u{453}\u{45E}\u{5}\u{4C}\u{27}\u{2}\u{454}" .
        "\u{45B}\u{5}\u{5E}\u{30}\u{2}\u{455}\u{457}\u{7}\u{440}\u{2}\u{2}" .
        "\u{456}\u{455}\u{3}\u{2}\u{2}\u{2}\u{456}\u{457}\u{3}\u{2}\u{2}\u{2}" .
        "\u{457}\u{458}\u{3}\u{2}\u{2}\u{2}\u{458}\u{45A}\u{5}\u{5E}\u{30}" .
        "\u{2}\u{459}\u{456}\u{3}\u{2}\u{2}\u{2}\u{45A}\u{45D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{45B}\u{459}\u{3}\u{2}\u{2}\u{2}\u{45B}\u{45C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{45C}\u{45F}\u{3}\u{2}\u{2}\u{2}\u{45D}\u{45B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{45E}\u{454}\u{3}\u{2}\u{2}\u{2}\u{45E}\u{45F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{45F}\u{461}\u{3}\u{2}\u{2}\u{2}\u{460}\u{462}\u{5}\u{64}\u{33}" .
        "\u{2}\u{461}\u{460}\u{3}\u{2}\u{2}\u{2}\u{461}\u{462}\u{3}\u{2}\u{2}" .
        "\u{2}\u{462}\u{464}\u{3}\u{2}\u{2}\u{2}\u{463}\u{415}\u{3}\u{2}\u{2}" .
        "\u{2}\u{463}\u{427}\u{3}\u{2}\u{2}\u{2}\u{463}\u{44A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{464}\u{29}\u{3}\u{2}\u{2}\u{2}\u{465}\u{466}\u{7}\u{22}\u{2}" .
        "\u{2}\u{466}\u{467}\u{7}\u{265}\u{2}\u{2}\u{467}\u{468}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{468}\u{469}\u{7}\u{7}\u{2}\u{2}\u{469}\u{46A}\u{7}" .
        "\u{177}\u{2}\u{2}\u{46A}\u{46E}\u{7}\u{44D}\u{2}\u{2}\u{46B}\u{46C}" .
        "\u{7}\u{19B}\u{2}\u{2}\u{46C}\u{46D}\u{7}\u{435}\u{2}\u{2}\u{46D}" .
        "\u{46F}\u{5}\u{21E}\u{110}\u{2}\u{46E}\u{46B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{46E}\u{46F}\u{3}\u{2}\u{2}\u{2}\u{46F}\u{475}\u{3}\u{2}\u{2}\u{2}" .
        "\u{470}\u{472}\u{7}\u{189}\u{2}\u{2}\u{471}\u{473}\u{7}\u{435}\u{2}" .
        "\u{2}\u{472}\u{471}\u{3}\u{2}\u{2}\u{2}\u{472}\u{473}\u{3}\u{2}\u{2}" .
        "\u{2}\u{473}\u{474}\u{3}\u{2}\u{2}\u{2}\u{474}\u{476}\u{5}\u{20C}" .
        "\u{107}\u{2}\u{475}\u{470}\u{3}\u{2}\u{2}\u{2}\u{475}\u{476}\u{3}" .
        "\u{2}\u{2}\u{2}\u{476}\u{2B}\u{3}\u{2}\u{2}\u{2}\u{477}\u{478}\u{7}" .
        "\u{22}\u{2}\u{2}\u{478}\u{479}\u{7}\u{265}\u{2}\u{2}\u{479}\u{47A}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{47A}\u{47B}\u{7}\u{7}\u{2}\u{2}\u{47B}" .
        "\u{47C}\u{7}\u{177}\u{2}\u{2}\u{47C}\u{47D}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{47D}\u{47E}\u{7}\u{B1}\u{2}\u{2}\u{47E}\u{47F}\u{7}\u{1C7}\u{2}" .
        "\u{2}\u{47F}\u{480}\u{7}\u{48}\u{2}\u{2}\u{480}\u{486}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{481}\u{483}\u{7}\u{197}\u{2}\u{2}\u{482}\u{484}\u{7}" .
        "\u{435}\u{2}\u{2}\u{483}\u{482}\u{3}\u{2}\u{2}\u{2}\u{483}\u{484}" .
        "\u{3}\u{2}\u{2}\u{2}\u{484}\u{485}\u{3}\u{2}\u{2}\u{2}\u{485}\u{487}" .
        "\u{5}\u{21E}\u{110}\u{2}\u{486}\u{481}\u{3}\u{2}\u{2}\u{2}\u{486}" .
        "\u{487}\u{3}\u{2}\u{2}\u{2}\u{487}\u{48D}\u{3}\u{2}\u{2}\u{2}\u{488}" .
        "\u{48A}\u{7}\u{1B2}\u{2}\u{2}\u{489}\u{48B}\u{7}\u{435}\u{2}\u{2}" .
        "\u{48A}\u{489}\u{3}\u{2}\u{2}\u{2}\u{48A}\u{48B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{48B}\u{48C}\u{3}\u{2}\u{2}\u{2}\u{48C}\u{48E}\u{5}\u{21E}\u{110}" .
        "\u{2}\u{48D}\u{488}\u{3}\u{2}\u{2}\u{2}\u{48D}\u{48E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{48E}\u{494}\u{3}\u{2}\u{2}\u{2}\u{48F}\u{491}\u{7}\u{149}" .
        "\u{2}\u{2}\u{490}\u{492}\u{7}\u{435}\u{2}\u{2}\u{491}\u{490}\u{3}" .
        "\u{2}\u{2}\u{2}\u{491}\u{492}\u{3}\u{2}\u{2}\u{2}\u{492}\u{493}\u{3}" .
        "\u{2}\u{2}\u{2}\u{493}\u{495}\u{5}\u{21E}\u{110}\u{2}\u{494}\u{48F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{494}\u{495}\u{3}\u{2}\u{2}\u{2}\u{495}\u{49B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{496}\u{498}\u{7}\u{1E1}\u{2}\u{2}\u{497}\u{499}" .
        "\u{7}\u{435}\u{2}\u{2}\u{498}\u{497}\u{3}\u{2}\u{2}\u{2}\u{498}\u{499}" .
        "\u{3}\u{2}\u{2}\u{2}\u{499}\u{49A}\u{3}\u{2}\u{2}\u{2}\u{49A}\u{49C}" .
        "\u{5}\u{21E}\u{110}\u{2}\u{49B}\u{496}\u{3}\u{2}\u{2}\u{2}\u{49B}" .
        "\u{49C}\u{3}\u{2}\u{2}\u{2}\u{49C}\u{4A2}\u{3}\u{2}\u{2}\u{2}\u{49D}" .
        "\u{49F}\u{7}\u{1F6}\u{2}\u{2}\u{49E}\u{4A0}\u{7}\u{435}\u{2}\u{2}" .
        "\u{49F}\u{49E}\u{3}\u{2}\u{2}\u{2}\u{49F}\u{4A0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{4A0}\u{4A1}\u{3}\u{2}\u{2}\u{2}\u{4A1}\u{4A3}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{4A2}\u{49D}\u{3}\u{2}\u{2}\u{2}\u{4A2}\u{4A3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4A3}\u{4A5}\u{3}\u{2}\u{2}\u{2}\u{4A4}\u{4A6}\u{7}\u{280}" .
        "\u{2}\u{2}\u{4A5}\u{4A4}\u{3}\u{2}\u{2}\u{2}\u{4A5}\u{4A6}\u{3}\u{2}" .
        "\u{2}\u{2}\u{4A6}\u{4AC}\u{3}\u{2}\u{2}\u{2}\u{4A7}\u{4A9}\u{7}\u{163}" .
        "\u{2}\u{2}\u{4A8}\u{4AA}\u{7}\u{435}\u{2}\u{2}\u{4A9}\u{4A8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{4A9}\u{4AA}\u{3}\u{2}\u{2}\u{2}\u{4AA}\u{4AB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{4AB}\u{4AD}\u{7}\u{44D}\u{2}\u{2}\u{4AC}\u{4A7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4AC}\u{4AD}\u{3}\u{2}\u{2}\u{2}\u{4AD}\u{4AE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4AE}\u{4B0}\u{7}\u{189}\u{2}\u{2}\u{4AF}\u{4B1}" .
        "\u{7}\u{435}\u{2}\u{2}\u{4B0}\u{4AF}\u{3}\u{2}\u{2}\u{2}\u{4B0}\u{4B1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4B1}\u{4B2}\u{3}\u{2}\u{2}\u{2}\u{4B2}\u{4B3}" .
        "\u{5}\u{20C}\u{107}\u{2}\u{4B3}\u{2D}\u{3}\u{2}\u{2}\u{2}\u{4B4}\u{4B6}" .
        "\u{7}\u{22}\u{2}\u{2}\u{4B5}\u{4B7}\u{5}\u{34}\u{1B}\u{2}\u{4B6}\u{4B5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4B6}\u{4B7}\u{3}\u{2}\u{2}\u{2}\u{4B7}\u{4B8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4B8}\u{4B9}\u{7}\u{A8}\u{2}\u{2}\u{4B9}\u{4BA}" .
        "\u{5}\u{1FC}\u{FF}\u{2}\u{4BA}\u{4BB}\u{9}\u{9}\u{2}\u{2}\u{4BB}\u{4BC}" .
        "\u{9}\u{A}\u{2}\u{2}\u{4BC}\u{4BD}\u{7}\u{71}\u{2}\u{2}\u{4BD}\u{4BE}" .
        "\u{5}\u{1FE}\u{100}\u{2}\u{4BE}\u{4BF}\u{7}\u{40}\u{2}\u{2}\u{4BF}" .
        "\u{4C0}\u{7}\u{34}\u{2}\u{2}\u{4C0}\u{4C3}\u{7}\u{238}\u{2}\u{2}\u{4C1}" .
        "\u{4C2}\u{9}\u{B}\u{2}\u{2}\u{4C2}\u{4C4}\u{5}\u{1FC}\u{FF}\u{2}\u{4C3}" .
        "\u{4C1}\u{3}\u{2}\u{2}\u{2}\u{4C3}\u{4C4}\u{3}\u{2}\u{2}\u{2}\u{4C4}" .
        "\u{4C5}\u{3}\u{2}\u{2}\u{2}\u{4C5}\u{4C6}\u{5}\u{162}\u{B2}\u{2}\u{4C6}" .
        "\u{2F}\u{3}\u{2}\u{2}\u{2}\u{4C7}\u{4CA}\u{7}\u{22}\u{2}\u{2}\u{4C8}" .
        "\u{4C9}\u{7}\u{75}\u{2}\u{2}\u{4C9}\u{4CB}\u{7}\u{87}\u{2}\u{2}\u{4CA}" .
        "\u{4C8}\u{3}\u{2}\u{2}\u{2}\u{4CA}\u{4CB}\u{3}\u{2}\u{2}\u{2}\u{4CB}" .
        "\u{4CF}\u{3}\u{2}\u{2}\u{2}\u{4CC}\u{4CD}\u{7}\u{144}\u{2}\u{2}\u{4CD}" .
        "\u{4CE}\u{7}\u{435}\u{2}\u{2}\u{4CE}\u{4D0}\u{9}\u{C}\u{2}\u{2}\u{4CF}" .
        "\u{4CC}\u{3}\u{2}\u{2}\u{2}\u{4CF}\u{4D0}\u{3}\u{2}\u{2}\u{2}\u{4D0}" .
        "\u{4D2}\u{3}\u{2}\u{2}\u{2}\u{4D1}\u{4D3}\u{5}\u{34}\u{1B}\u{2}\u{4D2}" .
        "\u{4D1}\u{3}\u{2}\u{2}\u{2}\u{4D2}\u{4D3}\u{3}\u{2}\u{2}\u{2}\u{4D3}" .
        "\u{4D7}\u{3}\u{2}\u{2}\u{2}\u{4D4}\u{4D5}\u{7}\u{98}\u{2}\u{2}\u{4D5}" .
        "\u{4D6}\u{7}\u{23D}\u{2}\u{2}\u{4D6}\u{4D8}\u{9}\u{D}\u{2}\u{2}\u{4D7}" .
        "\u{4D4}\u{3}\u{2}\u{2}\u{2}\u{4D7}\u{4D8}\u{3}\u{2}\u{2}\u{2}\u{4D8}" .
        "\u{4D9}\u{3}\u{2}\u{2}\u{2}\u{4D9}\u{4DA}\u{7}\u{27D}\u{2}\u{2}\u{4DA}" .
        "\u{4DF}\u{5}\u{1FC}\u{FF}\u{2}\u{4DB}\u{4DC}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{4DC}\u{4DD}\u{5}\u{236}\u{11C}\u{2}\u{4DD}\u{4DE}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{4DE}\u{4E0}\u{3}\u{2}\u{2}\u{2}\u{4DF}\u{4DB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4DF}\u{4E0}\u{3}\u{2}\u{2}\u{2}\u{4E0}\u{4E1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4E1}\u{4E2}\u{7}\u{E}\u{2}\u{2}\u{4E2}\u{4E9}\u{5}\u{B6}\u{5C}" .
        "\u{2}\u{4E3}\u{4E5}\u{7}\u{B7}\u{2}\u{2}\u{4E4}\u{4E6}\u{9}\u{E}\u{2}" .
        "\u{2}\u{4E5}\u{4E4}\u{3}\u{2}\u{2}\u{2}\u{4E5}\u{4E6}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4E6}\u{4E7}\u{3}\u{2}\u{2}\u{2}\u{4E7}\u{4E8}\u{7}\u{1B}\u{2}" .
        "\u{2}\u{4E8}\u{4EA}\u{7}\u{73}\u{2}\u{2}\u{4E9}\u{4E3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4E9}\u{4EA}\u{3}\u{2}\u{2}\u{2}\u{4EA}\u{31}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4EB}\u{4ED}\u{7}\u{2A}\u{2}\u{2}\u{4EC}\u{4EB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4EC}\u{4ED}\u{3}\u{2}\u{2}\u{2}\u{4ED}\u{4F1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{4EE}\u{4EF}\u{7}\u{1A}\u{2}\u{2}\u{4EF}\u{4F2}\u{7}\u{93}" .
        "\u{2}\u{2}\u{4F0}\u{4F2}\u{7}\u{31E}\u{2}\u{2}\u{4F1}\u{4EE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{4F1}\u{4F0}\u{3}\u{2}\u{2}\u{2}\u{4F2}\u{4F4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{4F3}\u{4F5}\u{7}\u{435}\u{2}\u{2}\u{4F4}\u{4F3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4F4}\u{4F5}\u{3}\u{2}\u{2}\u{2}\u{4F5}\u{4F8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{4F6}\u{4F9}\u{5}\u{208}\u{105}\u{2}\u{4F7}" .
        "\u{4F9}\u{7}\u{2A}\u{2}\u{2}\u{4F8}\u{4F6}\u{3}\u{2}\u{2}\u{2}\u{4F8}" .
        "\u{4F7}\u{3}\u{2}\u{2}\u{2}\u{4F9}\u{503}\u{3}\u{2}\u{2}\u{2}\u{4FA}" .
        "\u{4FC}\u{7}\u{2A}\u{2}\u{2}\u{4FB}\u{4FA}\u{3}\u{2}\u{2}\u{2}\u{4FB}" .
        "\u{4FC}\u{3}\u{2}\u{2}\u{2}\u{4FC}\u{4FD}\u{3}\u{2}\u{2}\u{2}\u{4FD}" .
        "\u{4FF}\u{7}\u{1C}\u{2}\u{2}\u{4FE}\u{500}\u{7}\u{435}\u{2}\u{2}\u{4FF}" .
        "\u{4FE}\u{3}\u{2}\u{2}\u{2}\u{4FF}\u{500}\u{3}\u{2}\u{2}\u{2}\u{500}" .
        "\u{501}\u{3}\u{2}\u{2}\u{2}\u{501}\u{503}\u{5}\u{20A}\u{106}\u{2}" .
        "\u{502}\u{4EC}\u{3}\u{2}\u{2}\u{2}\u{502}\u{4FB}\u{3}\u{2}\u{2}\u{2}" .
        "\u{503}\u{33}\u{3}\u{2}\u{2}\u{2}\u{504}\u{505}\u{7}\u{17A}\u{2}\u{2}" .
        "\u{505}\u{50C}\u{7}\u{435}\u{2}\u{2}\u{506}\u{50D}\u{5}\u{204}\u{103}" .
        "\u{2}\u{507}\u{50A}\u{7}\u{25}\u{2}\u{2}\u{508}\u{509}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{509}\u{50B}\u{7}\u{43F}\u{2}\u{2}\u{50A}\u{508}\u{3}" .
        "\u{2}\u{2}\u{2}\u{50A}\u{50B}\u{3}\u{2}\u{2}\u{2}\u{50B}\u{50D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{50C}\u{506}\u{3}\u{2}\u{2}\u{2}\u{50C}\u{507}\u{3}" .
        "\u{2}\u{2}\u{2}\u{50D}\u{35}\u{3}\u{2}\u{2}\u{2}\u{50E}\u{50F}\u{7}" .
        "\u{146}\u{2}\u{2}\u{50F}\u{513}\u{5}\u{38}\u{1D}\u{2}\u{510}\u{512}" .
        "\u{5}\u{3A}\u{1E}\u{2}\u{511}\u{510}\u{3}\u{2}\u{2}\u{2}\u{512}\u{515}" .
        "\u{3}\u{2}\u{2}\u{2}\u{513}\u{511}\u{3}\u{2}\u{2}\u{2}\u{513}\u{514}" .
        "\u{3}\u{2}\u{2}\u{2}\u{514}\u{531}\u{3}\u{2}\u{2}\u{2}\u{515}\u{513}" .
        "\u{3}\u{2}\u{2}\u{2}\u{516}\u{519}\u{7}\u{191}\u{2}\u{2}\u{517}\u{51A}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{518}\u{51A}\u{5}\u{27A}\u{13E}\u{2}\u{519}" .
        "\u{517}\u{3}\u{2}\u{2}\u{2}\u{519}\u{518}\u{3}\u{2}\u{2}\u{2}\u{51A}" .
        "\u{51B}\u{3}\u{2}\u{2}\u{2}\u{51B}\u{524}\u{5}\u{3C}\u{1F}\u{2}\u{51C}" .
        "\u{51D}\u{7}\u{254}\u{2}\u{2}\u{51D}\u{521}\u{5}\u{38}\u{1D}\u{2}" .
        "\u{51E}\u{520}\u{5}\u{3A}\u{1E}\u{2}\u{51F}\u{51E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{520}\u{523}\u{3}\u{2}\u{2}\u{2}\u{521}\u{51F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{521}\u{522}\u{3}\u{2}\u{2}\u{2}\u{522}\u{525}\u{3}\u{2}\u{2}" .
        "\u{2}\u{523}\u{521}\u{3}\u{2}\u{2}\u{2}\u{524}\u{51C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{524}\u{525}\u{3}\u{2}\u{2}\u{2}\u{525}\u{52E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{526}\u{527}\u{7}\u{188}\u{2}\u{2}\u{527}\u{52B}\u{5}\u{38}" .
        "\u{1D}\u{2}\u{528}\u{52A}\u{5}\u{3A}\u{1E}\u{2}\u{529}\u{528}\u{3}" .
        "\u{2}\u{2}\u{2}\u{52A}\u{52D}\u{3}\u{2}\u{2}\u{2}\u{52B}\u{529}\u{3}" .
        "\u{2}\u{2}\u{2}\u{52B}\u{52C}\u{3}\u{2}\u{2}\u{2}\u{52C}\u{52F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{52D}\u{52B}\u{3}\u{2}\u{2}\u{2}\u{52E}\u{526}\u{3}" .
        "\u{2}\u{2}\u{2}\u{52E}\u{52F}\u{3}\u{2}\u{2}\u{2}\u{52F}\u{531}\u{3}" .
        "\u{2}\u{2}\u{2}\u{530}\u{50E}\u{3}\u{2}\u{2}\u{2}\u{530}\u{516}\u{3}" .
        "\u{2}\u{2}\u{2}\u{531}\u{37}\u{3}\u{2}\u{2}\u{2}\u{532}\u{537}\u{7}" .
        "\u{12F}\u{2}\u{2}\u{533}\u{537}\u{5}\u{220}\u{111}\u{2}\u{534}\u{537}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{535}\u{537}\u{5}\u{27A}\u{13E}\u{2}\u{536}" .
        "\u{532}\u{3}\u{2}\u{2}\u{2}\u{536}\u{533}\u{3}\u{2}\u{2}\u{2}\u{536}" .
        "\u{534}\u{3}\u{2}\u{2}\u{2}\u{536}\u{535}\u{3}\u{2}\u{2}\u{2}\u{537}" .
        "\u{39}\u{3}\u{2}\u{2}\u{2}\u{538}\u{539}\u{7}\u{431}\u{2}\u{2}\u{539}" .
        "\u{53C}\u{7}\u{54}\u{2}\u{2}\u{53A}\u{53D}\u{5}\u{21C}\u{10F}\u{2}" .
        "\u{53B}\u{53D}\u{5}\u{27A}\u{13E}\u{2}\u{53C}\u{53A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{53C}\u{53B}\u{3}\u{2}\u{2}\u{2}\u{53D}\u{53E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{53E}\u{53F}\u{5}\u{3C}\u{1F}\u{2}\u{53F}\u{3B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{540}\u{54E}\u{5}\u{292}\u{14A}\u{2}\u{541}\u{54E}\u{7}\u{D4}" .
        "\u{2}\u{2}\u{542}\u{54E}\u{7}\u{E7}\u{2}\u{2}\u{543}\u{54E}\u{7}\u{E8}" .
        "\u{2}\u{2}\u{544}\u{54E}\u{7}\u{E9}\u{2}\u{2}\u{545}\u{54E}\u{7}\u{EA}" .
        "\u{2}\u{2}\u{546}\u{54E}\u{7}\u{EB}\u{2}\u{2}\u{547}\u{54E}\u{7}\u{EC}" .
        "\u{2}\u{2}\u{548}\u{54E}\u{7}\u{ED}\u{2}\u{2}\u{549}\u{54E}\u{7}\u{EE}" .
        "\u{2}\u{2}\u{54A}\u{54E}\u{7}\u{EF}\u{2}\u{2}\u{54B}\u{54E}\u{7}\u{F0}" .
        "\u{2}\u{2}\u{54C}\u{54E}\u{7}\u{F1}\u{2}\u{2}\u{54D}\u{540}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{541}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{542}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{543}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{544}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{545}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{546}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{547}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{548}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{549}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{54A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54D}\u{54B}\u{3}\u{2}\u{2}\u{2}\u{54D}\u{54C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{54E}\u{3D}\u{3}\u{2}\u{2}\u{2}\u{54F}\u{555}\u{7}\u{185}" .
        "\u{2}\u{2}\u{550}\u{555}\u{7}\u{17E}\u{2}\u{2}\u{551}\u{552}\u{7}" .
        "\u{17E}\u{2}\u{2}\u{552}\u{553}\u{7}\u{71}\u{2}\u{2}\u{553}\u{555}" .
        "\u{7}\u{244}\u{2}\u{2}\u{554}\u{54F}\u{3}\u{2}\u{2}\u{2}\u{554}\u{550}" .
        "\u{3}\u{2}\u{2}\u{2}\u{554}\u{551}\u{3}\u{2}\u{2}\u{2}\u{555}\u{3F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{556}\u{557}\u{7}\u{B2}\u{2}\u{2}\u{557}\u{558}" .
        "\u{9}\u{F}\u{2}\u{2}\u{558}\u{41}\u{3}\u{2}\u{2}\u{2}\u{559}\u{55B}" .
        "\u{7}\u{1BF}\u{2}\u{2}\u{55A}\u{55C}\u{7}\u{435}\u{2}\u{2}\u{55B}" .
        "\u{55A}\u{3}\u{2}\u{2}\u{2}\u{55B}\u{55C}\u{3}\u{2}\u{2}\u{2}\u{55C}" .
        "\u{55D}\u{3}\u{2}\u{2}\u{2}\u{55D}\u{567}\u{5}\u{21E}\u{110}\u{2}" .
        "\u{55E}\u{567}\u{5}\u{40}\u{21}\u{2}\u{55F}\u{560}\u{7}\u{B7}\u{2}" .
        "\u{2}\u{560}\u{561}\u{7}\u{207}\u{2}\u{2}\u{561}\u{567}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{562}\u{563}\u{7}\u{163}\u{2}\u{2}\u{563}\u{567}\u{7}" .
        "\u{44D}\u{2}\u{2}\u{564}\u{567}\u{7}\u{1B7}\u{2}\u{2}\u{565}\u{567}" .
        "\u{7}\u{27F}\u{2}\u{2}\u{566}\u{559}\u{3}\u{2}\u{2}\u{2}\u{566}\u{55E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{566}\u{55F}\u{3}\u{2}\u{2}\u{2}\u{566}\u{562}" .
        "\u{3}\u{2}\u{2}\u{2}\u{566}\u{564}\u{3}\u{2}\u{2}\u{2}\u{566}\u{565}" .
        "\u{3}\u{2}\u{2}\u{2}\u{567}\u{43}\u{3}\u{2}\u{2}\u{2}\u{568}\u{56A}" .
        "\u{9}\u{10}\u{2}\u{2}\u{569}\u{568}\u{3}\u{2}\u{2}\u{2}\u{569}\u{56A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{56A}\u{56B}\u{3}\u{2}\u{2}\u{2}\u{56B}\u{56C}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{56C}\u{56D}\u{5}\u{22A}\u{116}\u{2}\u{56D}" .
        "\u{45}\u{3}\u{2}\u{2}\u{2}\u{56E}\u{56F}\u{5}\u{216}\u{10C}\u{2}\u{56F}" .
        "\u{570}\u{5}\u{22A}\u{116}\u{2}\u{570}\u{47}\u{3}\u{2}\u{2}\u{2}\u{571}" .
        "\u{572}\u{7}\u{163}\u{2}\u{2}\u{572}\u{589}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{573}\u{574}\u{7}\u{1C0}\u{2}\u{2}\u{574}\u{589}\u{7}\u{98}\u{2}" .
        "\u{2}\u{575}\u{577}\u{7}\u{6D}\u{2}\u{2}\u{576}\u{575}\u{3}\u{2}\u{2}" .
        "\u{2}\u{576}\u{577}\u{3}\u{2}\u{2}\u{2}\u{577}\u{578}\u{3}\u{2}\u{2}" .
        "\u{2}\u{578}\u{589}\u{7}\u{2F}\u{2}\u{2}\u{579}\u{57A}\u{7}\u{170}" .
        "\u{2}\u{2}\u{57A}\u{584}\u{7}\u{98}\u{2}\u{2}\u{57B}\u{57C}\u{7}\u{1F5}" .
        "\u{2}\u{2}\u{57C}\u{584}\u{7}\u{98}\u{2}\u{2}\u{57D}\u{57E}\u{7}\u{81}" .
        "\u{2}\u{2}\u{57E}\u{57F}\u{7}\u{98}\u{2}\u{2}\u{57F}\u{584}\u{7}\u{176}" .
        "\u{2}\u{2}\u{580}\u{581}\u{7}\u{6B}\u{2}\u{2}\u{581}\u{582}\u{7}\u{98}" .
        "\u{2}\u{2}\u{582}\u{584}\u{7}\u{176}\u{2}\u{2}\u{583}\u{579}\u{3}" .
        "\u{2}\u{2}\u{2}\u{583}\u{57B}\u{3}\u{2}\u{2}\u{2}\u{583}\u{57D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{583}\u{580}\u{3}\u{2}\u{2}\u{2}\u{584}\u{589}\u{3}" .
        "\u{2}\u{2}\u{2}\u{585}\u{586}\u{7}\u{98}\u{2}\u{2}\u{586}\u{587}\u{7}" .
        "\u{23D}\u{2}\u{2}\u{587}\u{589}\u{9}\u{D}\u{2}\u{2}\u{588}\u{571}" .
        "\u{3}\u{2}\u{2}\u{2}\u{588}\u{573}\u{3}\u{2}\u{2}\u{2}\u{588}\u{576}" .
        "\u{3}\u{2}\u{2}\u{2}\u{588}\u{583}\u{3}\u{2}\u{2}\u{2}\u{588}\u{585}" .
        "\u{3}\u{2}\u{2}\u{2}\u{589}\u{49}\u{3}\u{2}\u{2}\u{2}\u{58A}\u{58B}" .
        "\u{7}\u{1AC}\u{2}\u{2}\u{58B}\u{599}\u{7}\u{44D}\u{2}\u{2}\u{58C}" .
        "\u{58D}\u{7}\u{27}\u{2}\u{2}\u{58D}\u{599}\u{7}\u{44D}\u{2}\u{2}\u{58E}" .
        "\u{58F}\u{7}\u{277}\u{2}\u{2}\u{58F}\u{599}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{590}\u{591}\u{7}\u{20B}\u{2}\u{2}\u{591}\u{599}\u{7}\u{44D}\u{2}" .
        "\u{2}\u{592}\u{593}\u{7}\u{247}\u{2}\u{2}\u{593}\u{599}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{594}\u{595}\u{7}\u{204}\u{2}\u{2}\u{595}\u{599}\u{7}" .
        "\u{44D}\u{2}\u{2}\u{596}\u{597}\u{7}\u{210}\u{2}\u{2}\u{597}\u{599}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{598}\u{58A}\u{3}\u{2}\u{2}\u{2}\u{598}" .
        "\u{58C}\u{3}\u{2}\u{2}\u{2}\u{598}\u{58E}\u{3}\u{2}\u{2}\u{2}\u{598}" .
        "\u{590}\u{3}\u{2}\u{2}\u{2}\u{598}\u{592}\u{3}\u{2}\u{2}\u{2}\u{598}" .
        "\u{594}\u{3}\u{2}\u{2}\u{2}\u{598}\u{596}\u{3}\u{2}\u{2}\u{2}\u{599}" .
        "\u{4B}\u{3}\u{2}\u{2}\u{2}\u{59A}\u{59B}\u{7}\u{43E}\u{2}\u{2}\u{59B}" .
        "\u{5A0}\u{5}\u{4E}\u{28}\u{2}\u{59C}\u{59D}\u{7}\u{440}\u{2}\u{2}" .
        "\u{59D}\u{59F}\u{5}\u{4E}\u{28}\u{2}\u{59E}\u{59C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{59F}\u{5A2}\u{3}\u{2}\u{2}\u{2}\u{5A0}\u{59E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{5A0}\u{5A1}\u{3}\u{2}\u{2}\u{2}\u{5A1}\u{5A3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{5A2}\u{5A0}\u{3}\u{2}\u{2}\u{2}\u{5A3}\u{5A4}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{5A4}\u{4D}\u{3}\u{2}\u{2}\u{2}\u{5A5}\u{5A6}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{5A6}\u{5A7}\u{5}\u{50}\u{29}\u{2}\u{5A7}\u{5AB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{5A8}\u{5AB}\u{5}\u{54}\u{2B}\u{2}\u{5A9}\u{5AB}" .
        "\u{5}\u{5C}\u{2F}\u{2}\u{5AA}\u{5A5}\u{3}\u{2}\u{2}\u{2}\u{5AA}\u{5A8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{5AA}\u{5A9}\u{3}\u{2}\u{2}\u{2}\u{5AB}\u{4F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{5AC}\u{5B0}\u{5}\u{22A}\u{116}\u{2}\u{5AD}" .
        "\u{5AF}\u{5}\u{52}\u{2A}\u{2}\u{5AE}\u{5AD}\u{3}\u{2}\u{2}\u{2}\u{5AF}" .
        "\u{5B2}\u{3}\u{2}\u{2}\u{2}\u{5B0}\u{5AE}\u{3}\u{2}\u{2}\u{2}\u{5B0}" .
        "\u{5B1}\u{3}\u{2}\u{2}\u{2}\u{5B1}\u{51}\u{3}\u{2}\u{2}\u{2}\u{5B2}" .
        "\u{5B0}\u{3}\u{2}\u{2}\u{2}\u{5B3}\u{5E9}\u{5}\u{226}\u{114}\u{2}" .
        "\u{5B4}\u{5B5}\u{7}\u{2A}\u{2}\u{2}\u{5B5}\u{5E9}\u{5}\u{248}\u{125}" .
        "\u{2}\u{5B6}\u{5E9}\u{7}\u{27F}\u{2}\u{2}\u{5B7}\u{5E9}\u{7}\u{1B7}" .
        "\u{2}\u{2}\u{5B8}\u{5BD}\u{7}\u{14A}\u{2}\u{2}\u{5B9}\u{5BA}\u{7}" .
        "\u{71}\u{2}\u{2}\u{5BA}\u{5BB}\u{7}\u{AF}\u{2}\u{2}\u{5BB}\u{5BD}" .
        "\u{5}\u{24A}\u{126}\u{2}\u{5BC}\u{5B8}\u{3}\u{2}\u{2}\u{2}\u{5BC}" .
        "\u{5B9}\u{3}\u{2}\u{2}\u{2}\u{5BD}\u{5E9}\u{3}\u{2}\u{2}\u{2}\u{5BE}" .
        "\u{5C0}\u{7}\u{7C}\u{2}\u{2}\u{5BF}\u{5BE}\u{3}\u{2}\u{2}\u{2}\u{5BF}" .
        "\u{5C0}\u{3}\u{2}\u{2}\u{2}\u{5C0}\u{5C1}\u{3}\u{2}\u{2}\u{2}\u{5C1}" .
        "\u{5E9}\u{7}\u{59}\u{2}\u{2}\u{5C2}\u{5C4}\u{7}\u{AC}\u{2}\u{2}\u{5C3}" .
        "\u{5C5}\u{7}\u{59}\u{2}\u{2}\u{5C4}\u{5C3}\u{3}\u{2}\u{2}\u{2}\u{5C4}" .
        "\u{5C5}\u{3}\u{2}\u{2}\u{2}\u{5C5}\u{5E9}\u{3}\u{2}\u{2}\u{2}\u{5C6}" .
        "\u{5C7}\u{7}\u{163}\u{2}\u{2}\u{5C7}\u{5E9}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{5C8}\u{5C9}\u{7}\u{161}\u{2}\u{2}\u{5C9}\u{5E9}\u{9}\u{11}\u{2}" .
        "\u{2}\u{5CA}\u{5CB}\u{7}\u{25A}\u{2}\u{2}\u{5CB}\u{5E9}\u{9}\u{12}" .
        "\u{2}\u{2}\u{5CC}\u{5E9}\u{5}\u{56}\u{2C}\u{2}\u{5CD}\u{5CE}\u{7}" .
        "\u{1C}\u{2}\u{2}\u{5CE}\u{5E9}\u{5}\u{20A}\u{106}\u{2}\u{5CF}\u{5D0}" .
        "\u{7}\u{45}\u{2}\u{2}\u{5D0}\u{5D2}\u{7}\u{A}\u{2}\u{2}\u{5D1}\u{5CF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{5D1}\u{5D2}\u{3}\u{2}\u{2}\u{2}\u{5D2}\u{5D3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{5D3}\u{5D4}\u{7}\u{E}\u{2}\u{2}\u{5D4}\u{5D5}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{5D5}\u{5D6}\u{5}\u{27A}\u{13E}\u{2}\u{5D6}" .
        "\u{5D8}\u{7}\u{43F}\u{2}\u{2}\u{5D7}\u{5D9}\u{9}\u{13}\u{2}\u{2}\u{5D8}" .
        "\u{5D7}\u{3}\u{2}\u{2}\u{2}\u{5D8}\u{5D9}\u{3}\u{2}\u{2}\u{2}\u{5D9}" .
        "\u{5E9}\u{3}\u{2}\u{2}\u{2}\u{5DA}\u{5DB}\u{7}\u{E6}\u{2}\u{2}\u{5DB}" .
        "\u{5DC}\u{7}\u{2A}\u{2}\u{2}\u{5DC}\u{5E9}\u{7}\u{27B}\u{2}\u{2}\u{5DD}" .
        "\u{5DF}\u{7}\u{1F}\u{2}\u{2}\u{5DE}\u{5E0}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{5DF}\u{5DE}\u{3}\u{2}\u{2}\u{2}\u{5DF}\u{5E0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5E0}\u{5E2}\u{3}\u{2}\u{2}\u{2}\u{5E1}\u{5DD}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5E1}\u{5E2}\u{3}\u{2}\u{2}\u{2}\u{5E2}\u{5E3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5E3}\u{5E4}\u{7}\u{1B}\u{2}\u{2}\u{5E4}\u{5E5}\u{7}\u{43E}\u{2}" .
        "\u{2}\u{5E5}\u{5E6}\u{5}\u{27A}\u{13E}\u{2}\u{5E6}\u{5E7}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{5E7}\u{5E9}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5B3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5B4}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5B6}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5B7}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5BC}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5BF}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5C2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5C6}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5C8}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5CA}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5CC}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5CD}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5D1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E8}\u{5DA}\u{3}\u{2}\u{2}\u{2}\u{5E8}\u{5E1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{5E9}\u{53}\u{3}\u{2}\u{2}\u{2}\u{5EA}\u{5EC}\u{7}\u{1F}" .
        "\u{2}\u{2}\u{5EB}\u{5ED}\u{5}\u{216}\u{10C}\u{2}\u{5EC}\u{5EB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{5EC}\u{5ED}\u{3}\u{2}\u{2}\u{2}\u{5ED}\u{5EF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{5EE}\u{5EA}\u{3}\u{2}\u{2}\u{2}\u{5EE}\u{5EF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{5EF}\u{5F0}\u{3}\u{2}\u{2}\u{2}\u{5F0}\u{5F1}\u{7}" .
        "\u{7C}\u{2}\u{2}\u{5F1}\u{5F3}\u{7}\u{59}\u{2}\u{2}\u{5F2}\u{5F4}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{5F3}\u{5F2}\u{3}\u{2}\u{2}\u{2}\u{5F3}" .
        "\u{5F4}\u{3}\u{2}\u{2}\u{2}\u{5F4}\u{5F6}\u{3}\u{2}\u{2}\u{2}\u{5F5}" .
        "\u{5F7}\u{5}\u{40}\u{21}\u{2}\u{5F6}\u{5F5}\u{3}\u{2}\u{2}\u{2}\u{5F6}" .
        "\u{5F7}\u{3}\u{2}\u{2}\u{2}\u{5F7}\u{5F8}\u{3}\u{2}\u{2}\u{2}\u{5F8}" .
        "\u{5FC}\u{5}\u{23C}\u{11F}\u{2}\u{5F9}\u{5FB}\u{5}\u{42}\u{22}\u{2}" .
        "\u{5FA}\u{5F9}\u{3}\u{2}\u{2}\u{2}\u{5FB}\u{5FE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5FC}\u{5FA}\u{3}\u{2}\u{2}\u{2}\u{5FC}\u{5FD}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5FD}\u{630}\u{3}\u{2}\u{2}\u{2}\u{5FE}\u{5FC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{5FF}\u{601}\u{7}\u{1F}\u{2}\u{2}\u{600}\u{602}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{601}\u{600}\u{3}\u{2}\u{2}\u{2}\u{601}\u{602}\u{3}\u{2}\u{2}" .
        "\u{2}\u{602}\u{604}\u{3}\u{2}\u{2}\u{2}\u{603}\u{5FF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{603}\u{604}\u{3}\u{2}\u{2}\u{2}\u{604}\u{605}\u{3}\u{2}\u{2}" .
        "\u{2}\u{605}\u{607}\u{7}\u{AC}\u{2}\u{2}\u{606}\u{608}\u{9}\u{14}" .
        "\u{2}\u{2}\u{607}\u{606}\u{3}\u{2}\u{2}\u{2}\u{607}\u{608}\u{3}\u{2}" .
        "\u{2}\u{2}\u{608}\u{60A}\u{3}\u{2}\u{2}\u{2}\u{609}\u{60B}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{60A}\u{609}\u{3}\u{2}\u{2}\u{2}\u{60A}\u{60B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{60B}\u{60D}\u{3}\u{2}\u{2}\u{2}\u{60C}\u{60E}\u{5}" .
        "\u{40}\u{21}\u{2}\u{60D}\u{60C}\u{3}\u{2}\u{2}\u{2}\u{60D}\u{60E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{60E}\u{60F}\u{3}\u{2}\u{2}\u{2}\u{60F}\u{613}" .
        "\u{5}\u{23C}\u{11F}\u{2}\u{610}\u{612}\u{5}\u{42}\u{22}\u{2}\u{611}" .
        "\u{610}\u{3}\u{2}\u{2}\u{2}\u{612}\u{615}\u{3}\u{2}\u{2}\u{2}\u{613}" .
        "\u{611}\u{3}\u{2}\u{2}\u{2}\u{613}\u{614}\u{3}\u{2}\u{2}\u{2}\u{614}" .
        "\u{630}\u{3}\u{2}\u{2}\u{2}\u{615}\u{613}\u{3}\u{2}\u{2}\u{2}\u{616}" .
        "\u{618}\u{7}\u{1F}\u{2}\u{2}\u{617}\u{619}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{618}\u{617}\u{3}\u{2}\u{2}\u{2}\u{618}\u{619}\u{3}\u{2}\u{2}\u{2}" .
        "\u{619}\u{61B}\u{3}\u{2}\u{2}\u{2}\u{61A}\u{616}\u{3}\u{2}\u{2}\u{2}" .
        "\u{61A}\u{61B}\u{3}\u{2}\u{2}\u{2}\u{61B}\u{61C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{61C}\u{61D}\u{7}\u{42}\u{2}\u{2}\u{61D}\u{61F}\u{7}\u{59}\u{2}" .
        "\u{2}\u{61E}\u{620}\u{5}\u{216}\u{10C}\u{2}\u{61F}\u{61E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{61F}\u{620}\u{3}\u{2}\u{2}\u{2}\u{620}\u{621}\u{3}\u{2}" .
        "\u{2}\u{2}\u{621}\u{622}\u{5}\u{23C}\u{11F}\u{2}\u{622}\u{623}\u{5}" .
        "\u{56}\u{2C}\u{2}\u{623}\u{630}\u{3}\u{2}\u{2}\u{2}\u{624}\u{626}" .
        "\u{7}\u{1F}\u{2}\u{2}\u{625}\u{627}\u{5}\u{216}\u{10C}\u{2}\u{626}" .
        "\u{625}\u{3}\u{2}\u{2}\u{2}\u{626}\u{627}\u{3}\u{2}\u{2}\u{2}\u{627}" .
        "\u{629}\u{3}\u{2}\u{2}\u{2}\u{628}\u{624}\u{3}\u{2}\u{2}\u{2}\u{628}" .
        "\u{629}\u{3}\u{2}\u{2}\u{2}\u{629}\u{62A}\u{3}\u{2}\u{2}\u{2}\u{62A}" .
        "\u{62B}\u{7}\u{1B}\u{2}\u{2}\u{62B}\u{62C}\u{7}\u{43E}\u{2}\u{2}\u{62C}" .
        "\u{62D}\u{5}\u{27A}\u{13E}\u{2}\u{62D}\u{62E}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{62E}\u{630}\u{3}\u{2}\u{2}\u{2}\u{62F}\u{5EE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{62F}\u{603}\u{3}\u{2}\u{2}\u{2}\u{62F}\u{61A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{62F}\u{628}\u{3}\u{2}\u{2}\u{2}\u{630}\u{55}\u{3}\u{2}\u{2}\u{2}" .
        "\u{631}\u{632}\u{7}\u{82}\u{2}\u{2}\u{632}\u{634}\u{5}\u{1FE}\u{100}" .
        "\u{2}\u{633}\u{635}\u{5}\u{23C}\u{11F}\u{2}\u{634}\u{633}\u{3}\u{2}" .
        "\u{2}\u{2}\u{634}\u{635}\u{3}\u{2}\u{2}\u{2}\u{635}\u{638}\u{3}\u{2}" .
        "\u{2}\u{2}\u{636}\u{637}\u{7}\u{69}\u{2}\u{2}\u{637}\u{639}\u{9}\u{15}" .
        "\u{2}\u{2}\u{638}\u{636}\u{3}\u{2}\u{2}\u{2}\u{638}\u{639}\u{3}\u{2}" .
        "\u{2}\u{2}\u{639}\u{63B}\u{3}\u{2}\u{2}\u{2}\u{63A}\u{63C}\u{5}\u{58}" .
        "\u{2D}\u{2}\u{63B}\u{63A}\u{3}\u{2}\u{2}\u{2}\u{63B}\u{63C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{63C}\u{57}\u{3}\u{2}\u{2}\u{2}\u{63D}\u{63E}\u{7}\u{71}" .
        "\u{2}\u{2}\u{63E}\u{63F}\u{7}\u{2C}\u{2}\u{2}\u{63F}\u{643}\u{5}\u{5A}" .
        "\u{2E}\u{2}\u{640}\u{641}\u{7}\u{71}\u{2}\u{2}\u{641}\u{642}\u{7}" .
        "\u{AF}\u{2}\u{2}\u{642}\u{644}\u{5}\u{5A}\u{2E}\u{2}\u{643}\u{640}" .
        "\u{3}\u{2}\u{2}\u{2}\u{643}\u{644}\u{3}\u{2}\u{2}\u{2}\u{644}\u{64E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{645}\u{646}\u{7}\u{71}\u{2}\u{2}\u{646}\u{647}" .
        "\u{7}\u{AF}\u{2}\u{2}\u{647}\u{64B}\u{5}\u{5A}\u{2E}\u{2}\u{648}\u{649}" .
        "\u{7}\u{71}\u{2}\u{2}\u{649}\u{64A}\u{7}\u{2C}\u{2}\u{2}\u{64A}\u{64C}" .
        "\u{5}\u{5A}\u{2E}\u{2}\u{64B}\u{648}\u{3}\u{2}\u{2}\u{2}\u{64B}\u{64C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{64C}\u{64E}\u{3}\u{2}\u{2}\u{2}\u{64D}\u{63D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{64D}\u{645}\u{3}\u{2}\u{2}\u{2}\u{64E}\u{59}" .
        "\u{3}\u{2}\u{2}\u{2}\u{64F}\u{656}\u{7}\u{8A}\u{2}\u{2}\u{650}\u{656}" .
        "\u{7}\u{16}\u{2}\u{2}\u{651}\u{652}\u{7}\u{93}\u{2}\u{2}\u{652}\u{656}" .
        "\u{7}\u{6F}\u{2}\u{2}\u{653}\u{654}\u{7}\u{1F5}\u{2}\u{2}\u{654}\u{656}" .
        "\u{7}\u{141}\u{2}\u{2}\u{655}\u{64F}\u{3}\u{2}\u{2}\u{2}\u{655}\u{650}" .
        "\u{3}\u{2}\u{2}\u{2}\u{655}\u{651}\u{3}\u{2}\u{2}\u{2}\u{655}\u{653}" .
        "\u{3}\u{2}\u{2}\u{2}\u{656}\u{5B}\u{3}\u{2}\u{2}\u{2}\u{657}\u{659}" .
        "\u{9}\u{14}\u{2}\u{2}\u{658}\u{65A}\u{5}\u{216}\u{10C}\u{2}\u{659}" .
        "\u{658}\u{3}\u{2}\u{2}\u{2}\u{659}\u{65A}\u{3}\u{2}\u{2}\u{2}\u{65A}" .
        "\u{65C}\u{3}\u{2}\u{2}\u{2}\u{65B}\u{65D}\u{5}\u{40}\u{21}\u{2}\u{65C}" .
        "\u{65B}\u{3}\u{2}\u{2}\u{2}\u{65C}\u{65D}\u{3}\u{2}\u{2}\u{2}\u{65D}" .
        "\u{65E}\u{3}\u{2}\u{2}\u{2}\u{65E}\u{662}\u{5}\u{23C}\u{11F}\u{2}" .
        "\u{65F}\u{661}\u{5}\u{42}\u{22}\u{2}\u{660}\u{65F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{661}\u{664}\u{3}\u{2}\u{2}\u{2}\u{662}\u{660}\u{3}\u{2}\u{2}" .
        "\u{2}\u{662}\u{663}\u{3}\u{2}\u{2}\u{2}\u{663}\u{674}\u{3}\u{2}\u{2}" .
        "\u{2}\u{664}\u{662}\u{3}\u{2}\u{2}\u{2}\u{665}\u{667}\u{9}\u{16}\u{2}" .
        "\u{2}\u{666}\u{668}\u{9}\u{14}\u{2}\u{2}\u{667}\u{666}\u{3}\u{2}\u{2}" .
        "\u{2}\u{667}\u{668}\u{3}\u{2}\u{2}\u{2}\u{668}\u{66A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{669}\u{66B}\u{5}\u{216}\u{10C}\u{2}\u{66A}\u{669}\u{3}\u{2}" .
        "\u{2}\u{2}\u{66A}\u{66B}\u{3}\u{2}\u{2}\u{2}\u{66B}\u{66C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{66C}\u{670}\u{5}\u{23C}\u{11F}\u{2}\u{66D}\u{66F}\u{5}" .
        "\u{42}\u{22}\u{2}\u{66E}\u{66D}\u{3}\u{2}\u{2}\u{2}\u{66F}\u{672}" .
        "\u{3}\u{2}\u{2}\u{2}\u{670}\u{66E}\u{3}\u{2}\u{2}\u{2}\u{670}\u{671}" .
        "\u{3}\u{2}\u{2}\u{2}\u{671}\u{674}\u{3}\u{2}\u{2}\u{2}\u{672}\u{670}" .
        "\u{3}\u{2}\u{2}\u{2}\u{673}\u{657}\u{3}\u{2}\u{2}\u{2}\u{673}\u{665}" .
        "\u{3}\u{2}\u{2}\u{2}\u{674}\u{5D}\u{3}\u{2}\u{2}\u{2}\u{675}\u{677}" .
        "\u{7}\u{189}\u{2}\u{2}\u{676}\u{678}\u{7}\u{435}\u{2}\u{2}\u{677}" .
        "\u{676}\u{3}\u{2}\u{2}\u{2}\u{677}\u{678}\u{3}\u{2}\u{2}\u{2}\u{678}" .
        "\u{67A}\u{3}\u{2}\u{2}\u{2}\u{679}\u{67B}\u{5}\u{20C}\u{107}\u{2}" .
        "\u{67A}\u{679}\u{3}\u{2}\u{2}\u{2}\u{67A}\u{67B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{67B}\u{70B}\u{3}\u{2}\u{2}\u{2}\u{67C}\u{67E}\u{7}\u{14A}\u{2}" .
        "\u{2}\u{67D}\u{67F}\u{7}\u{435}\u{2}\u{2}\u{67E}\u{67D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{67E}\u{67F}\u{3}\u{2}\u{2}\u{2}\u{67F}\u{680}\u{3}\u{2}" .
        "\u{2}\u{2}\u{680}\u{70B}\u{5}\u{21C}\u{10F}\u{2}\u{681}\u{683}\u{7}" .
        "\u{14B}\u{2}\u{2}\u{682}\u{684}\u{7}\u{435}\u{2}\u{2}\u{683}\u{682}" .
        "\u{3}\u{2}\u{2}\u{2}\u{683}\u{684}\u{3}\u{2}\u{2}\u{2}\u{684}\u{685}" .
        "\u{3}\u{2}\u{2}\u{2}\u{685}\u{70B}\u{5}\u{21C}\u{10F}\u{2}\u{686}" .
        "\u{688}\u{7}\u{2A}\u{2}\u{2}\u{687}\u{686}\u{3}\u{2}\u{2}\u{2}\u{687}" .
        "\u{688}\u{3}\u{2}\u{2}\u{2}\u{688}\u{68C}\u{3}\u{2}\u{2}\u{2}\u{689}" .
        "\u{68A}\u{7}\u{1A}\u{2}\u{2}\u{68A}\u{68D}\u{7}\u{93}\u{2}\u{2}\u{68B}" .
        "\u{68D}\u{7}\u{31E}\u{2}\u{2}\u{68C}\u{689}\u{3}\u{2}\u{2}\u{2}\u{68C}" .
        "\u{68B}\u{3}\u{2}\u{2}\u{2}\u{68D}\u{68F}\u{3}\u{2}\u{2}\u{2}\u{68E}" .
        "\u{690}\u{7}\u{435}\u{2}\u{2}\u{68F}\u{68E}\u{3}\u{2}\u{2}\u{2}\u{68F}" .
        "\u{690}\u{3}\u{2}\u{2}\u{2}\u{690}\u{693}\u{3}\u{2}\u{2}\u{2}\u{691}" .
        "\u{694}\u{5}\u{208}\u{105}\u{2}\u{692}\u{694}\u{7}\u{2A}\u{2}\u{2}" .
        "\u{693}\u{691}\u{3}\u{2}\u{2}\u{2}\u{693}\u{692}\u{3}\u{2}\u{2}\u{2}" .
        "\u{694}\u{70B}\u{3}\u{2}\u{2}\u{2}\u{695}\u{697}\u{9}\u{17}\u{2}\u{2}" .
        "\u{696}\u{698}\u{7}\u{435}\u{2}\u{2}\u{697}\u{696}\u{3}\u{2}\u{2}" .
        "\u{2}\u{697}\u{698}\u{3}\u{2}\u{2}\u{2}\u{698}\u{699}\u{3}\u{2}\u{2}" .
        "\u{2}\u{699}\u{70B}\u{9}\u{18}\u{2}\u{2}\u{69A}\u{69C}\u{7}\u{2A}" .
        "\u{2}\u{2}\u{69B}\u{69A}\u{3}\u{2}\u{2}\u{2}\u{69B}\u{69C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{69C}\u{69D}\u{3}\u{2}\u{2}\u{2}\u{69D}\u{69F}\u{7}\u{1C}" .
        "\u{2}\u{2}\u{69E}\u{6A0}\u{7}\u{435}\u{2}\u{2}\u{69F}\u{69E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{69F}\u{6A0}\u{3}\u{2}\u{2}\u{2}\u{6A0}\u{6A1}\u{3}" .
        "\u{2}\u{2}\u{2}\u{6A1}\u{70B}\u{5}\u{20A}\u{106}\u{2}\u{6A2}\u{6A4}" .
        "\u{7}\u{163}\u{2}\u{2}\u{6A3}\u{6A5}\u{7}\u{435}\u{2}\u{2}\u{6A4}" .
        "\u{6A3}\u{3}\u{2}\u{2}\u{2}\u{6A4}\u{6A5}\u{3}\u{2}\u{2}\u{2}\u{6A5}" .
        "\u{6A6}\u{3}\u{2}\u{2}\u{2}\u{6A6}\u{70B}\u{7}\u{44D}\u{2}\u{2}\u{6A7}" .
        "\u{6A9}\u{7}\u{168}\u{2}\u{2}\u{6A8}\u{6AA}\u{7}\u{435}\u{2}\u{2}" .
        "\u{6A9}\u{6A8}\u{3}\u{2}\u{2}\u{2}\u{6A9}\u{6AA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{6AA}\u{6AB}\u{3}\u{2}\u{2}\u{2}\u{6AB}\u{70B}\u{9}\u{19}\u{2}\u{2}" .
        "\u{6AC}\u{6AE}\u{7}\u{16B}\u{2}\u{2}\u{6AD}\u{6AF}\u{7}\u{435}\u{2}" .
        "\u{2}\u{6AE}\u{6AD}\u{3}\u{2}\u{2}\u{2}\u{6AE}\u{6AF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{6AF}\u{6B0}\u{3}\u{2}\u{2}\u{2}\u{6B0}\u{70B}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{6B1}\u{6B2}\u{7}\u{176}\u{2}\u{2}\u{6B2}\u{6B4}\u{7}" .
        "\u{17D}\u{2}\u{2}\u{6B3}\u{6B5}\u{7}\u{435}\u{2}\u{2}\u{6B4}\u{6B3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{6B4}\u{6B5}\u{3}\u{2}\u{2}\u{2}\u{6B5}\u{6B6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{6B6}\u{70B}\u{7}\u{44D}\u{2}\u{2}\u{6B7}\u{6B9}" .
        "\u{7}\u{17B}\u{2}\u{2}\u{6B8}\u{6BA}\u{7}\u{435}\u{2}\u{2}\u{6B9}" .
        "\u{6B8}\u{3}\u{2}\u{2}\u{2}\u{6B9}\u{6BA}\u{3}\u{2}\u{2}\u{2}\u{6BA}" .
        "\u{6BB}\u{3}\u{2}\u{2}\u{2}\u{6BB}\u{70B}\u{9}\u{18}\u{2}\u{2}\u{6BC}" .
        "\u{6BE}\u{7}\u{186}\u{2}\u{2}\u{6BD}\u{6BF}\u{7}\u{435}\u{2}\u{2}" .
        "\u{6BE}\u{6BD}\u{3}\u{2}\u{2}\u{2}\u{6BE}\u{6BF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{6BF}\u{6C0}\u{3}\u{2}\u{2}\u{2}\u{6C0}\u{70B}\u{7}\u{44D}\u{2}" .
        "\u{2}\u{6C1}\u{6C2}\u{7}\u{4F}\u{2}\u{2}\u{6C2}\u{6C4}\u{7}\u{17D}" .
        "\u{2}\u{2}\u{6C3}\u{6C5}\u{7}\u{435}\u{2}\u{2}\u{6C4}\u{6C3}\u{3}" .
        "\u{2}\u{2}\u{2}\u{6C4}\u{6C5}\u{3}\u{2}\u{2}\u{2}\u{6C5}\u{6C6}\u{3}" .
        "\u{2}\u{2}\u{2}\u{6C6}\u{70B}\u{7}\u{44D}\u{2}\u{2}\u{6C7}\u{6C9}" .
        "\u{7}\u{1B4}\u{2}\u{2}\u{6C8}\u{6CA}\u{7}\u{435}\u{2}\u{2}\u{6C9}" .
        "\u{6C8}\u{3}\u{2}\u{2}\u{2}\u{6C9}\u{6CA}\u{3}\u{2}\u{2}\u{2}\u{6CA}" .
        "\u{6CB}\u{3}\u{2}\u{2}\u{2}\u{6CB}\u{70B}\u{9}\u{1A}\u{2}\u{2}\u{6CC}" .
        "\u{6CE}\u{7}\u{1BF}\u{2}\u{2}\u{6CD}\u{6CF}\u{7}\u{435}\u{2}\u{2}" .
        "\u{6CE}\u{6CD}\u{3}\u{2}\u{2}\u{2}\u{6CE}\u{6CF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{6CF}\u{6D0}\u{3}\u{2}\u{2}\u{2}\u{6D0}\u{70B}\u{5}\u{21E}\u{110}" .
        "\u{2}\u{6D1}\u{6D3}\u{7}\u{1E0}\u{2}\u{2}\u{6D2}\u{6D4}\u{7}\u{435}" .
        "\u{2}\u{2}\u{6D3}\u{6D2}\u{3}\u{2}\u{2}\u{2}\u{6D3}\u{6D4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{6D4}\u{6D5}\u{3}\u{2}\u{2}\u{2}\u{6D5}\u{70B}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{6D6}\u{6D8}\u{7}\u{1EA}\u{2}\u{2}\u{6D7}\u{6D9}\u{7}" .
        "\u{435}\u{2}\u{2}\u{6D8}\u{6D7}\u{3}\u{2}\u{2}\u{2}\u{6D8}\u{6D9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{6D9}\u{6DA}\u{3}\u{2}\u{2}\u{2}\u{6DA}\u{70B}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{6DB}\u{6DD}\u{7}\u{205}\u{2}\u{2}\u{6DC}" .
        "\u{6DE}\u{7}\u{435}\u{2}\u{2}\u{6DD}\u{6DC}\u{3}\u{2}\u{2}\u{2}\u{6DD}" .
        "\u{6DE}\u{3}\u{2}\u{2}\u{2}\u{6DE}\u{6DF}\u{3}\u{2}\u{2}\u{2}\u{6DF}" .
        "\u{70B}\u{9}\u{1B}\u{2}\u{2}\u{6E0}\u{6E2}\u{7}\u{20B}\u{2}\u{2}\u{6E1}" .
        "\u{6E3}\u{7}\u{435}\u{2}\u{2}\u{6E2}\u{6E1}\u{3}\u{2}\u{2}\u{2}\u{6E2}" .
        "\u{6E3}\u{3}\u{2}\u{2}\u{2}\u{6E3}\u{6E4}\u{3}\u{2}\u{2}\u{2}\u{6E4}" .
        "\u{70B}\u{7}\u{44D}\u{2}\u{2}\u{6E5}\u{6E7}\u{7}\u{23A}\u{2}\u{2}" .
        "\u{6E6}\u{6E8}\u{7}\u{435}\u{2}\u{2}\u{6E7}\u{6E6}\u{3}\u{2}\u{2}" .
        "\u{2}\u{6E7}\u{6E8}\u{3}\u{2}\u{2}\u{2}\u{6E8}\u{6E9}\u{3}\u{2}\u{2}" .
        "\u{2}\u{6E9}\u{70B}\u{9}\u{1C}\u{2}\u{2}\u{6EA}\u{6EC}\u{7}\u{255}" .
        "\u{2}\u{2}\u{6EB}\u{6ED}\u{7}\u{435}\u{2}\u{2}\u{6EC}\u{6EB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{6EC}\u{6ED}\u{3}\u{2}\u{2}\u{2}\u{6ED}\u{6EE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{6EE}\u{70B}\u{9}\u{1B}\u{2}\u{2}\u{6EF}\u{6F1}\u{7}" .
        "\u{256}\u{2}\u{2}\u{6F0}\u{6F2}\u{7}\u{435}\u{2}\u{2}\u{6F1}\u{6F0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{6F1}\u{6F2}\u{3}\u{2}\u{2}\u{2}\u{6F2}\u{6F3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{6F3}\u{70B}\u{9}\u{1B}\u{2}\u{2}\u{6F4}\u{6F6}" .
        "\u{7}\u{257}\u{2}\u{2}\u{6F5}\u{6F7}\u{7}\u{435}\u{2}\u{2}\u{6F6}" .
        "\u{6F5}\u{3}\u{2}\u{2}\u{2}\u{6F6}\u{6F7}\u{3}\u{2}\u{2}\u{2}\u{6F7}" .
        "\u{6F8}\u{3}\u{2}\u{2}\u{2}\u{6F8}\u{70B}\u{5}\u{21C}\u{10F}\u{2}" .
        "\u{6F9}\u{6FA}\u{7}\u{265}\u{2}\u{2}\u{6FA}\u{6FC}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{6FB}\u{6FD}\u{5}\u{62}\u{32}\u{2}\u{6FC}\u{6FB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{6FC}\u{6FD}\u{3}\u{2}\u{2}\u{2}\u{6FD}\u{70B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{6FE}\u{6FF}\u{7}\u{266}\u{2}\u{2}\u{6FF}\u{700}\u{7}" .
        "\u{435}\u{2}\u{2}\u{700}\u{70B}\u{5}\u{60}\u{31}\u{2}\u{701}\u{70B}" .
        "\u{5}\u{62}\u{32}\u{2}\u{702}\u{704}\u{7}\u{AB}\u{2}\u{2}\u{703}\u{705}" .
        "\u{7}\u{435}\u{2}\u{2}\u{704}\u{703}\u{3}\u{2}\u{2}\u{2}\u{704}\u{705}" .
        "\u{3}\u{2}\u{2}\u{2}\u{705}\u{706}\u{3}\u{2}\u{2}\u{2}\u{706}\u{707}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{707}\u{708}\u{5}\u{238}\u{11D}\u{2}\u{708}" .
        "\u{709}\u{7}\u{43F}\u{2}\u{2}\u{709}\u{70B}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{675}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{67C}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{681}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{687}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{695}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{69B}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6A2}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6A7}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6AC}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6B1}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6B7}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6BC}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6C1}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6C7}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6CC}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6D1}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6D6}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6DB}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6E0}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6E5}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6EA}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6EF}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6F4}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{6F9}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{6FE}\u{3}\u{2}\u{2}\u{2}\u{70A}\u{701}\u{3}\u{2}\u{2}\u{2}\u{70A}" .
        "\u{702}\u{3}\u{2}\u{2}\u{2}\u{70B}\u{5F}\u{3}\u{2}\u{2}\u{2}\u{70C}" .
        "\u{70D}\u{9}\u{1D}\u{2}\u{2}\u{70D}\u{61}\u{3}\u{2}\u{2}\u{2}\u{70E}" .
        "\u{70F}\u{7}\u{25A}\u{2}\u{2}\u{70F}\u{710}\u{9}\u{12}\u{2}\u{2}\u{710}" .
        "\u{63}\u{3}\u{2}\u{2}\u{2}\u{711}\u{712}\u{7}\u{7B}\u{2}\u{2}\u{712}" .
        "\u{713}\u{7}\u{14}\u{2}\u{2}\u{713}\u{716}\u{5}\u{66}\u{34}\u{2}\u{714}" .
        "\u{715}\u{7}\u{20A}\u{2}\u{2}\u{715}\u{717}\u{5}\u{21C}\u{10F}\u{2}" .
        "\u{716}\u{714}\u{3}\u{2}\u{2}\u{2}\u{716}\u{717}\u{3}\u{2}\u{2}\u{2}" .
        "\u{717}\u{71F}\u{3}\u{2}\u{2}\u{2}\u{718}\u{719}\u{7}\u{25F}\u{2}" .
        "\u{2}\u{719}\u{71A}\u{7}\u{14}\u{2}\u{2}\u{71A}\u{71D}\u{5}\u{68}" .
        "\u{35}\u{2}\u{71B}\u{71C}\u{7}\u{260}\u{2}\u{2}\u{71C}\u{71E}\u{5}" .
        "\u{21C}\u{10F}\u{2}\u{71D}\u{71B}\u{3}\u{2}\u{2}\u{2}\u{71D}\u{71E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{71E}\u{720}\u{3}\u{2}\u{2}\u{2}\u{71F}\u{718}" .
        "\u{3}\u{2}\u{2}\u{2}\u{71F}\u{720}\u{3}\u{2}\u{2}\u{2}\u{720}\u{72C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{721}\u{722}\u{7}\u{43E}\u{2}\u{2}\u{722}\u{727}" .
        "\u{5}\u{6A}\u{36}\u{2}\u{723}\u{724}\u{7}\u{440}\u{2}\u{2}\u{724}" .
        "\u{726}\u{5}\u{6A}\u{36}\u{2}\u{725}\u{723}\u{3}\u{2}\u{2}\u{2}\u{726}" .
        "\u{729}\u{3}\u{2}\u{2}\u{2}\u{727}\u{725}\u{3}\u{2}\u{2}\u{2}\u{727}" .
        "\u{728}\u{3}\u{2}\u{2}\u{2}\u{728}\u{72A}\u{3}\u{2}\u{2}\u{2}\u{729}" .
        "\u{727}\u{3}\u{2}\u{2}\u{2}\u{72A}\u{72B}\u{7}\u{43F}\u{2}\u{2}\u{72B}" .
        "\u{72D}\u{3}\u{2}\u{2}\u{2}\u{72C}\u{721}\u{3}\u{2}\u{2}\u{2}\u{72C}" .
        "\u{72D}\u{3}\u{2}\u{2}\u{2}\u{72D}\u{65}\u{3}\u{2}\u{2}\u{2}\u{72E}" .
        "\u{730}\u{7}\u{61}\u{2}\u{2}\u{72F}\u{72E}\u{3}\u{2}\u{2}\u{2}\u{72F}" .
        "\u{730}\u{3}\u{2}\u{2}\u{2}\u{730}\u{731}\u{3}\u{2}\u{2}\u{2}\u{731}" .
        "\u{732}\u{7}\u{1AA}\u{2}\u{2}\u{732}\u{733}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{733}\u{734}\u{5}\u{27A}\u{13E}\u{2}\u{734}\u{735}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{735}\u{75C}\u{3}\u{2}\u{2}\u{2}\u{736}\u{738}\u{7}\u{61}\u{2}" .
        "\u{2}\u{737}\u{736}\u{3}\u{2}\u{2}\u{2}\u{737}\u{738}\u{3}\u{2}\u{2}" .
        "\u{2}\u{738}\u{739}\u{3}\u{2}\u{2}\u{2}\u{739}\u{73D}\u{7}\u{59}\u{2}" .
        "\u{2}\u{73A}\u{73B}\u{7}\u{144}\u{2}\u{2}\u{73B}\u{73C}\u{7}\u{435}" .
        "\u{2}\u{2}\u{73C}\u{73E}\u{9}\u{1E}\u{2}\u{2}\u{73D}\u{73A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{73D}\u{73E}\u{3}\u{2}\u{2}\u{2}\u{73E}\u{73F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{73F}\u{740}\u{7}\u{43E}\u{2}\u{2}\u{740}\u{741}\u{5}" .
        "\u{236}\u{11C}\u{2}\u{741}\u{742}\u{7}\u{43F}\u{2}\u{2}\u{742}\u{75C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{743}\u{74D}\u{7}\u{7F}\u{2}\u{2}\u{744}\u{745}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{745}\u{746}\u{5}\u{27A}\u{13E}\u{2}\u{746}" .
        "\u{747}\u{7}\u{43F}\u{2}\u{2}\u{747}\u{74E}\u{3}\u{2}\u{2}\u{2}\u{748}" .
        "\u{749}\u{7}\u{160}\u{2}\u{2}\u{749}\u{74A}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{74A}\u{74B}\u{5}\u{236}\u{11C}\u{2}\u{74B}\u{74C}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{74C}\u{74E}\u{3}\u{2}\u{2}\u{2}\u{74D}\u{744}\u{3}\u{2}\u{2}" .
        "\u{2}\u{74D}\u{748}\u{3}\u{2}\u{2}\u{2}\u{74E}\u{75C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{74F}\u{759}\u{7}\u{1C5}\u{2}\u{2}\u{750}\u{751}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{751}\u{752}\u{5}\u{27A}\u{13E}\u{2}\u{752}\u{753}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{753}\u{75A}\u{3}\u{2}\u{2}\u{2}\u{754}\u{755}" .
        "\u{7}\u{160}\u{2}\u{2}\u{755}\u{756}\u{7}\u{43E}\u{2}\u{2}\u{756}" .
        "\u{757}\u{5}\u{236}\u{11C}\u{2}\u{757}\u{758}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{758}\u{75A}\u{3}\u{2}\u{2}\u{2}\u{759}\u{750}\u{3}\u{2}\u{2}\u{2}" .
        "\u{759}\u{754}\u{3}\u{2}\u{2}\u{2}\u{75A}\u{75C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{75B}\u{72F}\u{3}\u{2}\u{2}\u{2}\u{75B}\u{737}\u{3}\u{2}\u{2}\u{2}" .
        "\u{75B}\u{743}\u{3}\u{2}\u{2}\u{2}\u{75B}\u{74F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{75C}\u{67}\u{3}\u{2}\u{2}\u{2}\u{75D}\u{75F}\u{7}\u{61}\u{2}\u{2}" .
        "\u{75E}\u{75D}\u{3}\u{2}\u{2}\u{2}\u{75E}\u{75F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{75F}\u{760}\u{3}\u{2}\u{2}\u{2}\u{760}\u{761}\u{7}\u{1AA}\u{2}" .
        "\u{2}\u{761}\u{762}\u{7}\u{43E}\u{2}\u{2}\u{762}\u{763}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{763}\u{764}\u{7}\u{43F}\u{2}\u{2}\u{764}\u{773}\u{3}" .
        "\u{2}\u{2}\u{2}\u{765}\u{767}\u{7}\u{61}\u{2}\u{2}\u{766}\u{765}\u{3}" .
        "\u{2}\u{2}\u{2}\u{766}\u{767}\u{3}\u{2}\u{2}\u{2}\u{767}\u{768}\u{3}" .
        "\u{2}\u{2}\u{2}\u{768}\u{76C}\u{7}\u{59}\u{2}\u{2}\u{769}\u{76A}\u{7}" .
        "\u{144}\u{2}\u{2}\u{76A}\u{76B}\u{7}\u{435}\u{2}\u{2}\u{76B}\u{76D}" .
        "\u{9}\u{1E}\u{2}\u{2}\u{76C}\u{769}\u{3}\u{2}\u{2}\u{2}\u{76C}\u{76D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{76D}\u{76E}\u{3}\u{2}\u{2}\u{2}\u{76E}\u{76F}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{76F}\u{770}\u{5}\u{236}\u{11C}\u{2}\u{770}" .
        "\u{771}\u{7}\u{43F}\u{2}\u{2}\u{771}\u{773}\u{3}\u{2}\u{2}\u{2}\u{772}" .
        "\u{75E}\u{3}\u{2}\u{2}\u{2}\u{772}\u{766}\u{3}\u{2}\u{2}\u{2}\u{773}" .
        "\u{69}\u{3}\u{2}\u{2}\u{2}\u{774}\u{775}\u{7}\u{7B}\u{2}\u{2}\u{775}" .
        "\u{776}\u{5}\u{216}\u{10C}\u{2}\u{776}\u{777}\u{7}\u{B3}\u{2}\u{2}" .
        "\u{777}\u{778}\u{7}\u{1C3}\u{2}\u{2}\u{778}\u{779}\u{7}\u{269}\u{2}" .
        "\u{2}\u{779}\u{77A}\u{7}\u{43E}\u{2}\u{2}\u{77A}\u{77F}\u{5}\u{6C}" .
        "\u{37}\u{2}\u{77B}\u{77C}\u{7}\u{440}\u{2}\u{2}\u{77C}\u{77E}\u{5}" .
        "\u{6C}\u{37}\u{2}\u{77D}\u{77B}\u{3}\u{2}\u{2}\u{2}\u{77E}\u{781}" .
        "\u{3}\u{2}\u{2}\u{2}\u{77F}\u{77D}\u{3}\u{2}\u{2}\u{2}\u{77F}\u{780}" .
        "\u{3}\u{2}\u{2}\u{2}\u{780}\u{782}\u{3}\u{2}\u{2}\u{2}\u{781}\u{77F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{782}\u{786}\u{7}\u{43F}\u{2}\u{2}\u{783}\u{785}" .
        "\u{5}\u{72}\u{3A}\u{2}\u{784}\u{783}\u{3}\u{2}\u{2}\u{2}\u{785}\u{788}" .
        "\u{3}\u{2}\u{2}\u{2}\u{786}\u{784}\u{3}\u{2}\u{2}\u{2}\u{786}\u{787}" .
        "\u{3}\u{2}\u{2}\u{2}\u{787}\u{794}\u{3}\u{2}\u{2}\u{2}\u{788}\u{786}" .
        "\u{3}\u{2}\u{2}\u{2}\u{789}\u{78A}\u{7}\u{43E}\u{2}\u{2}\u{78A}\u{78F}" .
        "\u{5}\u{70}\u{39}\u{2}\u{78B}\u{78C}\u{7}\u{440}\u{2}\u{2}\u{78C}" .
        "\u{78E}\u{5}\u{70}\u{39}\u{2}\u{78D}\u{78B}\u{3}\u{2}\u{2}\u{2}\u{78E}" .
        "\u{791}\u{3}\u{2}\u{2}\u{2}\u{78F}\u{78D}\u{3}\u{2}\u{2}\u{2}\u{78F}" .
        "\u{790}\u{3}\u{2}\u{2}\u{2}\u{790}\u{792}\u{3}\u{2}\u{2}\u{2}\u{791}" .
        "\u{78F}\u{3}\u{2}\u{2}\u{2}\u{792}\u{793}\u{7}\u{43F}\u{2}\u{2}\u{793}" .
        "\u{795}\u{3}\u{2}\u{2}\u{2}\u{794}\u{789}\u{3}\u{2}\u{2}\u{2}\u{794}" .
        "\u{795}\u{3}\u{2}\u{2}\u{2}\u{795}\u{807}\u{3}\u{2}\u{2}\u{2}\u{796}" .
        "\u{797}\u{7}\u{7B}\u{2}\u{2}\u{797}\u{798}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{798}\u{799}\u{7}\u{B3}\u{2}\u{2}\u{799}\u{79A}\u{7}\u{1C3}\u{2}" .
        "\u{2}\u{79A}\u{79B}\u{7}\u{269}\u{2}\u{2}\u{79B}\u{79F}\u{5}\u{6C}" .
        "\u{37}\u{2}\u{79C}\u{79E}\u{5}\u{72}\u{3A}\u{2}\u{79D}\u{79C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{79E}\u{7A1}\u{3}\u{2}\u{2}\u{2}\u{79F}\u{79D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{79F}\u{7A0}\u{3}\u{2}\u{2}\u{2}\u{7A0}\u{7AD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{7A1}\u{79F}\u{3}\u{2}\u{2}\u{2}\u{7A2}\u{7A3}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{7A3}\u{7A8}\u{5}\u{70}\u{39}\u{2}\u{7A4}\u{7A5}" .
        "\u{7}\u{440}\u{2}\u{2}\u{7A5}\u{7A7}\u{5}\u{70}\u{39}\u{2}\u{7A6}" .
        "\u{7A4}\u{3}\u{2}\u{2}\u{2}\u{7A7}\u{7AA}\u{3}\u{2}\u{2}\u{2}\u{7A8}" .
        "\u{7A6}\u{3}\u{2}\u{2}\u{2}\u{7A8}\u{7A9}\u{3}\u{2}\u{2}\u{2}\u{7A9}" .
        "\u{7AB}\u{3}\u{2}\u{2}\u{2}\u{7AA}\u{7A8}\u{3}\u{2}\u{2}\u{2}\u{7AB}" .
        "\u{7AC}\u{7}\u{43F}\u{2}\u{2}\u{7AC}\u{7AE}\u{3}\u{2}\u{2}\u{2}\u{7AD}" .
        "\u{7A2}\u{3}\u{2}\u{2}\u{2}\u{7AD}\u{7AE}\u{3}\u{2}\u{2}\u{2}\u{7AE}" .
        "\u{807}\u{3}\u{2}\u{2}\u{2}\u{7AF}\u{7B0}\u{7}\u{7B}\u{2}\u{2}\u{7B0}" .
        "\u{7B1}\u{5}\u{216}\u{10C}\u{2}\u{7B1}\u{7B2}\u{7}\u{B3}\u{2}\u{2}" .
        "\u{7B2}\u{7B3}\u{7}\u{4E}\u{2}\u{2}\u{7B3}\u{7B4}\u{7}\u{43E}\u{2}" .
        "\u{2}\u{7B4}\u{7B9}\u{5}\u{6C}\u{37}\u{2}\u{7B5}\u{7B6}\u{7}\u{440}" .
        "\u{2}\u{2}\u{7B6}\u{7B8}\u{5}\u{6C}\u{37}\u{2}\u{7B7}\u{7B5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{7B8}\u{7BB}\u{3}\u{2}\u{2}\u{2}\u{7B9}\u{7B7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{7B9}\u{7BA}\u{3}\u{2}\u{2}\u{2}\u{7BA}\u{7BC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{7BB}\u{7B9}\u{3}\u{2}\u{2}\u{2}\u{7BC}\u{7C0}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{7BD}\u{7BF}\u{5}\u{72}\u{3A}\u{2}\u{7BE}\u{7BD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7BF}\u{7C2}\u{3}\u{2}\u{2}\u{2}\u{7C0}\u{7BE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7C0}\u{7C1}\u{3}\u{2}\u{2}\u{2}\u{7C1}\u{7CE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7C2}\u{7C0}\u{3}\u{2}\u{2}\u{2}\u{7C3}\u{7C4}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{7C4}\u{7C9}\u{5}\u{70}\u{39}\u{2}\u{7C5}" .
        "\u{7C6}\u{7}\u{440}\u{2}\u{2}\u{7C6}\u{7C8}\u{5}\u{70}\u{39}\u{2}" .
        "\u{7C7}\u{7C5}\u{3}\u{2}\u{2}\u{2}\u{7C8}\u{7CB}\u{3}\u{2}\u{2}\u{2}" .
        "\u{7C9}\u{7C7}\u{3}\u{2}\u{2}\u{2}\u{7C9}\u{7CA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{7CA}\u{7CC}\u{3}\u{2}\u{2}\u{2}\u{7CB}\u{7C9}\u{3}\u{2}\u{2}\u{2}" .
        "\u{7CC}\u{7CD}\u{7}\u{43F}\u{2}\u{2}\u{7CD}\u{7CF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{7CE}\u{7C3}\u{3}\u{2}\u{2}\u{2}\u{7CE}\u{7CF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{7CF}\u{807}\u{3}\u{2}\u{2}\u{2}\u{7D0}\u{7D1}\u{7}\u{7B}\u{2}" .
        "\u{2}\u{7D1}\u{7D2}\u{5}\u{216}\u{10C}\u{2}\u{7D2}\u{7D3}\u{7}\u{B3}" .
        "\u{2}\u{2}\u{7D3}\u{7D4}\u{7}\u{4E}\u{2}\u{2}\u{7D4}\u{7D5}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{7D5}\u{7DA}\u{5}\u{6E}\u{38}\u{2}\u{7D6}\u{7D7}\u{7}" .
        "\u{440}\u{2}\u{2}\u{7D7}\u{7D9}\u{5}\u{6E}\u{38}\u{2}\u{7D8}\u{7D6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7D9}\u{7DC}\u{3}\u{2}\u{2}\u{2}\u{7DA}\u{7D8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7DA}\u{7DB}\u{3}\u{2}\u{2}\u{2}\u{7DB}\u{7DD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7DC}\u{7DA}\u{3}\u{2}\u{2}\u{2}\u{7DD}\u{7E1}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{7DE}\u{7E0}\u{5}\u{72}\u{3A}\u{2}\u{7DF}" .
        "\u{7DE}\u{3}\u{2}\u{2}\u{2}\u{7E0}\u{7E3}\u{3}\u{2}\u{2}\u{2}\u{7E1}" .
        "\u{7DF}\u{3}\u{2}\u{2}\u{2}\u{7E1}\u{7E2}\u{3}\u{2}\u{2}\u{2}\u{7E2}" .
        "\u{7EF}\u{3}\u{2}\u{2}\u{2}\u{7E3}\u{7E1}\u{3}\u{2}\u{2}\u{2}\u{7E4}" .
        "\u{7E5}\u{7}\u{43E}\u{2}\u{2}\u{7E5}\u{7EA}\u{5}\u{70}\u{39}\u{2}" .
        "\u{7E6}\u{7E7}\u{7}\u{440}\u{2}\u{2}\u{7E7}\u{7E9}\u{5}\u{70}\u{39}" .
        "\u{2}\u{7E8}\u{7E6}\u{3}\u{2}\u{2}\u{2}\u{7E9}\u{7EC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{7EA}\u{7E8}\u{3}\u{2}\u{2}\u{2}\u{7EA}\u{7EB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{7EB}\u{7ED}\u{3}\u{2}\u{2}\u{2}\u{7EC}\u{7EA}\u{3}\u{2}\u{2}" .
        "\u{2}\u{7ED}\u{7EE}\u{7}\u{43F}\u{2}\u{2}\u{7EE}\u{7F0}\u{3}\u{2}" .
        "\u{2}\u{2}\u{7EF}\u{7E4}\u{3}\u{2}\u{2}\u{2}\u{7EF}\u{7F0}\u{3}\u{2}" .
        "\u{2}\u{2}\u{7F0}\u{807}\u{3}\u{2}\u{2}\u{2}\u{7F1}\u{7F2}\u{7}\u{7B}" .
        "\u{2}\u{2}\u{7F2}\u{7F6}\u{5}\u{216}\u{10C}\u{2}\u{7F3}\u{7F5}\u{5}" .
        "\u{72}\u{3A}\u{2}\u{7F4}\u{7F3}\u{3}\u{2}\u{2}\u{2}\u{7F5}\u{7F8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7F6}\u{7F4}\u{3}\u{2}\u{2}\u{2}\u{7F6}\u{7F7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7F7}\u{804}\u{3}\u{2}\u{2}\u{2}\u{7F8}\u{7F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{7F9}\u{7FA}\u{7}\u{43E}\u{2}\u{2}\u{7FA}\u{7FF}" .
        "\u{5}\u{70}\u{39}\u{2}\u{7FB}\u{7FC}\u{7}\u{440}\u{2}\u{2}\u{7FC}" .
        "\u{7FE}\u{5}\u{70}\u{39}\u{2}\u{7FD}\u{7FB}\u{3}\u{2}\u{2}\u{2}\u{7FE}" .
        "\u{801}\u{3}\u{2}\u{2}\u{2}\u{7FF}\u{7FD}\u{3}\u{2}\u{2}\u{2}\u{7FF}" .
        "\u{800}\u{3}\u{2}\u{2}\u{2}\u{800}\u{802}\u{3}\u{2}\u{2}\u{2}\u{801}" .
        "\u{7FF}\u{3}\u{2}\u{2}\u{2}\u{802}\u{803}\u{7}\u{43F}\u{2}\u{2}\u{803}" .
        "\u{805}\u{3}\u{2}\u{2}\u{2}\u{804}\u{7F9}\u{3}\u{2}\u{2}\u{2}\u{804}" .
        "\u{805}\u{3}\u{2}\u{2}\u{2}\u{805}\u{807}\u{3}\u{2}\u{2}\u{2}\u{806}" .
        "\u{774}\u{3}\u{2}\u{2}\u{2}\u{806}\u{796}\u{3}\u{2}\u{2}\u{2}\u{806}" .
        "\u{7AF}\u{3}\u{2}\u{2}\u{2}\u{806}\u{7D0}\u{3}\u{2}\u{2}\u{2}\u{806}" .
        "\u{7F1}\u{3}\u{2}\u{2}\u{2}\u{807}\u{6B}\u{3}\u{2}\u{2}\u{2}\u{808}" .
        "\u{80C}\u{5}\u{228}\u{115}\u{2}\u{809}\u{80C}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{80A}\u{80C}\u{7}\u{6A}\u{2}\u{2}\u{80B}\u{808}\u{3}\u{2}\u{2}\u{2}" .
        "\u{80B}\u{809}\u{3}\u{2}\u{2}\u{2}\u{80B}\u{80A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{80C}\u{6D}\u{3}\u{2}\u{2}\u{2}\u{80D}\u{80E}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{80E}\u{811}\u{5}\u{6C}\u{37}\u{2}\u{80F}\u{810}\u{7}\u{440}\u{2}" .
        "\u{2}\u{810}\u{812}\u{5}\u{6C}\u{37}\u{2}\u{811}\u{80F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{812}\u{813}\u{3}\u{2}\u{2}\u{2}\u{813}\u{811}\u{3}\u{2}" .
        "\u{2}\u{2}\u{813}\u{814}\u{3}\u{2}\u{2}\u{2}\u{814}\u{815}\u{3}\u{2}" .
        "\u{2}\u{2}\u{815}\u{816}\u{7}\u{43F}\u{2}\u{2}\u{816}\u{6F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{817}\u{818}\u{7}\u{25F}\u{2}\u{2}\u{818}\u{81C}\u{5}" .
        "\u{216}\u{10C}\u{2}\u{819}\u{81B}\u{5}\u{72}\u{3A}\u{2}\u{81A}\u{819}" .
        "\u{3}\u{2}\u{2}\u{2}\u{81B}\u{81E}\u{3}\u{2}\u{2}\u{2}\u{81C}\u{81A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{81C}\u{81D}\u{3}\u{2}\u{2}\u{2}\u{81D}\u{71}" .
        "\u{3}\u{2}\u{2}\u{2}\u{81E}\u{81C}\u{3}\u{2}\u{2}\u{2}\u{81F}\u{821}" .
        "\u{7}\u{2A}\u{2}\u{2}\u{820}\u{81F}\u{3}\u{2}\u{2}\u{2}\u{820}\u{821}" .
        "\u{3}\u{2}\u{2}\u{2}\u{821}\u{823}\u{3}\u{2}\u{2}\u{2}\u{822}\u{824}" .
        "\u{7}\u{25A}\u{2}\u{2}\u{823}\u{822}\u{3}\u{2}\u{2}\u{2}\u{823}\u{824}" .
        "\u{3}\u{2}\u{2}\u{2}\u{824}\u{825}\u{3}\u{2}\u{2}\u{2}\u{825}\u{827}" .
        "\u{7}\u{189}\u{2}\u{2}\u{826}\u{828}\u{7}\u{435}\u{2}\u{2}\u{827}" .
        "\u{826}\u{3}\u{2}\u{2}\u{2}\u{827}\u{828}\u{3}\u{2}\u{2}\u{2}\u{828}" .
        "\u{829}\u{3}\u{2}\u{2}\u{2}\u{829}\u{850}\u{5}\u{20C}\u{107}\u{2}" .
        "\u{82A}\u{82C}\u{7}\u{163}\u{2}\u{2}\u{82B}\u{82D}\u{7}\u{435}\u{2}" .
        "\u{2}\u{82C}\u{82B}\u{3}\u{2}\u{2}\u{2}\u{82C}\u{82D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{82D}\u{82E}\u{3}\u{2}\u{2}\u{2}\u{82E}\u{850}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{82F}\u{830}\u{7}\u{176}\u{2}\u{2}\u{830}\u{832}\u{7}" .
        "\u{17D}\u{2}\u{2}\u{831}\u{833}\u{7}\u{435}\u{2}\u{2}\u{832}\u{831}" .
        "\u{3}\u{2}\u{2}\u{2}\u{832}\u{833}\u{3}\u{2}\u{2}\u{2}\u{833}\u{834}" .
        "\u{3}\u{2}\u{2}\u{2}\u{834}\u{850}\u{7}\u{44D}\u{2}\u{2}\u{835}\u{836}" .
        "\u{7}\u{4F}\u{2}\u{2}\u{836}\u{838}\u{7}\u{17D}\u{2}\u{2}\u{837}\u{839}" .
        "\u{7}\u{435}\u{2}\u{2}\u{838}\u{837}\u{3}\u{2}\u{2}\u{2}\u{838}\u{839}" .
        "\u{3}\u{2}\u{2}\u{2}\u{839}\u{83A}\u{3}\u{2}\u{2}\u{2}\u{83A}\u{850}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{83B}\u{83D}\u{7}\u{1E0}\u{2}\u{2}\u{83C}" .
        "\u{83E}\u{7}\u{435}\u{2}\u{2}\u{83D}\u{83C}\u{3}\u{2}\u{2}\u{2}\u{83D}" .
        "\u{83E}\u{3}\u{2}\u{2}\u{2}\u{83E}\u{83F}\u{3}\u{2}\u{2}\u{2}\u{83F}" .
        "\u{850}\u{5}\u{21C}\u{10F}\u{2}\u{840}\u{842}\u{7}\u{1EA}\u{2}\u{2}" .
        "\u{841}\u{843}\u{7}\u{435}\u{2}\u{2}\u{842}\u{841}\u{3}\u{2}\u{2}" .
        "\u{2}\u{842}\u{843}\u{3}\u{2}\u{2}\u{2}\u{843}\u{844}\u{3}\u{2}\u{2}" .
        "\u{2}\u{844}\u{850}\u{5}\u{21C}\u{10F}\u{2}\u{845}\u{847}\u{7}\u{265}" .
        "\u{2}\u{2}\u{846}\u{848}\u{7}\u{435}\u{2}\u{2}\u{847}\u{846}\u{3}" .
        "\u{2}\u{2}\u{2}\u{847}\u{848}\u{3}\u{2}\u{2}\u{2}\u{848}\u{849}\u{3}" .
        "\u{2}\u{2}\u{2}\u{849}\u{850}\u{5}\u{216}\u{10C}\u{2}\u{84A}\u{84C}" .
        "\u{7}\u{1F6}\u{2}\u{2}\u{84B}\u{84D}\u{7}\u{435}\u{2}\u{2}\u{84C}" .
        "\u{84B}\u{3}\u{2}\u{2}\u{2}\u{84C}\u{84D}\u{3}\u{2}\u{2}\u{2}\u{84D}" .
        "\u{84E}\u{3}\u{2}\u{2}\u{2}\u{84E}\u{850}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{84F}\u{820}\u{3}\u{2}\u{2}\u{2}\u{84F}\u{82A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{84F}\u{82F}\u{3}\u{2}\u{2}\u{2}\u{84F}\u{835}\u{3}\u{2}\u{2}\u{2}" .
        "\u{84F}\u{83B}\u{3}\u{2}\u{2}\u{2}\u{84F}\u{840}\u{3}\u{2}\u{2}\u{2}" .
        "\u{84F}\u{845}\u{3}\u{2}\u{2}\u{2}\u{84F}\u{84A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{850}\u{73}\u{3}\u{2}\u{2}\u{2}\u{851}\u{852}\u{7}\u{9}\u{2}\u{2}" .
        "\u{852}\u{854}\u{9}\u{2}\u{2}\u{2}\u{853}\u{855}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{854}\u{853}\u{3}\u{2}\u{2}\u{2}\u{854}\u{855}\u{3}\u{2}\u{2}" .
        "\u{2}\u{855}\u{857}\u{3}\u{2}\u{2}\u{2}\u{856}\u{858}\u{5}\u{32}\u{1A}" .
        "\u{2}\u{857}\u{856}\u{3}\u{2}\u{2}\u{2}\u{858}\u{859}\u{3}\u{2}\u{2}" .
        "\u{2}\u{859}\u{857}\u{3}\u{2}\u{2}\u{2}\u{859}\u{85A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{85A}\u{864}\u{3}\u{2}\u{2}\u{2}\u{85B}\u{85C}\u{7}\u{9}\u{2}" .
        "\u{2}\u{85C}\u{85D}\u{9}\u{2}\u{2}\u{2}\u{85D}\u{85E}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{85E}\u{85F}\u{7}\u{276}\u{2}\u{2}\u{85F}\u{860}\u{7}" .
        "\u{176}\u{2}\u{2}\u{860}\u{861}\u{7}\u{17D}\u{2}\u{2}\u{861}\u{862}" .
        "\u{7}\u{1F0}\u{2}\u{2}\u{862}\u{864}\u{3}\u{2}\u{2}\u{2}\u{863}\u{851}" .
        "\u{3}\u{2}\u{2}\u{2}\u{863}\u{85B}\u{3}\u{2}\u{2}\u{2}\u{864}\u{75}" .
        "\u{3}\u{2}\u{2}\u{2}\u{865}\u{867}\u{7}\u{9}\u{2}\u{2}\u{866}\u{868}" .
        "\u{5}\u{34}\u{1B}\u{2}\u{867}\u{866}\u{3}\u{2}\u{2}\u{2}\u{867}\u{868}" .
        "\u{3}\u{2}\u{2}\u{2}\u{868}\u{869}\u{3}\u{2}\u{2}\u{2}\u{869}\u{86A}" .
        "\u{7}\u{18F}\u{2}\u{2}\u{86A}\u{86E}\u{5}\u{1FC}\u{FF}\u{2}\u{86B}" .
        "\u{86C}\u{7}\u{71}\u{2}\u{2}\u{86C}\u{86D}\u{7}\u{23C}\u{2}\u{2}\u{86D}" .
        "\u{86F}\u{5}\u{36}\u{1C}\u{2}\u{86E}\u{86B}\u{3}\u{2}\u{2}\u{2}\u{86E}" .
        "\u{86F}\u{3}\u{2}\u{2}\u{2}\u{86F}\u{876}\u{3}\u{2}\u{2}\u{2}\u{870}" .
        "\u{871}\u{7}\u{71}\u{2}\u{2}\u{871}\u{873}\u{7}\u{166}\u{2}\u{2}\u{872}" .
        "\u{874}\u{7}\u{6D}\u{2}\u{2}\u{873}\u{872}\u{3}\u{2}\u{2}\u{2}\u{873}" .
        "\u{874}\u{3}\u{2}\u{2}\u{2}\u{874}\u{875}\u{3}\u{2}\u{2}\u{2}\u{875}" .
        "\u{877}\u{7}\u{214}\u{2}\u{2}\u{876}\u{870}\u{3}\u{2}\u{2}\u{2}\u{876}" .
        "\u{877}\u{3}\u{2}\u{2}\u{2}\u{877}\u{87B}\u{3}\u{2}\u{2}\u{2}\u{878}" .
        "\u{879}\u{7}\u{85}\u{2}\u{2}\u{879}\u{87A}\u{7}\u{A6}\u{2}\u{2}\u{87A}" .
        "\u{87C}\u{5}\u{1FC}\u{FF}\u{2}\u{87B}\u{878}\u{3}\u{2}\u{2}\u{2}\u{87B}" .
        "\u{87C}\u{3}\u{2}\u{2}\u{2}\u{87C}\u{87E}\u{3}\u{2}\u{2}\u{2}\u{87D}" .
        "\u{87F}\u{5}\u{3E}\u{20}\u{2}\u{87E}\u{87D}\u{3}\u{2}\u{2}\u{2}\u{87E}" .
        "\u{87F}\u{3}\u{2}\u{2}\u{2}\u{87F}\u{882}\u{3}\u{2}\u{2}\u{2}\u{880}" .
        "\u{881}\u{7}\u{163}\u{2}\u{2}\u{881}\u{883}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{882}\u{880}\u{3}\u{2}\u{2}\u{2}\u{882}\u{883}\u{3}\u{2}\u{2}\u{2}" .
        "\u{883}\u{886}\u{3}\u{2}\u{2}\u{2}\u{884}\u{885}\u{7}\u{181}\u{2}" .
        "\u{2}\u{885}\u{887}\u{5}\u{162}\u{B2}\u{2}\u{886}\u{884}\u{3}\u{2}" .
        "\u{2}\u{2}\u{886}\u{887}\u{3}\u{2}\u{2}\u{2}\u{887}\u{77}\u{3}\u{2}" .
        "\u{2}\u{2}\u{888}\u{889}\u{7}\u{9}\u{2}\u{2}\u{889}\u{88A}\u{7}\u{1A4}" .
        "\u{2}\u{2}\u{88A}\u{88E}\u{5}\u{1FC}\u{FF}\u{2}\u{88B}\u{88D}\u{5}" .
        "\u{48}\u{25}\u{2}\u{88C}\u{88B}\u{3}\u{2}\u{2}\u{2}\u{88D}\u{890}" .
        "\u{3}\u{2}\u{2}\u{2}\u{88E}\u{88C}\u{3}\u{2}\u{2}\u{2}\u{88E}\u{88F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{88F}\u{79}\u{3}\u{2}\u{2}\u{2}\u{890}\u{88E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{891}\u{892}\u{7}\u{9}\u{2}\u{2}\u{892}\u{893}" .
        "\u{7}\u{1B6}\u{2}\u{2}\u{893}\u{894}\u{7}\u{237}\u{2}\u{2}\u{894}" .
        "\u{895}\u{7}\u{2EC}\u{2}\u{2}\u{895}\u{896}\u{7}\u{1C9}\u{2}\u{2}" .
        "\u{896}\u{897}\u{7}\u{59}\u{2}\u{2}\u{897}\u{7B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{898}\u{899}\u{7}\u{9}\u{2}\u{2}\u{899}\u{89A}\u{7}\u{1C7}\u{2}" .
        "\u{2}\u{89A}\u{89B}\u{7}\u{48}\u{2}\u{2}\u{89B}\u{89C}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{89C}\u{89D}\u{7}\u{7}\u{2}\u{2}\u{89D}\u{89E}\u{7}" .
        "\u{271}\u{2}\u{2}\u{89E}\u{8A4}\u{7}\u{44D}\u{2}\u{2}\u{89F}\u{8A1}" .
        "\u{7}\u{1B2}\u{2}\u{2}\u{8A0}\u{8A2}\u{7}\u{435}\u{2}\u{2}\u{8A1}" .
        "\u{8A0}\u{3}\u{2}\u{2}\u{2}\u{8A1}\u{8A2}\u{3}\u{2}\u{2}\u{2}\u{8A2}" .
        "\u{8A3}\u{3}\u{2}\u{2}\u{2}\u{8A3}\u{8A5}\u{5}\u{21E}\u{110}\u{2}" .
        "\u{8A4}\u{89F}\u{3}\u{2}\u{2}\u{2}\u{8A4}\u{8A5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{8A5}\u{8A7}\u{3}\u{2}\u{2}\u{2}\u{8A6}\u{8A8}\u{7}\u{280}\u{2}" .
        "\u{2}\u{8A7}\u{8A6}\u{3}\u{2}\u{2}\u{2}\u{8A7}\u{8A8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{8A8}\u{8A9}\u{3}\u{2}\u{2}\u{2}\u{8A9}\u{8AB}\u{7}\u{189}" .
        "\u{2}\u{2}\u{8AA}\u{8AC}\u{7}\u{435}\u{2}\u{2}\u{8AB}\u{8AA}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8AB}\u{8AC}\u{3}\u{2}\u{2}\u{2}\u{8AC}\u{8AD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8AD}\u{8AE}\u{5}\u{20C}\u{107}\u{2}\u{8AE}\u{7D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{8AF}\u{8B0}\u{7}\u{9}\u{2}\u{2}\u{8B0}\u{8B1}" .
        "\u{7}\u{7D}\u{2}\u{2}\u{8B1}\u{8B5}\u{5}\u{1FC}\u{FF}\u{2}\u{8B2}" .
        "\u{8B4}\u{5}\u{48}\u{25}\u{2}\u{8B3}\u{8B2}\u{3}\u{2}\u{2}\u{2}\u{8B4}" .
        "\u{8B7}\u{3}\u{2}\u{2}\u{2}\u{8B5}\u{8B3}\u{3}\u{2}\u{2}\u{2}\u{8B5}" .
        "\u{8B6}\u{3}\u{2}\u{2}\u{2}\u{8B6}\u{7F}\u{3}\u{2}\u{2}\u{2}\u{8B7}" .
        "\u{8B5}\u{3}\u{2}\u{2}\u{2}\u{8B8}\u{8B9}\u{7}\u{9}\u{2}\u{2}\u{8B9}" .
        "\u{8BA}\u{7}\u{23E}\u{2}\u{2}\u{8BA}\u{8BB}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{8BB}\u{8BC}\u{7}\u{203}\u{2}\u{2}\u{8BC}\u{8BD}\u{7}\u{43E}\u{2}" .
        "\u{2}\u{8BD}\u{8C2}\u{5}\u{4A}\u{26}\u{2}\u{8BE}\u{8BF}\u{7}\u{440}" .
        "\u{2}\u{2}\u{8BF}\u{8C1}\u{5}\u{4A}\u{26}\u{2}\u{8C0}\u{8BE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8C1}\u{8C4}\u{3}\u{2}\u{2}\u{2}\u{8C2}\u{8C0}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8C2}\u{8C3}\u{3}\u{2}\u{2}\u{2}\u{8C3}\u{8C5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8C4}\u{8C2}\u{3}\u{2}\u{2}\u{2}\u{8C5}\u{8C6}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{8C6}\u{81}\u{3}\u{2}\u{2}\u{2}\u{8C7}\u{8C9}\u{7}" .
        "\u{9}\u{2}\u{2}\u{8C8}\u{8CA}\u{9}\u{3}\u{2}\u{2}\u{8C9}\u{8C8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8C9}\u{8CA}\u{3}\u{2}\u{2}\u{2}\u{8CA}\u{8CC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8CB}\u{8CD}\u{7}\u{4D}\u{2}\u{2}\u{8CC}\u{8CB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8CC}\u{8CD}\u{3}\u{2}\u{2}\u{2}\u{8CD}\u{8CE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{8CE}\u{8CF}\u{7}\u{A3}\u{2}\u{2}\u{8CF}\u{8D8}\u{5}" .
        "\u{1FE}\u{100}\u{2}\u{8D0}\u{8D5}\u{5}\u{88}\u{45}\u{2}\u{8D1}\u{8D2}" .
        "\u{7}\u{440}\u{2}\u{2}\u{8D2}\u{8D4}\u{5}\u{88}\u{45}\u{2}\u{8D3}" .
        "\u{8D1}\u{3}\u{2}\u{2}\u{2}\u{8D4}\u{8D7}\u{3}\u{2}\u{2}\u{2}\u{8D5}" .
        "\u{8D3}\u{3}\u{2}\u{2}\u{2}\u{8D5}\u{8D6}\u{3}\u{2}\u{2}\u{2}\u{8D6}" .
        "\u{8D9}\u{3}\u{2}\u{2}\u{2}\u{8D7}\u{8D5}\u{3}\u{2}\u{2}\u{2}\u{8D8}" .
        "\u{8D0}\u{3}\u{2}\u{2}\u{2}\u{8D8}\u{8D9}\u{3}\u{2}\u{2}\u{2}\u{8D9}" .
        "\u{8DB}\u{3}\u{2}\u{2}\u{2}\u{8DA}\u{8DC}\u{5}\u{64}\u{33}\u{2}\u{8DB}" .
        "\u{8DA}\u{3}\u{2}\u{2}\u{2}\u{8DB}\u{8DC}\u{3}\u{2}\u{2}\u{2}\u{8DC}" .
        "\u{83}\u{3}\u{2}\u{2}\u{2}\u{8DD}\u{8DE}\u{7}\u{9}\u{2}\u{2}\u{8DE}" .
        "\u{8DF}\u{7}\u{265}\u{2}\u{2}\u{8DF}\u{8E0}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{8E0}\u{8E1}\u{9}\u{1F}\u{2}\u{2}\u{8E1}\u{8E2}\u{7}\u{177}\u{2}" .
        "\u{2}\u{8E2}\u{8E6}\u{7}\u{44D}\u{2}\u{2}\u{8E3}\u{8E4}\u{7}\u{1B2}" .
        "\u{2}\u{2}\u{8E4}\u{8E5}\u{7}\u{435}\u{2}\u{2}\u{8E5}\u{8E7}\u{5}" .
        "\u{21E}\u{110}\u{2}\u{8E6}\u{8E3}\u{3}\u{2}\u{2}\u{2}\u{8E6}\u{8E7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{8E7}\u{8E9}\u{3}\u{2}\u{2}\u{2}\u{8E8}\u{8EA}" .
        "\u{7}\u{280}\u{2}\u{2}\u{8E9}\u{8E8}\u{3}\u{2}\u{2}\u{2}\u{8E9}\u{8EA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{8EA}\u{8EB}\u{3}\u{2}\u{2}\u{2}\u{8EB}\u{8ED}" .
        "\u{7}\u{189}\u{2}\u{2}\u{8EC}\u{8EE}\u{7}\u{435}\u{2}\u{2}\u{8ED}" .
        "\u{8EC}\u{3}\u{2}\u{2}\u{2}\u{8ED}\u{8EE}\u{3}\u{2}\u{2}\u{2}\u{8EE}" .
        "\u{8EF}\u{3}\u{2}\u{2}\u{2}\u{8EF}\u{8F0}\u{5}\u{20C}\u{107}\u{2}" .
        "\u{8F0}\u{85}\u{3}\u{2}\u{2}\u{2}\u{8F1}\u{8F5}\u{7}\u{9}\u{2}\u{2}" .
        "\u{8F2}\u{8F3}\u{7}\u{144}\u{2}\u{2}\u{8F3}\u{8F4}\u{7}\u{435}\u{2}" .
        "\u{2}\u{8F4}\u{8F6}\u{9}\u{C}\u{2}\u{2}\u{8F5}\u{8F2}\u{3}\u{2}\u{2}" .
        "\u{2}\u{8F5}\u{8F6}\u{3}\u{2}\u{2}\u{2}\u{8F6}\u{8F8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{8F7}\u{8F9}\u{5}\u{34}\u{1B}\u{2}\u{8F8}\u{8F7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{8F8}\u{8F9}\u{3}\u{2}\u{2}\u{2}\u{8F9}\u{8FD}\u{3}\u{2}" .
        "\u{2}\u{2}\u{8FA}\u{8FB}\u{7}\u{98}\u{2}\u{2}\u{8FB}\u{8FC}\u{7}\u{23D}" .
        "\u{2}\u{2}\u{8FC}\u{8FE}\u{9}\u{D}\u{2}\u{2}\u{8FD}\u{8FA}\u{3}\u{2}" .
        "\u{2}\u{2}\u{8FD}\u{8FE}\u{3}\u{2}\u{2}\u{2}\u{8FE}\u{8FF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{8FF}\u{900}\u{7}\u{27D}\u{2}\u{2}\u{900}\u{905}\u{5}" .
        "\u{1FC}\u{FF}\u{2}\u{901}\u{902}\u{7}\u{43E}\u{2}\u{2}\u{902}\u{903}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{903}\u{904}\u{7}\u{43F}\u{2}\u{2}\u{904}" .
        "\u{906}\u{3}\u{2}\u{2}\u{2}\u{905}\u{901}\u{3}\u{2}\u{2}\u{2}\u{905}" .
        "\u{906}\u{3}\u{2}\u{2}\u{2}\u{906}\u{907}\u{3}\u{2}\u{2}\u{2}\u{907}" .
        "\u{908}\u{7}\u{E}\u{2}\u{2}\u{908}\u{90F}\u{5}\u{B6}\u{5C}\u{2}\u{909}" .
        "\u{90B}\u{7}\u{B7}\u{2}\u{2}\u{90A}\u{90C}\u{9}\u{E}\u{2}\u{2}\u{90B}" .
        "\u{90A}\u{3}\u{2}\u{2}\u{2}\u{90B}\u{90C}\u{3}\u{2}\u{2}\u{2}\u{90C}" .
        "\u{90D}\u{3}\u{2}\u{2}\u{2}\u{90D}\u{90E}\u{7}\u{1B}\u{2}\u{2}\u{90E}" .
        "\u{910}\u{7}\u{73}\u{2}\u{2}\u{90F}\u{909}\u{3}\u{2}\u{2}\u{2}\u{90F}" .
        "\u{910}\u{3}\u{2}\u{2}\u{2}\u{910}\u{87}\u{3}\u{2}\u{2}\u{2}\u{911}" .
        "\u{918}\u{5}\u{5E}\u{30}\u{2}\u{912}\u{914}\u{7}\u{440}\u{2}\u{2}" .
        "\u{913}\u{912}\u{3}\u{2}\u{2}\u{2}\u{913}\u{914}\u{3}\u{2}\u{2}\u{2}" .
        "\u{914}\u{915}\u{3}\u{2}\u{2}\u{2}\u{915}\u{917}\u{5}\u{5E}\u{30}" .
        "\u{2}\u{916}\u{913}\u{3}\u{2}\u{2}\u{2}\u{917}\u{91A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{918}\u{916}\u{3}\u{2}\u{2}\u{2}\u{918}\u{919}\u{3}\u{2}\u{2}" .
        "\u{2}\u{919}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{91A}\u{918}\u{3}\u{2}\u{2}" .
        "\u{2}\u{91B}\u{91D}\u{7}\u{7}\u{2}\u{2}\u{91C}\u{91E}\u{7}\u{1D}\u{2}" .
        "\u{2}\u{91D}\u{91C}\u{3}\u{2}\u{2}\u{2}\u{91D}\u{91E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{91E}\u{91F}\u{3}\u{2}\u{2}\u{2}\u{91F}\u{920}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{920}\u{924}\u{5}\u{50}\u{29}\u{2}\u{921}\u{925}\u{7}" .
        "\u{19D}\u{2}\u{2}\u{922}\u{923}\u{7}\u{142}\u{2}\u{2}\u{923}\u{925}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{924}\u{921}\u{3}\u{2}\u{2}\u{2}\u{924}" .
        "\u{922}\u{3}\u{2}\u{2}\u{2}\u{924}\u{925}\u{3}\u{2}\u{2}\u{2}\u{925}" .
        "\u{A80}\u{3}\u{2}\u{2}\u{2}\u{926}\u{928}\u{7}\u{7}\u{2}\u{2}\u{927}" .
        "\u{929}\u{7}\u{1D}\u{2}\u{2}\u{928}\u{927}\u{3}\u{2}\u{2}\u{2}\u{928}" .
        "\u{929}\u{3}\u{2}\u{2}\u{2}\u{929}\u{92A}\u{3}\u{2}\u{2}\u{2}\u{92A}" .
        "\u{92B}\u{7}\u{43E}\u{2}\u{2}\u{92B}\u{92C}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{92C}\u{933}\u{5}\u{50}\u{29}\u{2}\u{92D}\u{92E}\u{7}\u{440}\u{2}" .
        "\u{2}\u{92E}\u{92F}\u{5}\u{216}\u{10C}\u{2}\u{92F}\u{930}\u{5}\u{50}" .
        "\u{29}\u{2}\u{930}\u{932}\u{3}\u{2}\u{2}\u{2}\u{931}\u{92D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{932}\u{935}\u{3}\u{2}\u{2}\u{2}\u{933}\u{931}\u{3}\u{2}" .
        "\u{2}\u{2}\u{933}\u{934}\u{3}\u{2}\u{2}\u{2}\u{934}\u{936}\u{3}\u{2}" .
        "\u{2}\u{2}\u{935}\u{933}\u{3}\u{2}\u{2}\u{2}\u{936}\u{937}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{937}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{938}\u{939}\u{7}\u{7}" .
        "\u{2}\u{2}\u{939}\u{93B}\u{9}\u{14}\u{2}\u{2}\u{93A}\u{93C}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{93B}\u{93A}\u{3}\u{2}\u{2}\u{2}\u{93B}\u{93C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{93C}\u{93E}\u{3}\u{2}\u{2}\u{2}\u{93D}\u{93F}\u{5}" .
        "\u{40}\u{21}\u{2}\u{93E}\u{93D}\u{3}\u{2}\u{2}\u{2}\u{93E}\u{93F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{93F}\u{940}\u{3}\u{2}\u{2}\u{2}\u{940}\u{944}" .
        "\u{5}\u{23C}\u{11F}\u{2}\u{941}\u{943}\u{5}\u{42}\u{22}\u{2}\u{942}" .
        "\u{941}\u{3}\u{2}\u{2}\u{2}\u{943}\u{946}\u{3}\u{2}\u{2}\u{2}\u{944}" .
        "\u{942}\u{3}\u{2}\u{2}\u{2}\u{944}\u{945}\u{3}\u{2}\u{2}\u{2}\u{945}" .
        "\u{A80}\u{3}\u{2}\u{2}\u{2}\u{946}\u{944}\u{3}\u{2}\u{2}\u{2}\u{947}" .
        "\u{94C}\u{7}\u{7}\u{2}\u{2}\u{948}\u{94A}\u{7}\u{1F}\u{2}\u{2}\u{949}" .
        "\u{94B}\u{5}\u{216}\u{10C}\u{2}\u{94A}\u{949}\u{3}\u{2}\u{2}\u{2}" .
        "\u{94A}\u{94B}\u{3}\u{2}\u{2}\u{2}\u{94B}\u{94D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{94C}\u{948}\u{3}\u{2}\u{2}\u{2}\u{94C}\u{94D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{94D}\u{94E}\u{3}\u{2}\u{2}\u{2}\u{94E}\u{94F}\u{7}\u{7C}\u{2}\u{2}" .
        "\u{94F}\u{951}\u{7}\u{59}\u{2}\u{2}\u{950}\u{952}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{951}\u{950}\u{3}\u{2}\u{2}\u{2}\u{951}\u{952}\u{3}\u{2}\u{2}" .
        "\u{2}\u{952}\u{954}\u{3}\u{2}\u{2}\u{2}\u{953}\u{955}\u{5}\u{40}\u{21}" .
        "\u{2}\u{954}\u{953}\u{3}\u{2}\u{2}\u{2}\u{954}\u{955}\u{3}\u{2}\u{2}" .
        "\u{2}\u{955}\u{956}\u{3}\u{2}\u{2}\u{2}\u{956}\u{95A}\u{5}\u{23C}" .
        "\u{11F}\u{2}\u{957}\u{959}\u{5}\u{42}\u{22}\u{2}\u{958}\u{957}\u{3}" .
        "\u{2}\u{2}\u{2}\u{959}\u{95C}\u{3}\u{2}\u{2}\u{2}\u{95A}\u{958}\u{3}" .
        "\u{2}\u{2}\u{2}\u{95A}\u{95B}\u{3}\u{2}\u{2}\u{2}\u{95B}\u{A80}\u{3}" .
        "\u{2}\u{2}\u{2}\u{95C}\u{95A}\u{3}\u{2}\u{2}\u{2}\u{95D}\u{962}\u{7}" .
        "\u{7}\u{2}\u{2}\u{95E}\u{960}\u{7}\u{1F}\u{2}\u{2}\u{95F}\u{961}\u{5}" .
        "\u{216}\u{10C}\u{2}\u{960}\u{95F}\u{3}\u{2}\u{2}\u{2}\u{960}\u{961}" .
        "\u{3}\u{2}\u{2}\u{2}\u{961}\u{963}\u{3}\u{2}\u{2}\u{2}\u{962}\u{95E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{962}\u{963}\u{3}\u{2}\u{2}\u{2}\u{963}\u{964}" .
        "\u{3}\u{2}\u{2}\u{2}\u{964}\u{966}\u{7}\u{AC}\u{2}\u{2}\u{965}\u{967}" .
        "\u{9}\u{14}\u{2}\u{2}\u{966}\u{965}\u{3}\u{2}\u{2}\u{2}\u{966}\u{967}" .
        "\u{3}\u{2}\u{2}\u{2}\u{967}\u{969}\u{3}\u{2}\u{2}\u{2}\u{968}\u{96A}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{969}\u{968}\u{3}\u{2}\u{2}\u{2}\u{969}" .
        "\u{96A}\u{3}\u{2}\u{2}\u{2}\u{96A}\u{96C}\u{3}\u{2}\u{2}\u{2}\u{96B}" .
        "\u{96D}\u{5}\u{40}\u{21}\u{2}\u{96C}\u{96B}\u{3}\u{2}\u{2}\u{2}\u{96C}" .
        "\u{96D}\u{3}\u{2}\u{2}\u{2}\u{96D}\u{96E}\u{3}\u{2}\u{2}\u{2}\u{96E}" .
        "\u{972}\u{5}\u{23C}\u{11F}\u{2}\u{96F}\u{971}\u{5}\u{42}\u{22}\u{2}" .
        "\u{970}\u{96F}\u{3}\u{2}\u{2}\u{2}\u{971}\u{974}\u{3}\u{2}\u{2}\u{2}" .
        "\u{972}\u{970}\u{3}\u{2}\u{2}\u{2}\u{972}\u{973}\u{3}\u{2}\u{2}\u{2}" .
        "\u{973}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{974}\u{972}\u{3}\u{2}\u{2}\u{2}" .
        "\u{975}\u{976}\u{7}\u{7}\u{2}\u{2}\u{976}\u{978}\u{9}\u{16}\u{2}\u{2}" .
        "\u{977}\u{979}\u{9}\u{14}\u{2}\u{2}\u{978}\u{977}\u{3}\u{2}\u{2}\u{2}" .
        "\u{978}\u{979}\u{3}\u{2}\u{2}\u{2}\u{979}\u{97B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{97A}\u{97C}\u{5}\u{216}\u{10C}\u{2}\u{97B}\u{97A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{97B}\u{97C}\u{3}\u{2}\u{2}\u{2}\u{97C}\u{97D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{97D}\u{981}\u{5}\u{23C}\u{11F}\u{2}\u{97E}\u{980}\u{5}\u{42}" .
        "\u{22}\u{2}\u{97F}\u{97E}\u{3}\u{2}\u{2}\u{2}\u{980}\u{983}\u{3}\u{2}" .
        "\u{2}\u{2}\u{981}\u{97F}\u{3}\u{2}\u{2}\u{2}\u{981}\u{982}\u{3}\u{2}" .
        "\u{2}\u{2}\u{982}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{983}\u{981}\u{3}\u{2}" .
        "\u{2}\u{2}\u{984}\u{989}\u{7}\u{7}\u{2}\u{2}\u{985}\u{987}\u{7}\u{1F}" .
        "\u{2}\u{2}\u{986}\u{988}\u{5}\u{216}\u{10C}\u{2}\u{987}\u{986}\u{3}" .
        "\u{2}\u{2}\u{2}\u{987}\u{988}\u{3}\u{2}\u{2}\u{2}\u{988}\u{98A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{989}\u{985}\u{3}\u{2}\u{2}\u{2}\u{989}\u{98A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{98A}\u{98B}\u{3}\u{2}\u{2}\u{2}\u{98B}\u{98C}\u{7}" .
        "\u{42}\u{2}\u{2}\u{98C}\u{98E}\u{7}\u{59}\u{2}\u{2}\u{98D}\u{98F}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{98E}\u{98D}\u{3}\u{2}\u{2}\u{2}\u{98E}" .
        "\u{98F}\u{3}\u{2}\u{2}\u{2}\u{98F}\u{990}\u{3}\u{2}\u{2}\u{2}\u{990}" .
        "\u{991}\u{5}\u{23C}\u{11F}\u{2}\u{991}\u{992}\u{5}\u{56}\u{2C}\u{2}" .
        "\u{992}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{993}\u{998}\u{7}\u{7}\u{2}\u{2}" .
        "\u{994}\u{996}\u{7}\u{1F}\u{2}\u{2}\u{995}\u{997}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{996}\u{995}\u{3}\u{2}\u{2}\u{2}\u{996}\u{997}\u{3}\u{2}\u{2}" .
        "\u{2}\u{997}\u{999}\u{3}\u{2}\u{2}\u{2}\u{998}\u{994}\u{3}\u{2}\u{2}" .
        "\u{2}\u{998}\u{999}\u{3}\u{2}\u{2}\u{2}\u{999}\u{99A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{99A}\u{99B}\u{7}\u{1B}\u{2}\u{2}\u{99B}\u{99C}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{99C}\u{99D}\u{5}\u{27A}\u{13E}\u{2}\u{99D}\u{99E}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{99E}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{99F}\u{9A1}" .
        "\u{7}\u{144}\u{2}\u{2}\u{9A0}\u{9A2}\u{7}\u{435}\u{2}\u{2}\u{9A1}" .
        "\u{9A0}\u{3}\u{2}\u{2}\u{2}\u{9A1}\u{9A2}\u{3}\u{2}\u{2}\u{2}\u{9A2}" .
        "\u{9A3}\u{3}\u{2}\u{2}\u{2}\u{9A3}\u{A80}\u{9}\u{5}\u{2}\u{2}\u{9A4}" .
        "\u{9A6}\u{7}\u{9}\u{2}\u{2}\u{9A5}\u{9A7}\u{7}\u{1D}\u{2}\u{2}\u{9A6}" .
        "\u{9A5}\u{3}\u{2}\u{2}\u{2}\u{9A6}\u{9A7}\u{3}\u{2}\u{2}\u{2}\u{9A7}" .
        "\u{9A8}\u{3}\u{2}\u{2}\u{2}\u{9A8}\u{9AE}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{9A9}\u{9AA}\u{7}\u{93}\u{2}\u{2}\u{9AA}\u{9AB}\u{7}\u{2A}\u{2}" .
        "\u{2}\u{9AB}\u{9AF}\u{5}\u{248}\u{125}\u{2}\u{9AC}\u{9AD}\u{7}\u{33}" .
        "\u{2}\u{2}\u{9AD}\u{9AF}\u{7}\u{2A}\u{2}\u{2}\u{9AE}\u{9A9}\u{3}\u{2}" .
        "\u{2}\u{2}\u{9AE}\u{9AC}\u{3}\u{2}\u{2}\u{2}\u{9AF}\u{A80}\u{3}\u{2}" .
        "\u{2}\u{2}\u{9B0}\u{9B2}\u{7}\u{19}\u{2}\u{2}\u{9B1}\u{9B3}\u{7}\u{1D}" .
        "\u{2}\u{2}\u{9B2}\u{9B1}\u{3}\u{2}\u{2}\u{2}\u{9B2}\u{9B3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{9B3}\u{9B4}\u{3}\u{2}\u{2}\u{2}\u{9B4}\u{9B5}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{9B5}\u{9B6}\u{5}\u{216}\u{10C}\u{2}\u{9B6}\u{9BA}\u{5}" .
        "\u{50}\u{29}\u{2}\u{9B7}\u{9BB}\u{7}\u{19D}\u{2}\u{2}\u{9B8}\u{9B9}" .
        "\u{7}\u{142}\u{2}\u{2}\u{9B9}\u{9BB}\u{5}\u{216}\u{10C}\u{2}\u{9BA}" .
        "\u{9B7}\u{3}\u{2}\u{2}\u{2}\u{9BA}\u{9B8}\u{3}\u{2}\u{2}\u{2}\u{9BA}" .
        "\u{9BB}\u{3}\u{2}\u{2}\u{2}\u{9BB}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{9BC}" .
        "\u{9BD}\u{7}\u{85}\u{2}\u{2}\u{9BD}\u{9BE}\u{7}\u{1D}\u{2}\u{2}\u{9BE}" .
        "\u{9BF}\u{5}\u{216}\u{10C}\u{2}\u{9BF}\u{9C0}\u{7}\u{A6}\u{2}\u{2}" .
        "\u{9C0}\u{9C1}\u{5}\u{216}\u{10C}\u{2}\u{9C1}\u{A80}\u{3}\u{2}\u{2}" .
        "\u{2}\u{9C2}\u{9C4}\u{7}\u{64}\u{2}\u{2}\u{9C3}\u{9C5}\u{7}\u{435}" .
        "\u{2}\u{2}\u{9C4}\u{9C3}\u{3}\u{2}\u{2}\u{2}\u{9C4}\u{9C5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{9C5}\u{9C6}\u{3}\u{2}\u{2}\u{2}\u{9C6}\u{A80}\u{9}\u{6}" .
        "\u{2}\u{2}\u{9C7}\u{9C9}\u{7}\u{1EC}\u{2}\u{2}\u{9C8}\u{9CA}\u{7}" .
        "\u{1D}\u{2}\u{2}\u{9C9}\u{9C8}\u{3}\u{2}\u{2}\u{2}\u{9C9}\u{9CA}\u{3}" .
        "\u{2}\u{2}\u{2}\u{9CA}\u{9CB}\u{3}\u{2}\u{2}\u{2}\u{9CB}\u{9CC}\u{5}" .
        "\u{216}\u{10C}\u{2}\u{9CC}\u{9D0}\u{5}\u{50}\u{29}\u{2}\u{9CD}\u{9D1}" .
        "\u{7}\u{19D}\u{2}\u{2}\u{9CE}\u{9CF}\u{7}\u{142}\u{2}\u{2}\u{9CF}" .
        "\u{9D1}\u{5}\u{216}\u{10C}\u{2}\u{9D0}\u{9CD}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9D0}\u{9CE}\u{3}\u{2}\u{2}\u{2}\u{9D0}\u{9D1}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9D1}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{9D2}\u{9D4}\u{7}\u{33}\u{2}\u{2}" .
        "\u{9D3}\u{9D5}\u{7}\u{1D}\u{2}\u{2}\u{9D4}\u{9D3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9D4}\u{9D5}\u{3}\u{2}\u{2}\u{2}\u{9D5}\u{9D6}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9D6}\u{9D8}\u{5}\u{216}\u{10C}\u{2}\u{9D7}\u{9D9}\u{7}\u{8A}\u{2}" .
        "\u{2}\u{9D8}\u{9D7}\u{3}\u{2}\u{2}\u{2}\u{9D8}\u{9D9}\u{3}\u{2}\u{2}" .
        "\u{2}\u{9D9}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{9DA}\u{9DB}\u{7}\u{33}\u{2}" .
        "\u{2}\u{9DB}\u{9DC}\u{9}\u{20}\u{2}\u{2}\u{9DC}\u{A80}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{9DD}\u{9DE}\u{7}\u{33}\u{2}\u{2}\u{9DE}\u{9DF}\u{7}" .
        "\u{7C}\u{2}\u{2}\u{9DF}\u{A80}\u{7}\u{59}\u{2}\u{2}\u{9E0}\u{9E1}" .
        "\u{7}\u{85}\u{2}\u{2}\u{9E1}\u{9E2}\u{9}\u{14}\u{2}\u{2}\u{9E2}\u{9E3}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{9E3}\u{9E4}\u{7}\u{A6}\u{2}\u{2}\u{9E4}" .
        "\u{9E5}\u{5}\u{216}\u{10C}\u{2}\u{9E5}\u{A80}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9E6}\u{9E7}\u{7}\u{9}\u{2}\u{2}\u{9E7}\u{9E8}\u{7}\u{4F}\u{2}\u{2}" .
        "\u{9E8}\u{9E9}\u{5}\u{216}\u{10C}\u{2}\u{9E9}\u{9EA}\u{9}\u{21}\u{2}" .
        "\u{2}\u{9EA}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{9EB}\u{9EC}\u{7}\u{33}\u{2}" .
        "\u{2}\u{9EC}\u{9ED}\u{9}\u{14}\u{2}\u{2}\u{9ED}\u{A80}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{9EE}\u{9EF}\u{7}\u{33}\u{2}\u{2}\u{9EF}\u{9F0}\u{7}" .
        "\u{42}\u{2}\u{2}\u{9F0}\u{9F1}\u{7}\u{59}\u{2}\u{2}\u{9F1}\u{A80}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{9F2}\u{9F3}\u{7}\u{17E}\u{2}\u{2}\u{9F3}" .
        "\u{A80}\u{7}\u{5A}\u{2}\u{2}\u{9F4}\u{9F5}\u{7}\u{185}\u{2}\u{2}\u{9F5}" .
        "\u{A80}\u{7}\u{5A}\u{2}\u{2}\u{9F6}\u{9F8}\u{7}\u{85}\u{2}\u{2}\u{9F7}" .
        "\u{9F9}\u{9}\u{22}\u{2}\u{2}\u{9F8}\u{9F7}\u{3}\u{2}\u{2}\u{2}\u{9F8}" .
        "\u{9F9}\u{3}\u{2}\u{2}\u{2}\u{9F9}\u{9FC}\u{3}\u{2}\u{2}\u{2}\u{9FA}" .
        "\u{9FD}\u{5}\u{216}\u{10C}\u{2}\u{9FB}\u{9FD}\u{5}\u{1FC}\u{FF}\u{2}" .
        "\u{9FC}\u{9FA}\u{3}\u{2}\u{2}\u{2}\u{9FC}\u{9FB}\u{3}\u{2}\u{2}\u{2}" .
        "\u{9FD}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{9FE}\u{9FF}\u{7}\u{76}\u{2}\u{2}" .
        "\u{9FF}\u{A00}\u{7}\u{14}\u{2}\u{2}\u{A00}\u{A80}\u{5}\u{236}\u{11C}" .
        "\u{2}\u{A01}\u{A02}\u{7}\u{21}\u{2}\u{2}\u{A02}\u{A03}\u{7}\u{A6}" .
        "\u{2}\u{2}\u{A03}\u{A04}\u{7}\u{1A}\u{2}\u{2}\u{A04}\u{A05}\u{7}\u{93}" .
        "\u{2}\u{2}\u{A05}\u{A08}\u{5}\u{208}\u{105}\u{2}\u{A06}\u{A07}\u{7}" .
        "\u{1C}\u{2}\u{2}\u{A07}\u{A09}\u{5}\u{20A}\u{106}\u{2}\u{A08}\u{A06}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A08}\u{A09}\u{3}\u{2}\u{2}\u{2}\u{A09}\u{A80}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A0A}\u{A0C}\u{7}\u{2A}\u{2}\u{2}\u{A0B}\u{A0A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A0B}\u{A0C}\u{3}\u{2}\u{2}\u{2}\u{A0C}\u{A0D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A0D}\u{A0E}\u{7}\u{1A}\u{2}\u{2}\u{A0E}\u{A0F}" .
        "\u{7}\u{93}\u{2}\u{2}\u{A0F}\u{A10}\u{7}\u{435}\u{2}\u{2}\u{A10}\u{A14}" .
        "\u{5}\u{208}\u{105}\u{2}\u{A11}\u{A12}\u{7}\u{1C}\u{2}\u{2}\u{A12}" .
        "\u{A13}\u{7}\u{435}\u{2}\u{2}\u{A13}\u{A15}\u{5}\u{20A}\u{106}\u{2}" .
        "\u{A14}\u{A11}\u{3}\u{2}\u{2}\u{2}\u{A14}\u{A15}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A15}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A16}\u{A17}\u{7}\u{17F}\u{2}" .
        "\u{2}\u{A17}\u{A80}\u{7}\u{265}\u{2}\u{2}\u{A18}\u{A19}\u{7}\u{1B0}" .
        "\u{2}\u{2}\u{A19}\u{A80}\u{7}\u{265}\u{2}\u{2}\u{A1A}\u{A80}\u{7}" .
        "\u{41}\u{2}\u{2}\u{A1B}\u{A1C}\u{9}\u{23}\u{2}\u{2}\u{A1C}\u{A80}" .
        "\u{7}\u{27A}\u{2}\u{2}\u{A1D}\u{A1E}\u{7}\u{7}\u{2}\u{2}\u{A1E}\u{A1F}" .
        "\u{7}\u{7B}\u{2}\u{2}\u{A1F}\u{A20}\u{7}\u{43E}\u{2}\u{2}\u{A20}\u{A25}" .
        "\u{5}\u{6A}\u{36}\u{2}\u{A21}\u{A22}\u{7}\u{440}\u{2}\u{2}\u{A22}" .
        "\u{A24}\u{5}\u{6A}\u{36}\u{2}\u{A23}\u{A21}\u{3}\u{2}\u{2}\u{2}\u{A24}" .
        "\u{A27}\u{3}\u{2}\u{2}\u{2}\u{A25}\u{A23}\u{3}\u{2}\u{2}\u{2}\u{A25}" .
        "\u{A26}\u{3}\u{2}\u{2}\u{2}\u{A26}\u{A28}\u{3}\u{2}\u{2}\u{2}\u{A27}" .
        "\u{A25}\u{3}\u{2}\u{2}\u{2}\u{A28}\u{A29}\u{7}\u{43F}\u{2}\u{2}\u{A29}" .
        "\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A2A}\u{A2B}\u{7}\u{33}\u{2}\u{2}\u{A2B}" .
        "\u{A2C}\u{7}\u{7B}\u{2}\u{2}\u{A2C}\u{A80}\u{5}\u{236}\u{11C}\u{2}" .
        "\u{A2D}\u{A2E}\u{7}\u{17F}\u{2}\u{2}\u{A2E}\u{A31}\u{7}\u{7B}\u{2}" .
        "\u{2}\u{A2F}\u{A32}\u{5}\u{236}\u{11C}\u{2}\u{A30}\u{A32}\u{7}\u{8}" .
        "\u{2}\u{2}\u{A31}\u{A2F}\u{3}\u{2}\u{2}\u{2}\u{A31}\u{A30}\u{3}\u{2}" .
        "\u{2}\u{2}\u{A32}\u{A33}\u{3}\u{2}\u{2}\u{2}\u{A33}\u{A80}\u{7}\u{265}" .
        "\u{2}\u{2}\u{A34}\u{A35}\u{7}\u{1B0}\u{2}\u{2}\u{A35}\u{A38}\u{7}" .
        "\u{7B}\u{2}\u{2}\u{A36}\u{A39}\u{5}\u{236}\u{11C}\u{2}\u{A37}\u{A39}" .
        "\u{7}\u{8}\u{2}\u{2}\u{A38}\u{A36}\u{3}\u{2}\u{2}\u{2}\u{A38}\u{A37}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A39}\u{A3A}\u{3}\u{2}\u{2}\u{2}\u{A3A}\u{A80}" .
        "\u{7}\u{265}\u{2}\u{2}\u{A3B}\u{A3C}\u{7}\u{26E}\u{2}\u{2}\u{A3C}" .
        "\u{A3F}\u{7}\u{7B}\u{2}\u{2}\u{A3D}\u{A40}\u{5}\u{236}\u{11C}\u{2}" .
        "\u{A3E}\u{A40}\u{7}\u{8}\u{2}\u{2}\u{A3F}\u{A3D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A3F}\u{A3E}\u{3}\u{2}\u{2}\u{2}\u{A40}\u{A80}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A41}\u{A42}\u{7}\u{15E}\u{2}\u{2}\u{A42}\u{A43}\u{7}\u{7B}\u{2}" .
        "\u{2}\u{A43}\u{A80}\u{5}\u{21C}\u{10F}\u{2}\u{A44}\u{A45}\u{7}\u{225}" .
        "\u{2}\u{2}\u{A45}\u{A46}\u{7}\u{7B}\u{2}\u{2}\u{A46}\u{A47}\u{5}\u{236}" .
        "\u{11C}\u{2}\u{A47}\u{A48}\u{7}\u{55}\u{2}\u{2}\u{A48}\u{A49}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{A49}\u{A4E}\u{5}\u{6A}\u{36}\u{2}\u{A4A}\u{A4B}" .
        "\u{7}\u{440}\u{2}\u{2}\u{A4B}\u{A4D}\u{5}\u{6A}\u{36}\u{2}\u{A4C}" .
        "\u{A4A}\u{3}\u{2}\u{2}\u{2}\u{A4D}\u{A50}\u{3}\u{2}\u{2}\u{2}\u{A4E}" .
        "\u{A4C}\u{3}\u{2}\u{2}\u{2}\u{A4E}\u{A4F}\u{3}\u{2}\u{2}\u{2}\u{A4F}" .
        "\u{A51}\u{3}\u{2}\u{2}\u{2}\u{A50}\u{A4E}\u{3}\u{2}\u{2}\u{2}\u{A51}" .
        "\u{A52}\u{7}\u{43F}\u{2}\u{2}\u{A52}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A53}" .
        "\u{A54}\u{7}\u{192}\u{2}\u{2}\u{A54}\u{A55}\u{7}\u{7B}\u{2}\u{2}\u{A55}" .
        "\u{A56}\u{5}\u{216}\u{10C}\u{2}\u{A56}\u{A57}\u{7}\u{B7}\u{2}\u{2}" .
        "\u{A57}\u{A58}\u{7}\u{A3}\u{2}\u{2}\u{A58}\u{A5B}\u{5}\u{1FE}\u{100}" .
        "\u{2}\u{A59}\u{A5A}\u{9}\u{23}\u{2}\u{2}\u{A5A}\u{A5C}\u{7}\u{27A}" .
        "\u{2}\u{2}\u{A5B}\u{A59}\u{3}\u{2}\u{2}\u{2}\u{A5B}\u{A5C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{A5C}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A5D}\u{A5E}\u{7}\u{B}" .
        "\u{2}\u{2}\u{A5E}\u{A61}\u{7}\u{7B}\u{2}\u{2}\u{A5F}\u{A62}\u{5}\u{236}" .
        "\u{11C}\u{2}\u{A60}\u{A62}\u{7}\u{8}\u{2}\u{2}\u{A61}\u{A5F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{A61}\u{A60}\u{3}\u{2}\u{2}\u{2}\u{A62}\u{A80}\u{3}" .
        "\u{2}\u{2}\u{2}\u{A63}\u{A64}\u{7}\u{1B}\u{2}\u{2}\u{A64}\u{A67}\u{7}" .
        "\u{7B}\u{2}\u{2}\u{A65}\u{A68}\u{5}\u{236}\u{11C}\u{2}\u{A66}\u{A68}" .
        "\u{7}\u{8}\u{2}\u{2}\u{A67}\u{A65}\u{3}\u{2}\u{2}\u{2}\u{A67}\u{A66}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A68}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A69}\u{A6A}" .
        "\u{7}\u{72}\u{2}\u{2}\u{A6A}\u{A6D}\u{7}\u{7B}\u{2}\u{2}\u{A6B}\u{A6E}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{A6C}\u{A6E}\u{7}\u{8}\u{2}\u{2}\u{A6D}" .
        "\u{A6B}\u{3}\u{2}\u{2}\u{2}\u{A6D}\u{A6C}\u{3}\u{2}\u{2}\u{2}\u{A6E}" .
        "\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A6F}\u{A70}\u{7}\u{21C}\u{2}\u{2}\u{A70}" .
        "\u{A73}\u{7}\u{7B}\u{2}\u{2}\u{A71}\u{A74}\u{5}\u{236}\u{11C}\u{2}" .
        "\u{A72}\u{A74}\u{7}\u{8}\u{2}\u{2}\u{A73}\u{A71}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A73}\u{A72}\u{3}\u{2}\u{2}\u{2}\u{A74}\u{A80}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A75}\u{A76}\u{7}\u{226}\u{2}\u{2}\u{A76}\u{A79}\u{7}\u{7B}\u{2}" .
        "\u{2}\u{A77}\u{A7A}\u{5}\u{236}\u{11C}\u{2}\u{A78}\u{A7A}\u{7}\u{8}" .
        "\u{2}\u{2}\u{A79}\u{A77}\u{3}\u{2}\u{2}\u{2}\u{A79}\u{A78}\u{3}\u{2}" .
        "\u{2}\u{2}\u{A7A}\u{A80}\u{3}\u{2}\u{2}\u{2}\u{A7B}\u{A7C}\u{7}\u{224}" .
        "\u{2}\u{2}\u{A7C}\u{A80}\u{7}\u{209}\u{2}\u{2}\u{A7D}\u{A7E}\u{7}" .
        "\u{276}\u{2}\u{2}\u{A7E}\u{A80}\u{7}\u{209}\u{2}\u{2}\u{A7F}\u{911}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{91B}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{926}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{938}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{947}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{95D}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{975}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{984}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{993}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{99F}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9A4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9B0}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9BC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9C2}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9C7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9D2}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9DA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9DD}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9E0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9E6}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9EB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9EE}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9F2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9F4}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{9FE}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A01}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A0B}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A16}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A18}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A1A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A1B}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A1D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A2A}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A2D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A34}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A3B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A41}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A44}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A53}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A5D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A63}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A69}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A6F}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A75}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A7B}\u{3}\u{2}\u{2}\u{2}\u{A7F}\u{A7D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{A80}\u{89}\u{3}\u{2}\u{2}\u{2}\u{A81}\u{A82}" .
        "\u{7}\u{33}\u{2}\u{2}\u{A82}\u{A84}\u{9}\u{2}\u{2}\u{2}\u{A83}\u{A85}" .
        "\u{5}\u{24E}\u{128}\u{2}\u{A84}\u{A83}\u{3}\u{2}\u{2}\u{2}\u{A84}" .
        "\u{A85}\u{3}\u{2}\u{2}\u{2}\u{A85}\u{A86}\u{3}\u{2}\u{2}\u{2}\u{A86}" .
        "\u{A87}\u{5}\u{216}\u{10C}\u{2}\u{A87}\u{8B}\u{3}\u{2}\u{2}\u{2}\u{A88}" .
        "\u{A89}\u{7}\u{33}\u{2}\u{2}\u{A89}\u{A8B}\u{7}\u{18F}\u{2}\u{2}\u{A8A}" .
        "\u{A8C}\u{5}\u{24E}\u{128}\u{2}\u{A8B}\u{A8A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A8B}\u{A8C}\u{3}\u{2}\u{2}\u{2}\u{A8C}\u{A8D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{A8D}\u{A8E}\u{5}\u{1FC}\u{FF}\u{2}\u{A8E}\u{8D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{A8F}\u{A90}\u{7}\u{33}\u{2}\u{2}\u{A90}\u{A92}\u{7}\u{4F}" .
        "\u{2}\u{2}\u{A91}\u{A93}\u{9}\u{3}\u{2}\u{2}\u{A92}\u{A91}\u{3}\u{2}" .
        "\u{2}\u{2}\u{A92}\u{A93}\u{3}\u{2}\u{2}\u{2}\u{A93}\u{A94}\u{3}\u{2}" .
        "\u{2}\u{2}\u{A94}\u{A95}\u{5}\u{216}\u{10C}\u{2}\u{A95}\u{A96}\u{7}" .
        "\u{71}\u{2}\u{2}\u{A96}\u{AA3}\u{5}\u{1FE}\u{100}\u{2}\u{A97}\u{A99}" .
        "\u{7}\u{144}\u{2}\u{2}\u{A98}\u{A9A}\u{7}\u{435}\u{2}\u{2}\u{A99}" .
        "\u{A98}\u{3}\u{2}\u{2}\u{2}\u{A99}\u{A9A}\u{3}\u{2}\u{2}\u{2}\u{A9A}" .
        "\u{A9B}\u{3}\u{2}\u{2}\u{2}\u{A9B}\u{AA2}\u{9}\u{5}\u{2}\u{2}\u{A9C}" .
        "\u{A9E}\u{7}\u{64}\u{2}\u{2}\u{A9D}\u{A9F}\u{7}\u{435}\u{2}\u{2}\u{A9E}" .
        "\u{A9D}\u{3}\u{2}\u{2}\u{2}\u{A9E}\u{A9F}\u{3}\u{2}\u{2}\u{2}\u{A9F}" .
        "\u{AA0}\u{3}\u{2}\u{2}\u{2}\u{AA0}\u{AA2}\u{9}\u{6}\u{2}\u{2}\u{AA1}" .
        "\u{A97}\u{3}\u{2}\u{2}\u{2}\u{AA1}\u{A9C}\u{3}\u{2}\u{2}\u{2}\u{AA2}" .
        "\u{AA5}\u{3}\u{2}\u{2}\u{2}\u{AA3}\u{AA1}\u{3}\u{2}\u{2}\u{2}\u{AA3}" .
        "\u{AA4}\u{3}\u{2}\u{2}\u{2}\u{AA4}\u{8F}\u{3}\u{2}\u{2}\u{2}\u{AA5}" .
        "\u{AA3}\u{3}\u{2}\u{2}\u{2}\u{AA6}\u{AA7}\u{7}\u{33}\u{2}\u{2}\u{AA7}" .
        "\u{AA8}\u{7}\u{1C7}\u{2}\u{2}\u{AA8}\u{AA9}\u{7}\u{48}\u{2}\u{2}\u{AA9}" .
        "\u{AAA}\u{5}\u{216}\u{10C}\u{2}\u{AAA}\u{AAB}\u{7}\u{189}\u{2}\u{2}" .
        "\u{AAB}\u{AAC}\u{7}\u{435}\u{2}\u{2}\u{AAC}\u{AAD}\u{5}\u{20C}\u{107}" .
        "\u{2}\u{AAD}\u{91}\u{3}\u{2}\u{2}\u{2}\u{AAE}\u{AAF}\u{7}\u{33}\u{2}" .
        "\u{2}\u{AAF}\u{AB1}\u{7}\u{7D}\u{2}\u{2}\u{AB0}\u{AB2}\u{5}\u{24E}" .
        "\u{128}\u{2}\u{AB1}\u{AB0}\u{3}\u{2}\u{2}\u{2}\u{AB1}\u{AB2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{AB2}\u{AB3}\u{3}\u{2}\u{2}\u{2}\u{AB3}\u{AB4}\u{5}" .
        "\u{1FC}\u{FF}\u{2}\u{AB4}\u{93}\u{3}\u{2}\u{2}\u{2}\u{AB5}\u{AB6}" .
        "\u{7}\u{33}\u{2}\u{2}\u{AB6}\u{AB8}\u{7}\u{1A4}\u{2}\u{2}\u{AB7}\u{AB9}" .
        "\u{5}\u{24E}\u{128}\u{2}\u{AB8}\u{AB7}\u{3}\u{2}\u{2}\u{2}\u{AB8}" .
        "\u{AB9}\u{3}\u{2}\u{2}\u{2}\u{AB9}\u{ABA}\u{3}\u{2}\u{2}\u{2}\u{ABA}" .
        "\u{ABB}\u{5}\u{1FC}\u{FF}\u{2}\u{ABB}\u{95}\u{3}\u{2}\u{2}\u{2}\u{ABC}" .
        "\u{ABD}\u{7}\u{33}\u{2}\u{2}\u{ABD}\u{ABF}\u{7}\u{23E}\u{2}\u{2}\u{ABE}" .
        "\u{AC0}\u{5}\u{24E}\u{128}\u{2}\u{ABF}\u{ABE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{ABF}\u{AC0}\u{3}\u{2}\u{2}\u{2}\u{AC0}\u{AC1}\u{3}\u{2}\u{2}\u{2}" .
        "\u{AC1}\u{AC2}\u{5}\u{216}\u{10C}\u{2}\u{AC2}\u{97}\u{3}\u{2}\u{2}" .
        "\u{2}\u{AC3}\u{AC5}\u{7}\u{33}\u{2}\u{2}\u{AC4}\u{AC6}\u{7}\u{267}" .
        "\u{2}\u{2}\u{AC5}\u{AC4}\u{3}\u{2}\u{2}\u{2}\u{AC5}\u{AC6}\u{3}\u{2}" .
        "\u{2}\u{2}\u{AC6}\u{AC7}\u{3}\u{2}\u{2}\u{2}\u{AC7}\u{AC9}\u{7}\u{A3}" .
        "\u{2}\u{2}\u{AC8}\u{ACA}\u{5}\u{24E}\u{128}\u{2}\u{AC9}\u{AC8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{AC9}\u{ACA}\u{3}\u{2}\u{2}\u{2}\u{ACA}\u{ACB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{ACB}\u{ACD}\u{5}\u{238}\u{11D}\u{2}\u{ACC}\u{ACE}" .
        "\u{9}\u{24}\u{2}\u{2}\u{ACD}\u{ACC}\u{3}\u{2}\u{2}\u{2}\u{ACD}\u{ACE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{ACE}\u{99}\u{3}\u{2}\u{2}\u{2}\u{ACF}\u{AD0}" .
        "\u{7}\u{33}\u{2}\u{2}\u{AD0}\u{AD1}\u{7}\u{265}\u{2}\u{2}\u{AD1}\u{AD7}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{AD2}\u{AD4}\u{7}\u{189}\u{2}\u{2}\u{AD3}" .
        "\u{AD5}\u{7}\u{435}\u{2}\u{2}\u{AD4}\u{AD3}\u{3}\u{2}\u{2}\u{2}\u{AD4}" .
        "\u{AD5}\u{3}\u{2}\u{2}\u{2}\u{AD5}\u{AD6}\u{3}\u{2}\u{2}\u{2}\u{AD6}" .
        "\u{AD8}\u{5}\u{20C}\u{107}\u{2}\u{AD7}\u{AD2}\u{3}\u{2}\u{2}\u{2}" .
        "\u{AD7}\u{AD8}\u{3}\u{2}\u{2}\u{2}\u{AD8}\u{9B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{AD9}\u{ADA}\u{7}\u{33}\u{2}\u{2}\u{ADA}\u{ADC}\u{7}\u{A8}\u{2}" .
        "\u{2}\u{ADB}\u{ADD}\u{5}\u{24E}\u{128}\u{2}\u{ADC}\u{ADB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{ADC}\u{ADD}\u{3}\u{2}\u{2}\u{2}\u{ADD}\u{ADE}\u{3}\u{2}" .
        "\u{2}\u{2}\u{ADE}\u{ADF}\u{5}\u{1FC}\u{FF}\u{2}\u{ADF}\u{9D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{AE0}\u{AE1}\u{7}\u{33}\u{2}\u{2}\u{AE1}\u{AE3}\u{7}" .
        "\u{27D}\u{2}\u{2}\u{AE2}\u{AE4}\u{5}\u{24E}\u{128}\u{2}\u{AE3}\u{AE2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{AE3}\u{AE4}\u{3}\u{2}\u{2}\u{2}\u{AE4}\u{AE5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{AE5}\u{AEA}\u{5}\u{1FC}\u{FF}\u{2}\u{AE6}\u{AE7}" .
        "\u{7}\u{440}\u{2}\u{2}\u{AE7}\u{AE9}\u{5}\u{1FC}\u{FF}\u{2}\u{AE8}" .
        "\u{AE6}\u{3}\u{2}\u{2}\u{2}\u{AE9}\u{AEC}\u{3}\u{2}\u{2}\u{2}\u{AEA}" .
        "\u{AE8}\u{3}\u{2}\u{2}\u{2}\u{AEA}\u{AEB}\u{3}\u{2}\u{2}\u{2}\u{AEB}" .
        "\u{AEE}\u{3}\u{2}\u{2}\u{2}\u{AEC}\u{AEA}\u{3}\u{2}\u{2}\u{2}\u{AED}" .
        "\u{AEF}\u{9}\u{24}\u{2}\u{2}\u{AEE}\u{AED}\u{3}\u{2}\u{2}\u{2}\u{AEE}" .
        "\u{AEF}\u{3}\u{2}\u{2}\u{2}\u{AEF}\u{9F}\u{3}\u{2}\u{2}\u{2}\u{AF0}" .
        "\u{AF1}\u{7}\u{85}\u{2}\u{2}\u{AF1}\u{AF2}\u{7}\u{A3}\u{2}\u{2}\u{AF2}" .
        "\u{AF7}\u{5}\u{A2}\u{52}\u{2}\u{AF3}\u{AF4}\u{7}\u{440}\u{2}\u{2}" .
        "\u{AF4}\u{AF6}\u{5}\u{A2}\u{52}\u{2}\u{AF5}\u{AF3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{AF6}\u{AF9}\u{3}\u{2}\u{2}\u{2}\u{AF7}\u{AF5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{AF7}\u{AF8}\u{3}\u{2}\u{2}\u{2}\u{AF8}\u{A1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{AF9}\u{AF7}\u{3}\u{2}\u{2}\u{2}\u{AFA}\u{AFB}\u{5}\u{1FE}" .
        "\u{100}\u{2}\u{AFB}\u{AFC}\u{7}\u{A6}\u{2}\u{2}\u{AFC}\u{AFD}\u{5}" .
        "\u{1FE}\u{100}\u{2}\u{AFD}\u{A3}\u{3}\u{2}\u{2}\u{2}\u{AFE}\u{B00}" .
        "\u{7}\u{26E}\u{2}\u{2}\u{AFF}\u{B01}\u{7}\u{A3}\u{2}\u{2}\u{B00}\u{AFF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B00}\u{B01}\u{3}\u{2}\u{2}\u{2}\u{B01}\u{B02}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B02}\u{B03}\u{5}\u{1FE}\u{100}\u{2}\u{B03}" .
        "\u{A5}\u{3}\u{2}\u{2}\u{2}\u{B04}\u{B05}\u{7}\u{15}\u{2}\u{2}\u{B05}" .
        "\u{B0C}\u{5}\u{1FC}\u{FF}\u{2}\u{B06}\u{B09}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{B07}\u{B0A}\u{5}\u{242}\u{122}\u{2}\u{B08}\u{B0A}\u{5}\u{23E}\u{120}" .
        "\u{2}\u{B09}\u{B07}\u{3}\u{2}\u{2}\u{2}\u{B09}\u{B08}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B09}\u{B0A}\u{3}\u{2}\u{2}\u{2}\u{B0A}\u{B0B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B0B}\u{B0D}\u{7}\u{43F}\u{2}\u{2}\u{B0C}\u{B06}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B0C}\u{B0D}\u{3}\u{2}\u{2}\u{2}\u{B0D}\u{A7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B0E}\u{B11}\u{5}\u{C2}\u{62}\u{2}\u{B0F}\u{B11}\u{5}" .
        "\u{C4}\u{63}\u{2}\u{B10}\u{B0E}\u{3}\u{2}\u{2}\u{2}\u{B10}\u{B0F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B11}\u{A9}\u{3}\u{2}\u{2}\u{2}\u{B12}\u{B13}" .
        "\u{7}\u{181}\u{2}\u{2}\u{B13}\u{B14}\u{5}\u{23E}\u{120}\u{2}\u{B14}" .
        "\u{AB}\u{3}\u{2}\u{2}\u{2}\u{B15}\u{B1A}\u{5}\u{C6}\u{64}\u{2}\u{B16}" .
        "\u{B1A}\u{5}\u{C8}\u{65}\u{2}\u{B17}\u{B1A}\u{5}\u{CA}\u{66}\u{2}" .
        "\u{B18}\u{B1A}\u{5}\u{CC}\u{67}\u{2}\u{B19}\u{B15}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B19}\u{B16}\u{3}\u{2}\u{2}\u{2}\u{B19}\u{B17}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B19}\u{B18}\u{3}\u{2}\u{2}\u{2}\u{B1A}\u{AD}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B1B}\u{B1D}\u{7}\u{53}\u{2}\u{2}\u{B1C}\u{B1E}\u{9}\u{25}" .
        "\u{2}\u{2}\u{B1D}\u{B1C}\u{3}\u{2}\u{2}\u{2}\u{B1D}\u{B1E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B1E}\u{B20}\u{3}\u{2}\u{2}\u{2}\u{B1F}\u{B21}\u{7}\u{4D}" .
        "\u{2}\u{2}\u{B20}\u{B1F}\u{3}\u{2}\u{2}\u{2}\u{B20}\u{B21}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B21}\u{B23}\u{3}\u{2}\u{2}\u{2}\u{B22}\u{B24}\u{7}\u{55}" .
        "\u{2}\u{2}\u{B23}\u{B22}\u{3}\u{2}\u{2}\u{2}\u{B23}\u{B24}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B24}\u{B25}\u{3}\u{2}\u{2}\u{2}\u{B25}\u{B2C}\u{5}\u{1FE}" .
        "\u{100}\u{2}\u{B26}\u{B27}\u{7}\u{7B}\u{2}\u{2}\u{B27}\u{B29}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{B28}\u{B2A}\u{5}\u{236}\u{11C}\u{2}\u{B29}\u{B28}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B29}\u{B2A}\u{3}\u{2}\u{2}\u{2}\u{B2A}\u{B2B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B2B}\u{B2D}\u{7}\u{43F}\u{2}\u{2}\u{B2C}\u{B26}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B2C}\u{B2D}\u{3}\u{2}\u{2}\u{2}\u{B2D}\u{B3E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B2E}\u{B2F}\u{7}\u{43E}\u{2}\u{2}\u{B2F}\u{B30}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{B30}\u{B31}\u{7}\u{43F}\u{2}\u{2}\u{B31}" .
        "\u{B33}\u{3}\u{2}\u{2}\u{2}\u{B32}\u{B2E}\u{3}\u{2}\u{2}\u{2}\u{B32}" .
        "\u{B33}\u{3}\u{2}\u{2}\u{2}\u{B33}\u{B34}\u{3}\u{2}\u{2}\u{2}\u{B34}" .
        "\u{B3F}\u{5}\u{BA}\u{5E}\u{2}\u{B35}\u{B36}\u{7}\u{93}\u{2}\u{2}\u{B36}" .
        "\u{B3B}\u{5}\u{BC}\u{5F}\u{2}\u{B37}\u{B38}\u{7}\u{440}\u{2}\u{2}" .
        "\u{B38}\u{B3A}\u{5}\u{BC}\u{5F}\u{2}\u{B39}\u{B37}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B3A}\u{B3D}\u{3}\u{2}\u{2}\u{2}\u{B3B}\u{B39}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B3B}\u{B3C}\u{3}\u{2}\u{2}\u{2}\u{B3C}\u{B3F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B3D}\u{B3B}\u{3}\u{2}\u{2}\u{2}\u{B3E}\u{B32}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B3E}\u{B35}\u{3}\u{2}\u{2}\u{2}\u{B3F}\u{B4C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B40}\u{B41}\u{7}\u{71}\u{2}\u{2}\u{B41}\u{B42}\u{7}\u{183}" .
        "\u{2}\u{2}\u{B42}\u{B43}\u{7}\u{59}\u{2}\u{2}\u{B43}\u{B44}\u{7}\u{AF}" .
        "\u{2}\u{2}\u{B44}\u{B49}\u{5}\u{BC}\u{5F}\u{2}\u{B45}\u{B46}\u{7}" .
        "\u{440}\u{2}\u{2}\u{B46}\u{B48}\u{5}\u{BC}\u{5F}\u{2}\u{B47}\u{B45}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B48}\u{B4B}\u{3}\u{2}\u{2}\u{2}\u{B49}\u{B47}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B49}\u{B4A}\u{3}\u{2}\u{2}\u{2}\u{B4A}\u{B4D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B4B}\u{B49}\u{3}\u{2}\u{2}\u{2}\u{B4C}\u{B40}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B4C}\u{B4D}\u{3}\u{2}\u{2}\u{2}\u{B4D}\u{AF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B4E}\u{B4F}\u{7}\u{63}\u{2}\u{2}\u{B4F}\u{B51}" .
        "\u{7}\u{176}\u{2}\u{2}\u{B50}\u{B52}\u{9}\u{26}\u{2}\u{2}\u{B51}\u{B50}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B51}\u{B52}\u{3}\u{2}\u{2}\u{2}\u{B52}\u{B54}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B53}\u{B55}\u{7}\u{1C6}\u{2}\u{2}\u{B54}\u{B53}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B54}\u{B55}\u{3}\u{2}\u{2}\u{2}\u{B55}\u{B56}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B56}\u{B57}\u{7}\u{50}\u{2}\u{2}\u{B57}\u{B59}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{B58}\u{B5A}\u{9}\u{8}\u{2}\u{2}\u{B59}\u{B58}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B59}\u{B5A}\u{3}\u{2}\u{2}\u{2}\u{B5A}\u{B5B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{B5B}\u{B5C}\u{7}\u{55}\u{2}\u{2}\u{B5C}\u{B5D}" .
        "\u{7}\u{A3}\u{2}\u{2}\u{B5D}\u{B63}\u{5}\u{1FE}\u{100}\u{2}\u{B5E}" .
        "\u{B5F}\u{7}\u{7B}\u{2}\u{2}\u{B5F}\u{B60}\u{7}\u{43E}\u{2}\u{2}\u{B60}" .
        "\u{B61}\u{5}\u{236}\u{11C}\u{2}\u{B61}\u{B62}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{B62}\u{B64}\u{3}\u{2}\u{2}\u{2}\u{B63}\u{B5E}\u{3}\u{2}\u{2}\u{2}" .
        "\u{B63}\u{B64}\u{3}\u{2}\u{2}\u{2}\u{B64}\u{B68}\u{3}\u{2}\u{2}\u{2}" .
        "\u{B65}\u{B66}\u{7}\u{1A}\u{2}\u{2}\u{B66}\u{B67}\u{7}\u{93}\u{2}" .
        "\u{2}\u{B67}\u{B69}\u{5}\u{208}\u{105}\u{2}\u{B68}\u{B65}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B68}\u{B69}\u{3}\u{2}\u{2}\u{2}\u{B69}\u{B70}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B6A}\u{B6C}\u{9}\u{27}\u{2}\u{2}\u{B6B}\u{B6D}\u{5}\u{F6}" .
        "\u{7C}\u{2}\u{B6C}\u{B6B}\u{3}\u{2}\u{2}\u{2}\u{B6D}\u{B6E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B6E}\u{B6C}\u{3}\u{2}\u{2}\u{2}\u{B6E}\u{B6F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B6F}\u{B71}\u{3}\u{2}\u{2}\u{2}\u{B70}\u{B6A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B70}\u{B71}\u{3}\u{2}\u{2}\u{2}\u{B71}\u{B78}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B72}\u{B74}\u{7}\u{62}\u{2}\u{2}\u{B73}\u{B75}\u{5}\u{F8}" .
        "\u{7D}\u{2}\u{B74}\u{B73}\u{3}\u{2}\u{2}\u{2}\u{B75}\u{B76}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B76}\u{B74}\u{3}\u{2}\u{2}\u{2}\u{B76}\u{B77}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B77}\u{B79}\u{3}\u{2}\u{2}\u{2}\u{B78}\u{B72}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B78}\u{B79}\u{3}\u{2}\u{2}\u{2}\u{B79}\u{B7E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B7A}\u{B7B}\u{7}\u{4D}\u{2}\u{2}\u{B7B}\u{B7C}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{B7C}\u{B7D}\u{9}\u{28}\u{2}\u{2}\u{B7D}\u{B7F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{B7E}\u{B7A}\u{3}\u{2}\u{2}\u{2}\u{B7E}\u{B7F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{B7F}\u{B8B}\u{3}\u{2}\u{2}\u{2}\u{B80}\u{B81}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{B81}\u{B86}\u{5}\u{BE}\u{60}\u{2}\u{B82}\u{B83}" .
        "\u{7}\u{440}\u{2}\u{2}\u{B83}\u{B85}\u{5}\u{BE}\u{60}\u{2}\u{B84}" .
        "\u{B82}\u{3}\u{2}\u{2}\u{2}\u{B85}\u{B88}\u{3}\u{2}\u{2}\u{2}\u{B86}" .
        "\u{B84}\u{3}\u{2}\u{2}\u{2}\u{B86}\u{B87}\u{3}\u{2}\u{2}\u{2}\u{B87}" .
        "\u{B89}\u{3}\u{2}\u{2}\u{2}\u{B88}\u{B86}\u{3}\u{2}\u{2}\u{2}\u{B89}" .
        "\u{B8A}\u{7}\u{43F}\u{2}\u{2}\u{B8A}\u{B8C}\u{3}\u{2}\u{2}\u{2}\u{B8B}" .
        "\u{B80}\u{3}\u{2}\u{2}\u{2}\u{B8B}\u{B8C}\u{3}\u{2}\u{2}\u{2}\u{B8C}" .
        "\u{B96}\u{3}\u{2}\u{2}\u{2}\u{B8D}\u{B8E}\u{7}\u{93}\u{2}\u{2}\u{B8E}" .
        "\u{B93}\u{5}\u{BC}\u{5F}\u{2}\u{B8F}\u{B90}\u{7}\u{440}\u{2}\u{2}" .
        "\u{B90}\u{B92}\u{5}\u{BC}\u{5F}\u{2}\u{B91}\u{B8F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B92}\u{B95}\u{3}\u{2}\u{2}\u{2}\u{B93}\u{B91}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B93}\u{B94}\u{3}\u{2}\u{2}\u{2}\u{B94}\u{B97}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B95}\u{B93}\u{3}\u{2}\u{2}\u{2}\u{B96}\u{B8D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B96}\u{B97}\u{3}\u{2}\u{2}\u{2}\u{B97}\u{B1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{B98}\u{B99}\u{7}\u{63}\u{2}\u{2}\u{B99}\u{B9B}\u{7}\u{288}" .
        "\u{2}\u{2}\u{B9A}\u{B9C}\u{9}\u{26}\u{2}\u{2}\u{B9B}\u{B9A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B9B}\u{B9C}\u{3}\u{2}\u{2}\u{2}\u{B9C}\u{B9E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{B9D}\u{B9F}\u{7}\u{1C6}\u{2}\u{2}\u{B9E}\u{B9D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{B9E}\u{B9F}\u{3}\u{2}\u{2}\u{2}\u{B9F}\u{BA0}\u{3}" .
        "\u{2}\u{2}\u{2}\u{BA0}\u{BA1}\u{7}\u{50}\u{2}\u{2}\u{BA1}\u{BA3}\u{7}" .
        "\u{44D}\u{2}\u{2}\u{BA2}\u{BA4}\u{9}\u{8}\u{2}\u{2}\u{BA3}\u{BA2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BA3}\u{BA4}\u{3}\u{2}\u{2}\u{2}\u{BA4}\u{BA5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BA5}\u{BA6}\u{7}\u{55}\u{2}\u{2}\u{BA6}\u{BA7}" .
        "\u{7}\u{A3}\u{2}\u{2}\u{BA7}\u{BAB}\u{5}\u{1FE}\u{100}\u{2}\u{BA8}" .
        "\u{BA9}\u{7}\u{1A}\u{2}\u{2}\u{BA9}\u{BAA}\u{7}\u{93}\u{2}\u{2}\u{BAA}" .
        "\u{BAC}\u{5}\u{208}\u{105}\u{2}\u{BAB}\u{BA8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BAB}\u{BAC}\u{3}\u{2}\u{2}\u{2}\u{BAC}\u{BB3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BAD}\u{BAE}\u{7}\u{239}\u{2}\u{2}\u{BAE}\u{BAF}\u{7}\u{1AE}\u{2}" .
        "\u{2}\u{BAF}\u{BB0}\u{7}\u{14}\u{2}\u{2}\u{BB0}\u{BB1}\u{7}\u{437}" .
        "\u{2}\u{2}\u{BB1}\u{BB2}\u{7}\u{44D}\u{2}\u{2}\u{BB2}\u{BB4}\u{7}" .
        "\u{436}\u{2}\u{2}\u{BB3}\u{BAD}\u{3}\u{2}\u{2}\u{2}\u{BB3}\u{BB4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BB4}\u{BB9}\u{3}\u{2}\u{2}\u{2}\u{BB5}\u{BB6}" .
        "\u{7}\u{4D}\u{2}\u{2}\u{BB6}\u{BB7}\u{5}\u{21C}\u{10F}\u{2}\u{BB7}" .
        "\u{BB8}\u{9}\u{28}\u{2}\u{2}\u{BB8}\u{BBA}\u{3}\u{2}\u{2}\u{2}\u{BB9}" .
        "\u{BB5}\u{3}\u{2}\u{2}\u{2}\u{BB9}\u{BBA}\u{3}\u{2}\u{2}\u{2}\u{BBA}" .
        "\u{BC6}\u{3}\u{2}\u{2}\u{2}\u{BBB}\u{BBC}\u{7}\u{43E}\u{2}\u{2}\u{BBC}" .
        "\u{BC1}\u{5}\u{BE}\u{60}\u{2}\u{BBD}\u{BBE}\u{7}\u{440}\u{2}\u{2}" .
        "\u{BBE}\u{BC0}\u{5}\u{BE}\u{60}\u{2}\u{BBF}\u{BBD}\u{3}\u{2}\u{2}" .
        "\u{2}\u{BC0}\u{BC3}\u{3}\u{2}\u{2}\u{2}\u{BC1}\u{BBF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{BC1}\u{BC2}\u{3}\u{2}\u{2}\u{2}\u{BC2}\u{BC4}\u{3}\u{2}\u{2}" .
        "\u{2}\u{BC3}\u{BC1}\u{3}\u{2}\u{2}\u{2}\u{BC4}\u{BC5}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{BC5}\u{BC7}\u{3}\u{2}\u{2}\u{2}\u{BC6}\u{BBB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{BC6}\u{BC7}\u{3}\u{2}\u{2}\u{2}\u{BC7}\u{BD1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{BC8}\u{BC9}\u{7}\u{93}\u{2}\u{2}\u{BC9}\u{BCE}\u{5}\u{BC}" .
        "\u{5F}\u{2}\u{BCA}\u{BCB}\u{7}\u{440}\u{2}\u{2}\u{BCB}\u{BCD}\u{5}" .
        "\u{BC}\u{5F}\u{2}\u{BCC}\u{BCA}\u{3}\u{2}\u{2}\u{2}\u{BCD}\u{BD0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BCE}\u{BCC}\u{3}\u{2}\u{2}\u{2}\u{BCE}\u{BCF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BCF}\u{BD2}\u{3}\u{2}\u{2}\u{2}\u{BD0}\u{BCE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BD1}\u{BC8}\u{3}\u{2}\u{2}\u{2}\u{BD1}\u{BD2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BD2}\u{B3}\u{3}\u{2}\u{2}\u{2}\u{BD3}\u{BD5}" .
        "\u{7}\u{87}\u{2}\u{2}\u{BD4}\u{BD6}\u{9}\u{29}\u{2}\u{2}\u{BD5}\u{BD4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BD5}\u{BD6}\u{3}\u{2}\u{2}\u{2}\u{BD6}\u{BD8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BD7}\u{BD9}\u{7}\u{55}\u{2}\u{2}\u{BD8}\u{BD7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BD8}\u{BD9}\u{3}\u{2}\u{2}\u{2}\u{BD9}\u{BDA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BDA}\u{BE0}\u{5}\u{1FE}\u{100}\u{2}\u{BDB}" .
        "\u{BDC}\u{7}\u{7B}\u{2}\u{2}\u{BDC}\u{BDD}\u{7}\u{43E}\u{2}\u{2}\u{BDD}" .
        "\u{BDE}\u{5}\u{236}\u{11C}\u{2}\u{BDE}\u{BDF}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{BDF}\u{BE1}\u{3}\u{2}\u{2}\u{2}\u{BE0}\u{BDB}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BE0}\u{BE1}\u{3}\u{2}\u{2}\u{2}\u{BE1}\u{BF2}\u{3}\u{2}\u{2}\u{2}" .
        "\u{BE2}\u{BE3}\u{7}\u{43E}\u{2}\u{2}\u{BE3}\u{BE4}\u{5}\u{236}\u{11C}" .
        "\u{2}\u{BE4}\u{BE5}\u{7}\u{43F}\u{2}\u{2}\u{BE5}\u{BE7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{BE6}\u{BE2}\u{3}\u{2}\u{2}\u{2}\u{BE6}\u{BE7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{BE7}\u{BE8}\u{3}\u{2}\u{2}\u{2}\u{BE8}\u{BF3}\u{5}\u{BA}" .
        "\u{5E}\u{2}\u{BE9}\u{BEA}\u{7}\u{93}\u{2}\u{2}\u{BEA}\u{BEF}\u{5}" .
        "\u{BC}\u{5F}\u{2}\u{BEB}\u{BEC}\u{7}\u{440}\u{2}\u{2}\u{BEC}\u{BEE}" .
        "\u{5}\u{BC}\u{5F}\u{2}\u{BED}\u{BEB}\u{3}\u{2}\u{2}\u{2}\u{BEE}\u{BF1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BEF}\u{BED}\u{3}\u{2}\u{2}\u{2}\u{BEF}\u{BF0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BF0}\u{BF3}\u{3}\u{2}\u{2}\u{2}\u{BF1}\u{BEF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BF2}\u{BE6}\u{3}\u{2}\u{2}\u{2}\u{BF2}\u{BE9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{BF3}\u{B5}\u{3}\u{2}\u{2}\u{2}\u{BF4}\u{BF6}" .
        "\u{5}\u{E6}\u{74}\u{2}\u{BF5}\u{BF7}\u{5}\u{C0}\u{61}\u{2}\u{BF6}" .
        "\u{BF5}\u{3}\u{2}\u{2}\u{2}\u{BF6}\u{BF7}\u{3}\u{2}\u{2}\u{2}\u{BF7}" .
        "\u{C2C}\u{3}\u{2}\u{2}\u{2}\u{BF8}\u{BFA}\u{5}\u{E2}\u{72}\u{2}\u{BF9}" .
        "\u{BFB}\u{5}\u{C0}\u{61}\u{2}\u{BFA}\u{BF9}\u{3}\u{2}\u{2}\u{2}\u{BFA}" .
        "\u{BFB}\u{3}\u{2}\u{2}\u{2}\u{BFB}\u{C2C}\u{3}\u{2}\u{2}\u{2}\u{BFC}" .
        "\u{BFE}\u{5}\u{E8}\u{75}\u{2}\u{BFD}\u{BFF}\u{5}\u{EC}\u{77}\u{2}" .
        "\u{BFE}\u{BFD}\u{3}\u{2}\u{2}\u{2}\u{BFF}\u{C00}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C00}\u{BFE}\u{3}\u{2}\u{2}\u{2}\u{C00}\u{C01}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C01}\u{C0A}\u{3}\u{2}\u{2}\u{2}\u{C02}\u{C04}\u{7}\u{AB}\u{2}\u{2}" .
        "\u{C03}\u{C05}\u{9}\u{2A}\u{2}\u{2}\u{C04}\u{C03}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C04}\u{C05}\u{3}\u{2}\u{2}\u{2}\u{C05}\u{C08}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C06}\u{C09}\u{5}\u{E6}\u{74}\u{2}\u{C07}\u{C09}\u{5}\u{E2}\u{72}" .
        "\u{2}\u{C08}\u{C06}\u{3}\u{2}\u{2}\u{2}\u{C08}\u{C07}\u{3}\u{2}\u{2}" .
        "\u{2}\u{C09}\u{C0B}\u{3}\u{2}\u{2}\u{2}\u{C0A}\u{C02}\u{3}\u{2}\u{2}" .
        "\u{2}\u{C0A}\u{C0B}\u{3}\u{2}\u{2}\u{2}\u{C0B}\u{C0D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{C0C}\u{C0E}\u{5}\u{D2}\u{6A}\u{2}\u{C0D}\u{C0C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C0D}\u{C0E}\u{3}\u{2}\u{2}\u{2}\u{C0E}\u{C10}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C0F}\u{C11}\u{5}\u{104}\u{83}\u{2}\u{C10}\u{C0F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C10}\u{C11}\u{3}\u{2}\u{2}\u{2}\u{C11}\u{C13}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C12}\u{C14}\u{5}\u{C0}\u{61}\u{2}\u{C13}\u{C12}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C13}\u{C14}\u{3}\u{2}\u{2}\u{2}\u{C14}\u{C2C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C15}\u{C17}\u{5}\u{E4}\u{73}\u{2}\u{C16}\u{C18}" .
        "\u{5}\u{EA}\u{76}\u{2}\u{C17}\u{C16}\u{3}\u{2}\u{2}\u{2}\u{C18}\u{C19}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C19}\u{C17}\u{3}\u{2}\u{2}\u{2}\u{C19}\u{C1A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C1A}\u{C20}\u{3}\u{2}\u{2}\u{2}\u{C1B}\u{C1D}" .
        "\u{7}\u{AB}\u{2}\u{2}\u{C1C}\u{C1E}\u{9}\u{2A}\u{2}\u{2}\u{C1D}\u{C1C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C1D}\u{C1E}\u{3}\u{2}\u{2}\u{2}\u{C1E}\u{C1F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C1F}\u{C21}\u{5}\u{E2}\u{72}\u{2}\u{C20}\u{C1B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C20}\u{C21}\u{3}\u{2}\u{2}\u{2}\u{C21}\u{C23}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C22}\u{C24}\u{5}\u{D2}\u{6A}\u{2}\u{C23}\u{C22}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C23}\u{C24}\u{3}\u{2}\u{2}\u{2}\u{C24}\u{C26}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C25}\u{C27}\u{5}\u{104}\u{83}\u{2}\u{C26}\u{C25}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C26}\u{C27}\u{3}\u{2}\u{2}\u{2}\u{C27}\u{C29}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C28}\u{C2A}\u{5}\u{C0}\u{61}\u{2}\u{C29}\u{C28}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C29}\u{C2A}\u{3}\u{2}\u{2}\u{2}\u{C2A}\u{C2C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C2B}\u{BF4}\u{3}\u{2}\u{2}\u{2}\u{C2B}\u{BF8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C2B}\u{BFC}\u{3}\u{2}\u{2}\u{2}\u{C2B}\u{C15}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C2C}\u{B7}\u{3}\u{2}\u{2}\u{2}\u{C2D}\u{C30}" .
        "\u{5}\u{CE}\u{68}\u{2}\u{C2E}\u{C30}\u{5}\u{D0}\u{69}\u{2}\u{C2F}" .
        "\u{C2D}\u{3}\u{2}\u{2}\u{2}\u{C2F}\u{C2E}\u{3}\u{2}\u{2}\u{2}\u{C30}" .
        "\u{B9}\u{3}\u{2}\u{2}\u{2}\u{C31}\u{C44}\u{5}\u{B6}\u{5C}\u{2}\u{C32}" .
        "\u{C33}\u{9}\u{2B}\u{2}\u{2}\u{C33}\u{C35}\u{7}\u{43E}\u{2}\u{2}\u{C34}" .
        "\u{C36}\u{5}\u{240}\u{121}\u{2}\u{C35}\u{C34}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C35}\u{C36}\u{3}\u{2}\u{2}\u{2}\u{C36}\u{C37}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C37}\u{C40}\u{7}\u{43F}\u{2}\u{2}\u{C38}\u{C39}\u{7}\u{440}\u{2}" .
        "\u{2}\u{C39}\u{C3B}\u{7}\u{43E}\u{2}\u{2}\u{C3A}\u{C3C}\u{5}\u{240}" .
        "\u{121}\u{2}\u{C3B}\u{C3A}\u{3}\u{2}\u{2}\u{2}\u{C3B}\u{C3C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C3C}\u{C3D}\u{3}\u{2}\u{2}\u{2}\u{C3D}\u{C3F}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{C3E}\u{C38}\u{3}\u{2}\u{2}\u{2}\u{C3F}\u{C42}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C40}\u{C3E}\u{3}\u{2}\u{2}\u{2}\u{C40}\u{C41}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C41}\u{C44}\u{3}\u{2}\u{2}\u{2}\u{C42}\u{C40}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C43}\u{C31}\u{3}\u{2}\u{2}\u{2}\u{C43}\u{C32}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C44}\u{BB}\u{3}\u{2}\u{2}\u{2}\u{C45}\u{C46}" .
        "\u{5}\u{200}\u{101}\u{2}\u{C46}\u{C49}\u{7}\u{435}\u{2}\u{2}\u{C47}" .
        "\u{C4A}\u{5}\u{27A}\u{13E}\u{2}\u{C48}\u{C4A}\u{7}\u{2A}\u{2}\u{2}" .
        "\u{C49}\u{C47}\u{3}\u{2}\u{2}\u{2}\u{C49}\u{C48}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C4A}\u{BD}\u{3}\u{2}\u{2}\u{2}\u{C4B}\u{C4E}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{C4C}\u{C4E}\u{7}\u{459}\u{2}\u{2}\u{C4D}\u{C4B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C4D}\u{C4C}\u{3}\u{2}\u{2}\u{2}\u{C4E}\u{BF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C4F}\u{C50}\u{7}\u{40}\u{2}\u{2}\u{C50}\u{C56}\u{7}\u{AF}" .
        "\u{2}\u{2}\u{C51}\u{C52}\u{7}\u{64}\u{2}\u{2}\u{C52}\u{C53}\u{7}\u{4E}" .
        "\u{2}\u{2}\u{C53}\u{C54}\u{7}\u{240}\u{2}\u{2}\u{C54}\u{C56}\u{7}" .
        "\u{1EB}\u{2}\u{2}\u{C55}\u{C4F}\u{3}\u{2}\u{2}\u{2}\u{C55}\u{C51}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C56}\u{C1}\u{3}\u{2}\u{2}\u{2}\u{C57}\u{C59}" .
        "\u{7}\u{2C}\u{2}\u{2}\u{C58}\u{C5A}\u{7}\u{66}\u{2}\u{2}\u{C59}\u{C58}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C59}\u{C5A}\u{3}\u{2}\u{2}\u{2}\u{C5A}\u{C5C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C5B}\u{C5D}\u{7}\u{21B}\u{2}\u{2}\u{C5C}\u{C5B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C5C}\u{C5D}\u{3}\u{2}\u{2}\u{2}\u{C5D}\u{C5F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C5E}\u{C60}\u{7}\u{4D}\u{2}\u{2}\u{C5F}\u{C5E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C5F}\u{C60}\u{3}\u{2}\u{2}\u{2}\u{C60}\u{C61}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C61}\u{C62}\u{7}\u{43}\u{2}\u{2}\u{C62}\u{C68}" .
        "\u{5}\u{1FE}\u{100}\u{2}\u{C63}\u{C64}\u{7}\u{7B}\u{2}\u{2}\u{C64}" .
        "\u{C65}\u{7}\u{43E}\u{2}\u{2}\u{C65}\u{C66}\u{5}\u{236}\u{11C}\u{2}" .
        "\u{C66}\u{C67}\u{7}\u{43F}\u{2}\u{2}\u{C67}\u{C69}\u{3}\u{2}\u{2}" .
        "\u{2}\u{C68}\u{C63}\u{3}\u{2}\u{2}\u{2}\u{C68}\u{C69}\u{3}\u{2}\u{2}" .
        "\u{2}\u{C69}\u{C6C}\u{3}\u{2}\u{2}\u{2}\u{C6A}\u{C6B}\u{7}\u{B5}\u{2}" .
        "\u{2}\u{C6B}\u{C6D}\u{5}\u{27A}\u{13E}\u{2}\u{C6C}\u{C6A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C6C}\u{C6D}\u{3}\u{2}\u{2}\u{2}\u{C6D}\u{C6F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{C6E}\u{C70}\u{5}\u{D2}\u{6A}\u{2}\u{C6F}\u{C6E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C6F}\u{C70}\u{3}\u{2}\u{2}\u{2}\u{C70}\u{C73}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C71}\u{C72}\u{7}\u{60}\u{2}\u{2}\u{C72}\u{C74}\u{5}" .
        "\u{106}\u{84}\u{2}\u{C73}\u{C71}\u{3}\u{2}\u{2}\u{2}\u{C73}\u{C74}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C74}\u{C3}\u{3}\u{2}\u{2}\u{2}\u{C75}\u{C77}" .
        "\u{7}\u{2C}\u{2}\u{2}\u{C76}\u{C78}\u{7}\u{66}\u{2}\u{2}\u{C77}\u{C76}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C77}\u{C78}\u{3}\u{2}\u{2}\u{2}\u{C78}\u{C7A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C79}\u{C7B}\u{7}\u{21B}\u{2}\u{2}\u{C7A}\u{C79}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C7A}\u{C7B}\u{3}\u{2}\u{2}\u{2}\u{C7B}\u{C7D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C7C}\u{C7E}\u{7}\u{4D}\u{2}\u{2}\u{C7D}\u{C7C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C7D}\u{C7E}\u{3}\u{2}\u{2}\u{2}\u{C7E}\u{CA6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{C7F}\u{C82}\u{5}\u{1FE}\u{100}\u{2}\u{C80}" .
        "\u{C81}\u{7}\u{43D}\u{2}\u{2}\u{C81}\u{C83}\u{7}\u{42E}\u{2}\u{2}" .
        "\u{C82}\u{C80}\u{3}\u{2}\u{2}\u{2}\u{C82}\u{C83}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C83}\u{C8C}\u{3}\u{2}\u{2}\u{2}\u{C84}\u{C85}\u{7}\u{440}\u{2}" .
        "\u{2}\u{C85}\u{C88}\u{5}\u{1FE}\u{100}\u{2}\u{C86}\u{C87}\u{7}\u{43D}" .
        "\u{2}\u{2}\u{C87}\u{C89}\u{7}\u{42E}\u{2}\u{2}\u{C88}\u{C86}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C88}\u{C89}\u{3}\u{2}\u{2}\u{2}\u{C89}\u{C8B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C8A}\u{C84}\u{3}\u{2}\u{2}\u{2}\u{C8B}\u{C8E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C8C}\u{C8A}\u{3}\u{2}\u{2}\u{2}\u{C8C}\u{C8D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C8D}\u{C8F}\u{3}\u{2}\u{2}\u{2}\u{C8E}\u{C8C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C8F}\u{C90}\u{7}\u{43}\u{2}\u{2}\u{C90}\u{C91}\u{5}" .
        "\u{D6}\u{6C}\u{2}\u{C91}\u{CA7}\u{3}\u{2}\u{2}\u{2}\u{C92}\u{C93}" .
        "\u{7}\u{43}\u{2}\u{2}\u{C93}\u{C96}\u{5}\u{1FE}\u{100}\u{2}\u{C94}" .
        "\u{C95}\u{7}\u{43D}\u{2}\u{2}\u{C95}\u{C97}\u{7}\u{42E}\u{2}\u{2}" .
        "\u{C96}\u{C94}\u{3}\u{2}\u{2}\u{2}\u{C96}\u{C97}\u{3}\u{2}\u{2}\u{2}" .
        "\u{C97}\u{CA0}\u{3}\u{2}\u{2}\u{2}\u{C98}\u{C99}\u{7}\u{440}\u{2}" .
        "\u{2}\u{C99}\u{C9C}\u{5}\u{1FE}\u{100}\u{2}\u{C9A}\u{C9B}\u{7}\u{43D}" .
        "\u{2}\u{2}\u{C9B}\u{C9D}\u{7}\u{42E}\u{2}\u{2}\u{C9C}\u{C9A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C9C}\u{C9D}\u{3}\u{2}\u{2}\u{2}\u{C9D}\u{C9F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{C9E}\u{C98}\u{3}\u{2}\u{2}\u{2}\u{C9F}\u{CA2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CA0}\u{C9E}\u{3}\u{2}\u{2}\u{2}\u{CA0}\u{CA1}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CA1}\u{CA3}\u{3}\u{2}\u{2}\u{2}\u{CA2}\u{CA0}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CA3}\u{CA4}\u{7}\u{B2}\u{2}\u{2}\u{CA4}\u{CA5}\u{5}" .
        "\u{D6}\u{6C}\u{2}\u{CA5}\u{CA7}\u{3}\u{2}\u{2}\u{2}\u{CA6}\u{C7F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{CA6}\u{C92}\u{3}\u{2}\u{2}\u{2}\u{CA7}\u{CAA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{CA8}\u{CA9}\u{7}\u{B5}\u{2}\u{2}\u{CA9}\u{CAB}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{CAA}\u{CA8}\u{3}\u{2}\u{2}\u{2}\u{CAA}" .
        "\u{CAB}\u{3}\u{2}\u{2}\u{2}\u{CAB}\u{C5}\u{3}\u{2}\u{2}\u{2}\u{CAC}" .
        "\u{CAD}\u{7}\u{1A9}\u{2}\u{2}\u{CAD}\u{CAE}\u{5}\u{1FE}\u{100}\u{2}" .
        "\u{CAE}\u{CB3}\u{7}\u{201}\u{2}\u{2}\u{CAF}\u{CB1}\u{7}\u{E}\u{2}" .
        "\u{2}\u{CB0}\u{CAF}\u{3}\u{2}\u{2}\u{2}\u{CB0}\u{CB1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CB1}\u{CB2}\u{3}\u{2}\u{2}\u{2}\u{CB2}\u{CB4}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{CB3}\u{CB0}\u{3}\u{2}\u{2}\u{2}\u{CB3}\u{CB4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CB4}\u{C7}\u{3}\u{2}\u{2}\u{2}\u{CB5}\u{CB6}\u{7}" .
        "\u{1A9}\u{2}\u{2}\u{CB6}\u{CB7}\u{5}\u{1FE}\u{100}\u{2}\u{CB7}\u{CB8}" .
        "\u{7}\u{80}\u{2}\u{2}\u{CB8}\u{CBF}\u{5}\u{216}\u{10C}\u{2}\u{CB9}" .
        "\u{CBA}\u{5}\u{282}\u{142}\u{2}\u{CBA}\u{CBB}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{CBB}\u{CBC}\u{5}\u{242}\u{122}\u{2}\u{CBC}\u{CBD}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{CBD}\u{CC0}\u{3}\u{2}\u{2}\u{2}\u{CBE}\u{CC0}\u{9}\u{2C}\u{2}" .
        "\u{2}\u{CBF}\u{CB9}\u{3}\u{2}\u{2}\u{2}\u{CBF}\u{CBE}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CC0}\u{CC3}\u{3}\u{2}\u{2}\u{2}\u{CC1}\u{CC2}\u{7}\u{B5}\u{2}" .
        "\u{2}\u{CC2}\u{CC4}\u{5}\u{27A}\u{13E}\u{2}\u{CC3}\u{CC1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CC3}\u{CC4}\u{3}\u{2}\u{2}\u{2}\u{CC4}\u{CC7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CC5}\u{CC6}\u{7}\u{60}\u{2}\u{2}\u{CC6}\u{CC8}\u{5}\u{106}" .
        "\u{84}\u{2}\u{CC7}\u{CC5}\u{3}\u{2}\u{2}\u{2}\u{CC7}\u{CC8}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CC8}\u{C9}\u{3}\u{2}\u{2}\u{2}\u{CC9}\u{CCA}\u{7}\u{1A9}" .
        "\u{2}\u{2}\u{CCA}\u{CCB}\u{5}\u{1FE}\u{100}\u{2}\u{CCB}\u{CCC}\u{7}" .
        "\u{80}\u{2}\u{2}\u{CCC}\u{CCF}\u{9}\u{2D}\u{2}\u{2}\u{CCD}\u{CCE}" .
        "\u{7}\u{B5}\u{2}\u{2}\u{CCE}\u{CD0}\u{5}\u{27A}\u{13E}\u{2}\u{CCF}" .
        "\u{CCD}\u{3}\u{2}\u{2}\u{2}\u{CCF}\u{CD0}\u{3}\u{2}\u{2}\u{2}\u{CD0}" .
        "\u{CD3}\u{3}\u{2}\u{2}\u{2}\u{CD1}\u{CD2}\u{7}\u{60}\u{2}\u{2}\u{CD2}" .
        "\u{CD4}\u{5}\u{106}\u{84}\u{2}\u{CD3}\u{CD1}\u{3}\u{2}\u{2}\u{2}\u{CD3}" .
        "\u{CD4}\u{3}\u{2}\u{2}\u{2}\u{CD4}\u{CB}\u{3}\u{2}\u{2}\u{2}\u{CD5}" .
        "\u{CD6}\u{7}\u{1A9}\u{2}\u{2}\u{CD6}\u{CD7}\u{5}\u{1FE}\u{100}\u{2}" .
        "\u{CD7}\u{CD8}\u{7}\u{15D}\u{2}\u{2}\u{CD8}\u{CD}\u{3}\u{2}\u{2}\u{2}" .
        "\u{CD9}\u{CDB}\u{7}\u{AF}\u{2}\u{2}\u{CDA}\u{CDC}\u{7}\u{66}\u{2}" .
        "\u{2}\u{CDB}\u{CDA}\u{3}\u{2}\u{2}\u{2}\u{CDB}\u{CDC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CDC}\u{CDE}\u{3}\u{2}\u{2}\u{2}\u{CDD}\u{CDF}\u{7}\u{4D}\u{2}" .
        "\u{2}\u{CDE}\u{CDD}\u{3}\u{2}\u{2}\u{2}\u{CDE}\u{CDF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CDF}\u{CE0}\u{3}\u{2}\u{2}\u{2}\u{CE0}\u{CE5}\u{5}\u{1FE}" .
        "\u{100}\u{2}\u{CE1}\u{CE3}\u{7}\u{E}\u{2}\u{2}\u{CE2}\u{CE1}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CE2}\u{CE3}\u{3}\u{2}\u{2}\u{2}\u{CE3}\u{CE4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{CE4}\u{CE6}\u{5}\u{216}\u{10C}\u{2}\u{CE5}\u{CE2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{CE5}\u{CE6}\u{3}\u{2}\u{2}\u{2}\u{CE6}\u{CE7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{CE7}\u{CE8}\u{7}\u{93}\u{2}\u{2}\u{CE8}\u{CED}" .
        "\u{5}\u{BC}\u{5F}\u{2}\u{CE9}\u{CEA}\u{7}\u{440}\u{2}\u{2}\u{CEA}" .
        "\u{CEC}\u{5}\u{BC}\u{5F}\u{2}\u{CEB}\u{CE9}\u{3}\u{2}\u{2}\u{2}\u{CEC}" .
        "\u{CEF}\u{3}\u{2}\u{2}\u{2}\u{CED}\u{CEB}\u{3}\u{2}\u{2}\u{2}\u{CED}" .
        "\u{CEE}\u{3}\u{2}\u{2}\u{2}\u{CEE}\u{CF2}\u{3}\u{2}\u{2}\u{2}\u{CEF}" .
        "\u{CED}\u{3}\u{2}\u{2}\u{2}\u{CF0}\u{CF1}\u{7}\u{B5}\u{2}\u{2}\u{CF1}" .
        "\u{CF3}\u{5}\u{27A}\u{13E}\u{2}\u{CF2}\u{CF0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{CF2}\u{CF3}\u{3}\u{2}\u{2}\u{2}\u{CF3}\u{CF5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{CF4}\u{CF6}\u{5}\u{D2}\u{6A}\u{2}\u{CF5}\u{CF4}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CF5}\u{CF6}\u{3}\u{2}\u{2}\u{2}\u{CF6}\u{CF8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{CF7}\u{CF9}\u{5}\u{104}\u{83}\u{2}\u{CF8}\u{CF7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CF8}\u{CF9}\u{3}\u{2}\u{2}\u{2}\u{CF9}\u{CF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CFA}\u{CFC}\u{7}\u{AF}\u{2}\u{2}\u{CFB}\u{CFD}\u{7}\u{66}" .
        "\u{2}\u{2}\u{CFC}\u{CFB}\u{3}\u{2}\u{2}\u{2}\u{CFC}\u{CFD}\u{3}\u{2}" .
        "\u{2}\u{2}\u{CFD}\u{CFF}\u{3}\u{2}\u{2}\u{2}\u{CFE}\u{D00}\u{7}\u{4D}" .
        "\u{2}\u{2}\u{CFF}\u{CFE}\u{3}\u{2}\u{2}\u{2}\u{CFF}\u{D00}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D00}\u{D01}\u{3}\u{2}\u{2}\u{2}\u{D01}\u{D02}\u{5}\u{D6}" .
        "\u{6C}\u{2}\u{D02}\u{D03}\u{7}\u{93}\u{2}\u{2}\u{D03}\u{D08}\u{5}" .
        "\u{BC}\u{5F}\u{2}\u{D04}\u{D05}\u{7}\u{440}\u{2}\u{2}\u{D05}\u{D07}" .
        "\u{5}\u{BC}\u{5F}\u{2}\u{D06}\u{D04}\u{3}\u{2}\u{2}\u{2}\u{D07}\u{D0A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D08}\u{D06}\u{3}\u{2}\u{2}\u{2}\u{D08}\u{D09}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D09}\u{D0D}\u{3}\u{2}\u{2}\u{2}\u{D0A}\u{D08}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D0B}\u{D0C}\u{7}\u{B5}\u{2}\u{2}\u{D0C}\u{D0E}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{D0D}\u{D0B}\u{3}\u{2}\u{2}\u{2}\u{D0D}" .
        "\u{D0E}\u{3}\u{2}\u{2}\u{2}\u{D0E}\u{D1}\u{3}\u{2}\u{2}\u{2}\u{D0F}" .
        "\u{D10}\u{7}\u{76}\u{2}\u{2}\u{D10}\u{D11}\u{7}\u{14}\u{2}\u{2}\u{D11}" .
        "\u{D16}\u{5}\u{D4}\u{6B}\u{2}\u{D12}\u{D13}\u{7}\u{440}\u{2}\u{2}" .
        "\u{D13}\u{D15}\u{5}\u{D4}\u{6B}\u{2}\u{D14}\u{D12}\u{3}\u{2}\u{2}" .
        "\u{2}\u{D15}\u{D18}\u{3}\u{2}\u{2}\u{2}\u{D16}\u{D14}\u{3}\u{2}\u{2}" .
        "\u{2}\u{D16}\u{D17}\u{3}\u{2}\u{2}\u{2}\u{D17}\u{D3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{D18}\u{D16}\u{3}\u{2}\u{2}\u{2}\u{D19}\u{D1B}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{D1A}\u{D1C}\u{9}\u{2E}\u{2}\u{2}\u{D1B}\u{D1A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{D1B}\u{D1C}\u{3}\u{2}\u{2}\u{2}\u{D1C}\u{D5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{D1D}\u{D22}\u{5}\u{D8}\u{6D}\u{2}\u{D1E}\u{D1F}" .
        "\u{7}\u{440}\u{2}\u{2}\u{D1F}\u{D21}\u{5}\u{D8}\u{6D}\u{2}\u{D20}" .
        "\u{D1E}\u{3}\u{2}\u{2}\u{2}\u{D21}\u{D24}\u{3}\u{2}\u{2}\u{2}\u{D22}" .
        "\u{D20}\u{3}\u{2}\u{2}\u{2}\u{D22}\u{D23}\u{3}\u{2}\u{2}\u{2}\u{D23}" .
        "\u{D7}\u{3}\u{2}\u{2}\u{2}\u{D24}\u{D22}\u{3}\u{2}\u{2}\u{2}\u{D25}" .
        "\u{D29}\u{5}\u{DA}\u{6E}\u{2}\u{D26}\u{D28}\u{5}\u{E0}\u{71}\u{2}" .
        "\u{D27}\u{D26}\u{3}\u{2}\u{2}\u{2}\u{D28}\u{D2B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D29}\u{D27}\u{3}\u{2}\u{2}\u{2}\u{D29}\u{D2A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D2A}\u{D37}\u{3}\u{2}\u{2}\u{2}\u{D2B}\u{D29}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D2C}\u{D2D}\u{7}\u{43E}\u{2}\u{2}\u{D2D}\u{D31}\u{5}\u{DA}\u{6E}" .
        "\u{2}\u{D2E}\u{D30}\u{5}\u{E0}\u{71}\u{2}\u{D2F}\u{D2E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D30}\u{D33}\u{3}\u{2}\u{2}\u{2}\u{D31}\u{D2F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D31}\u{D32}\u{3}\u{2}\u{2}\u{2}\u{D32}\u{D34}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D33}\u{D31}\u{3}\u{2}\u{2}\u{2}\u{D34}\u{D35}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{D35}\u{D37}\u{3}\u{2}\u{2}\u{2}\u{D36}\u{D25}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D36}\u{D2C}\u{3}\u{2}\u{2}\u{2}\u{D37}\u{D9}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D38}\u{D3E}\u{5}\u{1FE}\u{100}\u{2}\u{D39}\u{D3A}\u{7}" .
        "\u{7B}\u{2}\u{2}\u{D3A}\u{D3B}\u{7}\u{43E}\u{2}\u{2}\u{D3B}\u{D3C}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{D3C}\u{D3D}\u{7}\u{43F}\u{2}\u{2}\u{D3D}" .
        "\u{D3F}\u{3}\u{2}\u{2}\u{2}\u{D3E}\u{D39}\u{3}\u{2}\u{2}\u{2}\u{D3E}" .
        "\u{D3F}\u{3}\u{2}\u{2}\u{2}\u{D3F}\u{D44}\u{3}\u{2}\u{2}\u{2}\u{D40}" .
        "\u{D42}\u{7}\u{E}\u{2}\u{2}\u{D41}\u{D40}\u{3}\u{2}\u{2}\u{2}\u{D41}" .
        "\u{D42}\u{3}\u{2}\u{2}\u{2}\u{D42}\u{D43}\u{3}\u{2}\u{2}\u{2}\u{D43}" .
        "\u{D45}\u{5}\u{216}\u{10C}\u{2}\u{D44}\u{D41}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D44}\u{D45}\u{3}\u{2}\u{2}\u{2}\u{D45}\u{D4E}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D46}\u{D4B}\u{5}\u{DC}\u{6F}\u{2}\u{D47}\u{D48}\u{7}\u{440}\u{2}" .
        "\u{2}\u{D48}\u{D4A}\u{5}\u{DC}\u{6F}\u{2}\u{D49}\u{D47}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D4A}\u{D4D}\u{3}\u{2}\u{2}\u{2}\u{D4B}\u{D49}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D4B}\u{D4C}\u{3}\u{2}\u{2}\u{2}\u{D4C}\u{D4F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D4D}\u{D4B}\u{3}\u{2}\u{2}\u{2}\u{D4E}\u{D46}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D4E}\u{D4F}\u{3}\u{2}\u{2}\u{2}\u{D4F}\u{D61}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D50}\u{D56}\u{5}\u{B6}\u{5C}\u{2}\u{D51}\u{D52}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{D52}\u{D53}\u{5}\u{B6}\u{5C}\u{2}\u{D53}\u{D54}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{D54}\u{D56}\u{3}\u{2}\u{2}\u{2}\u{D55}\u{D50}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D55}\u{D51}\u{3}\u{2}\u{2}\u{2}\u{D56}\u{D58}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D57}\u{D59}\u{7}\u{E}\u{2}\u{2}\u{D58}\u{D57}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D58}\u{D59}\u{3}\u{2}\u{2}\u{2}\u{D59}\u{D5A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D5A}\u{D5B}\u{5}\u{216}\u{10C}\u{2}\u{D5B}" .
        "\u{D61}\u{3}\u{2}\u{2}\u{2}\u{D5C}\u{D5D}\u{7}\u{43E}\u{2}\u{2}\u{D5D}" .
        "\u{D5E}\u{5}\u{D6}\u{6C}\u{2}\u{D5E}\u{D5F}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{D5F}\u{D61}\u{3}\u{2}\u{2}\u{2}\u{D60}\u{D38}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D60}\u{D55}\u{3}\u{2}\u{2}\u{2}\u{D60}\u{D5C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D61}\u{DB}\u{3}\u{2}\u{2}\u{2}\u{D62}\u{D63}\u{9}\u{2F}\u{2}\u{2}" .
        "\u{D63}\u{D66}\u{9}\u{14}\u{2}\u{2}\u{D64}\u{D65}\u{7}\u{40}\u{2}" .
        "\u{2}\u{D65}\u{D67}\u{5}\u{DE}\u{70}\u{2}\u{D66}\u{D64}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D66}\u{D67}\u{3}\u{2}\u{2}\u{2}\u{D67}\u{D68}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D68}\u{D69}\u{7}\u{43E}\u{2}\u{2}\u{D69}\u{D6A}\u{5}" .
        "\u{236}\u{11C}\u{2}\u{D6A}\u{D6B}\u{7}\u{43F}\u{2}\u{2}\u{D6B}\u{DD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D6C}\u{D72}\u{7}\u{58}\u{2}\u{2}\u{D6D}\u{D6E}" .
        "\u{7}\u{76}\u{2}\u{2}\u{D6E}\u{D72}\u{7}\u{14}\u{2}\u{2}\u{D6F}\u{D70}" .
        "\u{7}\u{48}\u{2}\u{2}\u{D70}\u{D72}\u{7}\u{14}\u{2}\u{2}\u{D71}\u{D6C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D71}\u{D6D}\u{3}\u{2}\u{2}\u{2}\u{D71}\u{D6F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D72}\u{DF}\u{3}\u{2}\u{2}\u{2}\u{D73}\u{D75}" .
        "\u{9}\u{30}\u{2}\u{2}\u{D74}\u{D73}\u{3}\u{2}\u{2}\u{2}\u{D74}\u{D75}" .
        "\u{3}\u{2}\u{2}\u{2}\u{D75}\u{D76}\u{3}\u{2}\u{2}\u{2}\u{D76}\u{D77}" .
        "\u{7}\u{58}\u{2}\u{2}\u{D77}\u{D7F}\u{5}\u{DA}\u{6E}\u{2}\u{D78}\u{D79}" .
        "\u{7}\u{71}\u{2}\u{2}\u{D79}\u{D80}\u{5}\u{27A}\u{13E}\u{2}\u{D7A}" .
        "\u{D7B}\u{7}\u{B2}\u{2}\u{2}\u{D7B}\u{D7C}\u{7}\u{43E}\u{2}\u{2}\u{D7C}" .
        "\u{D7D}\u{5}\u{236}\u{11C}\u{2}\u{D7D}\u{D7E}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{D7E}\u{D80}\u{3}\u{2}\u{2}\u{2}\u{D7F}\u{D78}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D7F}\u{D7A}\u{3}\u{2}\u{2}\u{2}\u{D7F}\u{D80}\u{3}\u{2}\u{2}\u{2}" .
        "\u{D80}\u{DA0}\u{3}\u{2}\u{2}\u{2}\u{D81}\u{D82}\u{7}\u{A2}\u{2}\u{2}" .
        "\u{D82}\u{D85}\u{5}\u{DA}\u{6E}\u{2}\u{D83}\u{D84}\u{7}\u{71}\u{2}" .
        "\u{2}\u{D84}\u{D86}\u{5}\u{27A}\u{13E}\u{2}\u{D85}\u{D83}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D85}\u{D86}\u{3}\u{2}\u{2}\u{2}\u{D86}\u{DA0}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D87}\u{D89}\u{9}\u{31}\u{2}\u{2}\u{D88}\u{D8A}\u{7}\u{79}" .
        "\u{2}\u{2}\u{D89}\u{D88}\u{3}\u{2}\u{2}\u{2}\u{D89}\u{D8A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{D8A}\u{D8B}\u{3}\u{2}\u{2}\u{2}\u{D8B}\u{D8C}\u{7}\u{58}" .
        "\u{2}\u{2}\u{D8C}\u{D94}\u{5}\u{DA}\u{6E}\u{2}\u{D8D}\u{D8E}\u{7}" .
        "\u{71}\u{2}\u{2}\u{D8E}\u{D95}\u{5}\u{27A}\u{13E}\u{2}\u{D8F}\u{D90}" .
        "\u{7}\u{B2}\u{2}\u{2}\u{D90}\u{D91}\u{7}\u{43E}\u{2}\u{2}\u{D91}\u{D92}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{D92}\u{D93}\u{7}\u{43F}\u{2}\u{2}\u{D93}" .
        "\u{D95}\u{3}\u{2}\u{2}\u{2}\u{D94}\u{D8D}\u{3}\u{2}\u{2}\u{2}\u{D94}" .
        "\u{D8F}\u{3}\u{2}\u{2}\u{2}\u{D95}\u{DA0}\u{3}\u{2}\u{2}\u{2}\u{D96}" .
        "\u{D9B}\u{7}\u{6C}\u{2}\u{2}\u{D97}\u{D99}\u{9}\u{31}\u{2}\u{2}\u{D98}" .
        "\u{D9A}\u{7}\u{79}\u{2}\u{2}\u{D99}\u{D98}\u{3}\u{2}\u{2}\u{2}\u{D99}" .
        "\u{D9A}\u{3}\u{2}\u{2}\u{2}\u{D9A}\u{D9C}\u{3}\u{2}\u{2}\u{2}\u{D9B}" .
        "\u{D97}\u{3}\u{2}\u{2}\u{2}\u{D9B}\u{D9C}\u{3}\u{2}\u{2}\u{2}\u{D9C}" .
        "\u{D9D}\u{3}\u{2}\u{2}\u{2}\u{D9D}\u{D9E}\u{7}\u{58}\u{2}\u{2}\u{D9E}" .
        "\u{DA0}\u{5}\u{DA}\u{6E}\u{2}\u{D9F}\u{D74}\u{3}\u{2}\u{2}\u{2}\u{D9F}" .
        "\u{D81}\u{3}\u{2}\u{2}\u{2}\u{D9F}\u{D87}\u{3}\u{2}\u{2}\u{2}\u{D9F}" .
        "\u{D96}\u{3}\u{2}\u{2}\u{2}\u{DA0}\u{E1}\u{3}\u{2}\u{2}\u{2}\u{DA1}" .
        "\u{DA2}\u{7}\u{43E}\u{2}\u{2}\u{DA2}\u{DA3}\u{5}\u{E6}\u{74}\u{2}" .
        "\u{DA3}\u{DA4}\u{7}\u{43F}\u{2}\u{2}\u{DA4}\u{DAA}\u{3}\u{2}\u{2}" .
        "\u{2}\u{DA5}\u{DA6}\u{7}\u{43E}\u{2}\u{2}\u{DA6}\u{DA7}\u{5}\u{E2}" .
        "\u{72}\u{2}\u{DA7}\u{DA8}\u{7}\u{43F}\u{2}\u{2}\u{DA8}\u{DAA}\u{3}" .
        "\u{2}\u{2}\u{2}\u{DA9}\u{DA1}\u{3}\u{2}\u{2}\u{2}\u{DA9}\u{DA5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{DAA}\u{E3}\u{3}\u{2}\u{2}\u{2}\u{DAB}\u{DAC}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{DAC}\u{DAD}\u{5}\u{E8}\u{75}\u{2}\u{DAD}\u{DAE}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{DAE}\u{DB4}\u{3}\u{2}\u{2}\u{2}\u{DAF}\u{DB0}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{DB0}\u{DB1}\u{5}\u{E4}\u{73}\u{2}\u{DB1}" .
        "\u{DB2}\u{7}\u{43F}\u{2}\u{2}\u{DB2}\u{DB4}\u{3}\u{2}\u{2}\u{2}\u{DB3}" .
        "\u{DAB}\u{3}\u{2}\u{2}\u{2}\u{DB3}\u{DAF}\u{3}\u{2}\u{2}\u{2}\u{DB4}" .
        "\u{E5}\u{3}\u{2}\u{2}\u{2}\u{DB5}\u{DB9}\u{7}\u{92}\u{2}\u{2}\u{DB6}" .
        "\u{DB8}\u{5}\u{EE}\u{78}\u{2}\u{DB7}\u{DB6}\u{3}\u{2}\u{2}\u{2}\u{DB8}" .
        "\u{DBB}\u{3}\u{2}\u{2}\u{2}\u{DB9}\u{DB7}\u{3}\u{2}\u{2}\u{2}\u{DB9}" .
        "\u{DBA}\u{3}\u{2}\u{2}\u{2}\u{DBA}\u{DBC}\u{3}\u{2}\u{2}\u{2}\u{DBB}" .
        "\u{DB9}\u{3}\u{2}\u{2}\u{2}\u{DBC}\u{DBE}\u{5}\u{F0}\u{79}\u{2}\u{DBD}" .
        "\u{DBF}\u{5}\u{F4}\u{7B}\u{2}\u{DBE}\u{DBD}\u{3}\u{2}\u{2}\u{2}\u{DBE}" .
        "\u{DBF}\u{3}\u{2}\u{2}\u{2}\u{DBF}\u{DC1}\u{3}\u{2}\u{2}\u{2}\u{DC0}" .
        "\u{DC2}\u{5}\u{FA}\u{7E}\u{2}\u{DC1}\u{DC0}\u{3}\u{2}\u{2}\u{2}\u{DC1}" .
        "\u{DC2}\u{3}\u{2}\u{2}\u{2}\u{DC2}\u{DC4}\u{3}\u{2}\u{2}\u{2}\u{DC3}" .
        "\u{DC5}\u{5}\u{FC}\u{7F}\u{2}\u{DC4}\u{DC3}\u{3}\u{2}\u{2}\u{2}\u{DC4}" .
        "\u{DC5}\u{3}\u{2}\u{2}\u{2}\u{DC5}\u{DC7}\u{3}\u{2}\u{2}\u{2}\u{DC6}" .
        "\u{DC8}\u{5}\u{FE}\u{80}\u{2}\u{DC7}\u{DC6}\u{3}\u{2}\u{2}\u{2}\u{DC7}" .
        "\u{DC8}\u{3}\u{2}\u{2}\u{2}\u{DC8}\u{DCA}\u{3}\u{2}\u{2}\u{2}\u{DC9}" .
        "\u{DCB}\u{5}\u{100}\u{81}\u{2}\u{DCA}\u{DC9}\u{3}\u{2}\u{2}\u{2}\u{DCA}" .
        "\u{DCB}\u{3}\u{2}\u{2}\u{2}\u{DCB}\u{DCD}\u{3}\u{2}\u{2}\u{2}\u{DCC}" .
        "\u{DCE}\u{5}\u{D2}\u{6A}\u{2}\u{DCD}\u{DCC}\u{3}\u{2}\u{2}\u{2}\u{DCD}" .
        "\u{DCE}\u{3}\u{2}\u{2}\u{2}\u{DCE}\u{DD0}\u{3}\u{2}\u{2}\u{2}\u{DCF}" .
        "\u{DD1}\u{5}\u{104}\u{83}\u{2}\u{DD0}\u{DCF}\u{3}\u{2}\u{2}\u{2}\u{DD0}" .
        "\u{DD1}\u{3}\u{2}\u{2}\u{2}\u{DD1}\u{DF0}\u{3}\u{2}\u{2}\u{2}\u{DD2}" .
        "\u{DD6}\u{7}\u{92}\u{2}\u{2}\u{DD3}\u{DD5}\u{5}\u{EE}\u{78}\u{2}\u{DD4}" .
        "\u{DD3}\u{3}\u{2}\u{2}\u{2}\u{DD5}\u{DD8}\u{3}\u{2}\u{2}\u{2}\u{DD6}" .
        "\u{DD4}\u{3}\u{2}\u{2}\u{2}\u{DD6}\u{DD7}\u{3}\u{2}\u{2}\u{2}\u{DD7}" .
        "\u{DD9}\u{3}\u{2}\u{2}\u{2}\u{DD8}\u{DD6}\u{3}\u{2}\u{2}\u{2}\u{DD9}" .
        "\u{DDB}\u{5}\u{F0}\u{79}\u{2}\u{DDA}\u{DDC}\u{5}\u{FA}\u{7E}\u{2}" .
        "\u{DDB}\u{DDA}\u{3}\u{2}\u{2}\u{2}\u{DDB}\u{DDC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{DDC}\u{DDE}\u{3}\u{2}\u{2}\u{2}\u{DDD}\u{DDF}\u{5}\u{FC}\u{7F}" .
        "\u{2}\u{DDE}\u{DDD}\u{3}\u{2}\u{2}\u{2}\u{DDE}\u{DDF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{DDF}\u{DE1}\u{3}\u{2}\u{2}\u{2}\u{DE0}\u{DE2}\u{5}\u{FE}\u{80}" .
        "\u{2}\u{DE1}\u{DE0}\u{3}\u{2}\u{2}\u{2}\u{DE1}\u{DE2}\u{3}\u{2}\u{2}" .
        "\u{2}\u{DE2}\u{DE4}\u{3}\u{2}\u{2}\u{2}\u{DE3}\u{DE5}\u{5}\u{100}" .
        "\u{81}\u{2}\u{DE4}\u{DE3}\u{3}\u{2}\u{2}\u{2}\u{DE4}\u{DE5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DE5}\u{DE7}\u{3}\u{2}\u{2}\u{2}\u{DE6}\u{DE8}\u{5}\u{D2}" .
        "\u{6A}\u{2}\u{DE7}\u{DE6}\u{3}\u{2}\u{2}\u{2}\u{DE7}\u{DE8}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DE8}\u{DEA}\u{3}\u{2}\u{2}\u{2}\u{DE9}\u{DEB}\u{5}\u{104}" .
        "\u{83}\u{2}\u{DEA}\u{DE9}\u{3}\u{2}\u{2}\u{2}\u{DEA}\u{DEB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DEB}\u{DED}\u{3}\u{2}\u{2}\u{2}\u{DEC}\u{DEE}\u{5}\u{F4}" .
        "\u{7B}\u{2}\u{DED}\u{DEC}\u{3}\u{2}\u{2}\u{2}\u{DED}\u{DEE}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DEE}\u{DF0}\u{3}\u{2}\u{2}\u{2}\u{DEF}\u{DB5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DEF}\u{DD2}\u{3}\u{2}\u{2}\u{2}\u{DF0}\u{E7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DF1}\u{DF5}\u{7}\u{92}\u{2}\u{2}\u{DF2}\u{DF4}\u{5}\u{EE}" .
        "\u{78}\u{2}\u{DF3}\u{DF2}\u{3}\u{2}\u{2}\u{2}\u{DF4}\u{DF7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DF5}\u{DF3}\u{3}\u{2}\u{2}\u{2}\u{DF5}\u{DF6}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DF6}\u{DF8}\u{3}\u{2}\u{2}\u{2}\u{DF7}\u{DF5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{DF8}\u{DFA}\u{5}\u{F0}\u{79}\u{2}\u{DF9}\u{DFB}\u{5}" .
        "\u{FA}\u{7E}\u{2}\u{DFA}\u{DF9}\u{3}\u{2}\u{2}\u{2}\u{DFA}\u{DFB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{DFB}\u{DFD}\u{3}\u{2}\u{2}\u{2}\u{DFC}\u{DFE}" .
        "\u{5}\u{FC}\u{7F}\u{2}\u{DFD}\u{DFC}\u{3}\u{2}\u{2}\u{2}\u{DFD}\u{DFE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{DFE}\u{E00}\u{3}\u{2}\u{2}\u{2}\u{DFF}\u{E01}" .
        "\u{5}\u{FE}\u{80}\u{2}\u{E00}\u{DFF}\u{3}\u{2}\u{2}\u{2}\u{E00}\u{E01}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E01}\u{E03}\u{3}\u{2}\u{2}\u{2}\u{E02}\u{E04}" .
        "\u{5}\u{100}\u{81}\u{2}\u{E03}\u{E02}\u{3}\u{2}\u{2}\u{2}\u{E03}\u{E04}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E04}\u{E06}\u{3}\u{2}\u{2}\u{2}\u{E05}\u{E07}" .
        "\u{5}\u{D2}\u{6A}\u{2}\u{E06}\u{E05}\u{3}\u{2}\u{2}\u{2}\u{E06}\u{E07}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E07}\u{E09}\u{3}\u{2}\u{2}\u{2}\u{E08}\u{E0A}" .
        "\u{5}\u{104}\u{83}\u{2}\u{E09}\u{E08}\u{3}\u{2}\u{2}\u{2}\u{E09}\u{E0A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E0A}\u{E9}\u{3}\u{2}\u{2}\u{2}\u{E0B}\u{E0D}" .
        "\u{7}\u{AB}\u{2}\u{2}\u{E0C}\u{E0E}\u{9}\u{2A}\u{2}\u{2}\u{E0D}\u{E0C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E0D}\u{E0E}\u{3}\u{2}\u{2}\u{2}\u{E0E}\u{E0F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E0F}\u{E10}\u{5}\u{E4}\u{73}\u{2}\u{E10}\u{EB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E11}\u{E13}\u{7}\u{AB}\u{2}\u{2}\u{E12}\u{E14}" .
        "\u{9}\u{2A}\u{2}\u{2}\u{E13}\u{E12}\u{3}\u{2}\u{2}\u{2}\u{E13}\u{E14}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E14}\u{E17}\u{3}\u{2}\u{2}\u{2}\u{E15}\u{E18}" .
        "\u{5}\u{E8}\u{75}\u{2}\u{E16}\u{E18}\u{5}\u{E4}\u{73}\u{2}\u{E17}" .
        "\u{E15}\u{3}\u{2}\u{2}\u{2}\u{E17}\u{E16}\u{3}\u{2}\u{2}\u{2}\u{E18}" .
        "\u{ED}\u{3}\u{2}\u{2}\u{2}\u{E19}\u{E22}\u{9}\u{32}\u{2}\u{2}\u{E1A}" .
        "\u{E22}\u{7}\u{4A}\u{2}\u{2}\u{E1B}\u{E22}\u{7}\u{A2}\u{2}\u{2}\u{E1C}" .
        "\u{E22}\u{7}\u{9E}\u{2}\u{2}\u{E1D}\u{E22}\u{7}\u{9C}\u{2}\u{2}\u{E1E}" .
        "\u{E22}\u{7}\u{24F}\u{2}\u{2}\u{E1F}\u{E22}\u{9}\u{33}\u{2}\u{2}\u{E20}" .
        "\u{E22}\u{7}\u{9D}\u{2}\u{2}\u{E21}\u{E19}\u{3}\u{2}\u{2}\u{2}\u{E21}" .
        "\u{E1A}\u{3}\u{2}\u{2}\u{2}\u{E21}\u{E1B}\u{3}\u{2}\u{2}\u{2}\u{E21}" .
        "\u{E1C}\u{3}\u{2}\u{2}\u{2}\u{E21}\u{E1D}\u{3}\u{2}\u{2}\u{2}\u{E21}" .
        "\u{E1E}\u{3}\u{2}\u{2}\u{2}\u{E21}\u{E1F}\u{3}\u{2}\u{2}\u{2}\u{E21}" .
        "\u{E20}\u{3}\u{2}\u{2}\u{2}\u{E22}\u{EF}\u{3}\u{2}\u{2}\u{2}\u{E23}" .
        "\u{E26}\u{7}\u{42E}\u{2}\u{2}\u{E24}\u{E26}\u{5}\u{F2}\u{7A}\u{2}" .
        "\u{E25}\u{E23}\u{3}\u{2}\u{2}\u{2}\u{E25}\u{E24}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E26}\u{E2B}\u{3}\u{2}\u{2}\u{2}\u{E27}\u{E28}\u{7}\u{440}\u{2}" .
        "\u{2}\u{E28}\u{E2A}\u{5}\u{F2}\u{7A}\u{2}\u{E29}\u{E27}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E2A}\u{E2D}\u{3}\u{2}\u{2}\u{2}\u{E2B}\u{E29}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E2B}\u{E2C}\u{3}\u{2}\u{2}\u{2}\u{E2C}\u{F1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E2D}\u{E2B}\u{3}\u{2}\u{2}\u{2}\u{E2E}\u{E2F}\u{5}\u{1FC}" .
        "\u{FF}\u{2}\u{E2F}\u{E30}\u{7}\u{43D}\u{2}\u{2}\u{E30}\u{E31}\u{7}" .
        "\u{42E}\u{2}\u{2}\u{E31}\u{E4C}\u{3}\u{2}\u{2}\u{2}\u{E32}\u{E37}" .
        "\u{5}\u{200}\u{101}\u{2}\u{E33}\u{E35}\u{7}\u{E}\u{2}\u{2}\u{E34}" .
        "\u{E33}\u{3}\u{2}\u{2}\u{2}\u{E34}\u{E35}\u{3}\u{2}\u{2}\u{2}\u{E35}" .
        "\u{E36}\u{3}\u{2}\u{2}\u{2}\u{E36}\u{E38}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{E37}\u{E34}\u{3}\u{2}\u{2}\u{2}\u{E37}\u{E38}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E38}\u{E4C}\u{3}\u{2}\u{2}\u{2}\u{E39}\u{E3E}\u{5}\u{252}\u{12A}" .
        "\u{2}\u{E3A}\u{E3C}\u{7}\u{E}\u{2}\u{2}\u{E3B}\u{E3A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{E3B}\u{E3C}\u{3}\u{2}\u{2}\u{2}\u{E3C}\u{E3D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{E3D}\u{E3F}\u{5}\u{216}\u{10C}\u{2}\u{E3E}\u{E3B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E3E}\u{E3F}\u{3}\u{2}\u{2}\u{2}\u{E3F}\u{E4C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E40}\u{E41}\u{7}\u{459}\u{2}\u{2}\u{E41}\u{E43}\u{7}" .
        "\u{425}\u{2}\u{2}\u{E42}\u{E40}\u{3}\u{2}\u{2}\u{2}\u{E42}\u{E43}" .
        "\u{3}\u{2}\u{2}\u{2}\u{E43}\u{E44}\u{3}\u{2}\u{2}\u{2}\u{E44}\u{E49}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{E45}\u{E47}\u{7}\u{E}\u{2}\u{2}\u{E46}" .
        "\u{E45}\u{3}\u{2}\u{2}\u{2}\u{E46}\u{E47}\u{3}\u{2}\u{2}\u{2}\u{E47}" .
        "\u{E48}\u{3}\u{2}\u{2}\u{2}\u{E48}\u{E4A}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{E49}\u{E46}\u{3}\u{2}\u{2}\u{2}\u{E49}\u{E4A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E4A}\u{E4C}\u{3}\u{2}\u{2}\u{2}\u{E4B}\u{E2E}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E4B}\u{E32}\u{3}\u{2}\u{2}\u{2}\u{E4B}\u{E39}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E4B}\u{E42}\u{3}\u{2}\u{2}\u{2}\u{E4C}\u{F3}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E4D}\u{E4E}\u{7}\u{55}\u{2}\u{2}\u{E4E}\u{E53}\u{5}\u{BE}\u{60}" .
        "\u{2}\u{E4F}\u{E50}\u{7}\u{440}\u{2}\u{2}\u{E50}\u{E52}\u{5}\u{BE}" .
        "\u{60}\u{2}\u{E51}\u{E4F}\u{3}\u{2}\u{2}\u{2}\u{E52}\u{E55}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E53}\u{E51}\u{3}\u{2}\u{2}\u{2}\u{E53}\u{E54}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E54}\u{E72}\u{3}\u{2}\u{2}\u{2}\u{E55}\u{E53}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E56}\u{E57}\u{7}\u{55}\u{2}\u{2}\u{E57}\u{E58}\u{7}\u{182}" .
        "\u{2}\u{2}\u{E58}\u{E72}\u{7}\u{44D}\u{2}\u{2}\u{E59}\u{E5A}\u{7}" .
        "\u{55}\u{2}\u{2}\u{E5A}\u{E5B}\u{7}\u{7A}\u{2}\u{2}\u{E5B}\u{E5F}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{E5C}\u{E5D}\u{7}\u{1A}\u{2}\u{2}\u{E5D}\u{E5E}" .
        "\u{7}\u{93}\u{2}\u{2}\u{E5E}\u{E60}\u{5}\u{208}\u{105}\u{2}\u{E5F}" .
        "\u{E5C}\u{3}\u{2}\u{2}\u{2}\u{E5F}\u{E60}\u{3}\u{2}\u{2}\u{2}\u{E60}" .
        "\u{E67}\u{3}\u{2}\u{2}\u{2}\u{E61}\u{E63}\u{9}\u{27}\u{2}\u{2}\u{E62}" .
        "\u{E64}\u{5}\u{F6}\u{7C}\u{2}\u{E63}\u{E62}\u{3}\u{2}\u{2}\u{2}\u{E64}" .
        "\u{E65}\u{3}\u{2}\u{2}\u{2}\u{E65}\u{E63}\u{3}\u{2}\u{2}\u{2}\u{E65}" .
        "\u{E66}\u{3}\u{2}\u{2}\u{2}\u{E66}\u{E68}\u{3}\u{2}\u{2}\u{2}\u{E67}" .
        "\u{E61}\u{3}\u{2}\u{2}\u{2}\u{E67}\u{E68}\u{3}\u{2}\u{2}\u{2}\u{E68}" .
        "\u{E6F}\u{3}\u{2}\u{2}\u{2}\u{E69}\u{E6B}\u{7}\u{62}\u{2}\u{2}\u{E6A}" .
        "\u{E6C}\u{5}\u{F8}\u{7D}\u{2}\u{E6B}\u{E6A}\u{3}\u{2}\u{2}\u{2}\u{E6C}" .
        "\u{E6D}\u{3}\u{2}\u{2}\u{2}\u{E6D}\u{E6B}\u{3}\u{2}\u{2}\u{2}\u{E6D}" .
        "\u{E6E}\u{3}\u{2}\u{2}\u{2}\u{E6E}\u{E70}\u{3}\u{2}\u{2}\u{2}\u{E6F}" .
        "\u{E69}\u{3}\u{2}\u{2}\u{2}\u{E6F}\u{E70}\u{3}\u{2}\u{2}\u{2}\u{E70}" .
        "\u{E72}\u{3}\u{2}\u{2}\u{2}\u{E71}\u{E4D}\u{3}\u{2}\u{2}\u{2}\u{E71}" .
        "\u{E56}\u{3}\u{2}\u{2}\u{2}\u{E71}\u{E59}\u{3}\u{2}\u{2}\u{2}\u{E72}" .
        "\u{F5}\u{3}\u{2}\u{2}\u{2}\u{E73}\u{E74}\u{7}\u{A4}\u{2}\u{2}\u{E74}" .
        "\u{E75}\u{7}\u{14}\u{2}\u{2}\u{E75}\u{E80}\u{7}\u{44D}\u{2}\u{2}\u{E76}" .
        "\u{E78}\u{7}\u{74}\u{2}\u{2}\u{E77}\u{E76}\u{3}\u{2}\u{2}\u{2}\u{E77}" .
        "\u{E78}\u{3}\u{2}\u{2}\u{2}\u{E78}\u{E79}\u{3}\u{2}\u{2}\u{2}\u{E79}" .
        "\u{E7A}\u{7}\u{38}\u{2}\u{2}\u{E7A}\u{E7B}\u{7}\u{14}\u{2}\u{2}\u{E7B}" .
        "\u{E80}\u{7}\u{44D}\u{2}\u{2}\u{E7C}\u{E7D}\u{7}\u{39}\u{2}\u{2}\u{E7D}" .
        "\u{E7E}\u{7}\u{14}\u{2}\u{2}\u{E7E}\u{E80}\u{7}\u{44D}\u{2}\u{2}\u{E7F}" .
        "\u{E73}\u{3}\u{2}\u{2}\u{2}\u{E7F}\u{E77}\u{3}\u{2}\u{2}\u{2}\u{E7F}" .
        "\u{E7C}\u{3}\u{2}\u{2}\u{2}\u{E80}\u{F7}\u{3}\u{2}\u{2}\u{2}\u{E81}" .
        "\u{E82}\u{7}\u{A1}\u{2}\u{2}\u{E82}\u{E83}\u{7}\u{14}\u{2}\u{2}\u{E83}" .
        "\u{E88}\u{7}\u{44D}\u{2}\u{2}\u{E84}\u{E85}\u{7}\u{A4}\u{2}\u{2}\u{E85}" .
        "\u{E86}\u{7}\u{14}\u{2}\u{2}\u{E86}\u{E88}\u{7}\u{44D}\u{2}\u{2}\u{E87}" .
        "\u{E81}\u{3}\u{2}\u{2}\u{2}\u{E87}\u{E84}\u{3}\u{2}\u{2}\u{2}\u{E88}" .
        "\u{F9}\u{3}\u{2}\u{2}\u{2}\u{E89}\u{E8A}\u{7}\u{43}\u{2}\u{2}\u{E8A}" .
        "\u{E8C}\u{5}\u{D6}\u{6C}\u{2}\u{E8B}\u{E89}\u{3}\u{2}\u{2}\u{2}\u{E8B}" .
        "\u{E8C}\u{3}\u{2}\u{2}\u{2}\u{E8C}\u{E8F}\u{3}\u{2}\u{2}\u{2}\u{E8D}" .
        "\u{E8E}\u{7}\u{B5}\u{2}\u{2}\u{E8E}\u{E90}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{E8F}\u{E8D}\u{3}\u{2}\u{2}\u{2}\u{E8F}\u{E90}\u{3}\u{2}\u{2}\u{2}" .
        "\u{E90}\u{FB}\u{3}\u{2}\u{2}\u{2}\u{E91}\u{E92}\u{7}\u{48}\u{2}\u{2}" .
        "\u{E92}\u{E93}\u{7}\u{14}\u{2}\u{2}\u{E93}\u{E98}\u{5}\u{102}\u{82}" .
        "\u{2}\u{E94}\u{E95}\u{7}\u{440}\u{2}\u{2}\u{E95}\u{E97}\u{5}\u{102}" .
        "\u{82}\u{2}\u{E96}\u{E94}\u{3}\u{2}\u{2}\u{2}\u{E97}\u{E9A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E98}\u{E96}\u{3}\u{2}\u{2}\u{2}\u{E98}\u{E99}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E99}\u{E9D}\u{3}\u{2}\u{2}\u{2}\u{E9A}\u{E98}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E9B}\u{E9C}\u{7}\u{B7}\u{2}\u{2}\u{E9C}\u{E9E}\u{7}\u{236}" .
        "\u{2}\u{2}\u{E9D}\u{E9B}\u{3}\u{2}\u{2}\u{2}\u{E9D}\u{E9E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{E9E}\u{FD}\u{3}\u{2}\u{2}\u{2}\u{E9F}\u{EA0}\u{7}\u{49}" .
        "\u{2}\u{2}\u{EA0}\u{EA1}\u{5}\u{27A}\u{13E}\u{2}\u{EA1}\u{FF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{EA2}\u{EA3}\u{7}\u{282}\u{2}\u{2}\u{EA3}\u{EA4}" .
        "\u{5}\u{264}\u{133}\u{2}\u{EA4}\u{EA5}\u{7}\u{E}\u{2}\u{2}\u{EA5}" .
        "\u{EA6}\u{7}\u{43E}\u{2}\u{2}\u{EA6}\u{EA7}\u{5}\u{262}\u{132}\u{2}" .
        "\u{EA7}\u{EB1}\u{7}\u{43F}\u{2}\u{2}\u{EA8}\u{EA9}\u{7}\u{440}\u{2}" .
        "\u{2}\u{EA9}\u{EAA}\u{5}\u{264}\u{133}\u{2}\u{EAA}\u{EAB}\u{7}\u{E}" .
        "\u{2}\u{2}\u{EAB}\u{EAC}\u{7}\u{43E}\u{2}\u{2}\u{EAC}\u{EAD}\u{5}" .
        "\u{262}\u{132}\u{2}\u{EAD}\u{EAE}\u{7}\u{43F}\u{2}\u{2}\u{EAE}\u{EB0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EAF}\u{EA8}\u{3}\u{2}\u{2}\u{2}\u{EB0}\u{EB3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EB1}\u{EAF}\u{3}\u{2}\u{2}\u{2}\u{EB1}\u{EB2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EB2}\u{101}\u{3}\u{2}\u{2}\u{2}\u{EB3}\u{EB1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EB4}\u{EB6}\u{5}\u{27A}\u{13E}\u{2}\u{EB5}" .
        "\u{EB7}\u{9}\u{2E}\u{2}\u{2}\u{EB6}\u{EB5}\u{3}\u{2}\u{2}\u{2}\u{EB6}" .
        "\u{EB7}\u{3}\u{2}\u{2}\u{2}\u{EB7}\u{103}\u{3}\u{2}\u{2}\u{2}\u{EB8}" .
        "\u{EC3}\u{7}\u{60}\u{2}\u{2}\u{EB9}\u{EBA}\u{5}\u{106}\u{84}\u{2}" .
        "\u{EBA}\u{EBB}\u{7}\u{440}\u{2}\u{2}\u{EBB}\u{EBD}\u{3}\u{2}\u{2}" .
        "\u{2}\u{EBC}\u{EB9}\u{3}\u{2}\u{2}\u{2}\u{EBC}\u{EBD}\u{3}\u{2}\u{2}" .
        "\u{2}\u{EBD}\u{EBE}\u{3}\u{2}\u{2}\u{2}\u{EBE}\u{EC4}\u{5}\u{106}" .
        "\u{84}\u{2}\u{EBF}\u{EC0}\u{5}\u{106}\u{84}\u{2}\u{EC0}\u{EC1}\u{7}" .
        "\u{1FA}\u{2}\u{2}\u{EC1}\u{EC2}\u{5}\u{106}\u{84}\u{2}\u{EC2}\u{EC4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EC3}\u{EBC}\u{3}\u{2}\u{2}\u{2}\u{EC3}\u{EBF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{EC4}\u{105}\u{3}\u{2}\u{2}\u{2}\u{EC5}\u{EC9}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{EC6}\u{EC9}\u{5}\u{206}\u{104}\u{2}\u{EC7}" .
        "\u{EC9}\u{5}\u{218}\u{10D}\u{2}\u{EC8}\u{EC5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{EC8}\u{EC6}\u{3}\u{2}\u{2}\u{2}\u{EC8}\u{EC7}\u{3}\u{2}\u{2}\u{2}" .
        "\u{EC9}\u{107}\u{3}\u{2}\u{2}\u{2}\u{ECA}\u{ECB}\u{7}\u{253}\u{2}" .
        "\u{2}\u{ECB}\u{ED4}\u{7}\u{26B}\u{2}\u{2}\u{ECC}\u{ED1}\u{5}\u{11E}" .
        "\u{90}\u{2}\u{ECD}\u{ECE}\u{7}\u{440}\u{2}\u{2}\u{ECE}\u{ED0}\u{5}" .
        "\u{11E}\u{90}\u{2}\u{ECF}\u{ECD}\u{3}\u{2}\u{2}\u{2}\u{ED0}\u{ED3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{ED1}\u{ECF}\u{3}\u{2}\u{2}\u{2}\u{ED1}\u{ED2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{ED2}\u{ED5}\u{3}\u{2}\u{2}\u{2}\u{ED3}\u{ED1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{ED4}\u{ECC}\u{3}\u{2}\u{2}\u{2}\u{ED4}\u{ED5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{ED5}\u{109}\u{3}\u{2}\u{2}\u{2}\u{ED6}\u{ED8}" .
        "\u{7}\u{14C}\u{2}\u{2}\u{ED7}\u{ED9}\u{7}\u{284}\u{2}\u{2}\u{ED8}" .
        "\u{ED7}\u{3}\u{2}\u{2}\u{2}\u{ED8}\u{ED9}\u{3}\u{2}\u{2}\u{2}\u{ED9}" .
        "\u{10B}\u{3}\u{2}\u{2}\u{2}\u{EDA}\u{EDC}\u{7}\u{164}\u{2}\u{2}\u{EDB}" .
        "\u{EDD}\u{7}\u{284}\u{2}\u{2}\u{EDC}\u{EDB}\u{3}\u{2}\u{2}\u{2}\u{EDC}" .
        "\u{EDD}\u{3}\u{2}\u{2}\u{2}\u{EDD}\u{EE3}\u{3}\u{2}\u{2}\u{2}\u{EDE}" .
        "\u{EE0}\u{7}\u{C}\u{2}\u{2}\u{EDF}\u{EE1}\u{7}\u{1F5}\u{2}\u{2}\u{EE0}" .
        "\u{EDF}\u{3}\u{2}\u{2}\u{2}\u{EE0}\u{EE1}\u{3}\u{2}\u{2}\u{2}\u{EE1}" .
        "\u{EE2}\u{3}\u{2}\u{2}\u{2}\u{EE2}\u{EE4}\u{7}\u{155}\u{2}\u{2}\u{EE3}" .
        "\u{EDE}\u{3}\u{2}\u{2}\u{2}\u{EE3}\u{EE4}\u{3}\u{2}\u{2}\u{2}\u{EE4}" .
        "\u{EE9}\u{3}\u{2}\u{2}\u{2}\u{EE5}\u{EE7}\u{7}\u{1F5}\u{2}\u{2}\u{EE6}" .
        "\u{EE5}\u{3}\u{2}\u{2}\u{2}\u{EE6}\u{EE7}\u{3}\u{2}\u{2}\u{2}\u{EE7}" .
        "\u{EE8}\u{3}\u{2}\u{2}\u{2}\u{EE8}\u{EEA}\u{7}\u{84}\u{2}\u{2}\u{EE9}" .
        "\u{EE6}\u{3}\u{2}\u{2}\u{2}\u{EE9}\u{EEA}\u{3}\u{2}\u{2}\u{2}\u{EEA}" .
        "\u{10D}\u{3}\u{2}\u{2}\u{2}\u{EEB}\u{EED}\u{7}\u{235}\u{2}\u{2}\u{EEC}" .
        "\u{EEE}\u{7}\u{284}\u{2}\u{2}\u{EED}\u{EEC}\u{3}\u{2}\u{2}\u{2}\u{EED}" .
        "\u{EEE}\u{3}\u{2}\u{2}\u{2}\u{EEE}\u{EF4}\u{3}\u{2}\u{2}\u{2}\u{EEF}" .
        "\u{EF1}\u{7}\u{C}\u{2}\u{2}\u{EF0}\u{EF2}\u{7}\u{1F5}\u{2}\u{2}\u{EF1}" .
        "\u{EF0}\u{3}\u{2}\u{2}\u{2}\u{EF1}\u{EF2}\u{3}\u{2}\u{2}\u{2}\u{EF2}" .
        "\u{EF3}\u{3}\u{2}\u{2}\u{2}\u{EF3}\u{EF5}\u{7}\u{155}\u{2}\u{2}\u{EF4}" .
        "\u{EEF}\u{3}\u{2}\u{2}\u{2}\u{EF4}\u{EF5}\u{3}\u{2}\u{2}\u{2}\u{EF5}" .
        "\u{EFA}\u{3}\u{2}\u{2}\u{2}\u{EF6}\u{EF8}\u{7}\u{1F5}\u{2}\u{2}\u{EF7}" .
        "\u{EF6}\u{3}\u{2}\u{2}\u{2}\u{EF7}\u{EF8}\u{3}\u{2}\u{2}\u{2}\u{EF8}" .
        "\u{EF9}\u{3}\u{2}\u{2}\u{2}\u{EF9}\u{EFB}\u{7}\u{84}\u{2}\u{2}\u{EFA}" .
        "\u{EF7}\u{3}\u{2}\u{2}\u{2}\u{EFA}\u{EFB}\u{3}\u{2}\u{2}\u{2}\u{EFB}" .
        "\u{10F}\u{3}\u{2}\u{2}\u{2}\u{EFC}\u{EFD}\u{7}\u{23B}\u{2}\u{2}\u{EFD}" .
        "\u{EFE}\u{5}\u{216}\u{10C}\u{2}\u{EFE}\u{111}\u{3}\u{2}\u{2}\u{2}" .
        "\u{EFF}\u{F01}\u{7}\u{235}\u{2}\u{2}\u{F00}\u{F02}\u{7}\u{284}\u{2}" .
        "\u{2}\u{F01}\u{F00}\u{3}\u{2}\u{2}\u{2}\u{F01}\u{F02}\u{3}\u{2}\u{2}" .
        "\u{2}\u{F02}\u{F03}\u{3}\u{2}\u{2}\u{2}\u{F03}\u{F05}\u{7}\u{A6}\u{2}" .
        "\u{2}\u{F04}\u{F06}\u{7}\u{23B}\u{2}\u{2}\u{F05}\u{F04}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F05}\u{F06}\u{3}\u{2}\u{2}\u{2}\u{F06}\u{F07}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F07}\u{F08}\u{5}\u{216}\u{10C}\u{2}\u{F08}\u{113}\u{3}" .
        "\u{2}\u{2}\u{2}\u{F09}\u{F0A}\u{7}\u{84}\u{2}\u{2}\u{F0A}\u{F0B}\u{7}" .
        "\u{23B}\u{2}\u{2}\u{F0B}\u{F0C}\u{5}\u{216}\u{10C}\u{2}\u{F0C}\u{115}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F0D}\u{F0E}\u{7}\u{64}\u{2}\u{2}\u{F0E}\u{F0F}" .
        "\u{7}\u{296}\u{2}\u{2}\u{F0F}\u{F14}\u{5}\u{120}\u{91}\u{2}\u{F10}" .
        "\u{F11}\u{7}\u{440}\u{2}\u{2}\u{F11}\u{F13}\u{5}\u{120}\u{91}\u{2}" .
        "\u{F12}\u{F10}\u{3}\u{2}\u{2}\u{2}\u{F13}\u{F16}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F14}\u{F12}\u{3}\u{2}\u{2}\u{2}\u{F14}\u{F15}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F15}\u{117}\u{3}\u{2}\u{2}\u{2}\u{F16}\u{F14}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F17}\u{F18}\u{7}\u{AD}\u{2}\u{2}\u{F18}\u{F19}\u{7}\u{296}\u{2}" .
        "\u{2}\u{F19}\u{119}\u{3}\u{2}\u{2}\u{2}\u{F1A}\u{F1B}\u{7}\u{93}\u{2}" .
        "\u{2}\u{F1B}\u{F1C}\u{7}\u{148}\u{2}\u{2}\u{F1C}\u{F1D}\u{7}\u{435}" .
        "\u{2}\u{2}\u{F1D}\u{F1E}\u{9}\u{18}\u{2}\u{2}\u{F1E}\u{11B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F1F}\u{F21}\u{7}\u{93}\u{2}\u{2}\u{F20}\u{F22}\u{9}\u{34}" .
        "\u{2}\u{2}\u{F21}\u{F20}\u{3}\u{2}\u{2}\u{2}\u{F21}\u{F22}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F22}\u{F23}\u{3}\u{2}\u{2}\u{2}\u{F23}\u{F24}\u{7}\u{26B}" .
        "\u{2}\u{2}\u{F24}\u{F29}\u{5}\u{124}\u{93}\u{2}\u{F25}\u{F26}\u{7}" .
        "\u{440}\u{2}\u{2}\u{F26}\u{F28}\u{5}\u{124}\u{93}\u{2}\u{F27}\u{F25}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F28}\u{F2B}\u{3}\u{2}\u{2}\u{2}\u{F29}\u{F27}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F29}\u{F2A}\u{3}\u{2}\u{2}\u{2}\u{F2A}\u{11D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F2B}\u{F29}\u{3}\u{2}\u{2}\u{2}\u{F2C}\u{F2D}" .
        "\u{7}\u{B7}\u{2}\u{2}\u{F2D}\u{F2E}\u{7}\u{16C}\u{2}\u{2}\u{F2E}\u{F34}" .
        "\u{7}\u{246}\u{2}\u{2}\u{F2F}\u{F30}\u{7}\u{80}\u{2}\u{2}\u{F30}\u{F34}" .
        "\u{7}\u{B8}\u{2}\u{2}\u{F31}\u{F32}\u{7}\u{80}\u{2}\u{2}\u{F32}\u{F34}" .
        "\u{7}\u{200}\u{2}\u{2}\u{F33}\u{F2C}\u{3}\u{2}\u{2}\u{2}\u{F33}\u{F2F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F33}\u{F31}\u{3}\u{2}\u{2}\u{2}\u{F34}\u{11F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F35}\u{F3A}\u{5}\u{1FE}\u{100}\u{2}\u{F36}" .
        "\u{F38}\u{7}\u{E}\u{2}\u{2}\u{F37}\u{F36}\u{3}\u{2}\u{2}\u{2}\u{F37}" .
        "\u{F38}\u{3}\u{2}\u{2}\u{2}\u{F38}\u{F39}\u{3}\u{2}\u{2}\u{2}\u{F39}" .
        "\u{F3B}\u{5}\u{216}\u{10C}\u{2}\u{F3A}\u{F37}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F3A}\u{F3B}\u{3}\u{2}\u{2}\u{2}\u{F3B}\u{F3C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{F3C}\u{F3D}\u{5}\u{122}\u{92}\u{2}\u{F3D}\u{121}\u{3}\u{2}\u{2}" .
        "\u{2}\u{F3E}\u{F40}\u{7}\u{80}\u{2}\u{2}\u{F3F}\u{F41}\u{7}\u{1C6}" .
        "\u{2}\u{2}\u{F40}\u{F3F}\u{3}\u{2}\u{2}\u{2}\u{F40}\u{F41}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F41}\u{F47}\u{3}\u{2}\u{2}\u{2}\u{F42}\u{F44}\u{7}\u{66}" .
        "\u{2}\u{2}\u{F43}\u{F42}\u{3}\u{2}\u{2}\u{2}\u{F43}\u{F44}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F44}\u{F45}\u{3}\u{2}\u{2}\u{2}\u{F45}\u{F47}\u{7}\u{B8}" .
        "\u{2}\u{2}\u{F46}\u{F3E}\u{3}\u{2}\u{2}\u{2}\u{F46}\u{F43}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F47}\u{123}\u{3}\u{2}\u{2}\u{2}\u{F48}\u{F49}\u{7}\u{1BC}" .
        "\u{2}\u{2}\u{F49}\u{F4A}\u{7}\u{1C4}\u{2}\u{2}\u{F4A}\u{F50}\u{5}" .
        "\u{126}\u{94}\u{2}\u{F4B}\u{F4C}\u{7}\u{80}\u{2}\u{2}\u{F4C}\u{F50}" .
        "\u{7}\u{B8}\u{2}\u{2}\u{F4D}\u{F4E}\u{7}\u{80}\u{2}\u{2}\u{F4E}\u{F50}" .
        "\u{7}\u{200}\u{2}\u{2}\u{F4F}\u{F48}\u{3}\u{2}\u{2}\u{2}\u{F4F}\u{F4B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F4F}\u{F4D}\u{3}\u{2}\u{2}\u{2}\u{F50}\u{125}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F51}\u{F52}\u{7}\u{2F4}\u{2}\u{2}\u{F52}\u{F59}" .
        "\u{7}\u{80}\u{2}\u{2}\u{F53}\u{F54}\u{7}\u{80}\u{2}\u{2}\u{F54}\u{F59}" .
        "\u{7}\u{2F5}\u{2}\u{2}\u{F55}\u{F56}\u{7}\u{80}\u{2}\u{2}\u{F56}\u{F59}" .
        "\u{7}\u{2F6}\u{2}\u{2}\u{F57}\u{F59}\u{7}\u{2F7}\u{2}\u{2}\u{F58}" .
        "\u{F51}\u{3}\u{2}\u{2}\u{2}\u{F58}\u{F53}\u{3}\u{2}\u{2}\u{2}\u{F58}" .
        "\u{F55}\u{3}\u{2}\u{2}\u{2}\u{F58}\u{F57}\u{3}\u{2}\u{2}\u{2}\u{F59}" .
        "\u{127}\u{3}\u{2}\u{2}\u{2}\u{F5A}\u{F5B}\u{7}\u{19}\u{2}\u{2}\u{F5B}" .
        "\u{F5C}\u{7}\u{1C9}\u{2}\u{2}\u{F5C}\u{F5D}\u{7}\u{A6}\u{2}\u{2}\u{F5D}" .
        "\u{F62}\u{5}\u{13A}\u{9E}\u{2}\u{F5E}\u{F5F}\u{7}\u{440}\u{2}\u{2}" .
        "\u{F5F}\u{F61}\u{5}\u{13A}\u{9E}\u{2}\u{F60}\u{F5E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{F61}\u{F64}\u{3}\u{2}\u{2}\u{2}\u{F62}\u{F60}\u{3}\u{2}\u{2}" .
        "\u{2}\u{F62}\u{F63}\u{3}\u{2}\u{2}\u{2}\u{F63}\u{F66}\u{3}\u{2}\u{2}" .
        "\u{2}\u{F64}\u{F62}\u{3}\u{2}\u{2}\u{2}\u{F65}\u{F67}\u{5}\u{142}" .
        "\u{A2}\u{2}\u{F66}\u{F65}\u{3}\u{2}\u{2}\u{2}\u{F66}\u{F67}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F67}\u{129}\u{3}\u{2}\u{2}\u{2}\u{F68}\u{F69}\u{7}\u{19}" .
        "\u{2}\u{2}\u{F69}\u{F6A}\u{7}\u{22E}\u{2}\u{2}\u{F6A}\u{F6B}\u{7}" .
        "\u{19C}\u{2}\u{2}\u{F6B}\u{F70}\u{5}\u{144}\u{A3}\u{2}\u{F6C}\u{F6D}" .
        "\u{7}\u{440}\u{2}\u{2}\u{F6D}\u{F6F}\u{5}\u{144}\u{A3}\u{2}\u{F6E}" .
        "\u{F6C}\u{3}\u{2}\u{2}\u{2}\u{F6F}\u{F72}\u{3}\u{2}\u{2}\u{2}\u{F70}" .
        "\u{F6E}\u{3}\u{2}\u{2}\u{2}\u{F70}\u{F71}\u{3}\u{2}\u{2}\u{2}\u{F71}" .
        "\u{12B}\u{3}\u{2}\u{2}\u{2}\u{F72}\u{F70}\u{3}\u{2}\u{2}\u{2}\u{F73}" .
        "\u{F74}\u{7}\u{7E}\u{2}\u{2}\u{F74}\u{F75}\u{9}\u{35}\u{2}\u{2}\u{F75}" .
        "\u{F7A}\u{7}\u{1C8}\u{2}\u{2}\u{F76}\u{F77}\u{7}\u{A6}\u{2}\u{2}\u{F77}" .
        "\u{F7B}\u{7}\u{44D}\u{2}\u{2}\u{F78}\u{F79}\u{7}\u{10}\u{2}\u{2}\u{F79}" .
        "\u{F7B}\u{7}\u{44D}\u{2}\u{2}\u{F7A}\u{F76}\u{3}\u{2}\u{2}\u{2}\u{F7A}" .
        "\u{F78}\u{3}\u{2}\u{2}\u{2}\u{F7B}\u{12D}\u{3}\u{2}\u{2}\u{2}\u{F7C}" .
        "\u{F7D}\u{7}\u{22F}\u{2}\u{2}\u{F7D}\u{F7E}\u{7}\u{1C9}\u{2}\u{2}" .
        "\u{F7E}\u{12F}\u{3}\u{2}\u{2}\u{2}\u{F7F}\u{F80}\u{7}\u{22F}\u{2}" .
        "\u{2}\u{F80}\u{F82}\u{7}\u{244}\u{2}\u{2}\u{F81}\u{F83}\u{7}\u{8}" .
        "\u{2}\u{2}\u{F82}\u{F81}\u{3}\u{2}\u{2}\u{2}\u{F82}\u{F83}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F83}\u{F85}\u{3}\u{2}\u{2}\u{2}\u{F84}\u{F86}\u{5}\u{142}" .
        "\u{A2}\u{2}\u{F85}\u{F84}\u{3}\u{2}\u{2}\u{2}\u{F85}\u{F86}\u{3}\u{2}" .
        "\u{2}\u{2}\u{F86}\u{131}\u{3}\u{2}\u{2}\u{2}\u{F87}\u{F88}\u{7}\u{253}" .
        "\u{2}\u{2}\u{F88}\u{F91}\u{7}\u{244}\u{2}\u{2}\u{F89}\u{F8E}\u{5}" .
        "\u{148}\u{A5}\u{2}\u{F8A}\u{F8B}\u{7}\u{440}\u{2}\u{2}\u{F8B}\u{F8D}" .
        "\u{5}\u{148}\u{A5}\u{2}\u{F8C}\u{F8A}\u{3}\u{2}\u{2}\u{2}\u{F8D}\u{F90}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F8E}\u{F8C}\u{3}\u{2}\u{2}\u{2}\u{F8E}\u{F8F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F8F}\u{F92}\u{3}\u{2}\u{2}\u{2}\u{F90}\u{F8E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F91}\u{F89}\u{3}\u{2}\u{2}\u{2}\u{F91}\u{F92}" .
        "\u{3}\u{2}\u{2}\u{2}\u{F92}\u{F95}\u{3}\u{2}\u{2}\u{2}\u{F93}\u{F94}" .
        "\u{7}\u{275}\u{2}\u{2}\u{F94}\u{F96}\u{5}\u{14A}\u{A6}\u{2}\u{F95}" .
        "\u{F93}\u{3}\u{2}\u{2}\u{2}\u{F95}\u{F96}\u{3}\u{2}\u{2}\u{2}\u{F96}" .
        "\u{F9A}\u{3}\u{2}\u{2}\u{2}\u{F97}\u{F99}\u{5}\u{14C}\u{A7}\u{2}\u{F98}" .
        "\u{F97}\u{3}\u{2}\u{2}\u{2}\u{F99}\u{F9C}\u{3}\u{2}\u{2}\u{2}\u{F9A}" .
        "\u{F98}\u{3}\u{2}\u{2}\u{2}\u{F9A}\u{F9B}\u{3}\u{2}\u{2}\u{2}\u{F9B}" .
        "\u{F9E}\u{3}\u{2}\u{2}\u{2}\u{F9C}\u{F9A}\u{3}\u{2}\u{2}\u{2}\u{F9D}" .
        "\u{F9F}\u{5}\u{142}\u{A2}\u{2}\u{F9E}\u{F9D}\u{3}\u{2}\u{2}\u{2}\u{F9E}" .
        "\u{F9F}\u{3}\u{2}\u{2}\u{2}\u{F9F}\u{133}\u{3}\u{2}\u{2}\u{2}\u{FA0}" .
        "\u{FA1}\u{7}\u{259}\u{2}\u{2}\u{FA1}\u{FAA}\u{7}\u{244}\u{2}\u{2}" .
        "\u{FA2}\u{FA7}\u{5}\u{148}\u{A5}\u{2}\u{FA3}\u{FA4}\u{7}\u{440}\u{2}" .
        "\u{2}\u{FA4}\u{FA6}\u{5}\u{148}\u{A5}\u{2}\u{FA5}\u{FA3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{FA6}\u{FA9}\u{3}\u{2}\u{2}\u{2}\u{FA7}\u{FA5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{FA7}\u{FA8}\u{3}\u{2}\u{2}\u{2}\u{FA8}\u{FAB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{FA9}\u{FA7}\u{3}\u{2}\u{2}\u{2}\u{FAA}\u{FA2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{FAA}\u{FAB}\u{3}\u{2}\u{2}\u{2}\u{FAB}\u{135}\u{3}\u{2}" .
        "\u{2}\u{2}\u{FAC}\u{FAD}\u{7}\u{253}\u{2}\u{2}\u{FAD}\u{FAE}\u{7}" .
        "\u{1A8}\u{2}\u{2}\u{FAE}\u{137}\u{3}\u{2}\u{2}\u{2}\u{FAF}\u{FB0}" .
        "\u{7}\u{259}\u{2}\u{2}\u{FB0}\u{FB1}\u{7}\u{1A8}\u{2}\u{2}\u{FB1}" .
        "\u{139}\u{3}\u{2}\u{2}\u{2}\u{FB2}\u{FB3}\u{5}\u{13C}\u{9F}\u{2}\u{FB3}" .
        "\u{FB4}\u{7}\u{435}\u{2}\u{2}\u{FB4}\u{FB5}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{FB5}\u{FD0}\u{3}\u{2}\u{2}\u{2}\u{FB6}\u{FB7}\u{5}\u{13E}\u{A0}" .
        "\u{2}\u{FB7}\u{FB8}\u{7}\u{435}\u{2}\u{2}\u{FB8}\u{FB9}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{FB9}\u{FD0}\u{3}\u{2}\u{2}\u{2}\u{FBA}\u{FBB}\u{5}" .
        "\u{140}\u{A1}\u{2}\u{FBB}\u{FBC}\u{7}\u{435}\u{2}\u{2}\u{FBC}\u{FBD}" .
        "\u{9}\u{18}\u{2}\u{2}\u{FBD}\u{FD0}\u{3}\u{2}\u{2}\u{2}\u{FBE}\u{FBF}" .
        "\u{7}\u{1CD}\u{2}\u{2}\u{FBF}\u{FC0}\u{7}\u{435}\u{2}\u{2}\u{FC0}" .
        "\u{FD0}\u{7}\u{450}\u{2}\u{2}\u{FC1}\u{FC2}\u{7}\u{1AF}\u{2}\u{2}" .
        "\u{FC2}\u{FC3}\u{7}\u{435}\u{2}\u{2}\u{FC3}\u{FCC}\u{7}\u{43E}\u{2}" .
        "\u{2}\u{FC4}\u{FC9}\u{5}\u{216}\u{10C}\u{2}\u{FC5}\u{FC6}\u{7}\u{440}" .
        "\u{2}\u{2}\u{FC6}\u{FC8}\u{5}\u{216}\u{10C}\u{2}\u{FC7}\u{FC5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{FC8}\u{FCB}\u{3}\u{2}\u{2}\u{2}\u{FC9}\u{FC7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{FC9}\u{FCA}\u{3}\u{2}\u{2}\u{2}\u{FCA}\u{FCD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{FCB}\u{FC9}\u{3}\u{2}\u{2}\u{2}\u{FCC}\u{FC4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{FCC}\u{FCD}\u{3}\u{2}\u{2}\u{2}\u{FCD}\u{FCE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{FCE}\u{FD0}\u{7}\u{43F}\u{2}\u{2}\u{FCF}\u{FB2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{FCF}\u{FB6}\u{3}\u{2}\u{2}\u{2}\u{FCF}\u{FBA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{FCF}\u{FBE}\u{3}\u{2}\u{2}\u{2}\u{FCF}\u{FC1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{FD0}\u{13B}\u{3}\u{2}\u{2}\u{2}\u{FD1}\u{FD2}" .
        "\u{9}\u{36}\u{2}\u{2}\u{FD2}\u{13D}\u{3}\u{2}\u{2}\u{2}\u{FD3}\u{FD4}" .
        "\u{9}\u{37}\u{2}\u{2}\u{FD4}\u{13F}\u{3}\u{2}\u{2}\u{2}\u{FD5}\u{FD6}" .
        "\u{9}\u{38}\u{2}\u{2}\u{FD6}\u{141}\u{3}\u{2}\u{2}\u{2}\u{FD7}\u{FD8}" .
        "\u{7}\u{40}\u{2}\u{2}\u{FD8}\u{FD9}\u{7}\u{157}\u{2}\u{2}\u{FD9}\u{FDA}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{FDA}\u{143}\u{3}\u{2}\u{2}\u{2}\u{FDB}\u{FDC}" .
        "\u{7}\u{227}\u{2}\u{2}\u{FDC}\u{FDD}\u{7}\u{435}\u{2}\u{2}\u{FDD}" .
        "\u{FDE}\u{7}\u{43E}\u{2}\u{2}\u{FDE}\u{FDF}\u{5}\u{236}\u{11C}\u{2}" .
        "\u{FDF}\u{FE0}\u{7}\u{43F}\u{2}\u{2}\u{FE0}\u{100D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{FE1}\u{FE2}\u{7}\u{229}\u{2}\u{2}\u{FE2}\u{FE3}\u{7}\u{435}" .
        "\u{2}\u{2}\u{FE3}\u{FE4}\u{7}\u{43E}\u{2}\u{2}\u{FE4}\u{FE5}\u{5}" .
        "\u{236}\u{11C}\u{2}\u{FE5}\u{FE6}\u{7}\u{43F}\u{2}\u{2}\u{FE6}\u{100D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{FE7}\u{FE8}\u{7}\u{228}\u{2}\u{2}\u{FE8}\u{FE9}" .
        "\u{7}\u{435}\u{2}\u{2}\u{FE9}\u{FEA}\u{7}\u{43E}\u{2}\u{2}\u{FEA}" .
        "\u{FEB}\u{5}\u{238}\u{11D}\u{2}\u{FEB}\u{FEC}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{FEC}\u{100D}\u{3}\u{2}\u{2}\u{2}\u{FED}\u{FEE}\u{7}\u{22A}\u{2}" .
        "\u{2}\u{FEE}\u{FEF}\u{7}\u{435}\u{2}\u{2}\u{FEF}\u{FF0}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{FF0}\u{FF1}\u{5}\u{238}\u{11D}\u{2}\u{FF1}\u{FF2}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{FF2}\u{100D}\u{3}\u{2}\u{2}\u{2}\u{FF3}\u{FF4}" .
        "\u{7}\u{22C}\u{2}\u{2}\u{FF4}\u{FF5}\u{7}\u{435}\u{2}\u{2}\u{FF5}" .
        "\u{FF6}\u{7}\u{43E}\u{2}\u{2}\u{FF6}\u{FF7}\u{5}\u{244}\u{123}\u{2}" .
        "\u{FF7}\u{FF8}\u{7}\u{43F}\u{2}\u{2}\u{FF8}\u{100D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{FF9}\u{FFA}\u{7}\u{22D}\u{2}\u{2}\u{FFA}\u{FFB}\u{7}\u{435}" .
        "\u{2}\u{2}\u{FFB}\u{FFC}\u{7}\u{43E}\u{2}\u{2}\u{FFC}\u{FFD}\u{5}" .
        "\u{244}\u{123}\u{2}\u{FFD}\u{FFE}\u{7}\u{43F}\u{2}\u{2}\u{FFE}\u{100D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{FFF}\u{1000}\u{7}\u{22B}\u{2}\u{2}\u{1000}" .
        "\u{1001}\u{7}\u{435}\u{2}\u{2}\u{1001}\u{1002}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{1002}\u{1007}\u{5}\u{146}\u{A4}\u{2}\u{1003}\u{1004}\u{7}\u{440}" .
        "\u{2}\u{2}\u{1004}\u{1006}\u{5}\u{146}\u{A4}\u{2}\u{1005}\u{1003}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1006}\u{1009}\u{3}\u{2}\u{2}\u{2}\u{1007}\u{1005}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1007}\u{1008}\u{3}\u{2}\u{2}\u{2}\u{1008}\u{100A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1009}\u{1007}\u{3}\u{2}\u{2}\u{2}\u{100A}\u{100B}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{100B}\u{100D}\u{3}\u{2}\u{2}\u{2}\u{100C}" .
        "\u{FDB}\u{3}\u{2}\u{2}\u{2}\u{100C}\u{FE1}\u{3}\u{2}\u{2}\u{2}\u{100C}" .
        "\u{FE7}\u{3}\u{2}\u{2}\u{2}\u{100C}\u{FED}\u{3}\u{2}\u{2}\u{2}\u{100C}" .
        "\u{FF3}\u{3}\u{2}\u{2}\u{2}\u{100C}\u{FF9}\u{3}\u{2}\u{2}\u{2}\u{100C}" .
        "\u{FFF}\u{3}\u{2}\u{2}\u{2}\u{100D}\u{145}\u{3}\u{2}\u{2}\u{2}\u{100E}" .
        "\u{100F}\u{7}\u{43E}\u{2}\u{2}\u{100F}\u{1010}\u{5}\u{1FE}\u{100}" .
        "\u{2}\u{1010}\u{1011}\u{7}\u{440}\u{2}\u{2}\u{1011}\u{1012}\u{5}\u{1FE}" .
        "\u{100}\u{2}\u{1012}\u{1013}\u{7}\u{43F}\u{2}\u{2}\u{1013}\u{147}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1014}\u{1015}\u{9}\u{39}\u{2}\u{2}\u{1015}" .
        "\u{149}\u{3}\u{2}\u{2}\u{2}\u{1016}\u{1017}\u{9}\u{3A}\u{2}\u{2}\u{1017}" .
        "\u{1018}\u{7}\u{435}\u{2}\u{2}\u{1018}\u{1029}\u{5}\u{14E}\u{A8}\u{2}" .
        "\u{1019}\u{101A}\u{7}\u{1CF}\u{2}\u{2}\u{101A}\u{101B}\u{7}\u{435}" .
        "\u{2}\u{2}\u{101B}\u{101C}\u{7}\u{44D}\u{2}\u{2}\u{101C}\u{101D}\u{7}" .
        "\u{440}\u{2}\u{2}\u{101D}\u{101E}\u{7}\u{1D0}\u{2}\u{2}\u{101E}\u{101F}" .
        "\u{7}\u{435}\u{2}\u{2}\u{101F}\u{1029}\u{5}\u{21C}\u{10F}\u{2}\u{1020}" .
        "\u{1021}\u{7}\u{221}\u{2}\u{2}\u{1021}\u{1022}\u{7}\u{435}\u{2}\u{2}" .
        "\u{1022}\u{1023}\u{7}\u{44D}\u{2}\u{2}\u{1023}\u{1024}\u{7}\u{440}" .
        "\u{2}\u{2}\u{1024}\u{1025}\u{7}\u{222}\u{2}\u{2}\u{1025}\u{1026}\u{7}" .
        "\u{435}\u{2}\u{2}\u{1026}\u{1029}\u{5}\u{21C}\u{10F}\u{2}\u{1027}" .
        "\u{1029}\u{7}\u{24D}\u{2}\u{2}\u{1028}\u{1016}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1028}\u{1019}\u{3}\u{2}\u{2}\u{2}\u{1028}\u{1020}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1028}\u{1027}\u{3}\u{2}\u{2}\u{2}\u{1029}\u{14B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{102A}\u{102B}\u{7}\u{277}\u{2}\u{2}\u{102B}\u{102C}\u{7}" .
        "\u{435}\u{2}\u{2}\u{102C}\u{1037}\u{7}\u{44D}\u{2}\u{2}\u{102D}\u{102E}" .
        "\u{7}\u{20B}\u{2}\u{2}\u{102E}\u{102F}\u{7}\u{435}\u{2}\u{2}\u{102F}" .
        "\u{1037}\u{7}\u{44D}\u{2}\u{2}\u{1030}\u{1031}\u{7}\u{179}\u{2}\u{2}" .
        "\u{1031}\u{1032}\u{7}\u{435}\u{2}\u{2}\u{1032}\u{1037}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{1033}\u{1034}\u{7}\u{20E}\u{2}\u{2}\u{1034}\u{1035}\u{7}" .
        "\u{435}\u{2}\u{2}\u{1035}\u{1037}\u{7}\u{44D}\u{2}\u{2}\u{1036}\u{102A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1036}\u{102D}\u{3}\u{2}\u{2}\u{2}\u{1036}\u{1030}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1036}\u{1033}\u{3}\u{2}\u{2}\u{2}\u{1037}\u{14D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1038}\u{103D}\u{5}\u{20E}\u{108}\u{2}\u{1039}" .
        "\u{103A}\u{7}\u{440}\u{2}\u{2}\u{103A}\u{103C}\u{5}\u{20E}\u{108}" .
        "\u{2}\u{103B}\u{1039}\u{3}\u{2}\u{2}\u{2}\u{103C}\u{103F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{103D}\u{103B}\u{3}\u{2}\u{2}\u{2}\u{103D}\u{103E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{103E}\u{1042}\u{3}\u{2}\u{2}\u{2}\u{103F}\u{103D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1040}\u{1042}\u{7}\u{44D}\u{2}\u{2}\u{1041}" .
        "\u{1038}\u{3}\u{2}\u{2}\u{2}\u{1041}\u{1040}\u{3}\u{2}\u{2}\u{2}\u{1042}" .
        "\u{14F}\u{3}\u{2}\u{2}\u{2}\u{1043}\u{1044}\u{7}\u{287}\u{2}\u{2}" .
        "\u{1044}\u{1045}\u{9}\u{3B}\u{2}\u{2}\u{1045}\u{1047}\u{5}\u{210}" .
        "\u{109}\u{2}\u{1046}\u{1048}\u{9}\u{3C}\u{2}\u{2}\u{1047}\u{1046}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1047}\u{1048}\u{3}\u{2}\u{2}\u{2}\u{1048}\u{151}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1049}\u{104A}\u{7}\u{287}\u{2}\u{2}\u{104A}" .
        "\u{104B}\u{7}\u{187}\u{2}\u{2}\u{104B}\u{1051}\u{5}\u{210}\u{109}" .
        "\u{2}\u{104C}\u{104F}\u{7}\u{261}\u{2}\u{2}\u{104D}\u{104E}\u{7}\u{40}" .
        "\u{2}\u{2}\u{104E}\u{1050}\u{7}\u{1E9}\u{2}\u{2}\u{104F}\u{104D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{104F}\u{1050}\u{3}\u{2}\u{2}\u{2}\u{1050}\u{1052}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1051}\u{104C}\u{3}\u{2}\u{2}\u{2}\u{1051}\u{1052}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1052}\u{153}\u{3}\u{2}\u{2}\u{2}\u{1053}\u{1054}" .
        "\u{7}\u{287}\u{2}\u{2}\u{1054}\u{1055}\u{7}\u{213}\u{2}\u{2}\u{1055}" .
        "\u{1056}\u{5}\u{210}\u{109}\u{2}\u{1056}\u{155}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1057}\u{1058}\u{7}\u{287}\u{2}\u{2}\u{1058}\u{1059}\u{7}\u{164}" .
        "\u{2}\u{2}\u{1059}\u{105C}\u{5}\u{210}\u{109}\u{2}\u{105A}\u{105B}" .
        "\u{7}\u{1FE}\u{2}\u{2}\u{105B}\u{105D}\u{7}\u{20C}\u{2}\u{2}\u{105C}" .
        "\u{105A}\u{3}\u{2}\u{2}\u{2}\u{105C}\u{105D}\u{3}\u{2}\u{2}\u{2}\u{105D}" .
        "\u{157}\u{3}\u{2}\u{2}\u{2}\u{105E}\u{105F}\u{7}\u{287}\u{2}\u{2}" .
        "\u{105F}\u{1060}\u{7}\u{235}\u{2}\u{2}\u{1060}\u{1061}\u{5}\u{210}" .
        "\u{109}\u{2}\u{1061}\u{159}\u{3}\u{2}\u{2}\u{2}\u{1062}\u{1063}\u{7}" .
        "\u{287}\u{2}\u{2}\u{1063}\u{1066}\u{7}\u{21D}\u{2}\u{2}\u{1064}\u{1065}" .
        "\u{7}\u{21}\u{2}\u{2}\u{1065}\u{1067}\u{5}\u{210}\u{109}\u{2}\u{1066}" .
        "\u{1064}\u{3}\u{2}\u{2}\u{2}\u{1066}\u{1067}\u{3}\u{2}\u{2}\u{2}\u{1067}" .
        "\u{15B}\u{3}\u{2}\u{2}\u{2}\u{1068}\u{1069}\u{7}\u{213}\u{2}\u{2}" .
        "\u{1069}\u{106A}\u{5}\u{216}\u{10C}\u{2}\u{106A}\u{106D}\u{7}\u{43}" .
        "\u{2}\u{2}\u{106B}\u{106E}\u{7}\u{44D}\u{2}\u{2}\u{106C}\u{106E}\u{7}" .
        "\u{459}\u{2}\u{2}\u{106D}\u{106B}\u{3}\u{2}\u{2}\u{2}\u{106D}\u{106C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{106E}\u{15D}\u{3}\u{2}\u{2}\u{2}\u{106F}\u{1070}" .
        "\u{7}\u{298}\u{2}\u{2}\u{1070}\u{1073}\u{5}\u{216}\u{10C}\u{2}\u{1071}" .
        "\u{1072}\u{7}\u{B2}\u{2}\u{2}\u{1072}\u{1074}\u{5}\u{246}\u{124}\u{2}" .
        "\u{1073}\u{1071}\u{3}\u{2}\u{2}\u{2}\u{1073}\u{1074}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1074}\u{15F}\u{3}\u{2}\u{2}\u{2}\u{1075}\u{1076}\u{9}\u{3D}" .
        "\u{2}\u{2}\u{1076}\u{1077}\u{7}\u{213}\u{2}\u{2}\u{1077}\u{1078}\u{5}" .
        "\u{216}\u{10C}\u{2}\u{1078}\u{161}\u{3}\u{2}\u{2}\u{2}\u{1079}\u{107C}" .
        "\u{5}\u{164}\u{B3}\u{2}\u{107A}\u{107C}\u{5}\u{6}\u{4}\u{2}\u{107B}" .
        "\u{1079}\u{3}\u{2}\u{2}\u{2}\u{107B}\u{107A}\u{3}\u{2}\u{2}\u{2}\u{107C}" .
        "\u{163}\u{3}\u{2}\u{2}\u{2}\u{107D}\u{107E}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{107E}\u{107F}\u{7}\u{449}\u{2}\u{2}\u{107F}\u{1081}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1080}\u{107D}\u{3}\u{2}\u{2}\u{2}\u{1080}\u{1081}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1081}\u{1082}\u{3}\u{2}\u{2}\u{2}\u{1082}\u{10A9}\u{7}" .
        "\u{14C}\u{2}\u{2}\u{1083}\u{1084}\u{5}\u{178}\u{BD}\u{2}\u{1084}\u{1085}" .
        "\u{7}\u{441}\u{2}\u{2}\u{1085}\u{1087}\u{3}\u{2}\u{2}\u{2}\u{1086}" .
        "\u{1083}\u{3}\u{2}\u{2}\u{2}\u{1087}\u{108A}\u{3}\u{2}\u{2}\u{2}\u{1088}" .
        "\u{1086}\u{3}\u{2}\u{2}\u{2}\u{1088}\u{1089}\u{3}\u{2}\u{2}\u{2}\u{1089}" .
        "\u{1090}\u{3}\u{2}\u{2}\u{2}\u{108A}\u{1088}\u{3}\u{2}\u{2}\u{2}\u{108B}" .
        "\u{108C}\u{5}\u{17A}\u{BE}\u{2}\u{108C}\u{108D}\u{7}\u{441}\u{2}\u{2}" .
        "\u{108D}\u{108F}\u{3}\u{2}\u{2}\u{2}\u{108E}\u{108B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{108F}\u{1092}\u{3}\u{2}\u{2}\u{2}\u{1090}\u{108E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1090}\u{1091}\u{3}\u{2}\u{2}\u{2}\u{1091}\u{1098}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1092}\u{1090}\u{3}\u{2}\u{2}\u{2}\u{1093}\u{1094}" .
        "\u{5}\u{17C}\u{BF}\u{2}\u{1094}\u{1095}\u{7}\u{441}\u{2}\u{2}\u{1095}" .
        "\u{1097}\u{3}\u{2}\u{2}\u{2}\u{1096}\u{1093}\u{3}\u{2}\u{2}\u{2}\u{1097}" .
        "\u{109A}\u{3}\u{2}\u{2}\u{2}\u{1098}\u{1096}\u{3}\u{2}\u{2}\u{2}\u{1098}" .
        "\u{1099}\u{3}\u{2}\u{2}\u{2}\u{1099}\u{10A0}\u{3}\u{2}\u{2}\u{2}\u{109A}" .
        "\u{1098}\u{3}\u{2}\u{2}\u{2}\u{109B}\u{109C}\u{5}\u{17E}\u{C0}\u{2}" .
        "\u{109C}\u{109D}\u{7}\u{441}\u{2}\u{2}\u{109D}\u{109F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{109E}\u{109B}\u{3}\u{2}\u{2}\u{2}\u{109F}\u{10A2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10A0}\u{109E}\u{3}\u{2}\u{2}\u{2}\u{10A0}\u{10A1}\u{3}" .
        "\u{2}\u{2}\u{2}\u{10A1}\u{10A6}\u{3}\u{2}\u{2}\u{2}\u{10A2}\u{10A0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10A3}\u{10A5}\u{5}\u{182}\u{C2}\u{2}\u{10A4}" .
        "\u{10A3}\u{3}\u{2}\u{2}\u{2}\u{10A5}\u{10A8}\u{3}\u{2}\u{2}\u{2}\u{10A6}" .
        "\u{10A4}\u{3}\u{2}\u{2}\u{2}\u{10A6}\u{10A7}\u{3}\u{2}\u{2}\u{2}\u{10A7}" .
        "\u{10AA}\u{3}\u{2}\u{2}\u{2}\u{10A8}\u{10A6}\u{3}\u{2}\u{2}\u{2}\u{10A9}" .
        "\u{1088}\u{3}\u{2}\u{2}\u{2}\u{10A9}\u{10AA}\u{3}\u{2}\u{2}\u{2}\u{10AA}" .
        "\u{10AB}\u{3}\u{2}\u{2}\u{2}\u{10AB}\u{10AD}\u{7}\u{187}\u{2}\u{2}" .
        "\u{10AC}\u{10AE}\u{5}\u{216}\u{10C}\u{2}\u{10AD}\u{10AC}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10AD}\u{10AE}\u{3}\u{2}\u{2}\u{2}\u{10AE}\u{165}\u{3}" .
        "\u{2}\u{2}\u{2}\u{10AF}\u{10B2}\u{7}\u{17}\u{2}\u{2}\u{10B0}\u{10B3}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{10B1}\u{10B3}\u{5}\u{27A}\u{13E}\u{2}\u{10B2}" .
        "\u{10B0}\u{3}\u{2}\u{2}\u{2}\u{10B2}\u{10B1}\u{3}\u{2}\u{2}\u{2}\u{10B2}" .
        "\u{10B3}\u{3}\u{2}\u{2}\u{2}\u{10B3}\u{10B5}\u{3}\u{2}\u{2}\u{2}\u{10B4}" .
        "\u{10B6}\u{5}\u{184}\u{C3}\u{2}\u{10B5}\u{10B4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{10B6}\u{10B7}\u{3}\u{2}\u{2}\u{2}\u{10B7}\u{10B5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{10B7}\u{10B8}\u{3}\u{2}\u{2}\u{2}\u{10B8}\u{10BF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10B9}\u{10BB}\u{7}\u{35}\u{2}\u{2}\u{10BA}\u{10BC}\u{5}" .
        "\u{182}\u{C2}\u{2}\u{10BB}\u{10BA}\u{3}\u{2}\u{2}\u{2}\u{10BC}\u{10BD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10BD}\u{10BB}\u{3}\u{2}\u{2}\u{2}\u{10BD}\u{10BE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10BE}\u{10C0}\u{3}\u{2}\u{2}\u{2}\u{10BF}\u{10B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10BF}\u{10C0}\u{3}\u{2}\u{2}\u{2}\u{10C0}\u{10C1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10C1}\u{10C2}\u{7}\u{187}\u{2}\u{2}\u{10C2}" .
        "\u{10C3}\u{7}\u{17}\u{2}\u{2}\u{10C3}\u{167}\u{3}\u{2}\u{2}\u{2}\u{10C4}" .
        "\u{10C5}\u{7}\u{4C}\u{2}\u{2}\u{10C5}\u{10C6}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{10C6}\u{10C8}\u{7}\u{A5}\u{2}\u{2}\u{10C7}\u{10C9}\u{5}\u{182}" .
        "\u{C2}\u{2}\u{10C8}\u{10C7}\u{3}\u{2}\u{2}\u{2}\u{10C9}\u{10CA}\u{3}" .
        "\u{2}\u{2}\u{2}\u{10CA}\u{10C8}\u{3}\u{2}\u{2}\u{2}\u{10CA}\u{10CB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10CB}\u{10CF}\u{3}\u{2}\u{2}\u{2}\u{10CC}\u{10CE}" .
        "\u{5}\u{186}\u{C4}\u{2}\u{10CD}\u{10CC}\u{3}\u{2}\u{2}\u{2}\u{10CE}" .
        "\u{10D1}\u{3}\u{2}\u{2}\u{2}\u{10CF}\u{10CD}\u{3}\u{2}\u{2}\u{2}\u{10CF}" .
        "\u{10D0}\u{3}\u{2}\u{2}\u{2}\u{10D0}\u{10D8}\u{3}\u{2}\u{2}\u{2}\u{10D1}" .
        "\u{10CF}\u{3}\u{2}\u{2}\u{2}\u{10D2}\u{10D4}\u{7}\u{35}\u{2}\u{2}" .
        "\u{10D3}\u{10D5}\u{5}\u{182}\u{C2}\u{2}\u{10D4}\u{10D3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10D5}\u{10D6}\u{3}\u{2}\u{2}\u{2}\u{10D6}\u{10D4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{10D6}\u{10D7}\u{3}\u{2}\u{2}\u{2}\u{10D7}\u{10D9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10D8}\u{10D2}\u{3}\u{2}\u{2}\u{2}\u{10D8}\u{10D9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{10D9}\u{10DA}\u{3}\u{2}\u{2}\u{2}\u{10DA}\u{10DB}" .
        "\u{7}\u{187}\u{2}\u{2}\u{10DB}\u{10DC}\u{7}\u{4C}\u{2}\u{2}\u{10DC}" .
        "\u{169}\u{3}\u{2}\u{2}\u{2}\u{10DD}\u{10DE}\u{7}\u{57}\u{2}\u{2}\u{10DE}" .
        "\u{10DF}\u{5}\u{216}\u{10C}\u{2}\u{10DF}\u{16B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{10E0}\u{10E1}\u{7}\u{5D}\u{2}\u{2}\u{10E1}\u{10E2}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{10E2}\u{16D}\u{3}\u{2}\u{2}\u{2}\u{10E3}\u{10E4}\u{5}" .
        "\u{216}\u{10C}\u{2}\u{10E4}\u{10E5}\u{7}\u{449}\u{2}\u{2}\u{10E5}" .
        "\u{10E7}\u{3}\u{2}\u{2}\u{2}\u{10E6}\u{10E3}\u{3}\u{2}\u{2}\u{2}\u{10E6}" .
        "\u{10E7}\u{3}\u{2}\u{2}\u{2}\u{10E7}\u{10E8}\u{3}\u{2}\u{2}\u{2}\u{10E8}" .
        "\u{10EA}\u{7}\u{65}\u{2}\u{2}\u{10E9}\u{10EB}\u{5}\u{182}\u{C2}\u{2}" .
        "\u{10EA}\u{10E9}\u{3}\u{2}\u{2}\u{2}\u{10EB}\u{10EC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{10EC}\u{10EA}\u{3}\u{2}\u{2}\u{2}\u{10EC}\u{10ED}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10ED}\u{10EE}\u{3}\u{2}\u{2}\u{2}\u{10EE}\u{10EF}\u{7}" .
        "\u{187}\u{2}\u{2}\u{10EF}\u{10F1}\u{7}\u{65}\u{2}\u{2}\u{10F0}\u{10F2}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{10F1}\u{10F0}\u{3}\u{2}\u{2}\u{2}\u{10F1}" .
        "\u{10F2}\u{3}\u{2}\u{2}\u{2}\u{10F2}\u{16F}\u{3}\u{2}\u{2}\u{2}\u{10F3}" .
        "\u{10F4}\u{5}\u{216}\u{10C}\u{2}\u{10F4}\u{10F5}\u{7}\u{449}\u{2}" .
        "\u{2}\u{10F5}\u{10F7}\u{3}\u{2}\u{2}\u{2}\u{10F6}\u{10F3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{10F6}\u{10F7}\u{3}\u{2}\u{2}\u{2}\u{10F7}\u{10F8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{10F8}\u{10FA}\u{7}\u{86}\u{2}\u{2}\u{10F9}\u{10FB}" .
        "\u{5}\u{182}\u{C2}\u{2}\u{10FA}\u{10F9}\u{3}\u{2}\u{2}\u{2}\u{10FB}" .
        "\u{10FC}\u{3}\u{2}\u{2}\u{2}\u{10FC}\u{10FA}\u{3}\u{2}\u{2}\u{2}\u{10FC}" .
        "\u{10FD}\u{3}\u{2}\u{2}\u{2}\u{10FD}\u{10FE}\u{3}\u{2}\u{2}\u{2}\u{10FE}" .
        "\u{10FF}\u{7}\u{275}\u{2}\u{2}\u{10FF}\u{1100}\u{5}\u{27A}\u{13E}" .
        "\u{2}\u{1100}\u{1101}\u{7}\u{187}\u{2}\u{2}\u{1101}\u{1103}\u{7}\u{86}" .
        "\u{2}\u{2}\u{1102}\u{1104}\u{5}\u{216}\u{10C}\u{2}\u{1103}\u{1102}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1103}\u{1104}\u{3}\u{2}\u{2}\u{2}\u{1104}\u{171}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1105}\u{1106}\u{7}\u{8C}\u{2}\u{2}\u{1106}" .
        "\u{1107}\u{5}\u{27A}\u{13E}\u{2}\u{1107}\u{173}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1108}\u{1109}\u{5}\u{216}\u{10C}\u{2}\u{1109}\u{110A}\u{7}\u{449}" .
        "\u{2}\u{2}\u{110A}\u{110C}\u{3}\u{2}\u{2}\u{2}\u{110B}\u{1108}\u{3}" .
        "\u{2}\u{2}\u{2}\u{110B}\u{110C}\u{3}\u{2}\u{2}\u{2}\u{110C}\u{110D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{110D}\u{110E}\u{7}\u{B6}\u{2}\u{2}\u{110E}" .
        "\u{110F}\u{5}\u{27A}\u{13E}\u{2}\u{110F}\u{1111}\u{7}\u{181}\u{2}" .
        "\u{2}\u{1110}\u{1112}\u{5}\u{182}\u{C2}\u{2}\u{1111}\u{1110}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1112}\u{1113}\u{3}\u{2}\u{2}\u{2}\u{1113}\u{1111}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1113}\u{1114}\u{3}\u{2}\u{2}\u{2}\u{1114}\u{1115}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1115}\u{1116}\u{7}\u{187}\u{2}\u{2}\u{1116}" .
        "\u{1118}\u{7}\u{B6}\u{2}\u{2}\u{1117}\u{1119}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{1118}\u{1117}\u{3}\u{2}\u{2}\u{2}\u{1118}\u{1119}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1119}\u{175}\u{3}\u{2}\u{2}\u{2}\u{111A}\u{111B}\u{7}\u{15D}" .
        "\u{2}\u{2}\u{111B}\u{112A}\u{5}\u{216}\u{10C}\u{2}\u{111C}\u{1121}" .
        "\u{7}\u{3F}\u{2}\u{2}\u{111D}\u{111F}\u{7}\u{1F4}\u{2}\u{2}\u{111E}" .
        "\u{111D}\u{3}\u{2}\u{2}\u{2}\u{111E}\u{111F}\u{3}\u{2}\u{2}\u{2}\u{111F}" .
        "\u{1120}\u{3}\u{2}\u{2}\u{2}\u{1120}\u{1122}\u{7}\u{43}\u{2}\u{2}" .
        "\u{1121}\u{111E}\u{3}\u{2}\u{2}\u{2}\u{1121}\u{1122}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1122}\u{1123}\u{3}\u{2}\u{2}\u{2}\u{1123}\u{1124}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{1124}\u{1125}\u{7}\u{55}\u{2}\u{2}\u{1125}\u{1126}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{1126}\u{112A}\u{3}\u{2}\u{2}\u{2}\u{1127}" .
        "\u{1128}\u{7}\u{201}\u{2}\u{2}\u{1128}\u{112A}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{1129}\u{111A}\u{3}\u{2}\u{2}\u{2}\u{1129}\u{111C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1129}\u{1127}\u{3}\u{2}\u{2}\u{2}\u{112A}\u{177}\u{3}" .
        "\u{2}\u{2}\u{2}\u{112B}\u{112C}\u{7}\u{29}\u{2}\u{2}\u{112C}\u{112D}" .
        "\u{5}\u{236}\u{11C}\u{2}\u{112D}\u{1130}\u{5}\u{22A}\u{116}\u{2}\u{112E}" .
        "\u{112F}\u{7}\u{2A}\u{2}\u{2}\u{112F}\u{1131}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{1130}\u{112E}\u{3}\u{2}\u{2}\u{2}\u{1130}\u{1131}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1131}\u{179}\u{3}\u{2}\u{2}\u{2}\u{1132}\u{1133}\u{7}\u{29}" .
        "\u{2}\u{2}\u{1133}\u{1134}\u{5}\u{216}\u{10C}\u{2}\u{1134}\u{1135}" .
        "\u{7}\u{1E}\u{2}\u{2}\u{1135}\u{113C}\u{7}\u{40}\u{2}\u{2}\u{1136}" .
        "\u{113D}\u{5}\u{21C}\u{10F}\u{2}\u{1137}\u{1139}\u{7}\u{9A}\u{2}\u{2}" .
        "\u{1138}\u{113A}\u{7}\u{27B}\u{2}\u{2}\u{1139}\u{1138}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1139}\u{113A}\u{3}\u{2}\u{2}\u{2}\u{113A}\u{113B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{113B}\u{113D}\u{7}\u{44D}\u{2}\u{2}\u{113C}\u{1136}\u{3}" .
        "\u{2}\u{2}\u{2}\u{113C}\u{1137}\u{3}\u{2}\u{2}\u{2}\u{113D}\u{17B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{113E}\u{113F}\u{7}\u{29}\u{2}\u{2}\u{113F}" .
        "\u{1140}\u{5}\u{216}\u{10C}\u{2}\u{1140}\u{1141}\u{7}\u{26}\u{2}\u{2}" .
        "\u{1141}\u{1142}\u{7}\u{40}\u{2}\u{2}\u{1142}\u{1143}\u{5}\u{B6}\u{5C}" .
        "\u{2}\u{1143}\u{17D}\u{3}\u{2}\u{2}\u{2}\u{1144}\u{1145}\u{7}\u{29}" .
        "\u{2}\u{2}\u{1145}\u{1146}\u{9}\u{3E}\u{2}\u{2}\u{1146}\u{1147}\u{7}" .
        "\u{1A9}\u{2}\u{2}\u{1147}\u{1148}\u{7}\u{40}\u{2}\u{2}\u{1148}\u{114D}" .
        "\u{5}\u{180}\u{C1}\u{2}\u{1149}\u{114A}\u{7}\u{440}\u{2}\u{2}\u{114A}" .
        "\u{114C}\u{5}\u{180}\u{C1}\u{2}\u{114B}\u{1149}\u{3}\u{2}\u{2}\u{2}" .
        "\u{114C}\u{114F}\u{3}\u{2}\u{2}\u{2}\u{114D}\u{114B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{114D}\u{114E}\u{3}\u{2}\u{2}\u{2}\u{114E}\u{1150}\u{3}\u{2}" .
        "\u{2}\u{2}\u{114F}\u{114D}\u{3}\u{2}\u{2}\u{2}\u{1150}\u{1151}\u{5}" .
        "\u{162}\u{B2}\u{2}\u{1151}\u{17F}\u{3}\u{2}\u{2}\u{2}\u{1152}\u{115E}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{1153}\u{1155}\u{7}\u{9A}\u{2}\u{2}\u{1154}" .
        "\u{1156}\u{7}\u{27B}\u{2}\u{2}\u{1155}\u{1154}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1155}\u{1156}\u{3}\u{2}\u{2}\u{2}\u{1156}\u{1157}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1157}\u{115E}\u{7}\u{44D}\u{2}\u{2}\u{1158}\u{115E}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{1159}\u{115E}\u{7}\u{9B}\u{2}\u{2}\u{115A}\u{115B}" .
        "\u{7}\u{6D}\u{2}\u{2}\u{115B}\u{115E}\u{7}\u{1A2}\u{2}\u{2}\u{115C}" .
        "\u{115E}\u{7}\u{99}\u{2}\u{2}\u{115D}\u{1152}\u{3}\u{2}\u{2}\u{2}" .
        "\u{115D}\u{1153}\u{3}\u{2}\u{2}\u{2}\u{115D}\u{1158}\u{3}\u{2}\u{2}" .
        "\u{2}\u{115D}\u{1159}\u{3}\u{2}\u{2}\u{2}\u{115D}\u{115A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{115D}\u{115C}\u{3}\u{2}\u{2}\u{2}\u{115E}\u{181}\u{3}" .
        "\u{2}\u{2}\u{2}\u{115F}\u{1162}\u{5}\u{14}\u{B}\u{2}\u{1160}\u{1162}" .
        "\u{5}\u{6}\u{4}\u{2}\u{1161}\u{115F}\u{3}\u{2}\u{2}\u{2}\u{1161}\u{1160}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1162}\u{1163}\u{3}\u{2}\u{2}\u{2}\u{1163}\u{1164}" .
        "\u{7}\u{441}\u{2}\u{2}\u{1164}\u{183}\u{3}\u{2}\u{2}\u{2}\u{1165}" .
        "\u{1168}\u{7}\u{B4}\u{2}\u{2}\u{1166}\u{1169}\u{5}\u{228}\u{115}\u{2}" .
        "\u{1167}\u{1169}\u{5}\u{27A}\u{13E}\u{2}\u{1168}\u{1166}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1168}\u{1167}\u{3}\u{2}\u{2}\u{2}\u{1169}\u{116A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{116A}\u{116C}\u{7}\u{A5}\u{2}\u{2}\u{116B}\u{116D}" .
        "\u{5}\u{182}\u{C2}\u{2}\u{116C}\u{116B}\u{3}\u{2}\u{2}\u{2}\u{116D}" .
        "\u{116E}\u{3}\u{2}\u{2}\u{2}\u{116E}\u{116C}\u{3}\u{2}\u{2}\u{2}\u{116E}" .
        "\u{116F}\u{3}\u{2}\u{2}\u{2}\u{116F}\u{185}\u{3}\u{2}\u{2}\u{2}\u{1170}" .
        "\u{1171}\u{7}\u{36}\u{2}\u{2}\u{1171}\u{1172}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{1172}\u{1174}\u{7}\u{A5}\u{2}\u{2}\u{1173}\u{1175}\u{5}\u{182}" .
        "\u{C2}\u{2}\u{1174}\u{1173}\u{3}\u{2}\u{2}\u{2}\u{1175}\u{1176}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1176}\u{1174}\u{3}\u{2}\u{2}\u{2}\u{1176}\u{1177}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1177}\u{187}\u{3}\u{2}\u{2}\u{2}\u{1178}\u{1179}" .
        "\u{7}\u{9}\u{2}\u{2}\u{1179}\u{117A}\u{7}\u{277}\u{2}\u{2}\u{117A}" .
        "\u{117F}\u{5}\u{19C}\u{CF}\u{2}\u{117B}\u{117C}\u{7}\u{440}\u{2}\u{2}" .
        "\u{117C}\u{117E}\u{5}\u{19C}\u{CF}\u{2}\u{117D}\u{117B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{117E}\u{1181}\u{3}\u{2}\u{2}\u{2}\u{117F}\u{117D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{117F}\u{1180}\u{3}\u{2}\u{2}\u{2}\u{1180}\u{11AF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1181}\u{117F}\u{3}\u{2}\u{2}\u{2}\u{1182}\u{1183}" .
        "\u{7}\u{9}\u{2}\u{2}\u{1183}\u{1185}\u{7}\u{277}\u{2}\u{2}\u{1184}" .
        "\u{1186}\u{5}\u{24E}\u{128}\u{2}\u{1185}\u{1184}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1185}\u{1186}\u{3}\u{2}\u{2}\u{2}\u{1186}\u{1187}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1187}\u{118C}\u{5}\u{19E}\u{D0}\u{2}\u{1188}\u{1189}\u{7}" .
        "\u{440}\u{2}\u{2}\u{1189}\u{118B}\u{5}\u{19E}\u{D0}\u{2}\u{118A}\u{1188}" .
        "\u{3}\u{2}\u{2}\u{2}\u{118B}\u{118E}\u{3}\u{2}\u{2}\u{2}\u{118C}\u{118A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{118C}\u{118D}\u{3}\u{2}\u{2}\u{2}\u{118D}\u{119D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{118E}\u{118C}\u{3}\u{2}\u{2}\u{2}\u{118F}\u{119B}" .
        "\u{7}\u{88}\u{2}\u{2}\u{1190}\u{119C}\u{7}\u{1F7}\u{2}\u{2}\u{1191}" .
        "\u{1198}\u{5}\u{1A0}\u{D1}\u{2}\u{1192}\u{1194}\u{7}\u{C}\u{2}\u{2}" .
        "\u{1193}\u{1192}\u{3}\u{2}\u{2}\u{2}\u{1193}\u{1194}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1194}\u{1195}\u{3}\u{2}\u{2}\u{2}\u{1195}\u{1197}\u{5}\u{1A0}" .
        "\u{D1}\u{2}\u{1196}\u{1193}\u{3}\u{2}\u{2}\u{2}\u{1197}\u{119A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1198}\u{1196}\u{3}\u{2}\u{2}\u{2}\u{1198}\u{1199}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1199}\u{119C}\u{3}\u{2}\u{2}\u{2}\u{119A}\u{1198}" .
        "\u{3}\u{2}\u{2}\u{2}\u{119B}\u{1190}\u{3}\u{2}\u{2}\u{2}\u{119B}\u{1191}" .
        "\u{3}\u{2}\u{2}\u{2}\u{119C}\u{119E}\u{3}\u{2}\u{2}\u{2}\u{119D}\u{118F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{119D}\u{119E}\u{3}\u{2}\u{2}\u{2}\u{119E}\u{11A5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{119F}\u{11A1}\u{7}\u{B7}\u{2}\u{2}\u{11A0}" .
        "\u{11A2}\u{5}\u{1A2}\u{D2}\u{2}\u{11A1}\u{11A0}\u{3}\u{2}\u{2}\u{2}" .
        "\u{11A2}\u{11A3}\u{3}\u{2}\u{2}\u{2}\u{11A3}\u{11A1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{11A3}\u{11A4}\u{3}\u{2}\u{2}\u{2}\u{11A4}\u{11A6}\u{3}\u{2}" .
        "\u{2}\u{2}\u{11A5}\u{119F}\u{3}\u{2}\u{2}\u{2}\u{11A5}\u{11A6}\u{3}" .
        "\u{2}\u{2}\u{2}\u{11A6}\u{11AB}\u{3}\u{2}\u{2}\u{2}\u{11A7}\u{11AA}" .
        "\u{5}\u{1A4}\u{D3}\u{2}\u{11A8}\u{11AA}\u{5}\u{1A6}\u{D4}\u{2}\u{11A9}" .
        "\u{11A7}\u{3}\u{2}\u{2}\u{2}\u{11A9}\u{11A8}\u{3}\u{2}\u{2}\u{2}\u{11AA}" .
        "\u{11AD}\u{3}\u{2}\u{2}\u{2}\u{11AB}\u{11A9}\u{3}\u{2}\u{2}\u{2}\u{11AB}" .
        "\u{11AC}\u{3}\u{2}\u{2}\u{2}\u{11AC}\u{11AF}\u{3}\u{2}\u{2}\u{2}\u{11AD}" .
        "\u{11AB}\u{3}\u{2}\u{2}\u{2}\u{11AE}\u{1178}\u{3}\u{2}\u{2}\u{2}\u{11AE}" .
        "\u{1182}\u{3}\u{2}\u{2}\u{2}\u{11AF}\u{189}\u{3}\u{2}\u{2}\u{2}\u{11B0}" .
        "\u{11B1}\u{7}\u{22}\u{2}\u{2}\u{11B1}\u{11B2}\u{7}\u{277}\u{2}\u{2}" .
        "\u{11B2}\u{11B7}\u{5}\u{19E}\u{D0}\u{2}\u{11B3}\u{11B4}\u{7}\u{440}" .
        "\u{2}\u{2}\u{11B4}\u{11B6}\u{5}\u{19E}\u{D0}\u{2}\u{11B5}\u{11B3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11B6}\u{11B9}\u{3}\u{2}\u{2}\u{2}\u{11B7}\u{11B5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11B7}\u{11B8}\u{3}\u{2}\u{2}\u{2}\u{11B8}\u{11E7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11B9}\u{11B7}\u{3}\u{2}\u{2}\u{2}\u{11BA}\u{11BB}" .
        "\u{7}\u{22}\u{2}\u{2}\u{11BB}\u{11BD}\u{7}\u{277}\u{2}\u{2}\u{11BC}" .
        "\u{11BE}\u{5}\u{250}\u{129}\u{2}\u{11BD}\u{11BC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{11BD}\u{11BE}\u{3}\u{2}\u{2}\u{2}\u{11BE}\u{11BF}\u{3}\u{2}\u{2}" .
        "\u{2}\u{11BF}\u{11C4}\u{5}\u{19E}\u{D0}\u{2}\u{11C0}\u{11C1}\u{7}" .
        "\u{440}\u{2}\u{2}\u{11C1}\u{11C3}\u{5}\u{19E}\u{D0}\u{2}\u{11C2}\u{11C0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11C3}\u{11C6}\u{3}\u{2}\u{2}\u{2}\u{11C4}\u{11C2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11C4}\u{11C5}\u{3}\u{2}\u{2}\u{2}\u{11C5}\u{11D5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11C6}\u{11C4}\u{3}\u{2}\u{2}\u{2}\u{11C7}\u{11D3}" .
        "\u{7}\u{88}\u{2}\u{2}\u{11C8}\u{11D4}\u{7}\u{1F7}\u{2}\u{2}\u{11C9}" .
        "\u{11D0}\u{5}\u{1A0}\u{D1}\u{2}\u{11CA}\u{11CC}\u{7}\u{C}\u{2}\u{2}" .
        "\u{11CB}\u{11CA}\u{3}\u{2}\u{2}\u{2}\u{11CB}\u{11CC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{11CC}\u{11CD}\u{3}\u{2}\u{2}\u{2}\u{11CD}\u{11CF}\u{5}\u{1A0}" .
        "\u{D1}\u{2}\u{11CE}\u{11CB}\u{3}\u{2}\u{2}\u{2}\u{11CF}\u{11D2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{11D0}\u{11CE}\u{3}\u{2}\u{2}\u{2}\u{11D0}\u{11D1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11D1}\u{11D4}\u{3}\u{2}\u{2}\u{2}\u{11D2}\u{11D0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11D3}\u{11C8}\u{3}\u{2}\u{2}\u{2}\u{11D3}\u{11C9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11D4}\u{11D6}\u{3}\u{2}\u{2}\u{2}\u{11D5}\u{11C7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11D5}\u{11D6}\u{3}\u{2}\u{2}\u{2}\u{11D6}\u{11DD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11D7}\u{11D9}\u{7}\u{B7}\u{2}\u{2}\u{11D8}" .
        "\u{11DA}\u{5}\u{1A2}\u{D2}\u{2}\u{11D9}\u{11D8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{11DA}\u{11DB}\u{3}\u{2}\u{2}\u{2}\u{11DB}\u{11D9}\u{3}\u{2}\u{2}" .
        "\u{2}\u{11DB}\u{11DC}\u{3}\u{2}\u{2}\u{2}\u{11DC}\u{11DE}\u{3}\u{2}" .
        "\u{2}\u{2}\u{11DD}\u{11D7}\u{3}\u{2}\u{2}\u{2}\u{11DD}\u{11DE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{11DE}\u{11E3}\u{3}\u{2}\u{2}\u{2}\u{11DF}\u{11E2}" .
        "\u{5}\u{1A4}\u{D3}\u{2}\u{11E0}\u{11E2}\u{5}\u{1A6}\u{D4}\u{2}\u{11E1}" .
        "\u{11DF}\u{3}\u{2}\u{2}\u{2}\u{11E1}\u{11E0}\u{3}\u{2}\u{2}\u{2}\u{11E2}" .
        "\u{11E5}\u{3}\u{2}\u{2}\u{2}\u{11E3}\u{11E1}\u{3}\u{2}\u{2}\u{2}\u{11E3}" .
        "\u{11E4}\u{3}\u{2}\u{2}\u{2}\u{11E4}\u{11E7}\u{3}\u{2}\u{2}\u{2}\u{11E5}" .
        "\u{11E3}\u{3}\u{2}\u{2}\u{2}\u{11E6}\u{11B0}\u{3}\u{2}\u{2}\u{2}\u{11E6}" .
        "\u{11BA}\u{3}\u{2}\u{2}\u{2}\u{11E7}\u{18B}\u{3}\u{2}\u{2}\u{2}\u{11E8}" .
        "\u{11E9}\u{7}\u{33}\u{2}\u{2}\u{11E9}\u{11EB}\u{7}\u{277}\u{2}\u{2}" .
        "\u{11EA}\u{11EC}\u{5}\u{24E}\u{128}\u{2}\u{11EB}\u{11EA}\u{3}\u{2}" .
        "\u{2}\u{2}\u{11EB}\u{11EC}\u{3}\u{2}\u{2}\u{2}\u{11EC}\u{11ED}\u{3}" .
        "\u{2}\u{2}\u{2}\u{11ED}\u{11F2}\u{5}\u{204}\u{103}\u{2}\u{11EE}\u{11EF}" .
        "\u{7}\u{440}\u{2}\u{2}\u{11EF}\u{11F1}\u{5}\u{204}\u{103}\u{2}\u{11F0}" .
        "\u{11EE}\u{3}\u{2}\u{2}\u{2}\u{11F1}\u{11F4}\u{3}\u{2}\u{2}\u{2}\u{11F2}" .
        "\u{11F0}\u{3}\u{2}\u{2}\u{2}\u{11F2}\u{11F3}\u{3}\u{2}\u{2}\u{2}\u{11F3}" .
        "\u{18D}\u{3}\u{2}\u{2}\u{2}\u{11F4}\u{11F2}\u{3}\u{2}\u{2}\u{2}\u{11F5}" .
        "\u{11F6}\u{7}\u{47}\u{2}\u{2}\u{11F6}\u{11FB}\u{5}\u{1A8}\u{D5}\u{2}" .
        "\u{11F7}\u{11F8}\u{7}\u{440}\u{2}\u{2}\u{11F8}\u{11FA}\u{5}\u{1A8}" .
        "\u{D5}\u{2}\u{11F9}\u{11F7}\u{3}\u{2}\u{2}\u{2}\u{11FA}\u{11FD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{11FB}\u{11F9}\u{3}\u{2}\u{2}\u{2}\u{11FB}\u{11FC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11FC}\u{11FE}\u{3}\u{2}\u{2}\u{2}\u{11FD}\u{11FB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{11FE}\u{1200}\u{7}\u{71}\u{2}\u{2}\u{11FF}" .
        "\u{1201}\u{9}\u{3F}\u{2}\u{2}\u{1200}\u{11FF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1200}\u{1201}\u{3}\u{2}\u{2}\u{2}\u{1201}\u{1202}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1202}\u{1203}\u{5}\u{1AC}\u{D7}\u{2}\u{1203}\u{1204}\u{7}" .
        "\u{A6}\u{2}\u{2}\u{1204}\u{1209}\u{5}\u{19E}\u{D0}\u{2}\u{1205}\u{1206}" .
        "\u{7}\u{440}\u{2}\u{2}\u{1206}\u{1208}\u{5}\u{19E}\u{D0}\u{2}\u{1207}" .
        "\u{1205}\u{3}\u{2}\u{2}\u{2}\u{1208}\u{120B}\u{3}\u{2}\u{2}\u{2}\u{1209}" .
        "\u{1207}\u{3}\u{2}\u{2}\u{2}\u{1209}\u{120A}\u{3}\u{2}\u{2}\u{2}\u{120A}" .
        "\u{121A}\u{3}\u{2}\u{2}\u{2}\u{120B}\u{1209}\u{3}\u{2}\u{2}\u{2}\u{120C}" .
        "\u{1218}\u{7}\u{88}\u{2}\u{2}\u{120D}\u{1219}\u{7}\u{1F7}\u{2}\u{2}" .
        "\u{120E}\u{1215}\u{5}\u{1A0}\u{D1}\u{2}\u{120F}\u{1211}\u{7}\u{C}" .
        "\u{2}\u{2}\u{1210}\u{120F}\u{3}\u{2}\u{2}\u{2}\u{1210}\u{1211}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1211}\u{1212}\u{3}\u{2}\u{2}\u{2}\u{1212}\u{1214}" .
        "\u{5}\u{1A0}\u{D1}\u{2}\u{1213}\u{1210}\u{3}\u{2}\u{2}\u{2}\u{1214}" .
        "\u{1217}\u{3}\u{2}\u{2}\u{2}\u{1215}\u{1213}\u{3}\u{2}\u{2}\u{2}\u{1215}" .
        "\u{1216}\u{3}\u{2}\u{2}\u{2}\u{1216}\u{1219}\u{3}\u{2}\u{2}\u{2}\u{1217}" .
        "\u{1215}\u{3}\u{2}\u{2}\u{2}\u{1218}\u{120D}\u{3}\u{2}\u{2}\u{2}\u{1218}" .
        "\u{120E}\u{3}\u{2}\u{2}\u{2}\u{1219}\u{121B}\u{3}\u{2}\u{2}\u{2}\u{121A}" .
        "\u{120C}\u{3}\u{2}\u{2}\u{2}\u{121A}\u{121B}\u{3}\u{2}\u{2}\u{2}\u{121B}" .
        "\u{1225}\u{3}\u{2}\u{2}\u{2}\u{121C}\u{1222}\u{7}\u{B7}\u{2}\u{2}" .
        "\u{121D}\u{121E}\u{7}\u{47}\u{2}\u{2}\u{121E}\u{1221}\u{7}\u{73}\u{2}" .
        "\u{2}\u{121F}\u{1221}\u{5}\u{1A2}\u{D2}\u{2}\u{1220}\u{121D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1220}\u{121F}\u{3}\u{2}\u{2}\u{2}\u{1221}\u{1224}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1222}\u{1220}\u{3}\u{2}\u{2}\u{2}\u{1222}\u{1223}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1223}\u{1226}\u{3}\u{2}\u{2}\u{2}\u{1224}\u{1222}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1225}\u{121C}\u{3}\u{2}\u{2}\u{2}\u{1225}\u{1226}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1226}\u{122D}\u{3}\u{2}\u{2}\u{2}\u{1227}\u{1228}" .
        "\u{7}\u{E}\u{2}\u{2}\u{1228}\u{1229}\u{5}\u{204}\u{103}\u{2}\u{1229}" .
        "\u{122A}\u{7}\u{B7}\u{2}\u{2}\u{122A}\u{122B}\u{7}\u{234}\u{2}\u{2}" .
        "\u{122B}\u{122C}\u{5}\u{190}\u{C9}\u{2}\u{122C}\u{122E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{122D}\u{1227}\u{3}\u{2}\u{2}\u{2}\u{122D}\u{122E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{122E}\u{1253}\u{3}\u{2}\u{2}\u{2}\u{122F}\u{1232}" .
        "\u{7}\u{47}\u{2}\u{2}\u{1230}\u{1233}\u{5}\u{204}\u{103}\u{2}\u{1231}" .
        "\u{1233}\u{5}\u{216}\u{10C}\u{2}\u{1232}\u{1230}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1232}\u{1231}\u{3}\u{2}\u{2}\u{2}\u{1233}\u{123B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1234}\u{1237}\u{7}\u{440}\u{2}\u{2}\u{1235}\u{1238}\u{5}\u{204}" .
        "\u{103}\u{2}\u{1236}\u{1238}\u{5}\u{216}\u{10C}\u{2}\u{1237}\u{1235}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1237}\u{1236}\u{3}\u{2}\u{2}\u{2}\u{1238}\u{123A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1239}\u{1234}\u{3}\u{2}\u{2}\u{2}\u{123A}\u{123D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{123B}\u{1239}\u{3}\u{2}\u{2}\u{2}\u{123B}\u{123C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{123C}\u{123E}\u{3}\u{2}\u{2}\u{2}\u{123D}\u{123B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{123E}\u{1241}\u{7}\u{A6}\u{2}\u{2}\u{123F}" .
        "\u{1242}\u{5}\u{204}\u{103}\u{2}\u{1240}\u{1242}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{1241}\u{123F}\u{3}\u{2}\u{2}\u{2}\u{1241}\u{1240}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1242}\u{124A}\u{3}\u{2}\u{2}\u{2}\u{1243}\u{1246}\u{7}" .
        "\u{440}\u{2}\u{2}\u{1244}\u{1247}\u{5}\u{204}\u{103}\u{2}\u{1245}" .
        "\u{1247}\u{5}\u{216}\u{10C}\u{2}\u{1246}\u{1244}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1246}\u{1245}\u{3}\u{2}\u{2}\u{2}\u{1247}\u{1249}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1248}\u{1243}\u{3}\u{2}\u{2}\u{2}\u{1249}\u{124C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{124A}\u{1248}\u{3}\u{2}\u{2}\u{2}\u{124A}\u{124B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{124B}\u{1250}\u{3}\u{2}\u{2}\u{2}\u{124C}\u{124A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{124D}\u{124E}\u{7}\u{B7}\u{2}\u{2}\u{124E}" .
        "\u{124F}\u{7}\u{45C}\u{2}\u{2}\u{124F}\u{1251}\u{7}\u{73}\u{2}\u{2}" .
        "\u{1250}\u{124D}\u{3}\u{2}\u{2}\u{2}\u{1250}\u{1251}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1251}\u{1253}\u{3}\u{2}\u{2}\u{2}\u{1252}\u{11F5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1252}\u{122F}\u{3}\u{2}\u{2}\u{2}\u{1253}\u{18F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1254}\u{126B}\u{7}\u{2A}\u{2}\u{2}\u{1255}\u{126B}" .
        "\u{7}\u{1F7}\u{2}\u{2}\u{1256}\u{1260}\u{7}\u{8}\u{2}\u{2}\u{1257}" .
        "\u{1258}\u{7}\u{3A}\u{2}\u{2}\u{1258}\u{125D}\u{5}\u{204}\u{103}\u{2}" .
        "\u{1259}\u{125A}\u{7}\u{440}\u{2}\u{2}\u{125A}\u{125C}\u{5}\u{204}" .
        "\u{103}\u{2}\u{125B}\u{1259}\u{3}\u{2}\u{2}\u{2}\u{125C}\u{125F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{125D}\u{125B}\u{3}\u{2}\u{2}\u{2}\u{125D}\u{125E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{125E}\u{1261}\u{3}\u{2}\u{2}\u{2}\u{125F}\u{125D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1260}\u{1257}\u{3}\u{2}\u{2}\u{2}\u{1260}\u{1261}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1261}\u{126B}\u{3}\u{2}\u{2}\u{2}\u{1262}\u{1267}" .
        "\u{5}\u{204}\u{103}\u{2}\u{1263}\u{1264}\u{7}\u{440}\u{2}\u{2}\u{1264}" .
        "\u{1266}\u{5}\u{204}\u{103}\u{2}\u{1265}\u{1263}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1266}\u{1269}\u{3}\u{2}\u{2}\u{2}\u{1267}\u{1265}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1267}\u{1268}\u{3}\u{2}\u{2}\u{2}\u{1268}\u{126B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1269}\u{1267}\u{3}\u{2}\u{2}\u{2}\u{126A}\u{1254}\u{3}" .
        "\u{2}\u{2}\u{2}\u{126A}\u{1255}\u{3}\u{2}\u{2}\u{2}\u{126A}\u{1256}" .
        "\u{3}\u{2}\u{2}\u{2}\u{126A}\u{1262}\u{3}\u{2}\u{2}\u{2}\u{126B}\u{191}" .
        "\u{3}\u{2}\u{2}\u{2}\u{126C}\u{126D}\u{7}\u{47}\u{2}\u{2}\u{126D}" .
        "\u{126E}\u{7}\u{219}\u{2}\u{2}\u{126E}\u{126F}\u{7}\u{71}\u{2}\u{2}" .
        "\u{126F}\u{1270}\u{5}\u{204}\u{103}\u{2}\u{1270}\u{1271}\u{7}\u{A6}" .
        "\u{2}\u{2}\u{1271}\u{1276}\u{5}\u{204}\u{103}\u{2}\u{1272}\u{1273}" .
        "\u{7}\u{440}\u{2}\u{2}\u{1273}\u{1275}\u{5}\u{204}\u{103}\u{2}\u{1274}" .
        "\u{1272}\u{3}\u{2}\u{2}\u{2}\u{1275}\u{1278}\u{3}\u{2}\u{2}\u{2}\u{1276}" .
        "\u{1274}\u{3}\u{2}\u{2}\u{2}\u{1276}\u{1277}\u{3}\u{2}\u{2}\u{2}\u{1277}" .
        "\u{127C}\u{3}\u{2}\u{2}\u{2}\u{1278}\u{1276}\u{3}\u{2}\u{2}\u{2}\u{1279}" .
        "\u{127A}\u{7}\u{B7}\u{2}\u{2}\u{127A}\u{127B}\u{7}\u{47}\u{2}\u{2}" .
        "\u{127B}\u{127D}\u{7}\u{73}\u{2}\u{2}\u{127C}\u{1279}\u{3}\u{2}\u{2}" .
        "\u{2}\u{127C}\u{127D}\u{3}\u{2}\u{2}\u{2}\u{127D}\u{193}\u{3}\u{2}" .
        "\u{2}\u{2}\u{127E}\u{127F}\u{7}\u{85}\u{2}\u{2}\u{127F}\u{1280}\u{7}" .
        "\u{277}\u{2}\u{2}\u{1280}\u{1285}\u{5}\u{1AE}\u{D8}\u{2}\u{1281}\u{1282}" .
        "\u{7}\u{440}\u{2}\u{2}\u{1282}\u{1284}\u{5}\u{1AE}\u{D8}\u{2}\u{1283}" .
        "\u{1281}\u{3}\u{2}\u{2}\u{2}\u{1284}\u{1287}\u{3}\u{2}\u{2}\u{2}\u{1285}" .
        "\u{1283}\u{3}\u{2}\u{2}\u{2}\u{1285}\u{1286}\u{3}\u{2}\u{2}\u{2}\u{1286}" .
        "\u{195}\u{3}\u{2}\u{2}\u{2}\u{1287}\u{1285}\u{3}\u{2}\u{2}\u{2}\u{1288}" .
        "\u{1289}\u{7}\u{8D}\u{2}\u{2}\u{1289}\u{128E}\u{5}\u{1A8}\u{D5}\u{2}" .
        "\u{128A}\u{128B}\u{7}\u{440}\u{2}\u{2}\u{128B}\u{128D}\u{5}\u{1A8}" .
        "\u{D5}\u{2}\u{128C}\u{128A}\u{3}\u{2}\u{2}\u{2}\u{128D}\u{1290}\u{3}" .
        "\u{2}\u{2}\u{2}\u{128E}\u{128C}\u{3}\u{2}\u{2}\u{2}\u{128E}\u{128F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{128F}\u{1291}\u{3}\u{2}\u{2}\u{2}\u{1290}\u{128E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1291}\u{1293}\u{7}\u{71}\u{2}\u{2}\u{1292}" .
        "\u{1294}\u{9}\u{3F}\u{2}\u{2}\u{1293}\u{1292}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1293}\u{1294}\u{3}\u{2}\u{2}\u{2}\u{1294}\u{1295}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1295}\u{1296}\u{5}\u{1AC}\u{D7}\u{2}\u{1296}\u{1297}\u{7}" .
        "\u{43}\u{2}\u{2}\u{1297}\u{129C}\u{5}\u{204}\u{103}\u{2}\u{1298}\u{1299}" .
        "\u{7}\u{440}\u{2}\u{2}\u{1299}\u{129B}\u{5}\u{204}\u{103}\u{2}\u{129A}" .
        "\u{1298}\u{3}\u{2}\u{2}\u{2}\u{129B}\u{129E}\u{3}\u{2}\u{2}\u{2}\u{129C}" .
        "\u{129A}\u{3}\u{2}\u{2}\u{2}\u{129C}\u{129D}\u{3}\u{2}\u{2}\u{2}\u{129D}" .
        "\u{12C9}\u{3}\u{2}\u{2}\u{2}\u{129E}\u{129C}\u{3}\u{2}\u{2}\u{2}\u{129F}" .
        "\u{12A0}\u{7}\u{8D}\u{2}\u{2}\u{12A0}\u{12A2}\u{7}\u{8}\u{2}\u{2}" .
        "\u{12A1}\u{12A3}\u{7}\u{29E}\u{2}\u{2}\u{12A2}\u{12A1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{12A2}\u{12A3}\u{3}\u{2}\u{2}\u{2}\u{12A3}\u{12A4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{12A4}\u{12A5}\u{7}\u{440}\u{2}\u{2}\u{12A5}\u{12A6}\u{7}" .
        "\u{47}\u{2}\u{2}\u{12A6}\u{12A7}\u{7}\u{73}\u{2}\u{2}\u{12A7}\u{12A8}" .
        "\u{7}\u{43}\u{2}\u{2}\u{12A8}\u{12AD}\u{5}\u{204}\u{103}\u{2}\u{12A9}" .
        "\u{12AA}\u{7}\u{440}\u{2}\u{2}\u{12AA}\u{12AC}\u{5}\u{204}\u{103}" .
        "\u{2}\u{12AB}\u{12A9}\u{3}\u{2}\u{2}\u{2}\u{12AC}\u{12AF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{12AD}\u{12AB}\u{3}\u{2}\u{2}\u{2}\u{12AD}\u{12AE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{12AE}\u{12C9}\u{3}\u{2}\u{2}\u{2}\u{12AF}\u{12AD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12B0}\u{12B1}\u{7}\u{8D}\u{2}\u{2}\u{12B1}" .
        "\u{12B6}\u{5}\u{216}\u{10C}\u{2}\u{12B2}\u{12B3}\u{7}\u{440}\u{2}" .
        "\u{2}\u{12B3}\u{12B5}\u{5}\u{216}\u{10C}\u{2}\u{12B4}\u{12B2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{12B5}\u{12B8}\u{3}\u{2}\u{2}\u{2}\u{12B6}\u{12B4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12B6}\u{12B7}\u{3}\u{2}\u{2}\u{2}\u{12B7}\u{12B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12B8}\u{12B6}\u{3}\u{2}\u{2}\u{2}\u{12B9}\u{12BC}" .
        "\u{7}\u{43}\u{2}\u{2}\u{12BA}\u{12BD}\u{5}\u{204}\u{103}\u{2}\u{12BB}" .
        "\u{12BD}\u{5}\u{216}\u{10C}\u{2}\u{12BC}\u{12BA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{12BC}\u{12BB}\u{3}\u{2}\u{2}\u{2}\u{12BD}\u{12C5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{12BE}\u{12C1}\u{7}\u{440}\u{2}\u{2}\u{12BF}\u{12C2}\u{5}\u{204}" .
        "\u{103}\u{2}\u{12C0}\u{12C2}\u{5}\u{216}\u{10C}\u{2}\u{12C1}\u{12BF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C1}\u{12C0}\u{3}\u{2}\u{2}\u{2}\u{12C2}\u{12C4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C3}\u{12BE}\u{3}\u{2}\u{2}\u{2}\u{12C4}\u{12C7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C5}\u{12C3}\u{3}\u{2}\u{2}\u{2}\u{12C5}\u{12C6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C6}\u{12C9}\u{3}\u{2}\u{2}\u{2}\u{12C7}\u{12C5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{1288}\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{129F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12C8}\u{12B0}\u{3}\u{2}\u{2}\u{2}\u{12C9}\u{197}" .
        "\u{3}\u{2}\u{2}\u{2}\u{12CA}\u{12CB}\u{7}\u{8D}\u{2}\u{2}\u{12CB}" .
        "\u{12CC}\u{7}\u{219}\u{2}\u{2}\u{12CC}\u{12CD}\u{7}\u{71}\u{2}\u{2}" .
        "\u{12CD}\u{12CE}\u{5}\u{204}\u{103}\u{2}\u{12CE}\u{12CF}\u{7}\u{43}" .
        "\u{2}\u{2}\u{12CF}\u{12D4}\u{5}\u{204}\u{103}\u{2}\u{12D0}\u{12D1}" .
        "\u{7}\u{440}\u{2}\u{2}\u{12D1}\u{12D3}\u{5}\u{204}\u{103}\u{2}\u{12D2}" .
        "\u{12D0}\u{3}\u{2}\u{2}\u{2}\u{12D3}\u{12D6}\u{3}\u{2}\u{2}\u{2}\u{12D4}" .
        "\u{12D2}\u{3}\u{2}\u{2}\u{2}\u{12D4}\u{12D5}\u{3}\u{2}\u{2}\u{2}\u{12D5}" .
        "\u{199}\u{3}\u{2}\u{2}\u{2}\u{12D6}\u{12D4}\u{3}\u{2}\u{2}\u{2}\u{12D7}" .
        "\u{12D8}\u{7}\u{93}\u{2}\u{2}\u{12D8}\u{12DB}\u{7}\u{20B}\u{2}\u{2}" .
        "\u{12D9}\u{12DA}\u{7}\u{40}\u{2}\u{2}\u{12DA}\u{12DC}\u{5}\u{204}" .
        "\u{103}\u{2}\u{12DB}\u{12D9}\u{3}\u{2}\u{2}\u{2}\u{12DB}\u{12DC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{12DC}\u{12DD}\u{3}\u{2}\u{2}\u{2}\u{12DD}\u{12E0}" .
        "\u{7}\u{435}\u{2}\u{2}\u{12DE}\u{12E1}\u{5}\u{274}\u{13B}\u{2}\u{12DF}" .
        "\u{12E1}\u{7}\u{44D}\u{2}\u{2}\u{12E0}\u{12DE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{12E0}\u{12DF}\u{3}\u{2}\u{2}\u{2}\u{12E1}\u{19B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{12E2}\u{12E3}\u{5}\u{204}\u{103}\u{2}\u{12E3}\u{12E4}\u{5}" .
        "\u{1A4}\u{D3}\u{2}\u{12E4}\u{19D}\u{3}\u{2}\u{2}\u{2}\u{12E5}\u{12E6}" .
        "\u{5}\u{204}\u{103}\u{2}\u{12E6}\u{12E7}\u{7}\u{1AE}\u{2}\u{2}\u{12E7}" .
        "\u{12E8}\u{7}\u{14}\u{2}\u{2}\u{12E8}\u{12E9}\u{7}\u{20B}\u{2}\u{2}" .
        "\u{12E9}\u{12EA}\u{7}\u{44D}\u{2}\u{2}\u{12EA}\u{1302}\u{3}\u{2}\u{2}" .
        "\u{2}\u{12EB}\u{12EC}\u{5}\u{204}\u{103}\u{2}\u{12EC}\u{12EF}\u{7}" .
        "\u{1AE}\u{2}\u{2}\u{12ED}\u{12EE}\u{7}\u{B7}\u{2}\u{2}\u{12EE}\u{12F0}" .
        "\u{5}\u{214}\u{10B}\u{2}\u{12EF}\u{12ED}\u{3}\u{2}\u{2}\u{2}\u{12EF}" .
        "\u{12F0}\u{3}\u{2}\u{2}\u{2}\u{12F0}\u{12F1}\u{3}\u{2}\u{2}\u{2}\u{12F1}" .
        "\u{12F2}\u{7}\u{14}\u{2}\u{2}\u{12F2}\u{12F6}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{12F3}\u{12F4}\u{7}\u{8B}\u{2}\u{2}\u{12F4}\u{12F5}\u{7}\u{24}\u{2}" .
        "\u{2}\u{12F5}\u{12F7}\u{7}\u{20B}\u{2}\u{2}\u{12F6}\u{12F3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{12F6}\u{12F7}\u{3}\u{2}\u{2}\u{2}\u{12F7}\u{1302}\u{3}" .
        "\u{2}\u{2}\u{2}\u{12F8}\u{12F9}\u{5}\u{204}\u{103}\u{2}\u{12F9}\u{12FA}" .
        "\u{7}\u{1AE}\u{2}\u{2}\u{12FA}\u{12FB}\u{7}\u{B7}\u{2}\u{2}\u{12FB}" .
        "\u{12FE}\u{5}\u{214}\u{10B}\u{2}\u{12FC}\u{12FD}\u{7}\u{E}\u{2}\u{2}" .
        "\u{12FD}\u{12FF}\u{7}\u{44D}\u{2}\u{2}\u{12FE}\u{12FC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{12FE}\u{12FF}\u{3}\u{2}\u{2}\u{2}\u{12FF}\u{1302}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1300}\u{1302}\u{5}\u{204}\u{103}\u{2}\u{1301}\u{12E5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1301}\u{12EB}\u{3}\u{2}\u{2}\u{2}\u{1301}\u{12F8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1301}\u{1300}\u{3}\u{2}\u{2}\u{2}\u{1302}\u{19F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1303}\u{130C}\u{7}\u{9F}\u{2}\u{2}\u{1304}" .
        "\u{130C}\u{7}\u{286}\u{2}\u{2}\u{1305}\u{1306}\u{7}\u{15A}\u{2}\u{2}" .
        "\u{1306}\u{130C}\u{7}\u{44D}\u{2}\u{2}\u{1307}\u{1308}\u{7}\u{1BD}" .
        "\u{2}\u{2}\u{1308}\u{130C}\u{7}\u{44D}\u{2}\u{2}\u{1309}\u{130A}\u{7}" .
        "\u{25E}\u{2}\u{2}\u{130A}\u{130C}\u{7}\u{44D}\u{2}\u{2}\u{130B}\u{1303}" .
        "\u{3}\u{2}\u{2}\u{2}\u{130B}\u{1304}\u{3}\u{2}\u{2}\u{2}\u{130B}\u{1305}" .
        "\u{3}\u{2}\u{2}\u{2}\u{130B}\u{1307}\u{3}\u{2}\u{2}\u{2}\u{130B}\u{1309}" .
        "\u{3}\u{2}\u{2}\u{2}\u{130C}\u{1A1}\u{3}\u{2}\u{2}\u{2}\u{130D}\u{130E}" .
        "\u{7}\u{1DF}\u{2}\u{2}\u{130E}\u{1316}\u{5}\u{21C}\u{10F}\u{2}\u{130F}" .
        "\u{1310}\u{7}\u{1E2}\u{2}\u{2}\u{1310}\u{1316}\u{5}\u{21C}\u{10F}" .
        "\u{2}\u{1311}\u{1312}\u{7}\u{1DE}\u{2}\u{2}\u{1312}\u{1316}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1313}\u{1314}\u{7}\u{1E3}\u{2}\u{2}\u{1314}\u{1316}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{1315}\u{130D}\u{3}\u{2}\u{2}\u{2}\u{1315}" .
        "\u{130F}\u{3}\u{2}\u{2}\u{2}\u{1315}\u{1311}\u{3}\u{2}\u{2}\u{2}\u{1315}" .
        "\u{1313}\u{3}\u{2}\u{2}\u{2}\u{1316}\u{1A3}\u{3}\u{2}\u{2}\u{2}\u{1317}" .
        "\u{1318}\u{7}\u{20B}\u{2}\u{2}\u{1318}\u{131F}\u{7}\u{194}\u{2}\u{2}" .
        "\u{1319}\u{1320}\u{7}\u{2A}\u{2}\u{2}\u{131A}\u{1320}\u{7}\u{1F3}" .
        "\u{2}\u{2}\u{131B}\u{131C}\u{7}\u{54}\u{2}\u{2}\u{131C}\u{131D}\u{5}" .
        "\u{21C}\u{10F}\u{2}\u{131D}\u{131E}\u{7}\u{290}\u{2}\u{2}\u{131E}" .
        "\u{1320}\u{3}\u{2}\u{2}\u{2}\u{131F}\u{1319}\u{3}\u{2}\u{2}\u{2}\u{131F}" .
        "\u{131A}\u{3}\u{2}\u{2}\u{2}\u{131F}\u{131B}\u{3}\u{2}\u{2}\u{2}\u{131F}" .
        "\u{1320}\u{3}\u{2}\u{2}\u{2}\u{1320}\u{1A5}\u{3}\u{2}\u{2}\u{2}\u{1321}" .
        "\u{1322}\u{7}\u{140}\u{2}\u{2}\u{1322}\u{1323}\u{9}\u{40}\u{2}\u{2}" .
        "\u{1323}\u{1A7}\u{3}\u{2}\u{2}\u{2}\u{1324}\u{1329}\u{5}\u{1AA}\u{D6}" .
        "\u{2}\u{1325}\u{1326}\u{7}\u{43E}\u{2}\u{2}\u{1326}\u{1327}\u{5}\u{236}" .
        "\u{11C}\u{2}\u{1327}\u{1328}\u{7}\u{43F}\u{2}\u{2}\u{1328}\u{132A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1329}\u{1325}\u{3}\u{2}\u{2}\u{2}\u{1329}\u{132A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{132A}\u{1A9}\u{3}\u{2}\u{2}\u{2}\u{132B}\u{132D}" .
        "\u{7}\u{8}\u{2}\u{2}\u{132C}\u{132E}\u{7}\u{29E}\u{2}\u{2}\u{132D}" .
        "\u{132C}\u{3}\u{2}\u{2}\u{2}\u{132D}\u{132E}\u{3}\u{2}\u{2}\u{2}\u{132E}" .
        "\u{137B}\u{3}\u{2}\u{2}\u{2}\u{132F}\u{1331}\u{7}\u{9}\u{2}\u{2}\u{1330}" .
        "\u{1332}\u{7}\u{297}\u{2}\u{2}\u{1331}\u{1330}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1331}\u{1332}\u{3}\u{2}\u{2}\u{2}\u{1332}\u{137B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1333}\u{133B}\u{7}\u{22}\u{2}\u{2}\u{1334}\u{1335}\u{7}\u{267}" .
        "\u{2}\u{2}\u{1335}\u{133C}\u{7}\u{296}\u{2}\u{2}\u{1336}\u{133C}\u{7}" .
        "\u{297}\u{2}\u{2}\u{1337}\u{133C}\u{7}\u{27D}\u{2}\u{2}\u{1338}\u{133C}" .
        "\u{7}\u{277}\u{2}\u{2}\u{1339}\u{133C}\u{7}\u{265}\u{2}\u{2}\u{133A}" .
        "\u{133C}\u{7}\u{234}\u{2}\u{2}\u{133B}\u{1334}\u{3}\u{2}\u{2}\u{2}" .
        "\u{133B}\u{1336}\u{3}\u{2}\u{2}\u{2}\u{133B}\u{1337}\u{3}\u{2}\u{2}" .
        "\u{2}\u{133B}\u{1338}\u{3}\u{2}\u{2}\u{2}\u{133B}\u{1339}\u{3}\u{2}" .
        "\u{2}\u{2}\u{133B}\u{133A}\u{3}\u{2}\u{2}\u{2}\u{133B}\u{133C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{133C}\u{137B}\u{3}\u{2}\u{2}\u{2}\u{133D}\u{137B}" .
        "\u{7}\u{2C}\u{2}\u{2}\u{133E}\u{1340}\u{7}\u{33}\u{2}\u{2}\u{133F}" .
        "\u{1341}\u{7}\u{234}\u{2}\u{2}\u{1340}\u{133F}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1340}\u{1341}\u{3}\u{2}\u{2}\u{2}\u{1341}\u{137B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1342}\u{137B}\u{7}\u{18F}\u{2}\u{2}\u{1343}\u{137B}\u{7}\u{298}" .
        "\u{2}\u{2}\u{1344}\u{137B}\u{7}\u{299}\u{2}\u{2}\u{1345}\u{1346}\u{7}" .
        "\u{47}\u{2}\u{2}\u{1346}\u{137B}\u{7}\u{73}\u{2}\u{2}\u{1347}\u{137B}" .
        "\u{7}\u{4F}\u{2}\u{2}\u{1348}\u{137B}\u{7}\u{53}\u{2}\u{2}\u{1349}" .
        "\u{134A}\u{7}\u{64}\u{2}\u{2}\u{134A}\u{137B}\u{7}\u{296}\u{2}\u{2}" .
        "\u{134B}\u{137B}\u{7}\u{29A}\u{2}\u{2}\u{134C}\u{137B}\u{7}\u{219}" .
        "\u{2}\u{2}\u{134D}\u{137B}\u{7}\u{82}\u{2}\u{2}\u{134E}\u{137B}\u{7}" .
        "\u{29B}\u{2}\u{2}\u{134F}\u{1350}\u{7}\u{22E}\u{2}\u{2}\u{1350}\u{137B}" .
        "\u{9}\u{41}\u{2}\u{2}\u{1351}\u{137B}\u{7}\u{92}\u{2}\u{2}\u{1352}" .
        "\u{1353}\u{7}\u{95}\u{2}\u{2}\u{1353}\u{137B}\u{9}\u{42}\u{2}\u{2}" .
        "\u{1354}\u{137B}\u{7}\u{29C}\u{2}\u{2}\u{1355}\u{137B}\u{7}\u{29D}" .
        "\u{2}\u{2}\u{1356}\u{137B}\u{7}\u{A8}\u{2}\u{2}\u{1357}\u{137B}\u{7}" .
        "\u{AF}\u{2}\u{2}\u{1358}\u{137B}\u{7}\u{B0}\u{2}\u{2}\u{1359}\u{137B}" .
        "\u{7}\u{29F}\u{2}\u{2}\u{135A}\u{137B}\u{7}\u{2A0}\u{2}\u{2}\u{135B}" .
        "\u{137B}\u{7}\u{2A1}\u{2}\u{2}\u{135C}\u{137B}\u{7}\u{2A2}\u{2}\u{2}" .
        "\u{135D}\u{137B}\u{7}\u{2A3}\u{2}\u{2}\u{135E}\u{137B}\u{7}\u{2A4}" .
        "\u{2}\u{2}\u{135F}\u{137B}\u{7}\u{2A5}\u{2}\u{2}\u{1360}\u{137B}\u{7}" .
        "\u{2A6}\u{2}\u{2}\u{1361}\u{137B}\u{7}\u{2A7}\u{2}\u{2}\u{1362}\u{137B}" .
        "\u{7}\u{2A8}\u{2}\u{2}\u{1363}\u{137B}\u{7}\u{2A9}\u{2}\u{2}\u{1364}" .
        "\u{137B}\u{7}\u{2AA}\u{2}\u{2}\u{1365}\u{137B}\u{7}\u{2AB}\u{2}\u{2}" .
        "\u{1366}\u{137B}\u{7}\u{2AC}\u{2}\u{2}\u{1367}\u{137B}\u{7}\u{2AD}" .
        "\u{2}\u{2}\u{1368}\u{137B}\u{7}\u{2AE}\u{2}\u{2}\u{1369}\u{137B}\u{7}" .
        "\u{2AF}\u{2}\u{2}\u{136A}\u{137B}\u{7}\u{2B0}\u{2}\u{2}\u{136B}\u{137B}" .
        "\u{7}\u{2B1}\u{2}\u{2}\u{136C}\u{137B}\u{7}\u{2B2}\u{2}\u{2}\u{136D}" .
        "\u{137B}\u{7}\u{2B3}\u{2}\u{2}\u{136E}\u{137B}\u{7}\u{2B4}\u{2}\u{2}" .
        "\u{136F}\u{137B}\u{7}\u{2B5}\u{2}\u{2}\u{1370}\u{137B}\u{7}\u{2B6}" .
        "\u{2}\u{2}\u{1371}\u{137B}\u{7}\u{2B7}\u{2}\u{2}\u{1372}\u{137B}\u{7}" .
        "\u{2B8}\u{2}\u{2}\u{1373}\u{137B}\u{7}\u{2B9}\u{2}\u{2}\u{1374}\u{137B}" .
        "\u{7}\u{2BA}\u{2}\u{2}\u{1375}\u{137B}\u{7}\u{407}\u{2}\u{2}\u{1376}" .
        "\u{137B}\u{7}\u{2BB}\u{2}\u{2}\u{1377}\u{137B}\u{7}\u{2BC}\u{2}\u{2}" .
        "\u{1378}\u{137B}\u{7}\u{2BD}\u{2}\u{2}\u{1379}\u{137B}\u{7}\u{2BE}" .
        "\u{2}\u{2}\u{137A}\u{132B}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{132F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{137A}\u{1333}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{133D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{133E}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1342}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1343}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1344}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1345}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1347}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1348}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1349}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{134B}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{134C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{134D}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{134E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{134F}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1351}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1352}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1354}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1355}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1356}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1357}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1358}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1359}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135B}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135D}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{135F}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1360}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1361}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1362}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1363}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1364}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1365}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1366}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1367}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1368}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1369}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136B}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136D}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{136F}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1370}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1371}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1372}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1373}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1374}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1375}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1376}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1377}\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1378}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137A}\u{1379}\u{3}\u{2}\u{2}\u{2}\u{137B}\u{1AB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{137C}\u{138D}\u{7}\u{42E}\u{2}\u{2}\u{137D}" .
        "\u{137E}\u{7}\u{42E}\u{2}\u{2}\u{137E}\u{137F}\u{7}\u{43D}\u{2}\u{2}" .
        "\u{137F}\u{138D}\u{7}\u{42E}\u{2}\u{2}\u{1380}\u{1381}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{1381}\u{1382}\u{7}\u{43D}\u{2}\u{2}\u{1382}\u{1383}" .
        "\u{7}\u{42E}\u{2}\u{2}\u{1383}\u{138D}\u{3}\u{2}\u{2}\u{2}\u{1384}" .
        "\u{1385}\u{5}\u{216}\u{10C}\u{2}\u{1385}\u{1386}\u{7}\u{43D}\u{2}" .
        "\u{2}\u{1386}\u{1387}\u{5}\u{216}\u{10C}\u{2}\u{1387}\u{138D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1388}\u{1389}\u{5}\u{216}\u{10C}\u{2}\u{1389}\u{138A}" .
        "\u{5}\u{21A}\u{10E}\u{2}\u{138A}\u{138D}\u{3}\u{2}\u{2}\u{2}\u{138B}" .
        "\u{138D}\u{5}\u{216}\u{10C}\u{2}\u{138C}\u{137C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{138C}\u{137D}\u{3}\u{2}\u{2}\u{2}\u{138C}\u{1380}\u{3}\u{2}\u{2}" .
        "\u{2}\u{138C}\u{1384}\u{3}\u{2}\u{2}\u{2}\u{138C}\u{1388}\u{3}\u{2}" .
        "\u{2}\u{2}\u{138C}\u{138B}\u{3}\u{2}\u{2}\u{2}\u{138D}\u{1AD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{138E}\u{138F}\u{5}\u{204}\u{103}\u{2}\u{138F}\u{1390}" .
        "\u{7}\u{A6}\u{2}\u{2}\u{1390}\u{1391}\u{5}\u{204}\u{103}\u{2}\u{1391}" .
        "\u{1AF}\u{3}\u{2}\u{2}\u{2}\u{1392}\u{1394}\u{7}\u{B}\u{2}\u{2}\u{1393}" .
        "\u{1395}\u{9}\u{43}\u{2}\u{2}\u{1394}\u{1393}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1394}\u{1395}\u{3}\u{2}\u{2}\u{2}\u{1395}\u{1396}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1396}\u{1397}\u{7}\u{A3}\u{2}\u{2}\u{1397}\u{13A9}\u{5}\u{238}" .
        "\u{11D}\u{2}\u{1398}\u{1399}\u{7}\u{AF}\u{2}\u{2}\u{1399}\u{139A}" .
        "\u{7}\u{4B}\u{2}\u{2}\u{139A}\u{139B}\u{7}\u{71}\u{2}\u{2}\u{139B}" .
        "\u{13A0}\u{5}\u{200}\u{101}\u{2}\u{139C}\u{139D}\u{7}\u{440}\u{2}" .
        "\u{2}\u{139D}\u{139F}\u{5}\u{200}\u{101}\u{2}\u{139E}\u{139C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{139F}\u{13A2}\u{3}\u{2}\u{2}\u{2}\u{13A0}\u{139E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13A0}\u{13A1}\u{3}\u{2}\u{2}\u{2}\u{13A1}\u{13A7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13A2}\u{13A0}\u{3}\u{2}\u{2}\u{2}\u{13A3}\u{13A4}" .
        "\u{7}\u{B7}\u{2}\u{2}\u{13A4}\u{13A5}\u{5}\u{21C}\u{10F}\u{2}\u{13A5}" .
        "\u{13A6}\u{7}\u{13}\u{2}\u{2}\u{13A6}\u{13A8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{13A7}\u{13A3}\u{3}\u{2}\u{2}\u{2}\u{13A7}\u{13A8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{13A8}\u{13AA}\u{3}\u{2}\u{2}\u{2}\u{13A9}\u{1398}\u{3}\u{2}" .
        "\u{2}\u{2}\u{13A9}\u{13AA}\u{3}\u{2}\u{2}\u{2}\u{13AA}\u{13B6}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13AB}\u{13AC}\u{7}\u{33}\u{2}\u{2}\u{13AC}\u{13AD}" .
        "\u{7}\u{4B}\u{2}\u{2}\u{13AD}\u{13AE}\u{7}\u{71}\u{2}\u{2}\u{13AE}" .
        "\u{13B3}\u{5}\u{200}\u{101}\u{2}\u{13AF}\u{13B0}\u{7}\u{440}\u{2}" .
        "\u{2}\u{13B0}\u{13B2}\u{5}\u{200}\u{101}\u{2}\u{13B1}\u{13AF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13B2}\u{13B5}\u{3}\u{2}\u{2}\u{2}\u{13B3}\u{13B1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13B3}\u{13B4}\u{3}\u{2}\u{2}\u{2}\u{13B4}\u{13B7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13B5}\u{13B3}\u{3}\u{2}\u{2}\u{2}\u{13B6}\u{13AB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13B6}\u{13B7}\u{3}\u{2}\u{2}\u{2}\u{13B7}\u{1B1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13B8}\u{13B9}\u{7}\u{1B}\u{2}\u{2}\u{13B9}" .
        "\u{13BA}\u{7}\u{A3}\u{2}\u{2}\u{13BA}\u{13BE}\u{5}\u{238}\u{11D}\u{2}" .
        "\u{13BB}\u{13BD}\u{5}\u{1BA}\u{DE}\u{2}\u{13BC}\u{13BB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{13BD}\u{13C0}\u{3}\u{2}\u{2}\u{2}\u{13BE}\u{13BC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13BE}\u{13BF}\u{3}\u{2}\u{2}\u{2}\u{13BF}\u{1B3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13C0}\u{13BE}\u{3}\u{2}\u{2}\u{2}\u{13C1}\u{13C2}" .
        "\u{7}\u{158}\u{2}\u{2}\u{13C2}\u{13C3}\u{7}\u{A3}\u{2}\u{2}\u{13C3}" .
        "\u{13C5}\u{5}\u{238}\u{11D}\u{2}\u{13C4}\u{13C6}\u{9}\u{44}\u{2}\u{2}" .
        "\u{13C5}\u{13C4}\u{3}\u{2}\u{2}\u{2}\u{13C5}\u{13C6}\u{3}\u{2}\u{2}" .
        "\u{2}\u{13C6}\u{1B5}\u{3}\u{2}\u{2}\u{2}\u{13C7}\u{13C9}\u{7}\u{72}" .
        "\u{2}\u{2}\u{13C8}\u{13CA}\u{9}\u{43}\u{2}\u{2}\u{13C9}\u{13C8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13C9}\u{13CA}\u{3}\u{2}\u{2}\u{2}\u{13CA}\u{13CB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13CB}\u{13CC}\u{9}\u{45}\u{2}\u{2}\u{13CC}" .
        "\u{13CD}\u{5}\u{23A}\u{11E}\u{2}\u{13CD}\u{1B7}\u{3}\u{2}\u{2}\u{2}" .
        "\u{13CE}\u{13D0}\u{7}\u{226}\u{2}\u{2}\u{13CF}\u{13D1}\u{9}\u{43}" .
        "\u{2}\u{2}\u{13D0}\u{13CF}\u{3}\u{2}\u{2}\u{2}\u{13D0}\u{13D1}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13D1}\u{13D2}\u{3}\u{2}\u{2}\u{2}\u{13D2}\u{13D3}" .
        "\u{7}\u{A3}\u{2}\u{2}\u{13D3}\u{13D5}\u{5}\u{238}\u{11D}\u{2}\u{13D4}" .
        "\u{13D6}\u{7}\u{21B}\u{2}\u{2}\u{13D5}\u{13D4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{13D5}\u{13D6}\u{3}\u{2}\u{2}\u{2}\u{13D6}\u{13D8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{13D7}\u{13D9}\u{7}\u{196}\u{2}\u{2}\u{13D8}\u{13D7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{13D8}\u{13D9}\u{3}\u{2}\u{2}\u{2}\u{13D9}\u{13DB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{13DA}\u{13DC}\u{7}\u{278}\u{2}\u{2}\u{13DB}\u{13DA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13DB}\u{13DC}\u{3}\u{2}\u{2}\u{2}\u{13DC}\u{1B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13DD}\u{13DE}\u{7}\u{40}\u{2}\u{2}\u{13DE}" .
        "\u{13E5}\u{7}\u{276}\u{2}\u{2}\u{13DF}\u{13E5}\u{7}\u{21B}\u{2}\u{2}" .
        "\u{13E0}\u{13E5}\u{7}\u{198}\u{2}\u{2}\u{13E1}\u{13E5}\u{7}\u{1E4}" .
        "\u{2}\u{2}\u{13E2}\u{13E5}\u{7}\u{196}\u{2}\u{2}\u{13E3}\u{13E5}\u{7}" .
        "\u{156}\u{2}\u{2}\u{13E4}\u{13DD}\u{3}\u{2}\u{2}\u{2}\u{13E4}\u{13DF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13E4}\u{13E0}\u{3}\u{2}\u{2}\u{2}\u{13E4}\u{13E1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13E4}\u{13E2}\u{3}\u{2}\u{2}\u{2}\u{13E4}\u{13E3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13E5}\u{1BB}\u{3}\u{2}\u{2}\u{2}\u{13E6}\u{13E8}" .
        "\u{7}\u{22}\u{2}\u{2}\u{13E7}\u{13E9}\u{7}\u{143}\u{2}\u{2}\u{13E8}" .
        "\u{13E7}\u{3}\u{2}\u{2}\u{2}\u{13E8}\u{13E9}\u{3}\u{2}\u{2}\u{2}\u{13E9}" .
        "\u{13EA}\u{3}\u{2}\u{2}\u{2}\u{13EA}\u{13EB}\u{7}\u{1A4}\u{2}\u{2}" .
        "\u{13EB}\u{13EC}\u{5}\u{216}\u{10C}\u{2}\u{13EC}\u{13ED}\u{7}\u{233}" .
        "\u{2}\u{2}\u{13ED}\u{13EE}\u{9}\u{46}\u{2}\u{2}\u{13EE}\u{13EF}\u{7}" .
        "\u{249}\u{2}\u{2}\u{13EF}\u{13F0}\u{7}\u{44D}\u{2}\u{2}\u{13F0}\u{1BD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{13F1}\u{13F2}\u{7}\u{1B5}\u{2}\u{2}\u{13F2}" .
        "\u{13F3}\u{7}\u{20D}\u{2}\u{2}\u{13F3}\u{13F4}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{13F4}\u{13F5}\u{7}\u{249}\u{2}\u{2}\u{13F5}\u{13F6}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{13F6}\u{1BF}\u{3}\u{2}\u{2}\u{2}\u{13F7}\u{13F8}\u{7}" .
        "\u{273}\u{2}\u{2}\u{13F8}\u{13F9}\u{7}\u{20D}\u{2}\u{2}\u{13F9}\u{13FA}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{13FA}\u{1C1}\u{3}\u{2}\u{2}\u{2}\u{13FB}" .
        "\u{13FC}\u{7}\u{93}\u{2}\u{2}\u{13FC}\u{13FD}\u{5}\u{1C6}\u{E4}\u{2}" .
        "\u{13FD}\u{13FE}\u{9}\u{47}\u{2}\u{2}\u{13FE}\u{1406}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{13FF}\u{1400}\u{7}\u{440}\u{2}\u{2}\u{1400}\u{1401}" .
        "\u{5}\u{1C6}\u{E4}\u{2}\u{1401}\u{1402}\u{9}\u{47}\u{2}\u{2}\u{1402}" .
        "\u{1403}\u{5}\u{27A}\u{13E}\u{2}\u{1403}\u{1405}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1404}\u{13FF}\u{3}\u{2}\u{2}\u{2}\u{1405}\u{1408}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1406}\u{1404}\u{3}\u{2}\u{2}\u{2}\u{1406}\u{1407}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1407}\u{142F}\u{3}\u{2}\u{2}\u{2}\u{1408}\u{1406}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1409}\u{140D}\u{7}\u{93}\u{2}\u{2}\u{140A}\u{140B}" .
        "\u{7}\u{1A}\u{2}\u{2}\u{140B}\u{140E}\u{7}\u{93}\u{2}\u{2}\u{140C}" .
        "\u{140E}\u{7}\u{31E}\u{2}\u{2}\u{140D}\u{140A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{140D}\u{140C}\u{3}\u{2}\u{2}\u{2}\u{140E}\u{1411}\u{3}\u{2}\u{2}" .
        "\u{2}\u{140F}\u{1412}\u{5}\u{208}\u{105}\u{2}\u{1410}\u{1412}\u{7}" .
        "\u{2A}\u{2}\u{2}\u{1411}\u{140F}\u{3}\u{2}\u{2}\u{2}\u{1411}\u{1410}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1412}\u{142F}\u{3}\u{2}\u{2}\u{2}\u{1413}\u{1414}" .
        "\u{7}\u{93}\u{2}\u{2}\u{1414}\u{141B}\u{7}\u{1F1}\u{2}\u{2}\u{1415}" .
        "\u{1418}\u{5}\u{208}\u{105}\u{2}\u{1416}\u{1417}\u{7}\u{1C}\u{2}\u{2}" .
        "\u{1417}\u{1419}\u{5}\u{20A}\u{106}\u{2}\u{1418}\u{1416}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1418}\u{1419}\u{3}\u{2}\u{2}\u{2}\u{1419}\u{141C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{141A}\u{141C}\u{7}\u{2A}\u{2}\u{2}\u{141B}\u{1415}" .
        "\u{3}\u{2}\u{2}\u{2}\u{141B}\u{141A}\u{3}\u{2}\u{2}\u{2}\u{141C}\u{142F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{141D}\u{142F}\u{5}\u{19A}\u{CE}\u{2}\u{141E}" .
        "\u{142F}\u{5}\u{11C}\u{8F}\u{2}\u{141F}\u{142F}\u{5}\u{11A}\u{8E}" .
        "\u{2}\u{1420}\u{1421}\u{7}\u{93}\u{2}\u{2}\u{1421}\u{1422}\u{5}\u{1FC}" .
        "\u{FF}\u{2}\u{1422}\u{1423}\u{9}\u{47}\u{2}\u{2}\u{1423}\u{142B}\u{5}" .
        "\u{27A}\u{13E}\u{2}\u{1424}\u{1425}\u{7}\u{440}\u{2}\u{2}\u{1425}" .
        "\u{1426}\u{5}\u{1FC}\u{FF}\u{2}\u{1426}\u{1427}\u{9}\u{47}\u{2}\u{2}" .
        "\u{1427}\u{1428}\u{5}\u{27A}\u{13E}\u{2}\u{1428}\u{142A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1429}\u{1424}\u{3}\u{2}\u{2}\u{2}\u{142A}\u{142D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{142B}\u{1429}\u{3}\u{2}\u{2}\u{2}\u{142B}\u{142C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{142C}\u{142F}\u{3}\u{2}\u{2}\u{2}\u{142D}\u{142B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{142E}\u{13FB}\u{3}\u{2}\u{2}\u{2}\u{142E}\u{1409}" .
        "\u{3}\u{2}\u{2}\u{2}\u{142E}\u{1413}\u{3}\u{2}\u{2}\u{2}\u{142E}\u{141D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{142E}\u{141E}\u{3}\u{2}\u{2}\u{2}\u{142E}\u{141F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{142E}\u{1420}\u{3}\u{2}\u{2}\u{2}\u{142F}\u{1C3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1430}\u{1431}\u{7}\u{95}\u{2}\u{2}\u{1431}" .
        "\u{1432}\u{9}\u{35}\u{2}\u{2}\u{1432}\u{14C8}\u{7}\u{1C8}\u{2}\u{2}" .
        "\u{1433}\u{1434}\u{7}\u{95}\u{2}\u{2}\u{1434}\u{1435}\u{9}\u{48}\u{2}" .
        "\u{2}\u{1435}\u{1438}\u{7}\u{190}\u{2}\u{2}\u{1436}\u{1437}\u{7}\u{4E}" .
        "\u{2}\u{2}\u{1437}\u{1439}\u{7}\u{44D}\u{2}\u{2}\u{1438}\u{1436}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1438}\u{1439}\u{3}\u{2}\u{2}\u{2}\u{1439}\u{143C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{143A}\u{143B}\u{7}\u{43}\u{2}\u{2}\u{143B}" .
        "\u{143D}\u{5}\u{21C}\u{10F}\u{2}\u{143C}\u{143A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{143C}\u{143D}\u{3}\u{2}\u{2}\u{2}\u{143D}\u{1445}\u{3}\u{2}\u{2}" .
        "\u{2}\u{143E}\u{1442}\u{7}\u{60}\u{2}\u{2}\u{143F}\u{1440}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1440}\u{1441}\u{7}\u{440}\u{2}\u{2}\u{1441}\u{1443}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1442}\u{143F}\u{3}\u{2}\u{2}\u{2}\u{1442}\u{1443}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1443}\u{1444}\u{3}\u{2}\u{2}\u{2}\u{1444}\u{1446}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{1445}\u{143E}\u{3}\u{2}\u{2}\u{2}\u{1445}" .
        "\u{1446}\u{3}\u{2}\u{2}\u{2}\u{1446}\u{14C8}\u{3}\u{2}\u{2}\u{2}\u{1447}" .
        "\u{1448}\u{7}\u{95}\u{2}\u{2}\u{1448}\u{144A}\u{5}\u{1C8}\u{E5}\u{2}" .
        "\u{1449}\u{144B}\u{5}\u{1CA}\u{E6}\u{2}\u{144A}\u{1449}\u{3}\u{2}" .
        "\u{2}\u{2}\u{144A}\u{144B}\u{3}\u{2}\u{2}\u{2}\u{144B}\u{14C8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{144C}\u{144E}\u{7}\u{95}\u{2}\u{2}\u{144D}\u{144F}" .
        "\u{7}\u{1A3}\u{2}\u{2}\u{144E}\u{144D}\u{3}\u{2}\u{2}\u{2}\u{144E}" .
        "\u{144F}\u{3}\u{2}\u{2}\u{2}\u{144F}\u{1450}\u{3}\u{2}\u{2}\u{2}\u{1450}" .
        "\u{1451}\u{9}\u{27}\u{2}\u{2}\u{1451}\u{1452}\u{9}\u{49}\u{2}\u{2}" .
        "\u{1452}\u{1455}\u{5}\u{1FE}\u{100}\u{2}\u{1453}\u{1454}\u{9}\u{49}" .
        "\u{2}\u{2}\u{1454}\u{1456}\u{5}\u{216}\u{10C}\u{2}\u{1455}\u{1453}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1455}\u{1456}\u{3}\u{2}\u{2}\u{2}\u{1456}\u{1458}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1457}\u{1459}\u{5}\u{1CA}\u{E6}\u{2}\u{1458}" .
        "\u{1457}\u{3}\u{2}\u{2}\u{2}\u{1458}\u{1459}\u{3}\u{2}\u{2}\u{2}\u{1459}" .
        "\u{14C8}\u{3}\u{2}\u{2}\u{2}\u{145A}\u{145B}\u{7}\u{95}\u{2}\u{2}" .
        "\u{145B}\u{145C}\u{7}\u{22}\u{2}\u{2}\u{145C}\u{145E}\u{9}\u{2}\u{2}" .
        "\u{2}\u{145D}\u{145F}\u{5}\u{250}\u{129}\u{2}\u{145E}\u{145D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{145E}\u{145F}\u{3}\u{2}\u{2}\u{2}\u{145F}\u{1460}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1460}\u{14C8}\u{5}\u{216}\u{10C}\u{2}\u{1461}" .
        "\u{1462}\u{7}\u{95}\u{2}\u{2}\u{1462}\u{1463}\u{7}\u{22}\u{2}\u{2}" .
        "\u{1463}\u{1464}\u{9}\u{4A}\u{2}\u{2}\u{1464}\u{14C8}\u{5}\u{1FC}" .
        "\u{FF}\u{2}\u{1465}\u{1466}\u{7}\u{95}\u{2}\u{2}\u{1466}\u{1467}\u{7}" .
        "\u{22}\u{2}\u{2}\u{1467}\u{1468}\u{7}\u{277}\u{2}\u{2}\u{1468}\u{14C8}" .
        "\u{5}\u{204}\u{103}\u{2}\u{1469}\u{146A}\u{7}\u{95}\u{2}\u{2}\u{146A}" .
        "\u{146B}\u{7}\u{189}\u{2}\u{2}\u{146B}\u{146C}\u{5}\u{20C}\u{107}" .
        "\u{2}\u{146C}\u{146D}\u{9}\u{4B}\u{2}\u{2}\u{146D}\u{14C8}\u{3}\u{2}" .
        "\u{2}\u{2}\u{146E}\u{146F}\u{7}\u{95}\u{2}\u{2}\u{146F}\u{14C8}\u{5}" .
        "\u{1CC}\u{E7}\u{2}\u{1470}\u{1471}\u{7}\u{95}\u{2}\u{2}\u{1471}\u{1472}" .
        "\u{9}\u{4C}\u{2}\u{2}\u{1472}\u{1476}\u{7}\u{60}\u{2}\u{2}\u{1473}" .
        "\u{1474}\u{5}\u{21C}\u{10F}\u{2}\u{1474}\u{1475}\u{7}\u{440}\u{2}" .
        "\u{2}\u{1475}\u{1477}\u{3}\u{2}\u{2}\u{2}\u{1476}\u{1473}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1476}\u{1477}\u{3}\u{2}\u{2}\u{2}\u{1477}\u{1478}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1478}\u{14C8}\u{5}\u{21C}\u{10F}\u{2}\u{1479}\u{147A}" .
        "\u{7}\u{95}\u{2}\u{2}\u{147A}\u{147B}\u{7}\u{116}\u{2}\u{2}\u{147B}" .
        "\u{147C}\u{7}\u{43E}\u{2}\u{2}\u{147C}\u{147D}\u{7}\u{42E}\u{2}\u{2}" .
        "\u{147D}\u{147E}\u{7}\u{43F}\u{2}\u{2}\u{147E}\u{14C8}\u{9}\u{4C}" .
        "\u{2}\u{2}\u{147F}\u{1480}\u{7}\u{95}\u{2}\u{2}\u{1480}\u{1483}\u{5}" .
        "\u{1CE}\u{E8}\u{2}\u{1481}\u{1482}\u{9}\u{49}\u{2}\u{2}\u{1482}\u{1484}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{1483}\u{1481}\u{3}\u{2}\u{2}\u{2}\u{1483}" .
        "\u{1484}\u{3}\u{2}\u{2}\u{2}\u{1484}\u{1486}\u{3}\u{2}\u{2}\u{2}\u{1485}" .
        "\u{1487}\u{5}\u{1CA}\u{E6}\u{2}\u{1486}\u{1485}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1486}\u{1487}\u{3}\u{2}\u{2}\u{2}\u{1487}\u{14C8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1488}\u{1489}\u{7}\u{95}\u{2}\u{2}\u{1489}\u{148A}\u{9}\u{4D}" .
        "\u{2}\u{2}\u{148A}\u{148B}\u{7}\u{15F}\u{2}\u{2}\u{148B}\u{14C8}\u{5}" .
        "\u{1FC}\u{FF}\u{2}\u{148C}\u{148D}\u{7}\u{95}\u{2}\u{2}\u{148D}\u{1490}" .
        "\u{7}\u{1A7}\u{2}\u{2}\u{148E}\u{148F}\u{7}\u{40}\u{2}\u{2}\u{148F}" .
        "\u{1491}\u{5}\u{204}\u{103}\u{2}\u{1490}\u{148E}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1490}\u{1491}\u{3}\u{2}\u{2}\u{2}\u{1491}\u{14C8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1492}\u{1493}\u{7}\u{95}\u{2}\u{2}\u{1493}\u{1494}\u{9}\u{4E}" .
        "\u{2}\u{2}\u{1494}\u{1495}\u{9}\u{49}\u{2}\u{2}\u{1495}\u{1498}\u{5}" .
        "\u{1FE}\u{100}\u{2}\u{1496}\u{1497}\u{9}\u{49}\u{2}\u{2}\u{1497}\u{1499}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{1498}\u{1496}\u{3}\u{2}\u{2}\u{2}\u{1498}" .
        "\u{1499}\u{3}\u{2}\u{2}\u{2}\u{1499}\u{149C}\u{3}\u{2}\u{2}\u{2}\u{149A}" .
        "\u{149B}\u{7}\u{B5}\u{2}\u{2}\u{149B}\u{149D}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{149C}\u{149A}\u{3}\u{2}\u{2}\u{2}\u{149C}\u{149D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{149D}\u{14C8}\u{3}\u{2}\u{2}\u{2}\u{149E}\u{149F}\u{7}\u{95}" .
        "\u{2}\u{2}\u{149F}\u{14A0}\u{7}\u{201}\u{2}\u{2}\u{14A0}\u{14A3}\u{7}" .
        "\u{296}\u{2}\u{2}\u{14A1}\u{14A2}\u{9}\u{49}\u{2}\u{2}\u{14A2}\u{14A4}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{14A3}\u{14A1}\u{3}\u{2}\u{2}\u{2}\u{14A3}" .
        "\u{14A4}\u{3}\u{2}\u{2}\u{2}\u{14A4}\u{14A6}\u{3}\u{2}\u{2}\u{2}\u{14A5}" .
        "\u{14A7}\u{5}\u{1CA}\u{E6}\u{2}\u{14A6}\u{14A5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{14A6}\u{14A7}\u{3}\u{2}\u{2}\u{2}\u{14A7}\u{14C8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{14A8}\u{14A9}\u{7}\u{95}\u{2}\u{2}\u{14A9}\u{14AA}\u{7}\u{217}" .
        "\u{2}\u{2}\u{14AA}\u{14AF}\u{5}\u{1D0}\u{E9}\u{2}\u{14AB}\u{14AC}" .
        "\u{7}\u{440}\u{2}\u{2}\u{14AC}\u{14AE}\u{5}\u{1D0}\u{E9}\u{2}\u{14AD}" .
        "\u{14AB}\u{3}\u{2}\u{2}\u{2}\u{14AE}\u{14B1}\u{3}\u{2}\u{2}\u{2}\u{14AF}" .
        "\u{14AD}\u{3}\u{2}\u{2}\u{2}\u{14AF}\u{14B0}\u{3}\u{2}\u{2}\u{2}\u{14B0}" .
        "\u{14B5}\u{3}\u{2}\u{2}\u{2}\u{14B1}\u{14AF}\u{3}\u{2}\u{2}\u{2}\u{14B2}" .
        "\u{14B3}\u{7}\u{40}\u{2}\u{2}\u{14B3}\u{14B4}\u{7}\u{21A}\u{2}\u{2}" .
        "\u{14B4}\u{14B6}\u{5}\u{21C}\u{10F}\u{2}\u{14B5}\u{14B2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{14B5}\u{14B6}\u{3}\u{2}\u{2}\u{2}\u{14B6}\u{14B7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{14B7}\u{14BB}\u{7}\u{60}\u{2}\u{2}\u{14B8}\u{14B9}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{14B9}\u{14BA}\u{7}\u{440}\u{2}\u{2}\u{14BA}" .
        "\u{14BC}\u{3}\u{2}\u{2}\u{2}\u{14BB}\u{14B8}\u{3}\u{2}\u{2}\u{2}\u{14BB}" .
        "\u{14BC}\u{3}\u{2}\u{2}\u{2}\u{14BC}\u{14BD}\u{3}\u{2}\u{2}\u{2}\u{14BD}" .
        "\u{14BE}\u{5}\u{21C}\u{10F}\u{2}\u{14BE}\u{14C8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{14BF}\u{14C0}\u{7}\u{95}\u{2}\u{2}\u{14C0}\u{14C1}\u{7}\u{244}" .
        "\u{2}\u{2}\u{14C1}\u{14C5}\u{7}\u{258}\u{2}\u{2}\u{14C2}\u{14C3}\u{7}" .
        "\u{40}\u{2}\u{2}\u{14C3}\u{14C4}\u{7}\u{157}\u{2}\u{2}\u{14C4}\u{14C6}" .
        "\u{7}\u{44D}\u{2}\u{2}\u{14C5}\u{14C2}\u{3}\u{2}\u{2}\u{2}\u{14C5}" .
        "\u{14C6}\u{3}\u{2}\u{2}\u{2}\u{14C6}\u{14C8}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1430}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{1433}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1447}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{144C}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{145A}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{1461}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1465}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{1469}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{146E}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{1470}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1479}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{147F}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1488}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{148C}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{1492}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{149E}\u{3}\u{2}\u{2}\u{2}\u{14C7}" .
        "\u{14A8}\u{3}\u{2}\u{2}\u{2}\u{14C7}\u{14BF}\u{3}\u{2}\u{2}\u{2}\u{14C8}" .
        "\u{1C5}\u{3}\u{2}\u{2}\u{2}\u{14C9}\u{14D4}\u{7}\u{459}\u{2}\u{2}" .
        "\u{14CA}\u{14D4}\u{7}\u{45A}\u{2}\u{2}\u{14CB}\u{14CC}\u{7}\u{442}" .
        "\u{2}\u{2}\u{14CC}\u{14CE}\u{7}\u{442}\u{2}\u{2}\u{14CD}\u{14CB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{14CD}\u{14CE}\u{3}\u{2}\u{2}\u{2}\u{14CE}\u{14CF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14CF}\u{14D1}\u{9}\u{4F}\u{2}\u{2}\u{14D0}" .
        "\u{14CD}\u{3}\u{2}\u{2}\u{2}\u{14D0}\u{14D1}\u{3}\u{2}\u{2}\u{2}\u{14D1}" .
        "\u{14D2}\u{3}\u{2}\u{2}\u{2}\u{14D2}\u{14D4}\u{5}\u{216}\u{10C}\u{2}" .
        "\u{14D3}\u{14C9}\u{3}\u{2}\u{2}\u{2}\u{14D3}\u{14CA}\u{3}\u{2}\u{2}" .
        "\u{2}\u{14D3}\u{14D0}\u{3}\u{2}\u{2}\u{2}\u{14D4}\u{1C7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{14D5}\u{14D6}\u{7}\u{1A}\u{2}\u{2}\u{14D6}\u{14E3}\u{7}" .
        "\u{93}\u{2}\u{2}\u{14D7}\u{14E3}\u{7}\u{321}\u{2}\u{2}\u{14D8}\u{14E3}" .
        "\u{7}\u{28}\u{2}\u{2}\u{14D9}\u{14E3}\u{7}\u{91}\u{2}\u{2}\u{14DA}" .
        "\u{14DB}\u{7}\u{1A4}\u{2}\u{2}\u{14DB}\u{14E3}\u{7}\u{258}\u{2}\u{2}" .
        "\u{14DC}\u{14DD}\u{7}\u{7D}\u{2}\u{2}\u{14DD}\u{14E3}\u{7}\u{258}" .
        "\u{2}\u{2}\u{14DE}\u{14E0}\u{9}\u{34}\u{2}\u{2}\u{14DF}\u{14DE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{14DF}\u{14E0}\u{3}\u{2}\u{2}\u{2}\u{14E0}\u{14E1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14E1}\u{14E3}\u{9}\u{50}\u{2}\u{2}\u{14E2}" .
        "\u{14D5}\u{3}\u{2}\u{2}\u{2}\u{14E2}\u{14D7}\u{3}\u{2}\u{2}\u{2}\u{14E2}" .
        "\u{14D8}\u{3}\u{2}\u{2}\u{2}\u{14E2}\u{14D9}\u{3}\u{2}\u{2}\u{2}\u{14E2}" .
        "\u{14DA}\u{3}\u{2}\u{2}\u{2}\u{14E2}\u{14DC}\u{3}\u{2}\u{2}\u{2}\u{14E2}" .
        "\u{14DF}\u{3}\u{2}\u{2}\u{2}\u{14E3}\u{1C9}\u{3}\u{2}\u{2}\u{2}\u{14E4}" .
        "\u{14E5}\u{7}\u{5F}\u{2}\u{2}\u{14E5}\u{14E9}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{14E6}\u{14E7}\u{7}\u{B5}\u{2}\u{2}\u{14E7}\u{14E9}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{14E8}\u{14E4}\u{3}\u{2}\u{2}\u{2}\u{14E8}\u{14E6}\u{3}" .
        "\u{2}\u{2}\u{2}\u{14E9}\u{1CB}\u{3}\u{2}\u{2}\u{2}\u{14EA}\u{14EC}" .
        "\u{7}\u{25A}\u{2}\u{2}\u{14EB}\u{14EA}\u{3}\u{2}\u{2}\u{2}\u{14EB}" .
        "\u{14EC}\u{3}\u{2}\u{2}\u{2}\u{14EC}\u{14ED}\u{3}\u{2}\u{2}\u{2}\u{14ED}" .
        "\u{14FC}\u{7}\u{18A}\u{2}\u{2}\u{14EE}\u{14EF}\u{7}\u{1C9}\u{2}\u{2}" .
        "\u{14EF}\u{14FC}\u{7}\u{258}\u{2}\u{2}\u{14F0}\u{14FC}\u{7}\u{20F}" .
        "\u{2}\u{2}\u{14F1}\u{14FC}\u{7}\u{29E}\u{2}\u{2}\u{14F2}\u{14F4}\u{7}" .
        "\u{1A3}\u{2}\u{2}\u{14F3}\u{14F2}\u{3}\u{2}\u{2}\u{2}\u{14F3}\u{14F4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14F4}\u{14F5}\u{3}\u{2}\u{2}\u{2}\u{14F5}\u{14FC}" .
        "\u{7}\u{216}\u{2}\u{2}\u{14F6}\u{14FC}\u{7}\u{218}\u{2}\u{2}\u{14F7}" .
        "\u{14F8}\u{7}\u{244}\u{2}\u{2}\u{14F8}\u{14FC}\u{7}\u{1AD}\u{2}\u{2}" .
        "\u{14F9}\u{14FC}\u{7}\u{147}\u{2}\u{2}\u{14FA}\u{14FC}\u{7}\u{172}" .
        "\u{2}\u{2}\u{14FB}\u{14EB}\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14EE}\u{3}" .
        "\u{2}\u{2}\u{2}\u{14FB}\u{14F0}\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14F1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14F3}\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14F7}\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14F9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14FB}\u{14FA}\u{3}\u{2}\u{2}\u{2}\u{14FC}\u{1CD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{14FD}\u{1506}\u{7}\u{190}\u{2}\u{2}\u{14FE}" .
        "\u{14FF}\u{7}\u{A3}\u{2}\u{2}\u{14FF}\u{1506}\u{7}\u{258}\u{2}\u{2}" .
        "\u{1500}\u{1502}\u{7}\u{1A3}\u{2}\u{2}\u{1501}\u{1500}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1501}\u{1502}\u{3}\u{2}\u{2}\u{2}\u{1502}\u{1503}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1503}\u{1506}\u{7}\u{296}\u{2}\u{2}\u{1504}\u{1506}\u{7}" .
        "\u{26D}\u{2}\u{2}\u{1505}\u{14FD}\u{3}\u{2}\u{2}\u{2}\u{1505}\u{14FE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1505}\u{1501}\u{3}\u{2}\u{2}\u{2}\u{1505}\u{1504}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1506}\u{1CF}\u{3}\u{2}\u{2}\u{2}\u{1507}\u{1514}" .
        "\u{7}\u{8}\u{2}\u{2}\u{1508}\u{1509}\u{7}\u{14F}\u{2}\u{2}\u{1509}" .
        "\u{1514}\u{7}\u{1B9}\u{2}\u{2}\u{150A}\u{150B}\u{7}\u{171}\u{2}\u{2}" .
        "\u{150B}\u{1514}\u{7}\u{263}\u{2}\u{2}\u{150C}\u{1514}\u{7}\u{174}" .
        "\u{2}\u{2}\u{150D}\u{1514}\u{7}\u{1BB}\u{2}\u{2}\u{150E}\u{1514}\u{7}" .
        "\u{2ED}\u{2}\u{2}\u{150F}\u{1510}\u{7}\u{206}\u{2}\u{2}\u{1510}\u{1514}" .
        "\u{7}\u{199}\u{2}\u{2}\u{1511}\u{1514}\u{7}\u{24B}\u{2}\u{2}\u{1512}" .
        "\u{1514}\u{7}\u{262}\u{2}\u{2}\u{1513}\u{1507}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1513}\u{1508}\u{3}\u{2}\u{2}\u{2}\u{1513}\u{150A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1513}\u{150C}\u{3}\u{2}\u{2}\u{2}\u{1513}\u{150D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1513}\u{150E}\u{3}\u{2}\u{2}\u{2}\u{1513}\u{150F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1513}\u{1511}\u{3}\u{2}\u{2}\u{2}\u{1513}\u{1512}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1514}\u{1D1}\u{3}\u{2}\u{2}\u{2}\u{1515}\u{1516}" .
        "\u{7}\u{14D}\u{2}\u{2}\u{1516}\u{1517}\u{7}\u{44D}\u{2}\u{2}\u{1517}" .
        "\u{1D3}\u{3}\u{2}\u{2}\u{2}\u{1518}\u{1519}\u{7}\u{153}\u{2}\u{2}" .
        "\u{1519}\u{151A}\u{7}\u{4F}\u{2}\u{2}\u{151A}\u{151F}\u{5}\u{1E0}" .
        "\u{F1}\u{2}\u{151B}\u{151C}\u{7}\u{440}\u{2}\u{2}\u{151C}\u{151E}" .
        "\u{5}\u{1E0}\u{F1}\u{2}\u{151D}\u{151B}\u{3}\u{2}\u{2}\u{2}\u{151E}" .
        "\u{1521}\u{3}\u{2}\u{2}\u{2}\u{151F}\u{151D}\u{3}\u{2}\u{2}\u{2}\u{151F}" .
        "\u{1520}\u{3}\u{2}\u{2}\u{2}\u{1520}\u{1529}\u{3}\u{2}\u{2}\u{2}\u{1521}" .
        "\u{151F}\u{3}\u{2}\u{2}\u{2}\u{1522}\u{1523}\u{7}\u{7B}\u{2}\u{2}" .
        "\u{1523}\u{1526}\u{7}\u{43E}\u{2}\u{2}\u{1524}\u{1527}\u{5}\u{236}" .
        "\u{11C}\u{2}\u{1525}\u{1527}\u{7}\u{8}\u{2}\u{2}\u{1526}\u{1524}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1526}\u{1525}\u{3}\u{2}\u{2}\u{2}\u{1527}\u{1528}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1528}\u{152A}\u{7}\u{43F}\u{2}\u{2}\u{1529}" .
        "\u{1522}\u{3}\u{2}\u{2}\u{2}\u{1529}\u{152A}\u{3}\u{2}\u{2}\u{2}\u{152A}" .
        "\u{152B}\u{3}\u{2}\u{2}\u{2}\u{152B}\u{152C}\u{7}\u{4E}\u{2}\u{2}" .
        "\u{152C}\u{152D}\u{5}\u{216}\u{10C}\u{2}\u{152D}\u{1D5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{152E}\u{1530}\u{7}\u{19F}\u{2}\u{2}\u{152F}\u{1531}\u{9}" .
        "\u{43}\u{2}\u{2}\u{1530}\u{152F}\u{3}\u{2}\u{2}\u{2}\u{1530}\u{1531}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1531}\u{1532}\u{3}\u{2}\u{2}\u{2}\u{1532}\u{1537}" .
        "\u{5}\u{1E2}\u{F2}\u{2}\u{1533}\u{1534}\u{7}\u{440}\u{2}\u{2}\u{1534}" .
        "\u{1536}\u{5}\u{1E2}\u{F2}\u{2}\u{1535}\u{1533}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1536}\u{1539}\u{3}\u{2}\u{2}\u{2}\u{1537}\u{1535}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1537}\u{1538}\u{3}\u{2}\u{2}\u{2}\u{1538}\u{1D7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1539}\u{1537}\u{3}\u{2}\u{2}\u{2}\u{153A}\u{153C}\u{7}" .
        "\u{5B}\u{2}\u{2}\u{153B}\u{153D}\u{9}\u{51}\u{2}\u{2}\u{153C}\u{153B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{153C}\u{153D}\u{3}\u{2}\u{2}\u{2}\u{153D}\u{153F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{153E}\u{1540}\u{5}\u{21C}\u{10F}\u{2}\u{153F}" .
        "\u{153E}\u{3}\u{2}\u{2}\u{2}\u{1540}\u{1541}\u{3}\u{2}\u{2}\u{2}\u{1541}" .
        "\u{153F}\u{3}\u{2}\u{2}\u{2}\u{1541}\u{1542}\u{3}\u{2}\u{2}\u{2}\u{1542}" .
        "\u{1D9}\u{3}\u{2}\u{2}\u{2}\u{1543}\u{1544}\u{7}\u{63}\u{2}\u{2}\u{1544}" .
        "\u{1545}\u{7}\u{4F}\u{2}\u{2}\u{1545}\u{1546}\u{7}\u{55}\u{2}\u{2}" .
        "\u{1546}\u{1547}\u{7}\u{153}\u{2}\u{2}\u{1547}\u{154C}\u{5}\u{1E6}" .
        "\u{F4}\u{2}\u{1548}\u{1549}\u{7}\u{440}\u{2}\u{2}\u{1549}\u{154B}" .
        "\u{5}\u{1E6}\u{F4}\u{2}\u{154A}\u{1548}\u{3}\u{2}\u{2}\u{2}\u{154B}" .
        "\u{154E}\u{3}\u{2}\u{2}\u{2}\u{154C}\u{154A}\u{3}\u{2}\u{2}\u{2}\u{154C}" .
        "\u{154D}\u{3}\u{2}\u{2}\u{2}\u{154D}\u{1DB}\u{3}\u{2}\u{2}\u{2}\u{154E}" .
        "\u{154C}\u{3}\u{2}\u{2}\u{2}\u{154F}\u{1550}\u{7}\u{22F}\u{2}\u{2}" .
        "\u{1550}\u{1551}\u{7}\u{21A}\u{2}\u{2}\u{1551}\u{1552}\u{7}\u{153}" .
        "\u{2}\u{2}\u{1552}\u{1DD}\u{3}\u{2}\u{2}\u{2}\u{1553}\u{1554}\u{7}" .
        "\u{29C}\u{2}\u{2}\u{1554}\u{1DF}\u{3}\u{2}\u{2}\u{2}\u{1555}\u{155D}" .
        "\u{5}\u{1FE}\u{100}\u{2}\u{1556}\u{1558}\u{9}\u{14}\u{2}\u{2}\u{1557}" .
        "\u{1556}\u{3}\u{2}\u{2}\u{2}\u{1557}\u{1558}\u{3}\u{2}\u{2}\u{2}\u{1558}" .
        "\u{1559}\u{3}\u{2}\u{2}\u{2}\u{1559}\u{155A}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{155A}\u{155B}\u{5}\u{236}\u{11C}\u{2}\u{155B}\u{155C}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{155C}\u{155E}\u{3}\u{2}\u{2}\u{2}\u{155D}\u{1557}\u{3}" .
        "\u{2}\u{2}\u{2}\u{155D}\u{155E}\u{3}\u{2}\u{2}\u{2}\u{155E}\u{1E1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{155F}\u{1572}\u{7}\u{17C}\u{2}\u{2}\u{1560}" .
        "\u{1572}\u{7}\u{1AD}\u{2}\u{2}\u{1561}\u{1563}\u{9}\u{52}\u{2}\u{2}" .
        "\u{1562}\u{1561}\u{3}\u{2}\u{2}\u{2}\u{1562}\u{1563}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1563}\u{1564}\u{3}\u{2}\u{2}\u{2}\u{1564}\u{1572}\u{7}\u{1C8}" .
        "\u{2}\u{2}\u{1565}\u{1572}\u{7}\u{202}\u{2}\u{2}\u{1566}\u{1572}\u{7}" .
        "\u{29E}\u{2}\u{2}\u{1567}\u{1568}\u{7}\u{21A}\u{2}\u{2}\u{1568}\u{1572}" .
        "\u{7}\u{153}\u{2}\u{2}\u{1569}\u{1572}\u{7}\u{258}\u{2}\u{2}\u{156A}" .
        "\u{1572}\u{7}\u{279}\u{2}\u{2}\u{156B}\u{156F}\u{7}\u{296}\u{2}\u{2}" .
        "\u{156C}\u{156D}\u{7}\u{B7}\u{2}\u{2}\u{156D}\u{156E}\u{7}\u{80}\u{2}" .
        "\u{2}\u{156E}\u{1570}\u{7}\u{64}\u{2}\u{2}\u{156F}\u{156C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{156F}\u{1570}\u{3}\u{2}\u{2}\u{2}\u{1570}\u{1572}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1571}\u{155F}\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1560}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1562}\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1565}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1566}\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1567}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1571}\u{1569}\u{3}\u{2}\u{2}\u{2}\u{1571}\u{156A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1571}\u{156B}\u{3}\u{2}\u{2}\u{2}\u{1572}\u{157E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1573}\u{1574}\u{7}\u{220}\u{2}\u{2}\u{1574}" .
        "\u{1576}\u{7}\u{1C8}\u{2}\u{2}\u{1575}\u{1577}\u{5}\u{142}\u{A2}\u{2}" .
        "\u{1576}\u{1575}\u{3}\u{2}\u{2}\u{2}\u{1576}\u{1577}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1577}\u{157E}\u{3}\u{2}\u{2}\u{2}\u{1578}\u{1579}\u{7}\u{296}" .
        "\u{2}\u{2}\u{1579}\u{157B}\u{5}\u{23A}\u{11E}\u{2}\u{157A}\u{157C}" .
        "\u{5}\u{1E4}\u{F3}\u{2}\u{157B}\u{157A}\u{3}\u{2}\u{2}\u{2}\u{157B}" .
        "\u{157C}\u{3}\u{2}\u{2}\u{2}\u{157C}\u{157E}\u{3}\u{2}\u{2}\u{2}\u{157D}" .
        "\u{1571}\u{3}\u{2}\u{2}\u{2}\u{157D}\u{1573}\u{3}\u{2}\u{2}\u{2}\u{157D}" .
        "\u{1578}\u{3}\u{2}\u{2}\u{2}\u{157E}\u{1E3}\u{3}\u{2}\u{2}\u{2}\u{157F}" .
        "\u{1580}\u{7}\u{B7}\u{2}\u{2}\u{1580}\u{1581}\u{7}\u{80}\u{2}\u{2}" .
        "\u{1581}\u{1585}\u{7}\u{64}\u{2}\u{2}\u{1582}\u{1583}\u{7}\u{40}\u{2}" .
        "\u{2}\u{1583}\u{1585}\u{7}\u{195}\u{2}\u{2}\u{1584}\u{157F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1584}\u{1582}\u{3}\u{2}\u{2}\u{2}\u{1585}\u{1E5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1586}\u{158E}\u{5}\u{1FE}\u{100}\u{2}\u{1587}\u{1588}" .
        "\u{7}\u{7B}\u{2}\u{2}\u{1588}\u{158B}\u{7}\u{43E}\u{2}\u{2}\u{1589}" .
        "\u{158C}\u{5}\u{236}\u{11C}\u{2}\u{158A}\u{158C}\u{7}\u{8}\u{2}\u{2}" .
        "\u{158B}\u{1589}\u{3}\u{2}\u{2}\u{2}\u{158B}\u{158A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{158C}\u{158D}\u{3}\u{2}\u{2}\u{2}\u{158D}\u{158F}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{158E}\u{1587}\u{3}\u{2}\u{2}\u{2}\u{158E}\u{158F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{158F}\u{1597}\u{3}\u{2}\u{2}\u{2}\u{1590}\u{1592}" .
        "\u{9}\u{14}\u{2}\u{2}\u{1591}\u{1590}\u{3}\u{2}\u{2}\u{2}\u{1591}" .
        "\u{1592}\u{3}\u{2}\u{2}\u{2}\u{1592}\u{1593}\u{3}\u{2}\u{2}\u{2}\u{1593}" .
        "\u{1594}\u{7}\u{43E}\u{2}\u{2}\u{1594}\u{1595}\u{5}\u{236}\u{11C}" .
        "\u{2}\u{1595}\u{1596}\u{7}\u{43F}\u{2}\u{2}\u{1596}\u{1598}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1597}\u{1591}\u{3}\u{2}\u{2}\u{2}\u{1597}\u{1598}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1598}\u{159B}\u{3}\u{2}\u{2}\u{2}\u{1599}\u{159A}" .
        "\u{7}\u{4D}\u{2}\u{2}\u{159A}\u{159C}\u{7}\u{1C2}\u{2}\u{2}\u{159B}" .
        "\u{1599}\u{3}\u{2}\u{2}\u{2}\u{159B}\u{159C}\u{3}\u{2}\u{2}\u{2}\u{159C}" .
        "\u{1E7}\u{3}\u{2}\u{2}\u{2}\u{159D}\u{159E}\u{9}\u{53}\u{2}\u{2}\u{159E}" .
        "\u{15A1}\u{5}\u{1FE}\u{100}\u{2}\u{159F}\u{15A2}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{15A0}\u{15A2}\u{7}\u{44D}\u{2}\u{2}\u{15A1}\u{159F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{15A1}\u{15A0}\u{3}\u{2}\u{2}\u{2}\u{15A1}\u{15A2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{15A2}\u{1E9}\u{3}\u{2}\u{2}\u{2}\u{15A3}\u{15A7}" .
        "\u{9}\u{53}\u{2}\u{2}\u{15A4}\u{15A5}\u{9}\u{54}\u{2}\u{2}\u{15A5}" .
        "\u{15A6}\u{7}\u{435}\u{2}\u{2}\u{15A6}\u{15A8}\u{9}\u{55}\u{2}\u{2}" .
        "\u{15A7}\u{15A4}\u{3}\u{2}\u{2}\u{2}\u{15A7}\u{15A8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{15A8}\u{15A9}\u{3}\u{2}\u{2}\u{2}\u{15A9}\u{15AA}\u{5}\u{1FA}" .
        "\u{FE}\u{2}\u{15AA}\u{1EB}\u{3}\u{2}\u{2}\u{2}\u{15AB}\u{15AC}\u{7}" .
        "\u{1AB}\u{2}\u{2}\u{15AC}\u{15AD}\u{7}\u{44D}\u{2}\u{2}\u{15AD}\u{1ED}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15AE}\u{15AF}\u{7}\u{B1}\u{2}\u{2}\u{15AF}" .
        "\u{15B0}\u{5}\u{216}\u{10C}\u{2}\u{15B0}\u{1EF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{15B1}\u{15B9}\u{7}\u{96}\u{2}\u{2}\u{15B2}\u{15B4}\u{7}\u{9A}\u{2}" .
        "\u{2}\u{15B3}\u{15B5}\u{7}\u{27B}\u{2}\u{2}\u{15B4}\u{15B3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{15B4}\u{15B5}\u{3}\u{2}\u{2}\u{2}\u{15B5}\u{15B6}\u{3}" .
        "\u{2}\u{2}\u{2}\u{15B6}\u{15BA}\u{5}\u{220}\u{111}\u{2}\u{15B7}\u{15BA}" .
        "\u{7}\u{455}\u{2}\u{2}\u{15B8}\u{15BA}\u{7}\u{456}\u{2}\u{2}\u{15B9}" .
        "\u{15B2}\u{3}\u{2}\u{2}\u{2}\u{15B9}\u{15B7}\u{3}\u{2}\u{2}\u{2}\u{15B9}" .
        "\u{15B8}\u{3}\u{2}\u{2}\u{2}\u{15BA}\u{15C4}\u{3}\u{2}\u{2}\u{2}\u{15BB}" .
        "\u{15BC}\u{7}\u{93}\u{2}\u{2}\u{15BC}\u{15C1}\u{5}\u{1F4}\u{FB}\u{2}" .
        "\u{15BD}\u{15BE}\u{7}\u{440}\u{2}\u{2}\u{15BE}\u{15C0}\u{5}\u{1F4}" .
        "\u{FB}\u{2}\u{15BF}\u{15BD}\u{3}\u{2}\u{2}\u{2}\u{15C0}\u{15C3}\u{3}" .
        "\u{2}\u{2}\u{2}\u{15C1}\u{15BF}\u{3}\u{2}\u{2}\u{2}\u{15C1}\u{15C2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15C2}\u{15C5}\u{3}\u{2}\u{2}\u{2}\u{15C3}\u{15C1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15C4}\u{15BB}\u{3}\u{2}\u{2}\u{2}\u{15C4}\u{15C5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15C5}\u{1F1}\u{3}\u{2}\u{2}\u{2}\u{15C6}\u{15CE}" .
        "\u{7}\u{89}\u{2}\u{2}\u{15C7}\u{15C9}\u{7}\u{9A}\u{2}\u{2}\u{15C8}" .
        "\u{15CA}\u{7}\u{27B}\u{2}\u{2}\u{15C9}\u{15C8}\u{3}\u{2}\u{2}\u{2}" .
        "\u{15C9}\u{15CA}\u{3}\u{2}\u{2}\u{2}\u{15CA}\u{15CB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{15CB}\u{15CF}\u{5}\u{220}\u{111}\u{2}\u{15CC}\u{15CF}\u{7}" .
        "\u{455}\u{2}\u{2}\u{15CD}\u{15CF}\u{7}\u{456}\u{2}\u{2}\u{15CE}\u{15C7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15CE}\u{15CC}\u{3}\u{2}\u{2}\u{2}\u{15CE}\u{15CD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15CE}\u{15CF}\u{3}\u{2}\u{2}\u{2}\u{15CF}\u{15D9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15D0}\u{15D1}\u{7}\u{93}\u{2}\u{2}\u{15D1}" .
        "\u{15D6}\u{5}\u{1F4}\u{FB}\u{2}\u{15D2}\u{15D3}\u{7}\u{440}\u{2}\u{2}" .
        "\u{15D3}\u{15D5}\u{5}\u{1F4}\u{FB}\u{2}\u{15D4}\u{15D2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{15D5}\u{15D8}\u{3}\u{2}\u{2}\u{2}\u{15D6}\u{15D4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{15D6}\u{15D7}\u{3}\u{2}\u{2}\u{2}\u{15D7}\u{15DA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15D8}\u{15D6}\u{3}\u{2}\u{2}\u{2}\u{15D9}\u{15D0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15D9}\u{15DA}\u{3}\u{2}\u{2}\u{2}\u{15DA}\u{1F3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15DB}\u{15DC}\u{9}\u{56}\u{2}\u{2}\u{15DC}" .
        "\u{15E1}\u{7}\u{435}\u{2}\u{2}\u{15DD}\u{15E2}\u{5}\u{220}\u{111}" .
        "\u{2}\u{15DE}\u{15E2}\u{7}\u{44E}\u{2}\u{2}\u{15DF}\u{15E2}\u{5}\u{206}" .
        "\u{104}\u{2}\u{15E0}\u{15E2}\u{5}\u{218}\u{10D}\u{2}\u{15E1}\u{15DD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15E1}\u{15DE}\u{3}\u{2}\u{2}\u{2}\u{15E1}\u{15DF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15E1}\u{15E0}\u{3}\u{2}\u{2}\u{2}\u{15E2}\u{1F5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15E3}\u{15E5}\u{7}\u{46}\u{2}\u{2}\u{15E4}" .
        "\u{15E6}\u{9}\u{57}\u{2}\u{2}\u{15E5}\u{15E4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{15E5}\u{15E6}\u{3}\u{2}\u{2}\u{2}\u{15E6}\u{15E7}\u{3}\u{2}\u{2}" .
        "\u{2}\u{15E7}\u{1607}\u{7}\u{30}\u{2}\u{2}\u{15E8}\u{15E9}\u{5}\u{1C6}" .
        "\u{E4}\u{2}\u{15E9}\u{15EA}\u{7}\u{435}\u{2}\u{2}\u{15EA}\u{15F2}" .
        "\u{9}\u{58}\u{2}\u{2}\u{15EB}\u{15EC}\u{7}\u{440}\u{2}\u{2}\u{15EC}" .
        "\u{15ED}\u{5}\u{1C6}\u{E4}\u{2}\u{15ED}\u{15EE}\u{7}\u{435}\u{2}\u{2}" .
        "\u{15EE}\u{15EF}\u{9}\u{58}\u{2}\u{2}\u{15EF}\u{15F1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{15F0}\u{15EB}\u{3}\u{2}\u{2}\u{2}\u{15F1}\u{15F4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{15F2}\u{15F0}\u{3}\u{2}\u{2}\u{2}\u{15F2}\u{15F3}\u{3}" .
        "\u{2}\u{2}\u{2}\u{15F3}\u{1608}\u{3}\u{2}\u{2}\u{2}\u{15F4}\u{15F2}" .
        "\u{3}\u{2}\u{2}\u{2}\u{15F5}\u{15F8}\u{7}\u{1E}\u{2}\u{2}\u{15F6}" .
        "\u{15F9}\u{5}\u{21C}\u{10F}\u{2}\u{15F7}\u{15F9}\u{5}\u{1C6}\u{E4}" .
        "\u{2}\u{15F8}\u{15F6}\u{3}\u{2}\u{2}\u{2}\u{15F8}\u{15F7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{15F9}\u{15FA}\u{3}\u{2}\u{2}\u{2}\u{15FA}\u{15FB}\u{5}" .
        "\u{1C6}\u{E4}\u{2}\u{15FB}\u{15FC}\u{7}\u{435}\u{2}\u{2}\u{15FC}\u{1604}" .
        "\u{5}\u{1F8}\u{FD}\u{2}\u{15FD}\u{15FE}\u{7}\u{440}\u{2}\u{2}\u{15FE}" .
        "\u{15FF}\u{5}\u{1C6}\u{E4}\u{2}\u{15FF}\u{1600}\u{7}\u{435}\u{2}\u{2}" .
        "\u{1600}\u{1601}\u{5}\u{1F8}\u{FD}\u{2}\u{1601}\u{1603}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1602}\u{15FD}\u{3}\u{2}\u{2}\u{2}\u{1603}\u{1606}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1604}\u{1602}\u{3}\u{2}\u{2}\u{2}\u{1604}\u{1605}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1605}\u{1608}\u{3}\u{2}\u{2}\u{2}\u{1606}\u{1604}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1607}\u{15E8}\u{3}\u{2}\u{2}\u{2}\u{1607}\u{15F5}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1608}\u{1F7}\u{3}\u{2}\u{2}\u{2}\u{1609}\u{160A}" .
        "\u{9}\u{59}\u{2}\u{2}\u{160A}\u{1F9}\u{3}\u{2}\u{2}\u{2}\u{160B}\u{1611}" .
        "\u{5}\u{B6}\u{5C}\u{2}\u{160C}\u{1611}\u{5}\u{A8}\u{55}\u{2}\u{160D}" .
        "\u{1611}\u{5}\u{AE}\u{58}\u{2}\u{160E}\u{1611}\u{5}\u{B4}\u{5B}\u{2}" .
        "\u{160F}\u{1611}\u{5}\u{B8}\u{5D}\u{2}\u{1610}\u{160B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1610}\u{160C}\u{3}\u{2}\u{2}\u{2}\u{1610}\u{160D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1610}\u{160E}\u{3}\u{2}\u{2}\u{2}\u{1610}\u{160F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1611}\u{1616}\u{3}\u{2}\u{2}\u{2}\u{1612}\u{1613}" .
        "\u{7}\u{40}\u{2}\u{2}\u{1613}\u{1614}\u{7}\u{16B}\u{2}\u{2}\u{1614}" .
        "\u{1616}\u{5}\u{216}\u{10C}\u{2}\u{1615}\u{1610}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1615}\u{1612}\u{3}\u{2}\u{2}\u{2}\u{1616}\u{1FB}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1617}\u{161B}\u{5}\u{216}\u{10C}\u{2}\u{1618}\u{161C}\u{7}" .
        "\u{454}\u{2}\u{2}\u{1619}\u{161A}\u{7}\u{43D}\u{2}\u{2}\u{161A}\u{161C}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{161B}\u{1618}\u{3}\u{2}\u{2}\u{2}\u{161B}" .
        "\u{1619}\u{3}\u{2}\u{2}\u{2}\u{161B}\u{161C}\u{3}\u{2}\u{2}\u{2}\u{161C}" .
        "\u{1FD}\u{3}\u{2}\u{2}\u{2}\u{161D}\u{161E}\u{5}\u{1FC}\u{FF}\u{2}" .
        "\u{161E}\u{1FF}\u{3}\u{2}\u{2}\u{2}\u{161F}\u{1624}\u{5}\u{216}\u{10C}" .
        "\u{2}\u{1620}\u{1622}\u{5}\u{21A}\u{10E}\u{2}\u{1621}\u{1623}\u{5}" .
        "\u{21A}\u{10E}\u{2}\u{1622}\u{1621}\u{3}\u{2}\u{2}\u{2}\u{1622}\u{1623}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1623}\u{1625}\u{3}\u{2}\u{2}\u{2}\u{1624}\u{1620}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1624}\u{1625}\u{3}\u{2}\u{2}\u{2}\u{1625}\u{162C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1626}\u{1627}\u{B}\u{2}\u{2}\u{2}\u{1627}\u{1629}" .
        "\u{5}\u{21A}\u{10E}\u{2}\u{1628}\u{162A}\u{5}\u{21A}\u{10E}\u{2}\u{1629}" .
        "\u{1628}\u{3}\u{2}\u{2}\u{2}\u{1629}\u{162A}\u{3}\u{2}\u{2}\u{2}\u{162A}" .
        "\u{162C}\u{3}\u{2}\u{2}\u{2}\u{162B}\u{161F}\u{3}\u{2}\u{2}\u{2}\u{162B}" .
        "\u{1626}\u{3}\u{2}\u{2}\u{2}\u{162C}\u{201}\u{3}\u{2}\u{2}\u{2}\u{162D}" .
        "\u{1630}\u{5}\u{216}\u{10C}\u{2}\u{162E}\u{1630}\u{7}\u{44D}\u{2}" .
        "\u{2}\u{162F}\u{162D}\u{3}\u{2}\u{2}\u{2}\u{162F}\u{162E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1630}\u{1635}\u{3}\u{2}\u{2}\u{2}\u{1631}\u{1632}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{1632}\u{1633}\u{5}\u{21C}\u{10F}\u{2}\u{1633}" .
        "\u{1634}\u{7}\u{43F}\u{2}\u{2}\u{1634}\u{1636}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1635}\u{1631}\u{3}\u{2}\u{2}\u{2}\u{1635}\u{1636}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1636}\u{1639}\u{3}\u{2}\u{2}\u{2}\u{1637}\u{1639}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{1638}\u{162F}\u{3}\u{2}\u{2}\u{2}\u{1638}\u{1637}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1639}\u{163B}\u{3}\u{2}\u{2}\u{2}\u{163A}\u{163C}" .
        "\u{9}\u{2E}\u{2}\u{2}\u{163B}\u{163A}\u{3}\u{2}\u{2}\u{2}\u{163B}" .
        "\u{163C}\u{3}\u{2}\u{2}\u{2}\u{163C}\u{203}\u{3}\u{2}\u{2}\u{2}\u{163D}" .
        "\u{163E}\u{9}\u{5A}\u{2}\u{2}\u{163E}\u{205}\u{3}\u{2}\u{2}\u{2}\u{163F}" .
        "\u{1640}\u{9}\u{5B}\u{2}\u{2}\u{1640}\u{207}\u{3}\u{2}\u{2}\u{2}\u{1641}" .
        "\u{1646}\u{7}\u{D9}\u{2}\u{2}\u{1642}\u{1646}\u{5}\u{28C}\u{147}\u{2}" .
        "\u{1643}\u{1646}\u{7}\u{44D}\u{2}\u{2}\u{1644}\u{1646}\u{7}\u{44A}" .
        "\u{2}\u{2}\u{1645}\u{1641}\u{3}\u{2}\u{2}\u{2}\u{1645}\u{1642}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1645}\u{1643}\u{3}\u{2}\u{2}\u{2}\u{1645}\u{1644}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1646}\u{209}\u{3}\u{2}\u{2}\u{2}\u{1647}\u{164A}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{1648}\u{164A}\u{7}\u{44D}\u{2}\u{2}\u{1649}" .
        "\u{1647}\u{3}\u{2}\u{2}\u{2}\u{1649}\u{1648}\u{3}\u{2}\u{2}\u{2}\u{164A}" .
        "\u{20B}\u{3}\u{2}\u{2}\u{2}\u{164B}\u{164C}\u{9}\u{5C}\u{2}\u{2}\u{164C}" .
        "\u{20D}\u{3}\u{2}\u{2}\u{2}\u{164D}\u{164E}\u{5}\u{21C}\u{10F}\u{2}" .
        "\u{164E}\u{164F}\u{7}\u{432}\u{2}\u{2}\u{164F}\u{1650}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1650}\u{1651}\u{7}\u{432}\u{2}\u{2}\u{1651}\u{1652}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{1652}\u{1653}\u{7}\u{432}\u{2}\u{2}\u{1653}" .
        "\u{1654}\u{5}\u{21C}\u{10F}\u{2}\u{1654}\u{1655}\u{7}\u{432}\u{2}" .
        "\u{2}\u{1655}\u{165B}\u{5}\u{21C}\u{10F}\u{2}\u{1656}\u{1657}\u{7}" .
        "\u{449}\u{2}\u{2}\u{1657}\u{1658}\u{5}\u{21C}\u{10F}\u{2}\u{1658}" .
        "\u{1659}\u{7}\u{432}\u{2}\u{2}\u{1659}\u{165A}\u{5}\u{21C}\u{10F}" .
        "\u{2}\u{165A}\u{165C}\u{3}\u{2}\u{2}\u{2}\u{165B}\u{1656}\u{3}\u{2}" .
        "\u{2}\u{2}\u{165C}\u{165D}\u{3}\u{2}\u{2}\u{2}\u{165D}\u{165B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{165D}\u{165E}\u{3}\u{2}\u{2}\u{2}\u{165E}\u{20F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{165F}\u{1666}\u{5}\u{212}\u{10A}\u{2}\u{1660}" .
        "\u{1661}\u{7}\u{440}\u{2}\u{2}\u{1661}\u{1664}\u{5}\u{212}\u{10A}" .
        "\u{2}\u{1662}\u{1663}\u{7}\u{440}\u{2}\u{2}\u{1663}\u{1665}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1664}\u{1662}\u{3}\u{2}\u{2}\u{2}\u{1664}\u{1665}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1665}\u{1667}\u{3}\u{2}\u{2}\u{2}\u{1666}\u{1660}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1666}\u{1667}\u{3}\u{2}\u{2}\u{2}\u{1667}\u{211}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1668}\u{1670}\u{7}\u{44D}\u{2}\u{2}\u{1669}" .
        "\u{1670}\u{7}\u{452}\u{2}\u{2}\u{166A}\u{166C}\u{7}\u{44F}\u{2}\u{2}" .
        "\u{166B}\u{166A}\u{3}\u{2}\u{2}\u{2}\u{166C}\u{166D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{166D}\u{166B}\u{3}\u{2}\u{2}\u{2}\u{166D}\u{166E}\u{3}\u{2}" .
        "\u{2}\u{2}\u{166E}\u{1670}\u{3}\u{2}\u{2}\u{2}\u{166F}\u{1668}\u{3}" .
        "\u{2}\u{2}\u{2}\u{166F}\u{1669}\u{3}\u{2}\u{2}\u{2}\u{166F}\u{166B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1670}\u{213}\u{3}\u{2}\u{2}\u{2}\u{1671}\u{1674}" .
        "\u{5}\u{216}\u{10C}\u{2}\u{1672}\u{1674}\u{7}\u{44D}\u{2}\u{2}\u{1673}" .
        "\u{1671}\u{3}\u{2}\u{2}\u{2}\u{1673}\u{1672}\u{3}\u{2}\u{2}\u{2}\u{1674}" .
        "\u{215}\u{3}\u{2}\u{2}\u{2}\u{1675}\u{1679}\u{5}\u{218}\u{10D}\u{2}" .
        "\u{1676}\u{1679}\u{7}\u{456}\u{2}\u{2}\u{1677}\u{1679}\u{7}\u{44A}" .
        "\u{2}\u{2}\u{1678}\u{1675}\u{3}\u{2}\u{2}\u{2}\u{1678}\u{1676}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1678}\u{1677}\u{3}\u{2}\u{2}\u{2}\u{1679}\u{217}" .
        "\u{3}\u{2}\u{2}\u{2}\u{167A}\u{1684}\u{7}\u{455}\u{2}\u{2}\u{167B}" .
        "\u{1684}\u{5}\u{28C}\u{147}\u{2}\u{167C}\u{1684}\u{5}\u{28E}\u{148}" .
        "\u{2}\u{167D}\u{1684}\u{5}\u{20C}\u{107}\u{2}\u{167E}\u{1684}\u{5}" .
        "\u{290}\u{149}\u{2}\u{167F}\u{1684}\u{5}\u{292}\u{14A}\u{2}\u{1680}" .
        "\u{1684}\u{5}\u{294}\u{14B}\u{2}\u{1681}\u{1684}\u{5}\u{296}\u{14C}" .
        "\u{2}\u{1682}\u{1684}\u{5}\u{298}\u{14D}\u{2}\u{1683}\u{167A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1683}\u{167B}\u{3}\u{2}\u{2}\u{2}\u{1683}\u{167C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1683}\u{167D}\u{3}\u{2}\u{2}\u{2}\u{1683}\u{167E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1683}\u{167F}\u{3}\u{2}\u{2}\u{2}\u{1683}\u{1680}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1683}\u{1681}\u{3}\u{2}\u{2}\u{2}\u{1683}\u{1682}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1684}\u{219}\u{3}\u{2}\u{2}\u{2}\u{1685}\u{1689}" .
        "\u{7}\u{454}\u{2}\u{2}\u{1686}\u{1687}\u{7}\u{43D}\u{2}\u{2}\u{1687}" .
        "\u{1689}\u{5}\u{216}\u{10C}\u{2}\u{1688}\u{1685}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1688}\u{1686}\u{3}\u{2}\u{2}\u{2}\u{1689}\u{21B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{168A}\u{168B}\u{9}\u{5D}\u{2}\u{2}\u{168B}\u{21D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{168C}\u{168F}\u{7}\u{44B}\u{2}\u{2}\u{168D}\u{168F}\u{5}" .
        "\u{21C}\u{10F}\u{2}\u{168E}\u{168C}\u{3}\u{2}\u{2}\u{2}\u{168E}\u{168D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{168F}\u{21F}\u{3}\u{2}\u{2}\u{2}\u{1690}\u{1692}" .
        "\u{7}\u{453}\u{2}\u{2}\u{1691}\u{1690}\u{3}\u{2}\u{2}\u{2}\u{1691}" .
        "\u{1692}\u{3}\u{2}\u{2}\u{2}\u{1692}\u{1693}\u{3}\u{2}\u{2}\u{2}\u{1693}" .
        "\u{1696}\u{7}\u{44D}\u{2}\u{2}\u{1694}\u{1696}\u{7}\u{44C}\u{2}\u{2}" .
        "\u{1695}\u{1691}\u{3}\u{2}\u{2}\u{2}\u{1695}\u{1694}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1696}\u{1698}\u{3}\u{2}\u{2}\u{2}\u{1697}\u{1699}\u{7}\u{44D}" .
        "\u{2}\u{2}\u{1698}\u{1697}\u{3}\u{2}\u{2}\u{2}\u{1699}\u{169A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{169A}\u{1698}\u{3}\u{2}\u{2}\u{2}\u{169A}\u{169B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{169B}\u{16A8}\u{3}\u{2}\u{2}\u{2}\u{169C}\u{169E}" .
        "\u{7}\u{453}\u{2}\u{2}\u{169D}\u{169C}\u{3}\u{2}\u{2}\u{2}\u{169D}" .
        "\u{169E}\u{3}\u{2}\u{2}\u{2}\u{169E}\u{169F}\u{3}\u{2}\u{2}\u{2}\u{169F}" .
        "\u{16A2}\u{7}\u{44D}\u{2}\u{2}\u{16A0}\u{16A2}\u{7}\u{44C}\u{2}\u{2}" .
        "\u{16A1}\u{169D}\u{3}\u{2}\u{2}\u{2}\u{16A1}\u{16A0}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16A2}\u{16A5}\u{3}\u{2}\u{2}\u{2}\u{16A3}\u{16A4}\u{7}\u{1C}" .
        "\u{2}\u{2}\u{16A4}\u{16A6}\u{5}\u{20A}\u{106}\u{2}\u{16A5}\u{16A3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16A5}\u{16A6}\u{3}\u{2}\u{2}\u{2}\u{16A6}\u{16A8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16A7}\u{1695}\u{3}\u{2}\u{2}\u{2}\u{16A7}\u{16A1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16A8}\u{221}\u{3}\u{2}\u{2}\u{2}\u{16A9}\u{16AA}" .
        "\u{9}\u{5E}\u{2}\u{2}\u{16AA}\u{223}\u{3}\u{2}\u{2}\u{2}\u{16AB}\u{16AD}" .
        "\u{7}\u{453}\u{2}\u{2}\u{16AC}\u{16AB}\u{3}\u{2}\u{2}\u{2}\u{16AC}" .
        "\u{16AD}\u{3}\u{2}\u{2}\u{2}\u{16AD}\u{16AE}\u{3}\u{2}\u{2}\u{2}\u{16AE}" .
        "\u{16AF}\u{7}\u{44F}\u{2}\u{2}\u{16AF}\u{225}\u{3}\u{2}\u{2}\u{2}" .
        "\u{16B0}\u{16B2}\u{7}\u{6D}\u{2}\u{2}\u{16B1}\u{16B0}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16B1}\u{16B2}\u{3}\u{2}\u{2}\u{2}\u{16B2}\u{16B3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{16B3}\u{16B4}\u{9}\u{5F}\u{2}\u{2}\u{16B4}\u{227}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16B5}\u{16C2}\u{5}\u{220}\u{111}\u{2}\u{16B6}\u{16C2}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{16B7}\u{16B8}\u{7}\u{432}\u{2}\u{2}\u{16B8}" .
        "\u{16C2}\u{5}\u{21C}\u{10F}\u{2}\u{16B9}\u{16C2}\u{5}\u{224}\u{113}" .
        "\u{2}\u{16BA}\u{16C2}\u{5}\u{222}\u{112}\u{2}\u{16BB}\u{16C2}\u{7}" .
        "\u{450}\u{2}\u{2}\u{16BC}\u{16C2}\u{7}\u{452}\u{2}\u{2}\u{16BD}\u{16BF}" .
        "\u{7}\u{6D}\u{2}\u{2}\u{16BE}\u{16BD}\u{3}\u{2}\u{2}\u{2}\u{16BE}" .
        "\u{16BF}\u{3}\u{2}\u{2}\u{2}\u{16BF}\u{16C0}\u{3}\u{2}\u{2}\u{2}\u{16C0}" .
        "\u{16C2}\u{9}\u{5F}\u{2}\u{2}\u{16C1}\u{16B5}\u{3}\u{2}\u{2}\u{2}" .
        "\u{16C1}\u{16B6}\u{3}\u{2}\u{2}\u{2}\u{16C1}\u{16B7}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16C1}\u{16B9}\u{3}\u{2}\u{2}\u{2}\u{16C1}\u{16BA}\u{3}\u{2}" .
        "\u{2}\u{2}\u{16C1}\u{16BB}\u{3}\u{2}\u{2}\u{2}\u{16C1}\u{16BC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16C1}\u{16BE}\u{3}\u{2}\u{2}\u{2}\u{16C2}\u{229}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16C3}\u{16C5}\u{9}\u{60}\u{2}\u{2}\u{16C4}" .
        "\u{16C6}\u{7}\u{E5}\u{2}\u{2}\u{16C5}\u{16C4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{16C5}\u{16C6}\u{3}\u{2}\u{2}\u{2}\u{16C6}\u{16C8}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16C7}\u{16C9}\u{5}\u{230}\u{119}\u{2}\u{16C8}\u{16C7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16C8}\u{16C9}\u{3}\u{2}\u{2}\u{2}\u{16C9}\u{16CB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16CA}\u{16CC}\u{7}\u{D9}\u{2}\u{2}\u{16CB}" .
        "\u{16CA}\u{3}\u{2}\u{2}\u{2}\u{16CB}\u{16CC}\u{3}\u{2}\u{2}\u{2}\u{16CC}" .
        "\u{16D3}\u{3}\u{2}\u{2}\u{2}\u{16CD}\u{16CE}\u{7}\u{1A}\u{2}\u{2}" .
        "\u{16CE}\u{16D1}\u{7}\u{93}\u{2}\u{2}\u{16CF}\u{16D1}\u{7}\u{31E}" .
        "\u{2}\u{2}\u{16D0}\u{16CD}\u{3}\u{2}\u{2}\u{2}\u{16D0}\u{16CF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16D1}\u{16D2}\u{3}\u{2}\u{2}\u{2}\u{16D2}\u{16D4}" .
        "\u{5}\u{208}\u{105}\u{2}\u{16D3}\u{16D0}\u{3}\u{2}\u{2}\u{2}\u{16D3}" .
        "\u{16D4}\u{3}\u{2}\u{2}\u{2}\u{16D4}\u{16D8}\u{3}\u{2}\u{2}\u{2}\u{16D5}" .
        "\u{16D6}\u{7}\u{1C}\u{2}\u{2}\u{16D6}\u{16D9}\u{5}\u{20A}\u{106}\u{2}" .
        "\u{16D7}\u{16D9}\u{7}\u{D9}\u{2}\u{2}\u{16D8}\u{16D5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16D8}\u{16D7}\u{3}\u{2}\u{2}\u{2}\u{16D8}\u{16D9}\u{3}\u{2}" .
        "\u{2}\u{2}\u{16D9}\u{1747}\u{3}\u{2}\u{2}\u{2}\u{16DA}\u{16DB}\u{7}" .
        "\u{D8}\u{2}\u{2}\u{16DB}\u{16DD}\u{9}\u{61}\u{2}\u{2}\u{16DC}\u{16DE}" .
        "\u{5}\u{230}\u{119}\u{2}\u{16DD}\u{16DC}\u{3}\u{2}\u{2}\u{2}\u{16DD}" .
        "\u{16DE}\u{3}\u{2}\u{2}\u{2}\u{16DE}\u{16E0}\u{3}\u{2}\u{2}\u{2}\u{16DF}" .
        "\u{16E1}\u{7}\u{D9}\u{2}\u{2}\u{16E0}\u{16DF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{16E0}\u{16E1}\u{3}\u{2}\u{2}\u{2}\u{16E1}\u{1747}\u{3}\u{2}\u{2}" .
        "\u{2}\u{16E2}\u{16E3}\u{7}\u{1F2}\u{2}\u{2}\u{16E3}\u{16E5}\u{7}\u{D6}" .
        "\u{2}\u{2}\u{16E4}\u{16E6}\u{5}\u{230}\u{119}\u{2}\u{16E5}\u{16E4}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16E5}\u{16E6}\u{3}\u{2}\u{2}\u{2}\u{16E6}\u{16E8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16E7}\u{16E9}\u{7}\u{D9}\u{2}\u{2}\u{16E8}" .
        "\u{16E7}\u{3}\u{2}\u{2}\u{2}\u{16E8}\u{16E9}\u{3}\u{2}\u{2}\u{2}\u{16E9}" .
        "\u{1747}\u{3}\u{2}\u{2}\u{2}\u{16EA}\u{16EB}\u{7}\u{D8}\u{2}\u{2}" .
        "\u{16EB}\u{16EC}\u{9}\u{62}\u{2}\u{2}\u{16EC}\u{16EE}\u{7}\u{E5}\u{2}" .
        "\u{2}\u{16ED}\u{16EF}\u{5}\u{230}\u{119}\u{2}\u{16EE}\u{16ED}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16EE}\u{16EF}\u{3}\u{2}\u{2}\u{2}\u{16EF}\u{16F1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16F0}\u{16F2}\u{7}\u{D9}\u{2}\u{2}\u{16F1}" .
        "\u{16F0}\u{3}\u{2}\u{2}\u{2}\u{16F1}\u{16F2}\u{3}\u{2}\u{2}\u{2}\u{16F2}" .
        "\u{1747}\u{3}\u{2}\u{2}\u{2}\u{16F3}\u{16F5}\u{9}\u{63}\u{2}\u{2}" .
        "\u{16F4}\u{16F6}\u{5}\u{230}\u{119}\u{2}\u{16F5}\u{16F4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{16F5}\u{16F6}\u{3}\u{2}\u{2}\u{2}\u{16F6}\u{16F8}\u{3}" .
        "\u{2}\u{2}\u{2}\u{16F7}\u{16F9}\u{9}\u{64}\u{2}\u{2}\u{16F8}\u{16F7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16F8}\u{16F9}\u{3}\u{2}\u{2}\u{2}\u{16F9}\u{16FB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{16FA}\u{16FC}\u{7}\u{BA}\u{2}\u{2}\u{16FB}" .
        "\u{16FA}\u{3}\u{2}\u{2}\u{2}\u{16FB}\u{16FC}\u{3}\u{2}\u{2}\u{2}\u{16FC}" .
        "\u{1747}\u{3}\u{2}\u{2}\u{2}\u{16FD}\u{16FF}\u{7}\u{C7}\u{2}\u{2}" .
        "\u{16FE}\u{1700}\u{5}\u{232}\u{11A}\u{2}\u{16FF}\u{16FE}\u{3}\u{2}" .
        "\u{2}\u{2}\u{16FF}\u{1700}\u{3}\u{2}\u{2}\u{2}\u{1700}\u{1702}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1701}\u{1703}\u{9}\u{64}\u{2}\u{2}\u{1702}\u{1701}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1702}\u{1703}\u{3}\u{2}\u{2}\u{2}\u{1703}\u{1705}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1704}\u{1706}\u{7}\u{BA}\u{2}\u{2}\u{1705}" .
        "\u{1704}\u{3}\u{2}\u{2}\u{2}\u{1705}\u{1706}\u{3}\u{2}\u{2}\u{2}\u{1706}" .
        "\u{1747}\u{3}\u{2}\u{2}\u{2}\u{1707}\u{1709}\u{7}\u{C8}\u{2}\u{2}" .
        "\u{1708}\u{170A}\u{7}\u{C9}\u{2}\u{2}\u{1709}\u{1708}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1709}\u{170A}\u{3}\u{2}\u{2}\u{2}\u{170A}\u{170C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{170B}\u{170D}\u{5}\u{232}\u{11A}\u{2}\u{170C}\u{170B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{170C}\u{170D}\u{3}\u{2}\u{2}\u{2}\u{170D}\u{170F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{170E}\u{1710}\u{9}\u{64}\u{2}\u{2}\u{170F}" .
        "\u{170E}\u{3}\u{2}\u{2}\u{2}\u{170F}\u{1710}\u{3}\u{2}\u{2}\u{2}\u{1710}" .
        "\u{1712}\u{3}\u{2}\u{2}\u{2}\u{1711}\u{1713}\u{7}\u{BA}\u{2}\u{2}" .
        "\u{1712}\u{1711}\u{3}\u{2}\u{2}\u{2}\u{1712}\u{1713}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1713}\u{1747}\u{3}\u{2}\u{2}\u{2}\u{1714}\u{1716}\u{9}\u{65}" .
        "\u{2}\u{2}\u{1715}\u{1717}\u{5}\u{234}\u{11B}\u{2}\u{1716}\u{1715}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1716}\u{1717}\u{3}\u{2}\u{2}\u{2}\u{1717}\u{1719}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1718}\u{171A}\u{9}\u{64}\u{2}\u{2}\u{1719}" .
        "\u{1718}\u{3}\u{2}\u{2}\u{2}\u{1719}\u{171A}\u{3}\u{2}\u{2}\u{2}\u{171A}" .
        "\u{171C}\u{3}\u{2}\u{2}\u{2}\u{171B}\u{171D}\u{7}\u{BA}\u{2}\u{2}" .
        "\u{171C}\u{171B}\u{3}\u{2}\u{2}\u{2}\u{171C}\u{171D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{171D}\u{1747}\u{3}\u{2}\u{2}\u{2}\u{171E}\u{1747}\u{9}\u{66}" .
        "\u{2}\u{2}\u{171F}\u{1721}\u{9}\u{67}\u{2}\u{2}\u{1720}\u{1722}\u{5}" .
        "\u{230}\u{119}\u{2}\u{1721}\u{1720}\u{3}\u{2}\u{2}\u{2}\u{1721}\u{1722}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1722}\u{1747}\u{3}\u{2}\u{2}\u{2}\u{1723}\u{1724}" .
        "\u{9}\u{68}\u{2}\u{2}\u{1724}\u{1726}\u{5}\u{22C}\u{117}\u{2}\u{1725}" .
        "\u{1727}\u{7}\u{D9}\u{2}\u{2}\u{1726}\u{1725}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1726}\u{1727}\u{3}\u{2}\u{2}\u{2}\u{1727}\u{172E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1728}\u{1729}\u{7}\u{1A}\u{2}\u{2}\u{1729}\u{172C}\u{7}\u{93}" .
        "\u{2}\u{2}\u{172A}\u{172C}\u{7}\u{31E}\u{2}\u{2}\u{172B}\u{1728}\u{3}" .
        "\u{2}\u{2}\u{2}\u{172B}\u{172A}\u{3}\u{2}\u{2}\u{2}\u{172C}\u{172D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{172D}\u{172F}\u{5}\u{208}\u{105}\u{2}\u{172E}" .
        "\u{172B}\u{3}\u{2}\u{2}\u{2}\u{172E}\u{172F}\u{3}\u{2}\u{2}\u{2}\u{172F}" .
        "\u{1747}\u{3}\u{2}\u{2}\u{2}\u{1730}\u{1747}\u{9}\u{69}\u{2}\u{2}" .
        "\u{1731}\u{1733}\u{7}\u{DE}\u{2}\u{2}\u{1732}\u{1734}\u{7}\u{D6}\u{2}" .
        "\u{2}\u{1733}\u{1732}\u{3}\u{2}\u{2}\u{2}\u{1733}\u{1734}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1734}\u{1736}\u{3}\u{2}\u{2}\u{2}\u{1735}\u{1737}\u{7}" .
        "\u{D9}\u{2}\u{2}\u{1736}\u{1735}\u{3}\u{2}\u{2}\u{2}\u{1736}\u{1737}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1737}\u{173E}\u{3}\u{2}\u{2}\u{2}\u{1738}\u{1739}" .
        "\u{7}\u{1A}\u{2}\u{2}\u{1739}\u{173C}\u{7}\u{93}\u{2}\u{2}\u{173A}" .
        "\u{173C}\u{7}\u{31E}\u{2}\u{2}\u{173B}\u{1738}\u{3}\u{2}\u{2}\u{2}" .
        "\u{173B}\u{173A}\u{3}\u{2}\u{2}\u{2}\u{173C}\u{173D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{173D}\u{173F}\u{5}\u{208}\u{105}\u{2}\u{173E}\u{173B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{173E}\u{173F}\u{3}\u{2}\u{2}\u{2}\u{173F}\u{1742}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1740}\u{1741}\u{7}\u{1C}\u{2}\u{2}\u{1741}" .
        "\u{1743}\u{5}\u{20A}\u{106}\u{2}\u{1742}\u{1740}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1742}\u{1743}\u{3}\u{2}\u{2}\u{2}\u{1743}\u{1747}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1744}\u{1745}\u{7}\u{DE}\u{2}\u{2}\u{1745}\u{1747}\u{7}\u{DA}" .
        "\u{2}\u{2}\u{1746}\u{16C3}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{16DA}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1746}\u{16E2}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{16EA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1746}\u{16F3}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{16FD}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1707}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1714}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1746}\u{171E}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{171F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1723}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1730}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1731}\u{3}\u{2}\u{2}\u{2}\u{1746}\u{1744}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1747}\u{22B}\u{3}\u{2}\u{2}\u{2}\u{1748}\u{1749}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{1749}\u{174E}\u{7}\u{44D}\u{2}\u{2}\u{174A}" .
        "\u{174B}\u{7}\u{440}\u{2}\u{2}\u{174B}\u{174D}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{174C}\u{174A}\u{3}\u{2}\u{2}\u{2}\u{174D}\u{1750}\u{3}\u{2}\u{2}" .
        "\u{2}\u{174E}\u{174C}\u{3}\u{2}\u{2}\u{2}\u{174E}\u{174F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{174F}\u{1751}\u{3}\u{2}\u{2}\u{2}\u{1750}\u{174E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1751}\u{1752}\u{7}\u{43F}\u{2}\u{2}\u{1752}\u{22D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1753}\u{1755}\u{9}\u{6A}\u{2}\u{2}\u{1754}" .
        "\u{1756}\u{5}\u{230}\u{119}\u{2}\u{1755}\u{1754}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1755}\u{1756}\u{3}\u{2}\u{2}\u{2}\u{1756}\u{176D}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1757}\u{1759}\u{7}\u{D5}\u{2}\u{2}\u{1758}\u{175A}\u{5}\u{230}" .
        "\u{119}\u{2}\u{1759}\u{1758}\u{3}\u{2}\u{2}\u{2}\u{1759}\u{175A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{175A}\u{1761}\u{3}\u{2}\u{2}\u{2}\u{175B}\u{175C}" .
        "\u{7}\u{1A}\u{2}\u{2}\u{175C}\u{175F}\u{7}\u{93}\u{2}\u{2}\u{175D}" .
        "\u{175F}\u{7}\u{31E}\u{2}\u{2}\u{175E}\u{175B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{175E}\u{175D}\u{3}\u{2}\u{2}\u{2}\u{175F}\u{1760}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1760}\u{1762}\u{5}\u{208}\u{105}\u{2}\u{1761}\u{175E}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1761}\u{1762}\u{3}\u{2}\u{2}\u{2}\u{1762}\u{176D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1763}\u{176D}\u{9}\u{6B}\u{2}\u{2}\u{1764}" .
        "\u{1766}\u{7}\u{CD}\u{2}\u{2}\u{1765}\u{1767}\u{5}\u{234}\u{11B}\u{2}" .
        "\u{1766}\u{1765}\u{3}\u{2}\u{2}\u{2}\u{1766}\u{1767}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1767}\u{176D}\u{3}\u{2}\u{2}\u{2}\u{1768}\u{176A}\u{9}\u{64}" .
        "\u{2}\u{2}\u{1769}\u{176B}\u{7}\u{C5}\u{2}\u{2}\u{176A}\u{1769}\u{3}" .
        "\u{2}\u{2}\u{2}\u{176A}\u{176B}\u{3}\u{2}\u{2}\u{2}\u{176B}\u{176D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176C}\u{1753}\u{3}\u{2}\u{2}\u{2}\u{176C}\u{1757}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176C}\u{1763}\u{3}\u{2}\u{2}\u{2}\u{176C}\u{1764}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176C}\u{1768}\u{3}\u{2}\u{2}\u{2}\u{176D}\u{176F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176E}\u{1770}\u{7}\u{D}\u{2}\u{2}\u{176F}\u{176E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{176F}\u{1770}\u{3}\u{2}\u{2}\u{2}\u{1770}\u{22F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1771}\u{1772}\u{7}\u{43E}\u{2}\u{2}\u{1772}" .
        "\u{1773}\u{5}\u{21C}\u{10F}\u{2}\u{1773}\u{1774}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{1774}\u{231}\u{3}\u{2}\u{2}\u{2}\u{1775}\u{1776}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{1776}\u{1777}\u{5}\u{21C}\u{10F}\u{2}\u{1777}\u{1778}" .
        "\u{7}\u{440}\u{2}\u{2}\u{1778}\u{1779}\u{5}\u{21C}\u{10F}\u{2}\u{1779}" .
        "\u{177A}\u{7}\u{43F}\u{2}\u{2}\u{177A}\u{233}\u{3}\u{2}\u{2}\u{2}" .
        "\u{177B}\u{177C}\u{7}\u{43E}\u{2}\u{2}\u{177C}\u{177F}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{177D}\u{177E}\u{7}\u{440}\u{2}\u{2}\u{177E}\u{1780}" .
        "\u{5}\u{21C}\u{10F}\u{2}\u{177F}\u{177D}\u{3}\u{2}\u{2}\u{2}\u{177F}" .
        "\u{1780}\u{3}\u{2}\u{2}\u{2}\u{1780}\u{1781}\u{3}\u{2}\u{2}\u{2}\u{1781}" .
        "\u{1782}\u{7}\u{43F}\u{2}\u{2}\u{1782}\u{235}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1783}\u{1788}\u{5}\u{216}\u{10C}\u{2}\u{1784}\u{1785}\u{7}\u{440}" .
        "\u{2}\u{2}\u{1785}\u{1787}\u{5}\u{216}\u{10C}\u{2}\u{1786}\u{1784}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1787}\u{178A}\u{3}\u{2}\u{2}\u{2}\u{1788}\u{1786}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1788}\u{1789}\u{3}\u{2}\u{2}\u{2}\u{1789}\u{237}" .
        "\u{3}\u{2}\u{2}\u{2}\u{178A}\u{1788}\u{3}\u{2}\u{2}\u{2}\u{178B}\u{1790}" .
        "\u{5}\u{1FE}\u{100}\u{2}\u{178C}\u{178D}\u{7}\u{440}\u{2}\u{2}\u{178D}" .
        "\u{178F}\u{5}\u{1FE}\u{100}\u{2}\u{178E}\u{178C}\u{3}\u{2}\u{2}\u{2}" .
        "\u{178F}\u{1792}\u{3}\u{2}\u{2}\u{2}\u{1790}\u{178E}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1790}\u{1791}\u{3}\u{2}\u{2}\u{2}\u{1791}\u{239}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1792}\u{1790}\u{3}\u{2}\u{2}\u{2}\u{1793}\u{1798}\u{5}" .
        "\u{1FE}\u{100}\u{2}\u{1794}\u{1795}\u{7}\u{440}\u{2}\u{2}\u{1795}" .
        "\u{1797}\u{5}\u{1FE}\u{100}\u{2}\u{1796}\u{1794}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1797}\u{179A}\u{3}\u{2}\u{2}\u{2}\u{1798}\u{1796}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1798}\u{1799}\u{3}\u{2}\u{2}\u{2}\u{1799}\u{23B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{179A}\u{1798}\u{3}\u{2}\u{2}\u{2}\u{179B}\u{179C}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{179C}\u{17A1}\u{5}\u{202}\u{102}\u{2}\u{179D}" .
        "\u{179E}\u{7}\u{440}\u{2}\u{2}\u{179E}\u{17A0}\u{5}\u{202}\u{102}" .
        "\u{2}\u{179F}\u{179D}\u{3}\u{2}\u{2}\u{2}\u{17A0}\u{17A3}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17A1}\u{179F}\u{3}\u{2}\u{2}\u{2}\u{17A1}\u{17A2}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17A2}\u{17A4}\u{3}\u{2}\u{2}\u{2}\u{17A3}\u{17A1}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17A4}\u{17A5}\u{7}\u{43F}\u{2}\u{2}\u{17A5}" .
        "\u{23D}\u{3}\u{2}\u{2}\u{2}\u{17A6}\u{17AB}\u{5}\u{27A}\u{13E}\u{2}" .
        "\u{17A7}\u{17A8}\u{7}\u{440}\u{2}\u{2}\u{17A8}\u{17AA}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{17A9}\u{17A7}\u{3}\u{2}\u{2}\u{2}\u{17AA}\u{17AD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17AB}\u{17A9}\u{3}\u{2}\u{2}\u{2}\u{17AB}\u{17AC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17AC}\u{23F}\u{3}\u{2}\u{2}\u{2}\u{17AD}\u{17AB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17AE}\u{17B3}\u{5}\u{24C}\u{127}\u{2}\u{17AF}" .
        "\u{17B0}\u{7}\u{440}\u{2}\u{2}\u{17B0}\u{17B2}\u{5}\u{24C}\u{127}" .
        "\u{2}\u{17B1}\u{17AF}\u{3}\u{2}\u{2}\u{2}\u{17B2}\u{17B5}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17B3}\u{17B1}\u{3}\u{2}\u{2}\u{2}\u{17B3}\u{17B4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17B4}\u{241}\u{3}\u{2}\u{2}\u{2}\u{17B5}\u{17B3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17B6}\u{17BB}\u{5}\u{228}\u{115}\u{2}\u{17B7}" .
        "\u{17B8}\u{7}\u{440}\u{2}\u{2}\u{17B8}\u{17BA}\u{5}\u{228}\u{115}" .
        "\u{2}\u{17B9}\u{17B7}\u{3}\u{2}\u{2}\u{2}\u{17BA}\u{17BD}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17BB}\u{17B9}\u{3}\u{2}\u{2}\u{2}\u{17BB}\u{17BC}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17BC}\u{243}\u{3}\u{2}\u{2}\u{2}\u{17BD}\u{17BB}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17BE}\u{17C3}\u{7}\u{44D}\u{2}\u{2}\u{17BF}" .
        "\u{17C0}\u{7}\u{440}\u{2}\u{2}\u{17C0}\u{17C2}\u{7}\u{44D}\u{2}\u{2}" .
        "\u{17C1}\u{17BF}\u{3}\u{2}\u{2}\u{2}\u{17C2}\u{17C5}\u{3}\u{2}\u{2}" .
        "\u{2}\u{17C3}\u{17C1}\u{3}\u{2}\u{2}\u{2}\u{17C3}\u{17C4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17C4}\u{245}\u{3}\u{2}\u{2}\u{2}\u{17C5}\u{17C3}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17C6}\u{17CB}\u{7}\u{459}\u{2}\u{2}\u{17C7}\u{17C8}" .
        "\u{7}\u{440}\u{2}\u{2}\u{17C8}\u{17CA}\u{7}\u{459}\u{2}\u{2}\u{17C9}" .
        "\u{17C7}\u{3}\u{2}\u{2}\u{2}\u{17CA}\u{17CD}\u{3}\u{2}\u{2}\u{2}\u{17CB}" .
        "\u{17C9}\u{3}\u{2}\u{2}\u{2}\u{17CB}\u{17CC}\u{3}\u{2}\u{2}\u{2}\u{17CC}" .
        "\u{247}\u{3}\u{2}\u{2}\u{2}\u{17CD}\u{17CB}\u{3}\u{2}\u{2}\u{2}\u{17CE}" .
        "\u{17D9}\u{7}\u{6F}\u{2}\u{2}\u{17CF}\u{17D1}\u{5}\u{280}\u{141}\u{2}" .
        "\u{17D0}\u{17CF}\u{3}\u{2}\u{2}\u{2}\u{17D0}\u{17D1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{17D1}\u{17D2}\u{3}\u{2}\u{2}\u{2}\u{17D2}\u{17D9}\u{5}\u{228}" .
        "\u{115}\u{2}\u{17D3}\u{17D9}\u{5}\u{24A}\u{126}\u{2}\u{17D4}\u{17D5}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{17D5}\u{17D6}\u{5}\u{27A}\u{13E}\u{2}\u{17D6}" .
        "\u{17D7}\u{7}\u{43F}\u{2}\u{2}\u{17D7}\u{17D9}\u{3}\u{2}\u{2}\u{2}" .
        "\u{17D8}\u{17CE}\u{3}\u{2}\u{2}\u{2}\u{17D8}\u{17D0}\u{3}\u{2}\u{2}" .
        "\u{2}\u{17D8}\u{17D3}\u{3}\u{2}\u{2}\u{2}\u{17D8}\u{17D4}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17D9}\u{17DD}\u{3}\u{2}\u{2}\u{2}\u{17DA}\u{17DB}\u{7}" .
        "\u{71}\u{2}\u{2}\u{17DB}\u{17DC}\u{7}\u{AF}\u{2}\u{2}\u{17DC}\u{17DE}" .
        "\u{5}\u{24A}\u{126}\u{2}\u{17DD}\u{17DA}\u{3}\u{2}\u{2}\u{2}\u{17DD}" .
        "\u{17DE}\u{3}\u{2}\u{2}\u{2}\u{17DE}\u{249}\u{3}\u{2}\u{2}\u{2}\u{17DF}" .
        "\u{17E5}\u{9}\u{6C}\u{2}\u{2}\u{17E0}\u{17E2}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{17E1}\u{17E3}\u{5}\u{21C}\u{10F}\u{2}\u{17E2}\u{17E1}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17E2}\u{17E3}\u{3}\u{2}\u{2}\u{2}\u{17E3}\u{17E4}\u{3}" .
        "\u{2}\u{2}\u{2}\u{17E4}\u{17E6}\u{7}\u{43F}\u{2}\u{2}\u{17E5}\u{17E0}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17E5}\u{17E6}\u{3}\u{2}\u{2}\u{2}\u{17E6}\u{17EE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17E7}\u{17E8}\u{7}\u{137}\u{2}\u{2}\u{17E8}" .
        "\u{17EA}\u{7}\u{43E}\u{2}\u{2}\u{17E9}\u{17EB}\u{5}\u{21C}\u{10F}" .
        "\u{2}\u{17EA}\u{17E9}\u{3}\u{2}\u{2}\u{2}\u{17EA}\u{17EB}\u{3}\u{2}" .
        "\u{2}\u{2}\u{17EB}\u{17EC}\u{3}\u{2}\u{2}\u{2}\u{17EC}\u{17EE}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{17ED}\u{17DF}\u{3}\u{2}\u{2}\u{2}\u{17ED}\u{17E7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{17EE}\u{24B}\u{3}\u{2}\u{2}\u{2}\u{17EF}\u{17F2}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{17F0}\u{17F2}\u{7}\u{2A}\u{2}\u{2}\u{17F1}" .
        "\u{17EF}\u{3}\u{2}\u{2}\u{2}\u{17F1}\u{17F0}\u{3}\u{2}\u{2}\u{2}\u{17F2}" .
        "\u{24D}\u{3}\u{2}\u{2}\u{2}\u{17F3}\u{17F4}\u{7}\u{4C}\u{2}\u{2}\u{17F4}" .
        "\u{17F5}\u{7}\u{3B}\u{2}\u{2}\u{17F5}\u{24F}\u{3}\u{2}\u{2}\u{2}\u{17F6}" .
        "\u{17F7}\u{7}\u{4C}\u{2}\u{2}\u{17F7}\u{17F8}\u{7}\u{6D}\u{2}\u{2}" .
        "\u{17F8}\u{17F9}\u{7}\u{3B}\u{2}\u{2}\u{17F9}\u{251}\u{3}\u{2}\u{2}" .
        "\u{2}\u{17FA}\u{180D}\u{5}\u{254}\u{12B}\u{2}\u{17FB}\u{180D}\u{5}" .
        "\u{25C}\u{12F}\u{2}\u{17FC}\u{180D}\u{5}\u{25E}\u{130}\u{2}\u{17FD}" .
        "\u{17FE}\u{5}\u{272}\u{13A}\u{2}\u{17FE}\u{1800}\u{7}\u{43E}\u{2}" .
        "\u{2}\u{17FF}\u{1801}\u{5}\u{276}\u{13C}\u{2}\u{1800}\u{17FF}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1800}\u{1801}\u{3}\u{2}\u{2}\u{2}\u{1801}\u{1802}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1802}\u{1803}\u{7}\u{43F}\u{2}\u{2}\u{1803}" .
        "\u{180D}\u{3}\u{2}\u{2}\u{2}\u{1804}\u{1805}\u{5}\u{1FC}\u{FF}\u{2}" .
        "\u{1805}\u{1807}\u{7}\u{43E}\u{2}\u{2}\u{1806}\u{1808}\u{5}\u{276}" .
        "\u{13C}\u{2}\u{1807}\u{1806}\u{3}\u{2}\u{2}\u{2}\u{1807}\u{1808}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1808}\u{1809}\u{3}\u{2}\u{2}\u{2}\u{1809}\u{180A}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{180A}\u{180D}\u{3}\u{2}\u{2}\u{2}\u{180B}" .
        "\u{180D}\u{5}\u{274}\u{13B}\u{2}\u{180C}\u{17FA}\u{3}\u{2}\u{2}\u{2}" .
        "\u{180C}\u{17FB}\u{3}\u{2}\u{2}\u{2}\u{180C}\u{17FC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{180C}\u{17FD}\u{3}\u{2}\u{2}\u{2}\u{180C}\u{1804}\u{3}\u{2}" .
        "\u{2}\u{2}\u{180C}\u{180B}\u{3}\u{2}\u{2}\u{2}\u{180D}\u{253}\u{3}" .
        "\u{2}\u{2}\u{2}\u{180E}\u{1811}\u{9}\u{6D}\u{2}\u{2}\u{180F}\u{1810}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{1810}\u{1812}\u{7}\u{43F}\u{2}\u{2}\u{1811}" .
        "\u{180F}\u{3}\u{2}\u{2}\u{2}\u{1811}\u{1812}\u{3}\u{2}\u{2}\u{2}\u{1812}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{1813}\u{1814}\u{7}\u{21}\u{2}\u{2}" .
        "\u{1814}\u{1815}\u{7}\u{43E}\u{2}\u{2}\u{1815}\u{1816}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{1816}\u{1817}\u{7}\u{440}\u{2}\u{2}\u{1817}\u{1818}" .
        "\u{5}\u{22E}\u{118}\u{2}\u{1818}\u{1819}\u{7}\u{43F}\u{2}\u{2}\u{1819}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{181A}\u{181B}\u{7}\u{21}\u{2}\u{2}" .
        "\u{181B}\u{181C}\u{7}\u{43E}\u{2}\u{2}\u{181C}\u{181D}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{181D}\u{181E}\u{7}\u{B2}\u{2}\u{2}\u{181E}\u{181F}" .
        "\u{5}\u{208}\u{105}\u{2}\u{181F}\u{1820}\u{7}\u{43F}\u{2}\u{2}\u{1820}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{1821}\u{1822}\u{7}\u{18}\u{2}\u{2}" .
        "\u{1822}\u{1823}\u{7}\u{43E}\u{2}\u{2}\u{1823}\u{1824}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{1824}\u{1825}\u{7}\u{E}\u{2}\u{2}\u{1825}\u{1826}\u{5}" .
        "\u{22E}\u{118}\u{2}\u{1826}\u{1827}\u{7}\u{43F}\u{2}\u{2}\u{1827}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{1828}\u{1829}\u{7}\u{B3}\u{2}\u{2}" .
        "\u{1829}\u{182A}\u{7}\u{43E}\u{2}\u{2}\u{182A}\u{182B}\u{5}\u{200}" .
        "\u{101}\u{2}\u{182B}\u{182C}\u{7}\u{43F}\u{2}\u{2}\u{182C}\u{18CF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{182D}\u{182E}\u{7}\u{17}\u{2}\u{2}\u{182E}" .
        "\u{1830}\u{5}\u{27A}\u{13E}\u{2}\u{182F}\u{1831}\u{5}\u{256}\u{12C}" .
        "\u{2}\u{1830}\u{182F}\u{3}\u{2}\u{2}\u{2}\u{1831}\u{1832}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1832}\u{1830}\u{3}\u{2}\u{2}\u{2}\u{1832}\u{1833}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1833}\u{1836}\u{3}\u{2}\u{2}\u{2}\u{1834}\u{1835}" .
        "\u{7}\u{35}\u{2}\u{2}\u{1835}\u{1837}\u{5}\u{278}\u{13D}\u{2}\u{1836}" .
        "\u{1834}\u{3}\u{2}\u{2}\u{2}\u{1836}\u{1837}\u{3}\u{2}\u{2}\u{2}\u{1837}" .
        "\u{1838}\u{3}\u{2}\u{2}\u{2}\u{1838}\u{1839}\u{7}\u{187}\u{2}\u{2}" .
        "\u{1839}\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{183A}\u{183C}\u{7}\u{17}\u{2}" .
        "\u{2}\u{183B}\u{183D}\u{5}\u{256}\u{12C}\u{2}\u{183C}\u{183B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{183D}\u{183E}\u{3}\u{2}\u{2}\u{2}\u{183E}\u{183C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{183E}\u{183F}\u{3}\u{2}\u{2}\u{2}\u{183F}\u{1842}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1840}\u{1841}\u{7}\u{35}\u{2}\u{2}\u{1841}" .
        "\u{1843}\u{5}\u{278}\u{13D}\u{2}\u{1842}\u{1840}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1842}\u{1843}\u{3}\u{2}\u{2}\u{2}\u{1843}\u{1844}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1844}\u{1845}\u{7}\u{187}\u{2}\u{2}\u{1845}\u{18CF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1846}\u{1847}\u{7}\u{D5}\u{2}\u{2}\u{1847}\u{1848}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{1848}\u{184B}\u{5}\u{276}\u{13C}\u{2}\u{1849}" .
        "\u{184A}\u{7}\u{B2}\u{2}\u{2}\u{184A}\u{184C}\u{5}\u{208}\u{105}\u{2}" .
        "\u{184B}\u{1849}\u{3}\u{2}\u{2}\u{2}\u{184B}\u{184C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{184C}\u{184D}\u{3}\u{2}\u{2}\u{2}\u{184D}\u{184E}\u{7}\u{43F}" .
        "\u{2}\u{2}\u{184E}\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{184F}\u{1850}\u{7}" .
        "\u{138}\u{2}\u{2}\u{1850}\u{1853}\u{7}\u{43E}\u{2}\u{2}\u{1851}\u{1854}" .
        "\u{5}\u{220}\u{111}\u{2}\u{1852}\u{1854}\u{5}\u{27A}\u{13E}\u{2}\u{1853}" .
        "\u{1851}\u{3}\u{2}\u{2}\u{2}\u{1853}\u{1852}\u{3}\u{2}\u{2}\u{2}\u{1854}" .
        "\u{1855}\u{3}\u{2}\u{2}\u{2}\u{1855}\u{1858}\u{7}\u{4E}\u{2}\u{2}" .
        "\u{1856}\u{1859}\u{5}\u{220}\u{111}\u{2}\u{1857}\u{1859}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{1858}\u{1856}\u{3}\u{2}\u{2}\u{2}\u{1858}\u{1857}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1859}\u{185A}\u{3}\u{2}\u{2}\u{2}\u{185A}\u{185B}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{185B}\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{185C}" .
        "\u{185D}\u{9}\u{6E}\u{2}\u{2}\u{185D}\u{1860}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{185E}\u{1861}\u{5}\u{220}\u{111}\u{2}\u{185F}\u{1861}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{1860}\u{185E}\u{3}\u{2}\u{2}\u{2}\u{1860}\u{185F}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1861}\u{1862}\u{3}\u{2}\u{2}\u{2}\u{1862}\u{1865}" .
        "\u{7}\u{43}\u{2}\u{2}\u{1863}\u{1866}\u{5}\u{21C}\u{10F}\u{2}\u{1864}" .
        "\u{1866}\u{5}\u{27A}\u{13E}\u{2}\u{1865}\u{1863}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1865}\u{1864}\u{3}\u{2}\u{2}\u{2}\u{1866}\u{186C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1867}\u{186A}\u{7}\u{40}\u{2}\u{2}\u{1868}\u{186B}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1869}\u{186B}\u{5}\u{27A}\u{13E}\u{2}\u{186A}\u{1868}" .
        "\u{3}\u{2}\u{2}\u{2}\u{186A}\u{1869}\u{3}\u{2}\u{2}\u{2}\u{186B}\u{186D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{186C}\u{1867}\u{3}\u{2}\u{2}\u{2}\u{186C}\u{186D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{186D}\u{186E}\u{3}\u{2}\u{2}\u{2}\u{186E}\u{186F}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{186F}\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{1870}" .
        "\u{1871}\u{7}\u{13C}\u{2}\u{2}\u{1871}\u{1872}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{1872}\u{1875}\u{9}\u{6F}\u{2}\u{2}\u{1873}\u{1876}\u{5}\u{220}" .
        "\u{111}\u{2}\u{1874}\u{1876}\u{5}\u{27A}\u{13E}\u{2}\u{1875}\u{1873}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1875}\u{1874}\u{3}\u{2}\u{2}\u{2}\u{1875}\u{1876}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1876}\u{1877}\u{3}\u{2}\u{2}\u{2}\u{1877}\u{187A}" .
        "\u{7}\u{43}\u{2}\u{2}\u{1878}\u{187B}\u{5}\u{220}\u{111}\u{2}\u{1879}" .
        "\u{187B}\u{5}\u{27A}\u{13E}\u{2}\u{187A}\u{1878}\u{3}\u{2}\u{2}\u{2}" .
        "\u{187A}\u{1879}\u{3}\u{2}\u{2}\u{2}\u{187B}\u{187C}\u{3}\u{2}\u{2}" .
        "\u{2}\u{187C}\u{187D}\u{7}\u{43F}\u{2}\u{2}\u{187D}\u{18CF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{187E}\u{187F}\u{7}\u{13C}\u{2}\u{2}\u{187F}\u{1882}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{1880}\u{1883}\u{5}\u{220}\u{111}\u{2}\u{1881}" .
        "\u{1883}\u{5}\u{27A}\u{13E}\u{2}\u{1882}\u{1880}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1882}\u{1881}\u{3}\u{2}\u{2}\u{2}\u{1883}\u{1884}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1884}\u{1887}\u{7}\u{43}\u{2}\u{2}\u{1885}\u{1888}\u{5}\u{220}" .
        "\u{111}\u{2}\u{1886}\u{1888}\u{5}\u{27A}\u{13E}\u{2}\u{1887}\u{1885}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1887}\u{1886}\u{3}\u{2}\u{2}\u{2}\u{1888}\u{1889}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1889}\u{188A}\u{7}\u{43F}\u{2}\u{2}\u{188A}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{188B}\u{188C}\u{7}\u{420}\u{2}\u{2}" .
        "\u{188C}\u{188F}\u{7}\u{43E}\u{2}\u{2}\u{188D}\u{1890}\u{5}\u{220}" .
        "\u{111}\u{2}\u{188E}\u{1890}\u{5}\u{27A}\u{13E}\u{2}\u{188F}\u{188D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{188F}\u{188E}\u{3}\u{2}\u{2}\u{2}\u{1890}\u{1897}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1891}\u{1892}\u{7}\u{E}\u{2}\u{2}\u{1892}\u{1893}" .
        "\u{9}\u{70}\u{2}\u{2}\u{1893}\u{1894}\u{7}\u{43E}\u{2}\u{2}\u{1894}" .
        "\u{1895}\u{5}\u{21C}\u{10F}\u{2}\u{1895}\u{1896}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{1896}\u{1898}\u{3}\u{2}\u{2}\u{2}\u{1897}\u{1891}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1897}\u{1898}\u{3}\u{2}\u{2}\u{2}\u{1898}\u{189A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1899}\u{189B}\u{5}\u{258}\u{12D}\u{2}\u{189A}\u{1899}" .
        "\u{3}\u{2}\u{2}\u{2}\u{189A}\u{189B}\u{3}\u{2}\u{2}\u{2}\u{189B}\u{189C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{189C}\u{189D}\u{7}\u{43F}\u{2}\u{2}\u{189D}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{189E}\u{189F}\u{7}\u{135}\u{2}\u{2}" .
        "\u{189F}\u{18A0}\u{7}\u{43E}\u{2}\u{2}\u{18A0}\u{18A1}\u{5}\u{3C}" .
        "\u{1F}\u{2}\u{18A1}\u{18A4}\u{7}\u{43}\u{2}\u{2}\u{18A2}\u{18A5}\u{5}" .
        "\u{220}\u{111}\u{2}\u{18A3}\u{18A5}\u{5}\u{27A}\u{13E}\u{2}\u{18A4}" .
        "\u{18A2}\u{3}\u{2}\u{2}\u{2}\u{18A4}\u{18A3}\u{3}\u{2}\u{2}\u{2}\u{18A5}" .
        "\u{18A6}\u{3}\u{2}\u{2}\u{2}\u{18A6}\u{18A7}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{18A7}\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{18A8}\u{18A9}\u{7}\u{358}\u{2}" .
        "\u{2}\u{18A9}\u{18AA}\u{7}\u{43E}\u{2}\u{2}\u{18AA}\u{18AB}\u{9}\u{71}" .
        "\u{2}\u{2}\u{18AB}\u{18AC}\u{7}\u{440}\u{2}\u{2}\u{18AC}\u{18AD}\u{5}" .
        "\u{220}\u{111}\u{2}\u{18AD}\u{18AE}\u{7}\u{43F}\u{2}\u{2}\u{18AE}" .
        "\u{18CF}\u{3}\u{2}\u{2}\u{2}\u{18AF}\u{18B0}\u{7}\u{FB}\u{2}\u{2}" .
        "\u{18B0}\u{18B1}\u{7}\u{43E}\u{2}\u{2}\u{18B1}\u{18B2}\u{5}\u{27A}" .
        "\u{13E}\u{2}\u{18B2}\u{18B3}\u{7}\u{440}\u{2}\u{2}\u{18B3}\u{18B6}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{18B4}\u{18B5}\u{7}\u{232}\u{2}\u{2}\u{18B5}" .
        "\u{18B7}\u{5}\u{22E}\u{118}\u{2}\u{18B6}\u{18B4}\u{3}\u{2}\u{2}\u{2}" .
        "\u{18B6}\u{18B7}\u{3}\u{2}\u{2}\u{2}\u{18B7}\u{18C0}\u{3}\u{2}\u{2}" .
        "\u{2}\u{18B8}\u{18BD}\u{7}\u{6F}\u{2}\u{2}\u{18B9}\u{18BD}\u{7}\u{18B}" .
        "\u{2}\u{2}\u{18BA}\u{18BB}\u{7}\u{2A}\u{2}\u{2}\u{18BB}\u{18BD}\u{5}" .
        "\u{248}\u{125}\u{2}\u{18BC}\u{18B8}\u{3}\u{2}\u{2}\u{2}\u{18BC}\u{18B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18BC}\u{18BA}\u{3}\u{2}\u{2}\u{2}\u{18BD}\u{18BE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18BE}\u{18BF}\u{7}\u{71}\u{2}\u{2}\u{18BF}" .
        "\u{18C1}\u{7}\u{37}\u{2}\u{2}\u{18C0}\u{18BC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{18C0}\u{18C1}\u{3}\u{2}\u{2}\u{2}\u{18C1}\u{18CA}\u{3}\u{2}\u{2}" .
        "\u{2}\u{18C2}\u{18C7}\u{7}\u{6F}\u{2}\u{2}\u{18C3}\u{18C7}\u{7}\u{18B}" .
        "\u{2}\u{2}\u{18C4}\u{18C5}\u{7}\u{2A}\u{2}\u{2}\u{18C5}\u{18C7}\u{5}" .
        "\u{248}\u{125}\u{2}\u{18C6}\u{18C2}\u{3}\u{2}\u{2}\u{2}\u{18C6}\u{18C3}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18C6}\u{18C4}\u{3}\u{2}\u{2}\u{2}\u{18C7}\u{18C8}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18C8}\u{18C9}\u{7}\u{71}\u{2}\u{2}\u{18C9}" .
        "\u{18CB}\u{7}\u{18B}\u{2}\u{2}\u{18CA}\u{18C6}\u{3}\u{2}\u{2}\u{2}" .
        "\u{18CA}\u{18CB}\u{3}\u{2}\u{2}\u{2}\u{18CB}\u{18CC}\u{3}\u{2}\u{2}" .
        "\u{2}\u{18CC}\u{18CD}\u{7}\u{43F}\u{2}\u{2}\u{18CD}\u{18CF}\u{3}\u{2}" .
        "\u{2}\u{2}\u{18CE}\u{180E}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{1813}\u{3}" .
        "\u{2}\u{2}\u{2}\u{18CE}\u{181A}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{1821}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{1828}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{182D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{183A}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{1846}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{184F}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{185C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{1870}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{187E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{188B}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{189E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{18A8}\u{3}\u{2}\u{2}\u{2}\u{18CE}\u{18AF}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18CF}\u{255}\u{3}\u{2}\u{2}\u{2}\u{18D0}\u{18D1}" .
        "\u{7}\u{B4}\u{2}\u{2}\u{18D1}\u{18D2}\u{5}\u{278}\u{13D}\u{2}\u{18D2}" .
        "\u{18D3}\u{7}\u{A5}\u{2}\u{2}\u{18D3}\u{18D4}\u{5}\u{278}\u{13D}\u{2}" .
        "\u{18D4}\u{257}\u{3}\u{2}\u{2}\u{2}\u{18D5}\u{18D6}\u{7}\u{1C4}\u{2}" .
        "\u{2}\u{18D6}\u{18DB}\u{5}\u{25A}\u{12E}\u{2}\u{18D7}\u{18D8}\u{7}" .
        "\u{440}\u{2}\u{2}\u{18D8}\u{18DA}\u{5}\u{25A}\u{12E}\u{2}\u{18D9}" .
        "\u{18D7}\u{3}\u{2}\u{2}\u{2}\u{18DA}\u{18DD}\u{3}\u{2}\u{2}\u{2}\u{18DB}" .
        "\u{18D9}\u{3}\u{2}\u{2}\u{2}\u{18DB}\u{18DC}\u{3}\u{2}\u{2}\u{2}\u{18DC}" .
        "\u{18E4}\u{3}\u{2}\u{2}\u{2}\u{18DD}\u{18DB}\u{3}\u{2}\u{2}\u{2}\u{18DE}" .
        "\u{18DF}\u{7}\u{1C4}\u{2}\u{2}\u{18DF}\u{18E0}\u{5}\u{21C}\u{10F}" .
        "\u{2}\u{18E0}\u{18E1}\u{7}\u{432}\u{2}\u{2}\u{18E1}\u{18E2}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{18E2}\u{18E4}\u{3}\u{2}\u{2}\u{2}\u{18E3}\u{18D5}\u{3}" .
        "\u{2}\u{2}\u{2}\u{18E3}\u{18DE}\u{3}\u{2}\u{2}\u{2}\u{18E4}\u{259}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18E5}\u{18E7}\u{5}\u{21C}\u{10F}\u{2}\u{18E6}" .
        "\u{18E8}\u{9}\u{72}\u{2}\u{2}\u{18E7}\u{18E6}\u{3}\u{2}\u{2}\u{2}" .
        "\u{18E7}\u{18E8}\u{3}\u{2}\u{2}\u{2}\u{18E8}\u{25B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{18E9}\u{18EA}\u{9}\u{73}\u{2}\u{2}\u{18EA}\u{18EC}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{18EB}\u{18ED}\u{9}\u{2A}\u{2}\u{2}\u{18EC}\u{18EB}\u{3}" .
        "\u{2}\u{2}\u{2}\u{18EC}\u{18ED}\u{3}\u{2}\u{2}\u{2}\u{18ED}\u{18EE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18EE}\u{18EF}\u{5}\u{278}\u{13D}\u{2}\u{18EF}" .
        "\u{18F1}\u{7}\u{43F}\u{2}\u{2}\u{18F0}\u{18F2}\u{5}\u{260}\u{131}" .
        "\u{2}\u{18F1}\u{18F0}\u{3}\u{2}\u{2}\u{2}\u{18F1}\u{18F2}\u{3}\u{2}" .
        "\u{2}\u{2}\u{18F2}\u{1925}\u{3}\u{2}\u{2}\u{2}\u{18F3}\u{18F4}\u{7}" .
        "\u{116}\u{2}\u{2}\u{18F4}\u{18FC}\u{7}\u{43E}\u{2}\u{2}\u{18F5}\u{18FD}" .
        "\u{7}\u{42E}\u{2}\u{2}\u{18F6}\u{18F8}\u{7}\u{8}\u{2}\u{2}\u{18F7}" .
        "\u{18F6}\u{3}\u{2}\u{2}\u{2}\u{18F7}\u{18F8}\u{3}\u{2}\u{2}\u{2}\u{18F8}" .
        "\u{18F9}\u{3}\u{2}\u{2}\u{2}\u{18F9}\u{18FD}\u{5}\u{278}\u{13D}\u{2}" .
        "\u{18FA}\u{18FB}\u{7}\u{31}\u{2}\u{2}\u{18FB}\u{18FD}\u{5}\u{276}" .
        "\u{13C}\u{2}\u{18FC}\u{18F5}\u{3}\u{2}\u{2}\u{2}\u{18FC}\u{18F7}\u{3}" .
        "\u{2}\u{2}\u{2}\u{18FC}\u{18FA}\u{3}\u{2}\u{2}\u{2}\u{18FD}\u{18FE}" .
        "\u{3}\u{2}\u{2}\u{2}\u{18FE}\u{1900}\u{7}\u{43F}\u{2}\u{2}\u{18FF}" .
        "\u{1901}\u{5}\u{260}\u{131}\u{2}\u{1900}\u{18FF}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1900}\u{1901}\u{3}\u{2}\u{2}\u{2}\u{1901}\u{1925}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1902}\u{1903}\u{9}\u{74}\u{2}\u{2}\u{1903}\u{1905}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{1904}\u{1906}\u{7}\u{8}\u{2}\u{2}\u{1905}\u{1904}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1905}\u{1906}\u{3}\u{2}\u{2}\u{2}\u{1906}\u{1907}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1907}\u{1908}\u{5}\u{278}\u{13D}\u{2}\u{1908}" .
        "\u{190A}\u{7}\u{43F}\u{2}\u{2}\u{1909}\u{190B}\u{5}\u{260}\u{131}" .
        "\u{2}\u{190A}\u{1909}\u{3}\u{2}\u{2}\u{2}\u{190A}\u{190B}\u{3}\u{2}" .
        "\u{2}\u{2}\u{190B}\u{1925}\u{3}\u{2}\u{2}\u{2}\u{190C}\u{190D}\u{7}" .
        "\u{11A}\u{2}\u{2}\u{190D}\u{190F}\u{7}\u{43E}\u{2}\u{2}\u{190E}\u{1910}" .
        "\u{7}\u{31}\u{2}\u{2}\u{190F}\u{190E}\u{3}\u{2}\u{2}\u{2}\u{190F}" .
        "\u{1910}\u{3}\u{2}\u{2}\u{2}\u{1910}\u{1911}\u{3}\u{2}\u{2}\u{2}\u{1911}" .
        "\u{191C}\u{5}\u{276}\u{13C}\u{2}\u{1912}\u{1913}\u{7}\u{76}\u{2}\u{2}" .
        "\u{1913}\u{1914}\u{7}\u{14}\u{2}\u{2}\u{1914}\u{1919}\u{5}\u{D4}\u{6B}" .
        "\u{2}\u{1915}\u{1916}\u{7}\u{440}\u{2}\u{2}\u{1916}\u{1918}\u{5}\u{D4}" .
        "\u{6B}\u{2}\u{1917}\u{1915}\u{3}\u{2}\u{2}\u{2}\u{1918}\u{191B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1919}\u{1917}\u{3}\u{2}\u{2}\u{2}\u{1919}\u{191A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{191A}\u{191D}\u{3}\u{2}\u{2}\u{2}\u{191B}\u{1919}" .
        "\u{3}\u{2}\u{2}\u{2}\u{191C}\u{1912}\u{3}\u{2}\u{2}\u{2}\u{191C}\u{191D}" .
        "\u{3}\u{2}\u{2}\u{2}\u{191D}\u{1920}\u{3}\u{2}\u{2}\u{2}\u{191E}\u{191F}" .
        "\u{7}\u{94}\u{2}\u{2}\u{191F}\u{1921}\u{7}\u{44D}\u{2}\u{2}\u{1920}" .
        "\u{191E}\u{3}\u{2}\u{2}\u{2}\u{1920}\u{1921}\u{3}\u{2}\u{2}\u{2}\u{1921}" .
        "\u{1922}\u{3}\u{2}\u{2}\u{2}\u{1922}\u{1923}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{1923}\u{1925}\u{3}\u{2}\u{2}\u{2}\u{1924}\u{18E9}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1924}\u{18F3}\u{3}\u{2}\u{2}\u{2}\u{1924}\u{1902}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1924}\u{190C}\u{3}\u{2}\u{2}\u{2}\u{1925}\u{25D}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1926}\u{1927}\u{9}\u{75}\u{2}\u{2}\u{1927}\u{1928}" .
        "\u{7}\u{43E}\u{2}\u{2}\u{1928}\u{192B}\u{5}\u{27A}\u{13E}\u{2}\u{1929}" .
        "\u{192A}\u{7}\u{440}\u{2}\u{2}\u{192A}\u{192C}\u{5}\u{21C}\u{10F}" .
        "\u{2}\u{192B}\u{1929}\u{3}\u{2}\u{2}\u{2}\u{192B}\u{192C}\u{3}\u{2}" .
        "\u{2}\u{2}\u{192C}\u{192F}\u{3}\u{2}\u{2}\u{2}\u{192D}\u{192E}\u{7}" .
        "\u{440}\u{2}\u{2}\u{192E}\u{1930}\u{5}\u{21C}\u{10F}\u{2}\u{192F}" .
        "\u{192D}\u{3}\u{2}\u{2}\u{2}\u{192F}\u{1930}\u{3}\u{2}\u{2}\u{2}\u{1930}" .
        "\u{1931}\u{3}\u{2}\u{2}\u{2}\u{1931}\u{1932}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{1932}\u{1933}\u{5}\u{260}\u{131}\u{2}\u{1933}\u{194D}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1934}\u{1935}\u{9}\u{76}\u{2}\u{2}\u{1935}\u{1936}\u{7}" .
        "\u{43E}\u{2}\u{2}\u{1936}\u{1937}\u{5}\u{27A}\u{13E}\u{2}\u{1937}" .
        "\u{1938}\u{7}\u{43F}\u{2}\u{2}\u{1938}\u{1939}\u{5}\u{260}\u{131}" .
        "\u{2}\u{1939}\u{194D}\u{3}\u{2}\u{2}\u{2}\u{193A}\u{193B}\u{9}\u{77}" .
        "\u{2}\u{2}\u{193B}\u{193C}\u{7}\u{43E}\u{2}\u{2}\u{193C}\u{193D}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{193D}\u{194D}\u{5}\u{260}\u{131}\u{2}\u{193E}" .
        "\u{193F}\u{7}\u{121}\u{2}\u{2}\u{193F}\u{1940}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{1940}\u{1941}\u{5}\u{27A}\u{13E}\u{2}\u{1941}\u{1942}\u{7}\u{440}" .
        "\u{2}\u{2}\u{1942}\u{1943}\u{5}\u{21C}\u{10F}\u{2}\u{1943}\u{1944}" .
        "\u{7}\u{43F}\u{2}\u{2}\u{1944}\u{1945}\u{5}\u{260}\u{131}\u{2}\u{1945}" .
        "\u{194D}\u{3}\u{2}\u{2}\u{2}\u{1946}\u{1947}\u{7}\u{120}\u{2}\u{2}" .
        "\u{1947}\u{1948}\u{7}\u{43E}\u{2}\u{2}\u{1948}\u{1949}\u{5}\u{21C}" .
        "\u{10F}\u{2}\u{1949}\u{194A}\u{7}\u{43F}\u{2}\u{2}\u{194A}\u{194B}" .
        "\u{5}\u{260}\u{131}\u{2}\u{194B}\u{194D}\u{3}\u{2}\u{2}\u{2}\u{194C}" .
        "\u{1926}\u{3}\u{2}\u{2}\u{2}\u{194C}\u{1934}\u{3}\u{2}\u{2}\u{2}\u{194C}" .
        "\u{193A}\u{3}\u{2}\u{2}\u{2}\u{194C}\u{193E}\u{3}\u{2}\u{2}\u{2}\u{194C}" .
        "\u{1946}\u{3}\u{2}\u{2}\u{2}\u{194D}\u{25F}\u{3}\u{2}\u{2}\u{2}\u{194E}" .
        "\u{1955}\u{7}\u{78}\u{2}\u{2}\u{194F}\u{1951}\u{7}\u{43E}\u{2}\u{2}" .
        "\u{1950}\u{1952}\u{5}\u{262}\u{132}\u{2}\u{1951}\u{1950}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1951}\u{1952}\u{3}\u{2}\u{2}\u{2}\u{1952}\u{1953}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1953}\u{1956}\u{7}\u{43F}\u{2}\u{2}\u{1954}\u{1956}" .
        "\u{5}\u{264}\u{133}\u{2}\u{1955}\u{194F}\u{3}\u{2}\u{2}\u{2}\u{1955}" .
        "\u{1954}\u{3}\u{2}\u{2}\u{2}\u{1956}\u{261}\u{3}\u{2}\u{2}\u{2}\u{1957}" .
        "\u{1959}\u{5}\u{264}\u{133}\u{2}\u{1958}\u{1957}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1958}\u{1959}\u{3}\u{2}\u{2}\u{2}\u{1959}\u{195B}\u{3}\u{2}\u{2}" .
        "\u{2}\u{195A}\u{195C}\u{5}\u{270}\u{139}\u{2}\u{195B}\u{195A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{195B}\u{195C}\u{3}\u{2}\u{2}\u{2}\u{195C}\u{195E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{195D}\u{195F}\u{5}\u{D2}\u{6A}\u{2}\u{195E}" .
        "\u{195D}\u{3}\u{2}\u{2}\u{2}\u{195E}\u{195F}\u{3}\u{2}\u{2}\u{2}\u{195F}" .
        "\u{1961}\u{3}\u{2}\u{2}\u{2}\u{1960}\u{1962}\u{5}\u{266}\u{134}\u{2}" .
        "\u{1961}\u{1960}\u{3}\u{2}\u{2}\u{2}\u{1961}\u{1962}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1962}\u{263}\u{3}\u{2}\u{2}\u{2}\u{1963}\u{1964}\u{5}\u{216}" .
        "\u{10C}\u{2}\u{1964}\u{265}\u{3}\u{2}\u{2}\u{2}\u{1965}\u{1966}\u{5}" .
        "\u{268}\u{135}\u{2}\u{1966}\u{1967}\u{5}\u{26A}\u{136}\u{2}\u{1967}" .
        "\u{267}\u{3}\u{2}\u{2}\u{2}\u{1968}\u{1969}\u{9}\u{78}\u{2}\u{2}\u{1969}" .
        "\u{269}\u{3}\u{2}\u{2}\u{2}\u{196A}\u{196D}\u{5}\u{26E}\u{138}\u{2}" .
        "\u{196B}\u{196D}\u{5}\u{26C}\u{137}\u{2}\u{196C}\u{196A}\u{3}\u{2}" .
        "\u{2}\u{2}\u{196C}\u{196B}\u{3}\u{2}\u{2}\u{2}\u{196D}\u{26B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{196E}\u{196F}\u{7}\u{11}\u{2}\u{2}\u{196F}\u{1970}" .
        "\u{5}\u{26E}\u{138}\u{2}\u{1970}\u{1971}\u{7}\u{C}\u{2}\u{2}\u{1971}" .
        "\u{1972}\u{5}\u{26E}\u{138}\u{2}\u{1972}\u{26D}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1973}\u{1974}\u{7}\u{24}\u{2}\u{2}\u{1974}\u{197B}\u{7}\u{238}" .
        "\u{2}\u{2}\u{1975}\u{1976}\u{7}\u{26F}\u{2}\u{2}\u{1976}\u{197B}\u{9}" .
        "\u{79}\u{2}\u{2}\u{1977}\u{1978}\u{5}\u{27A}\u{13E}\u{2}\u{1978}\u{1979}" .
        "\u{9}\u{79}\u{2}\u{2}\u{1979}\u{197B}\u{3}\u{2}\u{2}\u{2}\u{197A}" .
        "\u{1973}\u{3}\u{2}\u{2}\u{2}\u{197A}\u{1975}\u{3}\u{2}\u{2}\u{2}\u{197A}" .
        "\u{1977}\u{3}\u{2}\u{2}\u{2}\u{197B}\u{26F}\u{3}\u{2}\u{2}\u{2}\u{197C}" .
        "\u{197D}\u{7}\u{7B}\u{2}\u{2}\u{197D}\u{197E}\u{7}\u{14}\u{2}\u{2}" .
        "\u{197E}\u{1983}\u{5}\u{27A}\u{13E}\u{2}\u{197F}\u{1980}\u{7}\u{440}" .
        "\u{2}\u{2}\u{1980}\u{1982}\u{5}\u{27A}\u{13E}\u{2}\u{1981}\u{197F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1982}\u{1985}\u{3}\u{2}\u{2}\u{2}\u{1983}\u{1981}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1983}\u{1984}\u{3}\u{2}\u{2}\u{2}\u{1984}\u{271}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1985}\u{1983}\u{3}\u{2}\u{2}\u{2}\u{1986}\u{199E}" .
        "\u{5}\u{298}\u{14D}\u{2}\u{1987}\u{199E}\u{7}\u{2C0}\u{2}\u{2}\u{1988}" .
        "\u{199E}\u{7}\u{131}\u{2}\u{2}\u{1989}\u{199E}\u{7}\u{12D}\u{2}\u{2}" .
        "\u{198A}\u{199E}\u{7}\u{12E}\u{2}\u{2}\u{198B}\u{199E}\u{7}\u{12F}" .
        "\u{2}\u{2}\u{198C}\u{199E}\u{7}\u{132}\u{2}\u{2}\u{198D}\u{199E}\u{7}" .
        "\u{133}\u{2}\u{2}\u{198E}\u{199E}\u{7}\u{134}\u{2}\u{2}\u{198F}\u{199E}" .
        "\u{7}\u{4C}\u{2}\u{2}\u{1990}\u{199E}\u{7}\u{53}\u{2}\u{2}\u{1991}" .
        "\u{199E}\u{7}\u{130}\u{2}\u{2}\u{1992}\u{199E}\u{7}\u{136}\u{2}\u{2}" .
        "\u{1993}\u{199E}\u{7}\u{1E8}\u{2}\u{2}\u{1994}\u{199E}\u{7}\u{137}" .
        "\u{2}\u{2}\u{1995}\u{199E}\u{7}\u{87}\u{2}\u{2}\u{1996}\u{199E}\u{7}" .
        "\u{139}\u{2}\u{2}\u{1997}\u{199E}\u{7}\u{13A}\u{2}\u{2}\u{1998}\u{199E}" .
        "\u{7}\u{13B}\u{2}\u{2}\u{1999}\u{199E}\u{7}\u{13C}\u{2}\u{2}\u{199A}" .
        "\u{199E}\u{7}\u{13D}\u{2}\u{2}\u{199B}\u{199E}\u{7}\u{13E}\u{2}\u{2}" .
        "\u{199C}\u{199E}\u{7}\u{13F}\u{2}\u{2}\u{199D}\u{1986}\u{3}\u{2}\u{2}" .
        "\u{2}\u{199D}\u{1987}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1988}\u{3}\u{2}" .
        "\u{2}\u{2}\u{199D}\u{1989}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{198A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{199D}\u{198B}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{198C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{198D}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{198E}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{198F}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1990}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1991}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1992}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1993}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1994}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1995}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1996}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1997}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1998}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{1999}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{199A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199D}\u{199B}\u{3}\u{2}\u{2}\u{2}\u{199D}\u{199C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{199E}\u{273}\u{3}\u{2}\u{2}\u{2}\u{199F}\u{19A0}" .
        "\u{9}\u{7A}\u{2}\u{2}\u{19A0}\u{19A1}\u{7}\u{43E}\u{2}\u{2}\u{19A1}" .
        "\u{19A2}\u{5}\u{278}\u{13D}\u{2}\u{19A2}\u{19A3}\u{7}\u{43F}\u{2}" .
        "\u{2}\u{19A3}\u{275}\u{3}\u{2}\u{2}\u{2}\u{19A4}\u{19A9}\u{5}\u{228}" .
        "\u{115}\u{2}\u{19A5}\u{19A9}\u{5}\u{200}\u{101}\u{2}\u{19A6}\u{19A9}" .
        "\u{5}\u{252}\u{12A}\u{2}\u{19A7}\u{19A9}\u{5}\u{27A}\u{13E}\u{2}\u{19A8}" .
        "\u{19A4}\u{3}\u{2}\u{2}\u{2}\u{19A8}\u{19A5}\u{3}\u{2}\u{2}\u{2}\u{19A8}" .
        "\u{19A6}\u{3}\u{2}\u{2}\u{2}\u{19A8}\u{19A7}\u{3}\u{2}\u{2}\u{2}\u{19A9}" .
        "\u{19B3}\u{3}\u{2}\u{2}\u{2}\u{19AA}\u{19AF}\u{7}\u{440}\u{2}\u{2}" .
        "\u{19AB}\u{19B0}\u{5}\u{228}\u{115}\u{2}\u{19AC}\u{19B0}\u{5}\u{200}" .
        "\u{101}\u{2}\u{19AD}\u{19B0}\u{5}\u{252}\u{12A}\u{2}\u{19AE}\u{19B0}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{19AF}\u{19AB}\u{3}\u{2}\u{2}\u{2}\u{19AF}" .
        "\u{19AC}\u{3}\u{2}\u{2}\u{2}\u{19AF}\u{19AD}\u{3}\u{2}\u{2}\u{2}\u{19AF}" .
        "\u{19AE}\u{3}\u{2}\u{2}\u{2}\u{19B0}\u{19B2}\u{3}\u{2}\u{2}\u{2}\u{19B1}" .
        "\u{19AA}\u{3}\u{2}\u{2}\u{2}\u{19B2}\u{19B5}\u{3}\u{2}\u{2}\u{2}\u{19B3}" .
        "\u{19B1}\u{3}\u{2}\u{2}\u{2}\u{19B3}\u{19B4}\u{3}\u{2}\u{2}\u{2}\u{19B4}" .
        "\u{277}\u{3}\u{2}\u{2}\u{2}\u{19B5}\u{19B3}\u{3}\u{2}\u{2}\u{2}\u{19B6}" .
        "\u{19BB}\u{5}\u{228}\u{115}\u{2}\u{19B7}\u{19BB}\u{5}\u{200}\u{101}" .
        "\u{2}\u{19B8}\u{19BB}\u{5}\u{252}\u{12A}\u{2}\u{19B9}\u{19BB}\u{5}" .
        "\u{27A}\u{13E}\u{2}\u{19BA}\u{19B6}\u{3}\u{2}\u{2}\u{2}\u{19BA}\u{19B7}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19BA}\u{19B8}\u{3}\u{2}\u{2}\u{2}\u{19BA}\u{19B9}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19BB}\u{279}\u{3}\u{2}\u{2}\u{2}\u{19BC}\u{19BD}" .
        "\u{8}\u{13E}\u{1}\u{2}\u{19BD}\u{19BE}\u{9}\u{7B}\u{2}\u{2}\u{19BE}" .
        "\u{19C8}\u{5}\u{27A}\u{13E}\u{6}\u{19BF}\u{19C0}\u{5}\u{27C}\u{13F}" .
        "\u{2}\u{19C0}\u{19C2}\u{7}\u{56}\u{2}\u{2}\u{19C1}\u{19C3}\u{7}\u{6D}" .
        "\u{2}\u{2}\u{19C2}\u{19C1}\u{3}\u{2}\u{2}\u{2}\u{19C2}\u{19C3}\u{3}" .
        "\u{2}\u{2}\u{2}\u{19C3}\u{19C4}\u{3}\u{2}\u{2}\u{2}\u{19C4}\u{19C5}" .
        "\u{9}\u{7C}\u{2}\u{2}\u{19C5}\u{19C8}\u{3}\u{2}\u{2}\u{2}\u{19C6}" .
        "\u{19C8}\u{5}\u{27C}\u{13F}\u{2}\u{19C7}\u{19BC}\u{3}\u{2}\u{2}\u{2}" .
        "\u{19C7}\u{19BF}\u{3}\u{2}\u{2}\u{2}\u{19C7}\u{19C6}\u{3}\u{2}\u{2}" .
        "\u{2}\u{19C8}\u{19CF}\u{3}\u{2}\u{2}\u{2}\u{19C9}\u{19CA}\u{C}\u{5}" .
        "\u{2}\u{2}\u{19CA}\u{19CB}\u{5}\u{284}\u{143}\u{2}\u{19CB}\u{19CC}" .
        "\u{5}\u{27A}\u{13E}\u{6}\u{19CC}\u{19CE}\u{3}\u{2}\u{2}\u{2}\u{19CD}" .
        "\u{19C9}\u{3}\u{2}\u{2}\u{2}\u{19CE}\u{19D1}\u{3}\u{2}\u{2}\u{2}\u{19CF}" .
        "\u{19CD}\u{3}\u{2}\u{2}\u{2}\u{19CF}\u{19D0}\u{3}\u{2}\u{2}\u{2}\u{19D0}" .
        "\u{27B}\u{3}\u{2}\u{2}\u{2}\u{19D1}\u{19CF}\u{3}\u{2}\u{2}\u{2}\u{19D2}" .
        "\u{19D5}\u{8}\u{13F}\u{1}\u{2}\u{19D3}\u{19D4}\u{7}\u{459}\u{2}\u{2}" .
        "\u{19D4}\u{19D6}\u{7}\u{425}\u{2}\u{2}\u{19D5}\u{19D3}\u{3}\u{2}\u{2}" .
        "\u{2}\u{19D5}\u{19D6}\u{3}\u{2}\u{2}\u{2}\u{19D6}\u{19D7}\u{3}\u{2}" .
        "\u{2}\u{2}\u{19D7}\u{19D8}\u{5}\u{27E}\u{140}\u{2}\u{19D8}\u{1A19}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19D9}\u{19DA}\u{C}\u{A}\u{2}\u{2}\u{19DA}\u{19DB}" .
        "\u{5}\u{282}\u{142}\u{2}\u{19DB}\u{19DC}\u{5}\u{27C}\u{13F}\u{B}\u{19DC}" .
        "\u{1A18}\u{3}\u{2}\u{2}\u{2}\u{19DD}\u{19DF}\u{C}\u{8}\u{2}\u{2}\u{19DE}" .
        "\u{19E0}\u{7}\u{6D}\u{2}\u{2}\u{19DF}\u{19DE}\u{3}\u{2}\u{2}\u{2}" .
        "\u{19DF}\u{19E0}\u{3}\u{2}\u{2}\u{2}\u{19E0}\u{19E1}\u{3}\u{2}\u{2}" .
        "\u{2}\u{19E1}\u{19E2}\u{7}\u{11}\u{2}\u{2}\u{19E2}\u{19E3}\u{5}\u{27C}" .
        "\u{13F}\u{2}\u{19E3}\u{19E4}\u{7}\u{C}\u{2}\u{2}\u{19E4}\u{19E5}\u{5}" .
        "\u{27C}\u{13F}\u{9}\u{19E5}\u{1A18}\u{3}\u{2}\u{2}\u{2}\u{19E6}\u{19E7}" .
        "\u{C}\u{7}\u{2}\u{2}\u{19E7}\u{19E8}\u{7}\u{24A}\u{2}\u{2}\u{19E8}" .
        "\u{19E9}\u{7}\u{5F}\u{2}\u{2}\u{19E9}\u{1A18}\u{5}\u{27C}\u{13F}\u{8}" .
        "\u{19EA}\u{19EC}\u{C}\u{5}\u{2}\u{2}\u{19EB}\u{19ED}\u{7}\u{6D}\u{2}" .
        "\u{2}\u{19EC}\u{19EB}\u{3}\u{2}\u{2}\u{2}\u{19EC}\u{19ED}\u{3}\u{2}" .
        "\u{2}\u{2}\u{19ED}\u{19EE}\u{3}\u{2}\u{2}\u{2}\u{19EE}\u{19EF}\u{9}" .
        "\u{7D}\u{2}\u{2}\u{19EF}\u{1A18}\u{5}\u{27C}\u{13F}\u{6}\u{19F0}\u{19F2}" .
        "\u{C}\u{C}\u{2}\u{2}\u{19F1}\u{19F3}\u{7}\u{6D}\u{2}\u{2}\u{19F2}" .
        "\u{19F1}\u{3}\u{2}\u{2}\u{2}\u{19F2}\u{19F3}\u{3}\u{2}\u{2}\u{2}\u{19F3}" .
        "\u{19F4}\u{3}\u{2}\u{2}\u{2}\u{19F4}\u{19F5}\u{7}\u{4E}\u{2}\u{2}" .
        "\u{19F5}\u{19F8}\u{7}\u{43E}\u{2}\u{2}\u{19F6}\u{19F9}\u{5}\u{B6}" .
        "\u{5C}\u{2}\u{19F7}\u{19F9}\u{5}\u{23E}\u{120}\u{2}\u{19F8}\u{19F6}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19F8}\u{19F7}\u{3}\u{2}\u{2}\u{2}\u{19F9}\u{19FA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{19FA}\u{19FB}\u{7}\u{43F}\u{2}\u{2}\u{19FB}" .
        "\u{1A18}\u{3}\u{2}\u{2}\u{2}\u{19FC}\u{19FD}\u{C}\u{B}\u{2}\u{2}\u{19FD}" .
        "\u{19FE}\u{7}\u{56}\u{2}\u{2}\u{19FE}\u{1A18}\u{5}\u{226}\u{114}\u{2}" .
        "\u{19FF}\u{1A00}\u{C}\u{9}\u{2}\u{2}\u{1A00}\u{1A01}\u{5}\u{282}\u{142}" .
        "\u{2}\u{1A01}\u{1A02}\u{9}\u{7E}\u{2}\u{2}\u{1A02}\u{1A03}\u{7}\u{43E}" .
        "\u{2}\u{2}\u{1A03}\u{1A04}\u{5}\u{B6}\u{5C}\u{2}\u{1A04}\u{1A05}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{1A05}\u{1A18}\u{3}\u{2}\u{2}\u{2}\u{1A06}\u{1A08}" .
        "\u{C}\u{6}\u{2}\u{2}\u{1A07}\u{1A09}\u{7}\u{6D}\u{2}\u{2}\u{1A08}" .
        "\u{1A07}\u{3}\u{2}\u{2}\u{2}\u{1A08}\u{1A09}\u{3}\u{2}\u{2}\u{2}\u{1A09}" .
        "\u{1A0A}\u{3}\u{2}\u{2}\u{2}\u{1A0A}\u{1A0B}\u{7}\u{5F}\u{2}\u{2}" .
        "\u{1A0B}\u{1A0E}\u{5}\u{27C}\u{13F}\u{2}\u{1A0C}\u{1A0D}\u{7}\u{18D}" .
        "\u{2}\u{2}\u{1A0D}\u{1A0F}\u{7}\u{44D}\u{2}\u{2}\u{1A0E}\u{1A0C}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A0E}\u{1A0F}\u{3}\u{2}\u{2}\u{2}\u{1A0F}\u{1A18}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A10}\u{1A11}\u{C}\u{3}\u{2}\u{2}\u{1A11}\u{1A12}" .
        "\u{7}\u{1E5}\u{2}\u{2}\u{1A12}\u{1A13}\u{7}\u{1FB}\u{2}\u{2}\u{1A13}" .
        "\u{1A14}\u{7}\u{43E}\u{2}\u{2}\u{1A14}\u{1A15}\u{5}\u{27C}\u{13F}" .
        "\u{2}\u{1A15}\u{1A16}\u{7}\u{43F}\u{2}\u{2}\u{1A16}\u{1A18}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1A17}\u{19D9}\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{19DD}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A17}\u{19E6}\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{19EA}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{19F0}\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{19FC}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{19FF}\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{1A06}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A17}\u{1A10}\u{3}\u{2}\u{2}\u{2}\u{1A18}\u{1A1B}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A19}\u{1A17}\u{3}\u{2}\u{2}\u{2}\u{1A19}\u{1A1A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A1A}\u{27D}\u{3}\u{2}\u{2}\u{2}\u{1A1B}\u{1A19}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A1C}\u{1A1D}\u{8}\u{140}\u{1}\u{2}\u{1A1D}" .
        "\u{1A4A}\u{5}\u{228}\u{115}\u{2}\u{1A1E}\u{1A4A}\u{5}\u{200}\u{101}" .
        "\u{2}\u{1A1F}\u{1A4A}\u{5}\u{252}\u{12A}\u{2}\u{1A20}\u{1A4A}\u{5}" .
        "\u{206}\u{104}\u{2}\u{1A21}\u{1A22}\u{5}\u{280}\u{141}\u{2}\u{1A22}" .
        "\u{1A23}\u{5}\u{27E}\u{140}\u{C}\u{1A23}\u{1A4A}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1A24}\u{1A25}\u{7}\u{D9}\u{2}\u{2}\u{1A25}\u{1A4A}\u{5}\u{27E}" .
        "\u{140}\u{B}\u{1A26}\u{1A27}\u{7}\u{43E}\u{2}\u{2}\u{1A27}\u{1A2C}" .
        "\u{5}\u{27A}\u{13E}\u{2}\u{1A28}\u{1A29}\u{7}\u{440}\u{2}\u{2}\u{1A29}" .
        "\u{1A2B}\u{5}\u{27A}\u{13E}\u{2}\u{1A2A}\u{1A28}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1A2B}\u{1A2E}\u{3}\u{2}\u{2}\u{2}\u{1A2C}\u{1A2A}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1A2C}\u{1A2D}\u{3}\u{2}\u{2}\u{2}\u{1A2D}\u{1A2F}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1A2E}\u{1A2C}\u{3}\u{2}\u{2}\u{2}\u{1A2F}\u{1A30}\u{7}" .
        "\u{43F}\u{2}\u{2}\u{1A30}\u{1A4A}\u{3}\u{2}\u{2}\u{2}\u{1A31}\u{1A32}" .
        "\u{7}\u{238}\u{2}\u{2}\u{1A32}\u{1A33}\u{7}\u{43E}\u{2}\u{2}\u{1A33}" .
        "\u{1A36}\u{5}\u{27A}\u{13E}\u{2}\u{1A34}\u{1A35}\u{7}\u{440}\u{2}" .
        "\u{2}\u{1A35}\u{1A37}\u{5}\u{27A}\u{13E}\u{2}\u{1A36}\u{1A34}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A37}\u{1A38}\u{3}\u{2}\u{2}\u{2}\u{1A38}\u{1A36}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A38}\u{1A39}\u{3}\u{2}\u{2}\u{2}\u{1A39}\u{1A3A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A3A}\u{1A3B}\u{7}\u{43F}\u{2}\u{2}\u{1A3B}" .
        "\u{1A4A}\u{3}\u{2}\u{2}\u{2}\u{1A3C}\u{1A3D}\u{7}\u{3B}\u{2}\u{2}" .
        "\u{1A3D}\u{1A3E}\u{7}\u{43E}\u{2}\u{2}\u{1A3E}\u{1A3F}\u{5}\u{B6}" .
        "\u{5C}\u{2}\u{1A3F}\u{1A40}\u{7}\u{43F}\u{2}\u{2}\u{1A40}\u{1A4A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A41}\u{1A42}\u{7}\u{43E}\u{2}\u{2}\u{1A42}" .
        "\u{1A43}\u{5}\u{B6}\u{5C}\u{2}\u{1A43}\u{1A44}\u{7}\u{43F}\u{2}\u{2}" .
        "\u{1A44}\u{1A4A}\u{3}\u{2}\u{2}\u{2}\u{1A45}\u{1A46}\u{7}\u{54}\u{2}" .
        "\u{2}\u{1A46}\u{1A47}\u{5}\u{27A}\u{13E}\u{2}\u{1A47}\u{1A48}\u{5}" .
        "\u{3C}\u{1F}\u{2}\u{1A48}\u{1A4A}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A1C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A1E}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A1F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A20}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A21}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A24}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A26}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A31}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A3C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A41}\u{3}\u{2}\u{2}\u{2}\u{1A49}\u{1A45}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A4A}\u{1A5C}\u{3}\u{2}\u{2}\u{2}\u{1A4B}\u{1A4C}" .
        "\u{C}\u{5}\u{2}\u{2}\u{1A4C}\u{1A4D}\u{5}\u{286}\u{144}\u{2}\u{1A4D}" .
        "\u{1A4E}\u{5}\u{27E}\u{140}\u{6}\u{1A4E}\u{1A5B}\u{3}\u{2}\u{2}\u{2}" .
        "\u{1A4F}\u{1A50}\u{C}\u{4}\u{2}\u{2}\u{1A50}\u{1A51}\u{5}\u{288}\u{145}" .
        "\u{2}\u{1A51}\u{1A52}\u{5}\u{27E}\u{140}\u{5}\u{1A52}\u{1A5B}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A53}\u{1A54}\u{C}\u{3}\u{2}\u{2}\u{1A54}\u{1A55}" .
        "\u{5}\u{28A}\u{146}\u{2}\u{1A55}\u{1A56}\u{5}\u{27E}\u{140}\u{4}\u{1A56}" .
        "\u{1A5B}\u{3}\u{2}\u{2}\u{2}\u{1A57}\u{1A58}\u{C}\u{E}\u{2}\u{2}\u{1A58}" .
        "\u{1A59}\u{7}\u{1C}\u{2}\u{2}\u{1A59}\u{1A5B}\u{5}\u{20A}\u{106}\u{2}" .
        "\u{1A5A}\u{1A4B}\u{3}\u{2}\u{2}\u{2}\u{1A5A}\u{1A4F}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1A5A}\u{1A53}\u{3}\u{2}\u{2}\u{2}\u{1A5A}\u{1A57}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1A5B}\u{1A5E}\u{3}\u{2}\u{2}\u{2}\u{1A5C}\u{1A5A}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A5C}\u{1A5D}\u{3}\u{2}\u{2}\u{2}\u{1A5D}\u{27F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A5E}\u{1A5C}\u{3}\u{2}\u{2}\u{2}\u{1A5F}\u{1A60}" .
        "\u{9}\u{7F}\u{2}\u{2}\u{1A60}\u{281}\u{3}\u{2}\u{2}\u{2}\u{1A61}\u{1A70}" .
        "\u{7}\u{435}\u{2}\u{2}\u{1A62}\u{1A70}\u{7}\u{436}\u{2}\u{2}\u{1A63}" .
        "\u{1A70}\u{7}\u{437}\u{2}\u{2}\u{1A64}\u{1A65}\u{7}\u{437}\u{2}\u{2}" .
        "\u{1A65}\u{1A70}\u{7}\u{435}\u{2}\u{2}\u{1A66}\u{1A67}\u{7}\u{436}" .
        "\u{2}\u{2}\u{1A67}\u{1A70}\u{7}\u{435}\u{2}\u{2}\u{1A68}\u{1A69}\u{7}" .
        "\u{437}\u{2}\u{2}\u{1A69}\u{1A70}\u{7}\u{436}\u{2}\u{2}\u{1A6A}\u{1A6B}" .
        "\u{7}\u{438}\u{2}\u{2}\u{1A6B}\u{1A70}\u{7}\u{435}\u{2}\u{2}\u{1A6C}" .
        "\u{1A6D}\u{7}\u{437}\u{2}\u{2}\u{1A6D}\u{1A6E}\u{7}\u{435}\u{2}\u{2}" .
        "\u{1A6E}\u{1A70}\u{7}\u{436}\u{2}\u{2}\u{1A6F}\u{1A61}\u{3}\u{2}\u{2}" .
        "\u{2}\u{1A6F}\u{1A62}\u{3}\u{2}\u{2}\u{2}\u{1A6F}\u{1A63}\u{3}\u{2}" .
        "\u{2}\u{2}\u{1A6F}\u{1A64}\u{3}\u{2}\u{2}\u{2}\u{1A6F}\u{1A66}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A6F}\u{1A68}\u{3}\u{2}\u{2}\u{2}\u{1A6F}\u{1A6A}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A6F}\u{1A6C}\u{3}\u{2}\u{2}\u{2}\u{1A70}\u{283}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A71}\u{1A79}\u{7}\u{C}\u{2}\u{2}\u{1A72}\u{1A73}" .
        "\u{7}\u{43B}\u{2}\u{2}\u{1A73}\u{1A79}\u{7}\u{43B}\u{2}\u{2}\u{1A74}" .
        "\u{1A79}\u{7}\u{B9}\u{2}\u{2}\u{1A75}\u{1A79}\u{7}\u{75}\u{2}\u{2}" .
        "\u{1A76}\u{1A77}\u{7}\u{43A}\u{2}\u{2}\u{1A77}\u{1A79}\u{7}\u{43A}" .
        "\u{2}\u{2}\u{1A78}\u{1A71}\u{3}\u{2}\u{2}\u{2}\u{1A78}\u{1A72}\u{3}" .
        "\u{2}\u{2}\u{2}\u{1A78}\u{1A74}\u{3}\u{2}\u{2}\u{2}\u{1A78}\u{1A75}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A78}\u{1A76}\u{3}\u{2}\u{2}\u{2}\u{1A79}\u{285}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A7A}\u{1A7B}\u{7}\u{437}\u{2}\u{2}\u{1A7B}" .
        "\u{1A82}\u{7}\u{437}\u{2}\u{2}\u{1A7C}\u{1A7D}\u{7}\u{436}\u{2}\u{2}" .
        "\u{1A7D}\u{1A82}\u{7}\u{436}\u{2}\u{2}\u{1A7E}\u{1A82}\u{7}\u{43B}" .
        "\u{2}\u{2}\u{1A7F}\u{1A82}\u{7}\u{43C}\u{2}\u{2}\u{1A80}\u{1A82}\u{7}" .
        "\u{43A}\u{2}\u{2}\u{1A81}\u{1A7A}\u{3}\u{2}\u{2}\u{2}\u{1A81}\u{1A7C}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A81}\u{1A7E}\u{3}\u{2}\u{2}\u{2}\u{1A81}\u{1A7F}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A81}\u{1A80}\u{3}\u{2}\u{2}\u{2}\u{1A82}\u{287}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A83}\u{1A84}\u{9}\u{80}\u{2}\u{2}\u{1A84}" .
        "\u{289}\u{3}\u{2}\u{2}\u{2}\u{1A85}\u{1A86}\u{7}\u{432}\u{2}\u{2}" .
        "\u{1A86}\u{1A8B}\u{7}\u{436}\u{2}\u{2}\u{1A87}\u{1A88}\u{7}\u{432}" .
        "\u{2}\u{2}\u{1A88}\u{1A89}\u{7}\u{436}\u{2}\u{2}\u{1A89}\u{1A8B}\u{7}" .
        "\u{436}\u{2}\u{2}\u{1A8A}\u{1A85}\u{3}\u{2}\u{2}\u{2}\u{1A8A}\u{1A87}" .
        "\u{3}\u{2}\u{2}\u{2}\u{1A8B}\u{28B}\u{3}\u{2}\u{2}\u{2}\u{1A8C}\u{1A8D}" .
        "\u{9}\u{81}\u{2}\u{2}\u{1A8D}\u{28D}\u{3}\u{2}\u{2}\u{2}\u{1A8E}\u{1A8F}" .
        "\u{9}\u{82}\u{2}\u{2}\u{1A8F}\u{28F}\u{3}\u{2}\u{2}\u{2}\u{1A90}\u{1A91}" .
        "\u{9}\u{83}\u{2}\u{2}\u{1A91}\u{291}\u{3}\u{2}\u{2}\u{2}\u{1A92}\u{1A93}" .
        "\u{9}\u{84}\u{2}\u{2}\u{1A93}\u{293}\u{3}\u{2}\u{2}\u{2}\u{1A94}\u{1A95}" .
        "\u{9}\u{85}\u{2}\u{2}\u{1A95}\u{295}\u{3}\u{2}\u{2}\u{2}\u{1A96}\u{1A97}" .
        "\u{9}\u{86}\u{2}\u{2}\u{1A97}\u{297}\u{3}\u{2}\u{2}\u{2}\u{1A98}\u{1A99}" .
        "\u{9}\u{87}\u{2}\u{2}\u{1A99}\u{299}\u{3}\u{2}\u{2}\u{2}\u{3E0}\u{29B}" .
        "\u{29F}\u{2A6}\u{2A9}\u{2AC}\u{2AE}\u{2B4}\u{2B7}\u{2BA}\u{2C3}\u{2EA}" .
        "\u{2F6}\u{301}\u{312}\u{317}\u{323}\u{33E}\u{347}\u{34C}\u{352}\u{357}" .
        "\u{35B}\u{364}\u{367}\u{36A}\u{36E}\u{375}\u{378}\u{37D}\u{385}\u{38A}" .
        "\u{38F}\u{392}\u{394}\u{3A0}\u{3A3}\u{3A7}\u{3AA}\u{3AE}\u{3B1}\u{3B5}" .
        "\u{3B8}\u{3BB}\u{3BF}\u{3C2}\u{3C6}\u{3CC}\u{3D2}\u{3D8}\u{3DF}\u{3E6}" .
        "\u{3EC}\u{3F2}\u{3FB}\u{400}\u{410}\u{417}\u{41B}\u{425}\u{429}\u{42D}" .
        "\u{431}\u{435}\u{43A}\u{43D}\u{440}\u{443}\u{446}\u{44C}\u{450}\u{456}" .
        "\u{45B}\u{45E}\u{461}\u{463}\u{46E}\u{472}\u{475}\u{483}\u{486}\u{48A}" .
        "\u{48D}\u{491}\u{494}\u{498}\u{49B}\u{49F}\u{4A2}\u{4A5}\u{4A9}\u{4AC}" .
        "\u{4B0}\u{4B6}\u{4C3}\u{4CA}\u{4CF}\u{4D2}\u{4D7}\u{4DF}\u{4E5}\u{4E9}" .
        "\u{4EC}\u{4F1}\u{4F4}\u{4F8}\u{4FB}\u{4FF}\u{502}\u{50A}\u{50C}\u{513}" .
        "\u{519}\u{521}\u{524}\u{52B}\u{52E}\u{530}\u{536}\u{53C}\u{54D}\u{554}" .
        "\u{55B}\u{566}\u{569}\u{576}\u{583}\u{588}\u{598}\u{5A0}\u{5AA}\u{5B0}" .
        "\u{5BC}\u{5BF}\u{5C4}\u{5D1}\u{5D8}\u{5DF}\u{5E1}\u{5E8}\u{5EC}\u{5EE}" .
        "\u{5F3}\u{5F6}\u{5FC}\u{601}\u{603}\u{607}\u{60A}\u{60D}\u{613}\u{618}" .
        "\u{61A}\u{61F}\u{626}\u{628}\u{62F}\u{634}\u{638}\u{63B}\u{643}\u{64B}" .
        "\u{64D}\u{655}\u{659}\u{65C}\u{662}\u{667}\u{66A}\u{670}\u{673}\u{677}" .
        "\u{67A}\u{67E}\u{683}\u{687}\u{68C}\u{68F}\u{693}\u{697}\u{69B}\u{69F}" .
        "\u{6A4}\u{6A9}\u{6AE}\u{6B4}\u{6B9}\u{6BE}\u{6C4}\u{6C9}\u{6CE}\u{6D3}" .
        "\u{6D8}\u{6DD}\u{6E2}\u{6E7}\u{6EC}\u{6F1}\u{6F6}\u{6FC}\u{704}\u{70A}" .
        "\u{716}\u{71D}\u{71F}\u{727}\u{72C}\u{72F}\u{737}\u{73D}\u{74D}\u{759}" .
        "\u{75B}\u{75E}\u{766}\u{76C}\u{772}\u{77F}\u{786}\u{78F}\u{794}\u{79F}" .
        "\u{7A8}\u{7AD}\u{7B9}\u{7C0}\u{7C9}\u{7CE}\u{7DA}\u{7E1}\u{7EA}\u{7EF}" .
        "\u{7F6}\u{7FF}\u{804}\u{806}\u{80B}\u{813}\u{81C}\u{820}\u{823}\u{827}" .
        "\u{82C}\u{832}\u{838}\u{83D}\u{842}\u{847}\u{84C}\u{84F}\u{854}\u{859}" .
        "\u{863}\u{867}\u{86E}\u{873}\u{876}\u{87B}\u{87E}\u{882}\u{886}\u{88E}" .
        "\u{8A1}\u{8A4}\u{8A7}\u{8AB}\u{8B5}\u{8C2}\u{8C9}\u{8CC}\u{8D5}\u{8D8}" .
        "\u{8DB}\u{8E6}\u{8E9}\u{8ED}\u{8F5}\u{8F8}\u{8FD}\u{905}\u{90B}\u{90F}" .
        "\u{913}\u{918}\u{91D}\u{924}\u{928}\u{933}\u{93B}\u{93E}\u{944}\u{94A}" .
        "\u{94C}\u{951}\u{954}\u{95A}\u{960}\u{962}\u{966}\u{969}\u{96C}\u{972}" .
        "\u{978}\u{97B}\u{981}\u{987}\u{989}\u{98E}\u{996}\u{998}\u{9A1}\u{9A6}" .
        "\u{9AE}\u{9B2}\u{9BA}\u{9C4}\u{9C9}\u{9D0}\u{9D4}\u{9D8}\u{9F8}\u{9FC}" .
        "\u{A08}\u{A0B}\u{A14}\u{A25}\u{A31}\u{A38}\u{A3F}\u{A4E}\u{A5B}\u{A61}" .
        "\u{A67}\u{A6D}\u{A73}\u{A79}\u{A7F}\u{A84}\u{A8B}\u{A92}\u{A99}\u{A9E}" .
        "\u{AA1}\u{AA3}\u{AB1}\u{AB8}\u{ABF}\u{AC5}\u{AC9}\u{ACD}\u{AD4}\u{AD7}" .
        "\u{ADC}\u{AE3}\u{AEA}\u{AEE}\u{AF7}\u{B00}\u{B09}\u{B0C}\u{B10}\u{B19}" .
        "\u{B1D}\u{B20}\u{B23}\u{B29}\u{B2C}\u{B32}\u{B3B}\u{B3E}\u{B49}\u{B4C}" .
        "\u{B51}\u{B54}\u{B59}\u{B63}\u{B68}\u{B6E}\u{B70}\u{B76}\u{B78}\u{B7E}" .
        "\u{B86}\u{B8B}\u{B93}\u{B96}\u{B9B}\u{B9E}\u{BA3}\u{BAB}\u{BB3}\u{BB9}" .
        "\u{BC1}\u{BC6}\u{BCE}\u{BD1}\u{BD5}\u{BD8}\u{BE0}\u{BE6}\u{BEF}\u{BF2}" .
        "\u{BF6}\u{BFA}\u{C00}\u{C04}\u{C08}\u{C0A}\u{C0D}\u{C10}\u{C13}\u{C19}" .
        "\u{C1D}\u{C20}\u{C23}\u{C26}\u{C29}\u{C2B}\u{C2F}\u{C35}\u{C3B}\u{C40}" .
        "\u{C43}\u{C49}\u{C4D}\u{C55}\u{C59}\u{C5C}\u{C5F}\u{C68}\u{C6C}\u{C6F}" .
        "\u{C73}\u{C77}\u{C7A}\u{C7D}\u{C82}\u{C88}\u{C8C}\u{C96}\u{C9C}\u{CA0}" .
        "\u{CA6}\u{CAA}\u{CB0}\u{CB3}\u{CBF}\u{CC3}\u{CC7}\u{CCF}\u{CD3}\u{CDB}" .
        "\u{CDE}\u{CE2}\u{CE5}\u{CED}\u{CF2}\u{CF5}\u{CF8}\u{CFC}\u{CFF}\u{D08}" .
        "\u{D0D}\u{D16}\u{D1B}\u{D22}\u{D29}\u{D31}\u{D36}\u{D3E}\u{D41}\u{D44}" .
        "\u{D4B}\u{D4E}\u{D55}\u{D58}\u{D60}\u{D66}\u{D71}\u{D74}\u{D7F}\u{D85}" .
        "\u{D89}\u{D94}\u{D99}\u{D9B}\u{D9F}\u{DA9}\u{DB3}\u{DB9}\u{DBE}\u{DC1}" .
        "\u{DC4}\u{DC7}\u{DCA}\u{DCD}\u{DD0}\u{DD6}\u{DDB}\u{DDE}\u{DE1}\u{DE4}" .
        "\u{DE7}\u{DEA}\u{DED}\u{DEF}\u{DF5}\u{DFA}\u{DFD}\u{E00}\u{E03}\u{E06}" .
        "\u{E09}\u{E0D}\u{E13}\u{E17}\u{E21}\u{E25}\u{E2B}\u{E34}\u{E37}\u{E3B}" .
        "\u{E3E}\u{E42}\u{E46}\u{E49}\u{E4B}\u{E53}\u{E5F}\u{E65}\u{E67}\u{E6D}" .
        "\u{E6F}\u{E71}\u{E77}\u{E7F}\u{E87}\u{E8B}\u{E8F}\u{E98}\u{E9D}\u{EB1}" .
        "\u{EB6}\u{EBC}\u{EC3}\u{EC8}\u{ED1}\u{ED4}\u{ED8}\u{EDC}\u{EE0}\u{EE3}" .
        "\u{EE6}\u{EE9}\u{EED}\u{EF1}\u{EF4}\u{EF7}\u{EFA}\u{F01}\u{F05}\u{F14}" .
        "\u{F21}\u{F29}\u{F33}\u{F37}\u{F3A}\u{F40}\u{F43}\u{F46}\u{F4F}\u{F58}" .
        "\u{F62}\u{F66}\u{F70}\u{F7A}\u{F82}\u{F85}\u{F8E}\u{F91}\u{F95}\u{F9A}" .
        "\u{F9E}\u{FA7}\u{FAA}\u{FC9}\u{FCC}\u{FCF}\u{1007}\u{100C}\u{1028}" .
        "\u{1036}\u{103D}\u{1041}\u{1047}\u{104F}\u{1051}\u{105C}\u{1066}\u{106D}" .
        "\u{1073}\u{107B}\u{1080}\u{1088}\u{1090}\u{1098}\u{10A0}\u{10A6}\u{10A9}" .
        "\u{10AD}\u{10B2}\u{10B7}\u{10BD}\u{10BF}\u{10CA}\u{10CF}\u{10D6}\u{10D8}" .
        "\u{10E6}\u{10EC}\u{10F1}\u{10F6}\u{10FC}\u{1103}\u{110B}\u{1113}\u{1118}" .
        "\u{111E}\u{1121}\u{1129}\u{1130}\u{1139}\u{113C}\u{114D}\u{1155}\u{115D}" .
        "\u{1161}\u{1168}\u{116E}\u{1176}\u{117F}\u{1185}\u{118C}\u{1193}\u{1198}" .
        "\u{119B}\u{119D}\u{11A3}\u{11A5}\u{11A9}\u{11AB}\u{11AE}\u{11B7}\u{11BD}" .
        "\u{11C4}\u{11CB}\u{11D0}\u{11D3}\u{11D5}\u{11DB}\u{11DD}\u{11E1}\u{11E3}" .
        "\u{11E6}\u{11EB}\u{11F2}\u{11FB}\u{1200}\u{1209}\u{1210}\u{1215}\u{1218}" .
        "\u{121A}\u{1220}\u{1222}\u{1225}\u{122D}\u{1232}\u{1237}\u{123B}\u{1241}" .
        "\u{1246}\u{124A}\u{1250}\u{1252}\u{125D}\u{1260}\u{1267}\u{126A}\u{1276}" .
        "\u{127C}\u{1285}\u{128E}\u{1293}\u{129C}\u{12A2}\u{12AD}\u{12B6}\u{12BC}" .
        "\u{12C1}\u{12C5}\u{12C8}\u{12D4}\u{12DB}\u{12E0}\u{12EF}\u{12F6}\u{12FE}" .
        "\u{1301}\u{130B}\u{1315}\u{131F}\u{1329}\u{132D}\u{1331}\u{133B}\u{1340}" .
        "\u{137A}\u{138C}\u{1394}\u{13A0}\u{13A7}\u{13A9}\u{13B3}\u{13B6}\u{13BE}" .
        "\u{13C5}\u{13C9}\u{13D0}\u{13D5}\u{13D8}\u{13DB}\u{13E4}\u{13E8}\u{1406}" .
        "\u{140D}\u{1411}\u{1418}\u{141B}\u{142B}\u{142E}\u{1438}\u{143C}\u{1442}" .
        "\u{1445}\u{144A}\u{144E}\u{1455}\u{1458}\u{145E}\u{1476}\u{1483}\u{1486}" .
        "\u{1490}\u{1498}\u{149C}\u{14A3}\u{14A6}\u{14AF}\u{14B5}\u{14BB}\u{14C5}" .
        "\u{14C7}\u{14CD}\u{14D0}\u{14D3}\u{14DF}\u{14E2}\u{14E8}\u{14EB}\u{14F3}" .
        "\u{14FB}\u{1501}\u{1505}\u{1513}\u{151F}\u{1526}\u{1529}\u{1530}\u{1537}" .
        "\u{153C}\u{1541}\u{154C}\u{1557}\u{155D}\u{1562}\u{156F}\u{1571}\u{1576}" .
        "\u{157B}\u{157D}\u{1584}\u{158B}\u{158E}\u{1591}\u{1597}\u{159B}\u{15A1}" .
        "\u{15A7}\u{15B4}\u{15B9}\u{15C1}\u{15C4}\u{15C9}\u{15CE}\u{15D6}\u{15D9}" .
        "\u{15E1}\u{15E5}\u{15F2}\u{15F8}\u{1604}\u{1607}\u{1610}\u{1615}\u{161B}" .
        "\u{1622}\u{1624}\u{1629}\u{162B}\u{162F}\u{1635}\u{1638}\u{163B}\u{1645}" .
        "\u{1649}\u{165D}\u{1664}\u{1666}\u{166D}\u{166F}\u{1673}\u{1678}\u{1683}" .
        "\u{1688}\u{168E}\u{1691}\u{1695}\u{169A}\u{169D}\u{16A1}\u{16A5}\u{16A7}" .
        "\u{16AC}\u{16B1}\u{16BE}\u{16C1}\u{16C5}\u{16C8}\u{16CB}\u{16D0}\u{16D3}" .
        "\u{16D8}\u{16DD}\u{16E0}\u{16E5}\u{16E8}\u{16EE}\u{16F1}\u{16F5}\u{16F8}" .
        "\u{16FB}\u{16FF}\u{1702}\u{1705}\u{1709}\u{170C}\u{170F}\u{1712}\u{1716}" .
        "\u{1719}\u{171C}\u{1721}\u{1726}\u{172B}\u{172E}\u{1733}\u{1736}\u{173B}" .
        "\u{173E}\u{1742}\u{1746}\u{174E}\u{1755}\u{1759}\u{175E}\u{1761}\u{1766}" .
        "\u{176A}\u{176C}\u{176F}\u{177F}\u{1788}\u{1790}\u{1798}\u{17A1}\u{17AB}" .
        "\u{17B3}\u{17BB}\u{17C3}\u{17CB}\u{17D0}\u{17D8}\u{17DD}\u{17E2}\u{17E5}" .
        "\u{17EA}\u{17ED}\u{17F1}\u{1800}\u{1807}\u{180C}\u{1811}\u{1832}\u{1836}" .
        "\u{183E}\u{1842}\u{184B}\u{1853}\u{1858}\u{1860}\u{1865}\u{186A}\u{186C}" .
        "\u{1875}\u{187A}\u{1882}\u{1887}\u{188F}\u{1897}\u{189A}\u{18A4}\u{18B6}" .
        "\u{18BC}\u{18C0}\u{18C6}\u{18CA}\u{18CE}\u{18DB}\u{18E3}\u{18E7}\u{18EC}" .
        "\u{18F1}\u{18F7}\u{18FC}\u{1900}\u{1905}\u{190A}\u{190F}\u{1919}\u{191C}" .
        "\u{1920}\u{1924}\u{192B}\u{192F}\u{194C}\u{1951}\u{1955}\u{1958}\u{195B}" .
        "\u{195E}\u{1961}\u{196C}\u{197A}\u{1983}\u{199D}\u{19A8}\u{19AF}\u{19B3}" .
        "\u{19BA}\u{19C2}\u{19C7}\u{19CF}\u{19D5}\u{19DF}\u{19EC}\u{19F2}\u{19F8}" .
        "\u{1A08}\u{1A0E}\u{1A17}\u{1A19}\u{1A2C}\u{1A38}\u{1A49}\u{1A5A}\u{1A5C}" .
        "\u{1A6F}\u{1A78}\u{1A81}\u{1A8A}";

    protected static $atn;

    protected static $decisionToDFA;

    protected static $sharedContextCache;

    public function __construct(TokenStream $input)
    {
        parent::__construct($input);

        self::initialize();

        $this->interp = new ParserATNSimulator($this, self::$atn, self::$decisionToDFA, self::$sharedContextCache);
    }

    public function getGrammarFileName(): string
    {
        return 'MySqlParser.g4';
    }

    public function getRuleNames(): array
    {
        return self::RULE_NAMES;
    }

    public function getSerializedATN(): string
    {
        return self::SERIALIZED_ATN;
    }

    public function getATN(): ATN
    {
        return self::$atn;
    }

    public function getVocabulary(): Vocabulary
    {
        static $vocabulary;

        return $vocabulary = $vocabulary ?? new VocabularyImpl(self::LITERAL_NAMES, self::SYMBOLIC_NAMES);
    }

    /**
     * @throws RecognitionException
     */
    public function root(): Context\RootContext
    {
        $localContext = new Context\RootContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 0, self::RULE_root);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(665);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ((($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::ALTER) | (1 << self::ANALYZE) | (1 << self::CALL) | (1 << self::CHANGE) | (1 << self::CHECK) | (1 << self::CREATE) | (1 << self::DELETE) | (1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::DROP) | (1 << self::EXPLAIN))) !== 0) || ((($_la - 68) & ~0x3F) === 0 && ((1 << ($_la - 68)) & ((1 << (self::GET - 68)) | (1 << (self::GRANT - 68)) | (1 << (self::INSERT - 68)) | (1 << (self::KILL - 68)) | (1 << (self::LOAD - 68)) | (1 << (self::LOCK - 68)) | (1 << (self::OPTIMIZE - 68)) | (1 << (self::PURGE - 68)) | (1 << (self::RELEASE - 68)) | (1 << (self::RENAME - 68)))) !== 0) || ((($_la - 133) & ~0x3F) === 0 && ((1 << ($_la - 133)) & ((1 << (self::REPLACE - 133)) | (1 << (self::RESIGNAL - 133)) | (1 << (self::REVOKE - 133)) | (1 << (self::SELECT - 133)) | (1 << (self::SET - 133)) | (1 << (self::SHOW - 133)) | (1 << (self::SIGNAL - 133)) | (1 << (self::UNLOCK - 133)) | (1 << (self::UPDATE - 133)) | (1 << (self::USE - 133)))) !== 0) || ((($_la - 330) & ~0x3F) === 0 && ((1 << ($_la - 330)) & ((1 << (self::BEGIN - 330)) | (1 << (self::BINLOG - 330)) | (1 << (self::CACHE - 330)) | (1 << (self::CHECKSUM - 330)) | (1 << (self::COMMIT - 330)) | (1 << (self::DEALLOCATE - 330)) | (1 << (self::DO - 330)))) !== 0) || ((($_la - 413) & ~0x3F) === 0 && ((1 << ($_la - 413)) & ((1 << (self::FLUSH - 413)) | (1 << (self::HANDLER - 413)) | (1 << (self::HELP - 413)) | (1 << (self::INSTALL - 413)))) !== 0) || ((($_la - 529) & ~0x3F) === 0 && ((1 << ($_la - 529)) & ((1 << (self::PREPARE - 529)) | (1 << (self::REPAIR - 529)) | (1 << (self::RESET - 529)) | (1 << (self::ROLLBACK - 529)) | (1 << (self::SAVEPOINT - 529)))) !== 0) || ((($_la - 593) & ~0x3F) === 0 && ((1 << ($_la - 593)) & ((1 << (self::START - 593)) | (1 << (self::STOP - 593)) | (1 << (self::TRUNCATE - 593)) | (1 << (self::UNINSTALL - 593)) | (1 << (self::XA - 593)))) !== 0) || $_la === self::EXECUTE || $_la === self::SHUTDOWN || $_la === self::LR_BRACKET || $_la === self::SEMI) {
                $this->setState(664);
                $this->sqlStatements();
            }
            $this->setState(669);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::MINUS) {
                $this->setState(667);
                $this->match(self::MINUS);
                $this->setState(668);
                $this->match(self::MINUS);
            }
            $this->setState(671);
            $this->match(self::EOF);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function sqlStatements(): Context\SqlStatementsContext
    {
        $localContext = new Context\SqlStatementsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 2, self::RULE_sqlStatements);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(684);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(682);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ALTER:
                        case self::ANALYZE:
                        case self::CALL:
                        case self::CHANGE:
                        case self::CHECK:
                        case self::CREATE:
                        case self::DELETE:
                        case self::DESC:
                        case self::DESCRIBE:
                        case self::DROP:
                        case self::EXPLAIN:
                        case self::GET:
                        case self::GRANT:
                        case self::INSERT:
                        case self::KILL:
                        case self::LOAD:
                        case self::LOCK:
                        case self::OPTIMIZE:
                        case self::PURGE:
                        case self::RELEASE:
                        case self::RENAME:
                        case self::REPLACE:
                        case self::RESIGNAL:
                        case self::REVOKE:
                        case self::SELECT:
                        case self::SET:
                        case self::SHOW:
                        case self::SIGNAL:
                        case self::UNLOCK:
                        case self::UPDATE:
                        case self::USE:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::CACHE:
                        case self::CHECKSUM:
                        case self::COMMIT:
                        case self::DEALLOCATE:
                        case self::DO:
                        case self::FLUSH:
                        case self::HANDLER:
                        case self::HELP:
                        case self::INSTALL:
                        case self::PREPARE:
                        case self::REPAIR:
                        case self::RESET:
                        case self::ROLLBACK:
                        case self::SAVEPOINT:
                        case self::START:
                        case self::STOP:
                        case self::TRUNCATE:
                        case self::UNINSTALL:
                        case self::XA:
                        case self::EXECUTE:
                        case self::SHUTDOWN:
                        case self::LR_BRACKET:
                            $this->setState(673);
                            $this->sqlStatement();
                            $this->setState(676);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::MINUS) {
                                $this->setState(674);
                                $this->match(self::MINUS);
                                $this->setState(675);
                                $this->match(self::MINUS);
                            }
                            $this->setState(679);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 3, $this->ctx)) {
                                case 1:
                                    $this->setState(678);
                                    $this->match(self::SEMI);
                                    break;
                            }
                            break;
                        case self::SEMI:
                            $this->setState(681);
                            $this->emptyStatement();
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                }

                $this->setState(686);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 5, $this->ctx);
            }
            $this->setState(696);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALTER:
                case self::ANALYZE:
                case self::CALL:
                case self::CHANGE:
                case self::CHECK:
                case self::CREATE:
                case self::DELETE:
                case self::DESC:
                case self::DESCRIBE:
                case self::DROP:
                case self::EXPLAIN:
                case self::GET:
                case self::GRANT:
                case self::INSERT:
                case self::KILL:
                case self::LOAD:
                case self::LOCK:
                case self::OPTIMIZE:
                case self::PURGE:
                case self::RELEASE:
                case self::RENAME:
                case self::REPLACE:
                case self::RESIGNAL:
                case self::REVOKE:
                case self::SELECT:
                case self::SET:
                case self::SHOW:
                case self::SIGNAL:
                case self::UNLOCK:
                case self::UPDATE:
                case self::USE:
                case self::BEGIN:
                case self::BINLOG:
                case self::CACHE:
                case self::CHECKSUM:
                case self::COMMIT:
                case self::DEALLOCATE:
                case self::DO:
                case self::FLUSH:
                case self::HANDLER:
                case self::HELP:
                case self::INSTALL:
                case self::PREPARE:
                case self::REPAIR:
                case self::RESET:
                case self::ROLLBACK:
                case self::SAVEPOINT:
                case self::START:
                case self::STOP:
                case self::TRUNCATE:
                case self::UNINSTALL:
                case self::XA:
                case self::EXECUTE:
                case self::SHUTDOWN:
                case self::LR_BRACKET:
                    $this->setState(687);
                    $this->sqlStatement();
                    $this->setState(693);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 7, $this->ctx)) {
                        case 1:
                            $this->setState(690);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::MINUS) {
                                $this->setState(688);
                                $this->match(self::MINUS);
                                $this->setState(689);
                                $this->match(self::MINUS);
                            }
                            $this->setState(692);
                            $this->match(self::SEMI);
                            break;
                    }
                    break;
                case self::SEMI:
                    $this->setState(695);
                    $this->emptyStatement();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function sqlStatement(): Context\SqlStatementContext
    {
        $localContext = new Context\SqlStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 4, self::RULE_sqlStatement);

        try {
            $this->setState(705);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 9, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(698);
                    $this->ddlStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(699);
                    $this->dmlStatement();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(700);
                    $this->transactionStatement();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(701);
                    $this->replicationStatement();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(702);
                    $this->preparedStatement();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(703);
                    $this->administrationStatement();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(704);
                    $this->utilityStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function emptyStatement(): Context\EmptyStatementContext
    {
        $localContext = new Context\EmptyStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 6, self::RULE_emptyStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(707);
            $this->match(self::SEMI);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ddlStatement(): Context\DdlStatementContext
    {
        $localContext = new Context\DdlStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 8, self::RULE_ddlStatement);

        try {
            $this->setState(744);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 10, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(709);
                    $this->createDatabase();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(710);
                    $this->createEvent();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(711);
                    $this->createIndex();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(712);
                    $this->createLogfileGroup();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(713);
                    $this->createProcedure();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(714);
                    $this->createFunction();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(715);
                    $this->createServer();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(716);
                    $this->createTable();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(717);
                    $this->createTablespaceInnodb();
                    break;
                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(718);
                    $this->createTablespaceNdb();
                    break;
                case 11:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(719);
                    $this->createTrigger();
                    break;
                case 12:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(720);
                    $this->createView();
                    break;
                case 13:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(721);
                    $this->alterDatabase();
                    break;
                case 14:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(722);
                    $this->alterEvent();
                    break;
                case 15:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(723);
                    $this->alterFunction();
                    break;
                case 16:
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(724);
                    $this->alterInstance();
                    break;
                case 17:
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(725);
                    $this->alterLogfileGroup();
                    break;
                case 18:
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(726);
                    $this->alterProcedure();
                    break;
                case 19:
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(727);
                    $this->alterServer();
                    break;
                case 20:
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(728);
                    $this->alterTable();
                    break;
                case 21:
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(729);
                    $this->alterTablespace();
                    break;
                case 22:
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(730);
                    $this->alterView();
                    break;
                case 23:
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(731);
                    $this->dropDatabase();
                    break;
                case 24:
                    $this->enterOuterAlt($localContext, 24);
                    $this->setState(732);
                    $this->dropEvent();
                    break;
                case 25:
                    $this->enterOuterAlt($localContext, 25);
                    $this->setState(733);
                    $this->dropIndex();
                    break;
                case 26:
                    $this->enterOuterAlt($localContext, 26);
                    $this->setState(734);
                    $this->dropLogfileGroup();
                    break;
                case 27:
                    $this->enterOuterAlt($localContext, 27);
                    $this->setState(735);
                    $this->dropProcedure();
                    break;
                case 28:
                    $this->enterOuterAlt($localContext, 28);
                    $this->setState(736);
                    $this->dropFunction();
                    break;
                case 29:
                    $this->enterOuterAlt($localContext, 29);
                    $this->setState(737);
                    $this->dropServer();
                    break;
                case 30:
                    $this->enterOuterAlt($localContext, 30);
                    $this->setState(738);
                    $this->dropTable();
                    break;
                case 31:
                    $this->enterOuterAlt($localContext, 31);
                    $this->setState(739);
                    $this->dropTablespace();
                    break;
                case 32:
                    $this->enterOuterAlt($localContext, 32);
                    $this->setState(740);
                    $this->dropTrigger();
                    break;
                case 33:
                    $this->enterOuterAlt($localContext, 33);
                    $this->setState(741);
                    $this->dropView();
                    break;
                case 34:
                    $this->enterOuterAlt($localContext, 34);
                    $this->setState(742);
                    $this->renameTable();
                    break;
                case 35:
                    $this->enterOuterAlt($localContext, 35);
                    $this->setState(743);
                    $this->truncateTable();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dmlStatement(): Context\DmlStatementContext
    {
        $localContext = new Context\DmlStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 10, self::RULE_dmlStatement);

        try {
            $this->setState(756);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 11, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(746);
                    $this->selectStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(747);
                    $this->insertStatement();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(748);
                    $this->updateStatement();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(749);
                    $this->deleteStatement();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(750);
                    $this->replaceStatement();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(751);
                    $this->callStatement();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(752);
                    $this->loadDataStatement();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(753);
                    $this->loadXmlStatement();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(754);
                    $this->doStatement();
                    break;
                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(755);
                    $this->handlerStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function transactionStatement(): Context\TransactionStatementContext
    {
        $localContext = new Context\TransactionStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 12, self::RULE_transactionStatement);

        try {
            $this->setState(767);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 12, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(758);
                    $this->startTransaction();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(759);
                    $this->beginWork();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(760);
                    $this->commitWork();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(761);
                    $this->rollbackWork();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(762);
                    $this->savepointStatement();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(763);
                    $this->rollbackStatement();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(764);
                    $this->releaseStatement();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(765);
                    $this->lockTables();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(766);
                    $this->unlockTables();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function replicationStatement(): Context\ReplicationStatementContext
    {
        $localContext = new Context\ReplicationStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 14, self::RULE_replicationStatement);

        try {
            $this->setState(784);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 13, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(769);
                    $this->changeMaster();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(770);
                    $this->changeReplicationFilter();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(771);
                    $this->purgeBinaryLogs();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(772);
                    $this->resetMaster();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(773);
                    $this->resetSlave();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(774);
                    $this->startSlave();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(775);
                    $this->stopSlave();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(776);
                    $this->startGroupReplication();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(777);
                    $this->stopGroupReplication();
                    break;
                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(778);
                    $this->xaStartTransaction();
                    break;
                case 11:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(779);
                    $this->xaEndTransaction();
                    break;
                case 12:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(780);
                    $this->xaPrepareStatement();
                    break;
                case 13:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(781);
                    $this->xaCommitWork();
                    break;
                case 14:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(782);
                    $this->xaRollbackWork();
                    break;
                case 15:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(783);
                    $this->xaRecoverWork();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function preparedStatement(): Context\PreparedStatementContext
    {
        $localContext = new Context\PreparedStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 16, self::RULE_preparedStatement);

        try {
            $this->setState(789);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::PREPARE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(786);
                    $this->prepareStatement();
                    break;
                case self::EXECUTE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(787);
                    $this->executeStatement();
                    break;
                case self::DROP:
                case self::DEALLOCATE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(788);
                    $this->deallocatePrepare();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function compoundStatement(): Context\CompoundStatementContext
    {
        $localContext = new Context\CompoundStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 18, self::RULE_compoundStatement);

        try {
            $this->setState(801);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 15, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(791);
                    $this->blockStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(792);
                    $this->caseStatement();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(793);
                    $this->ifStatement();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(794);
                    $this->leaveStatement();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(795);
                    $this->loopStatement();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(796);
                    $this->repeatStatement();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(797);
                    $this->whileStatement();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(798);
                    $this->iterateStatement();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(799);
                    $this->returnStatement();
                    break;
                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(800);
                    $this->cursorStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function administrationStatement(): Context\AdministrationStatementContext
    {
        $localContext = new Context\AdministrationStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 20, self::RULE_administrationStatement);

        try {
            $this->setState(828);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 16, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(803);
                    $this->alterUser();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(804);
                    $this->createUser();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(805);
                    $this->dropUser();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(806);
                    $this->grantStatement();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(807);
                    $this->grantProxy();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(808);
                    $this->renameUser();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(809);
                    $this->revokeStatement();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(810);
                    $this->revokeProxy();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(811);
                    $this->analyzeTable();
                    break;
                case 10:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(812);
                    $this->checkTable();
                    break;
                case 11:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(813);
                    $this->checksumTable();
                    break;
                case 12:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(814);
                    $this->optimizeTable();
                    break;
                case 13:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(815);
                    $this->repairTable();
                    break;
                case 14:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(816);
                    $this->createUdfunction();
                    break;
                case 15:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(817);
                    $this->installPlugin();
                    break;
                case 16:
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(818);
                    $this->uninstallPlugin();
                    break;
                case 17:
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(819);
                    $this->setStatement();
                    break;
                case 18:
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(820);
                    $this->showStatement();
                    break;
                case 19:
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(821);
                    $this->binlogStatement();
                    break;
                case 20:
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(822);
                    $this->cacheIndexStatement();
                    break;
                case 21:
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(823);
                    $this->flushStatement();
                    break;
                case 22:
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(824);
                    $this->killStatement();
                    break;
                case 23:
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(825);
                    $this->loadIndexIntoCache();
                    break;
                case 24:
                    $this->enterOuterAlt($localContext, 24);
                    $this->setState(826);
                    $this->resetStatement();
                    break;
                case 25:
                    $this->enterOuterAlt($localContext, 25);
                    $this->setState(827);
                    $this->shutdownStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function utilityStatement(): Context\UtilityStatementContext
    {
        $localContext = new Context\UtilityStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 22, self::RULE_utilityStatement);

        try {
            $this->setState(837);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 17, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(830);
                    $this->simpleDescribeStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(831);
                    $this->fullDescribeStatement();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(832);
                    $this->helpStatement();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(833);
                    $this->useStatement();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(834);
                    $this->signalStatement();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(835);
                    $this->resignalStatement();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(836);
                    $this->diagnosticsStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createDatabase(): Context\CreateDatabaseContext
    {
        $localContext = new Context\CreateDatabaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 24, self::RULE_createDatabase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(839);
            $this->match(self::CREATE);
            $this->setState(840);

            $localContext->dbFormat = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::DATABASE || $_la === self::SCHEMA)) {
                $localContext->dbFormat = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(842);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(841);
                $this->ifNotExists();
            }
            $this->setState(844);
            $this->uid();
            $this->setState(848);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ((($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::CHARACTER) | (1 << self::COLLATE) | (1 << self::DEFAULT))) !== 0) || $_la === self::CHARSET) {
                $this->setState(845);
                $this->createDatabaseOption();
                $this->setState(850);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createEvent(): Context\CreateEventContext
    {
        $localContext = new Context\CreateEventContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 26, self::RULE_createEvent);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(851);
            $this->match(self::CREATE);
            $this->setState(853);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(852);
                $this->ownerStatement();
            }
            $this->setState(855);
            $this->match(self::EVENT);
            $this->setState(857);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(856);
                $this->ifNotExists();
            }
            $this->setState(859);
            $this->fullId();
            $this->setState(860);
            $this->match(self::ON);
            $this->setState(861);
            $this->match(self::SCHEDULE);
            $this->setState(862);
            $this->scheduleExpression();
            $this->setState(869);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ON) {
                $this->setState(863);
                $this->match(self::ON);
                $this->setState(864);
                $this->match(self::COMPLETION);
                $this->setState(866);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NOT) {
                    $this->setState(865);
                    $this->match(self::NOT);
                }
                $this->setState(868);
                $this->match(self::PRESERVE);
            }
            $this->setState(872);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DISABLE || $_la === self::ENABLE) {
                $this->setState(871);
                $this->enableType();
            }
            $this->setState(876);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMENT) {
                $this->setState(874);
                $this->match(self::COMMENT);
                $this->setState(875);
                $this->match(self::STRING_LITERAL);
            }
            $this->setState(878);
            $this->match(self::DO);
            $this->setState(879);
            $this->routineBody();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createIndex(): Context\CreateIndexContext
    {
        $localContext = new Context\CreateIndexContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 28, self::RULE_createIndex);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(881);
            $this->match(self::CREATE);
            $this->setState(883);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::OFFLINE || $_la === self::ONLINE) {
                $this->setState(882);

                $localContext->intimeAction = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::OFFLINE || $_la === self::ONLINE)) {
                    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(886);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE) {
                $this->setState(885);

                $localContext->indexCategory = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::FULLTEXT || $_la === self::SPATIAL || $_la === self::UNIQUE)) {
                    $localContext->indexCategory = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(888);
            $this->match(self::INDEX);
            $this->setState(889);
            $this->uid();
            $this->setState(891);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(890);
                $this->indexType();
            }
            $this->setState(893);
            $this->match(self::ON);
            $this->setState(894);
            $this->tableName();
            $this->setState(895);
            $this->indexColumnNames();
            $this->setState(899);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                $this->setState(896);
                $this->indexOption();
                $this->setState(901);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(914);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(912);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ALGORITHM:
                            $this->setState(902);
                            $this->match(self::ALGORITHM);
                            $this->setState(904);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::EQUAL_SYMBOL) {
                                $this->setState(903);
                                $this->match(self::EQUAL_SYMBOL);
                            }
                            $this->setState(906);

                            $localContext->algType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
                                $localContext->algType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                        case self::LOCK:
                            $this->setState(907);
                            $this->match(self::LOCK);
                            $this->setState(909);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::EQUAL_SYMBOL) {
                                $this->setState(908);
                                $this->match(self::EQUAL_SYMBOL);
                            }
                            $this->setState(911);

                            $localContext->lockType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
                                $localContext->lockType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                }

                $this->setState(916);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 33, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createLogfileGroup(): Context\CreateLogfileGroupContext
    {
        $localContext = new Context\CreateLogfileGroupContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 30, self::RULE_createLogfileGroup);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(917);
            $this->match(self::CREATE);
            $this->setState(918);
            $this->match(self::LOGFILE);
            $this->setState(919);
            $this->match(self::GROUP);
            $this->setState(920);
            $this->uid();
            $this->setState(921);
            $this->match(self::ADD);
            $this->setState(922);
            $this->match(self::UNDOFILE);
            $this->setState(923);
            $localContext->undoFile = $this->match(self::STRING_LITERAL);
            $this->setState(929);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INITIAL_SIZE) {
                $this->setState(924);
                $this->match(self::INITIAL_SIZE);
                $this->setState(926);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(925);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(928);
                $localContext->initSize = $this->fileSizeLiteral();
            }
            $this->setState(936);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::UNDO_BUFFER_SIZE) {
                $this->setState(931);
                $this->match(self::UNDO_BUFFER_SIZE);
                $this->setState(933);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(932);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(935);
                $localContext->undoSize = $this->fileSizeLiteral();
            }
            $this->setState(943);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::REDO_BUFFER_SIZE) {
                $this->setState(938);
                $this->match(self::REDO_BUFFER_SIZE);
                $this->setState(940);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(939);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(942);
                $localContext->redoSize = $this->fileSizeLiteral();
            }
            $this->setState(950);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NODEGROUP) {
                $this->setState(945);
                $this->match(self::NODEGROUP);
                $this->setState(947);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(946);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(949);
                $this->uid();
            }
            $this->setState(953);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WAIT) {
                $this->setState(952);
                $this->match(self::WAIT);
            }
            $this->setState(960);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMENT) {
                $this->setState(955);
                $this->match(self::COMMENT);
                $this->setState(957);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(956);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(959);
                $localContext->comment = $this->match(self::STRING_LITERAL);
            }
            $this->setState(962);
            $this->match(self::ENGINE);
            $this->setState(964);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EQUAL_SYMBOL) {
                $this->setState(963);
                $this->match(self::EQUAL_SYMBOL);
            }
            $this->setState(966);
            $this->engineName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createProcedure(): Context\CreateProcedureContext
    {
        $localContext = new Context\CreateProcedureContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 32, self::RULE_createProcedure);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(968);
            $this->match(self::CREATE);
            $this->setState(970);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(969);
                $this->ownerStatement();
            }
            $this->setState(972);
            $this->match(self::PROCEDURE);
            $this->setState(973);
            $this->fullId();
            $this->setState(974);
            $this->match(self::LR_BRACKET);
            $this->setState(976);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::IN - 34)) | (1 << (self::INOUT - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::OUT - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(975);
                $this->procedureParameter();
            }
            $this->setState(982);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(978);
                $this->match(self::COMMA);
                $this->setState(979);
                $this->procedureParameter();
                $this->setState(984);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(985);
            $this->match(self::RR_BRACKET);
            $this->setState(989);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(986);
                    $this->routineOption();
                }

                $this->setState(991);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 49, $this->ctx);
            }
            $this->setState(992);
            $this->routineBody();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createFunction(): Context\CreateFunctionContext
    {
        $localContext = new Context\CreateFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 34, self::RULE_createFunction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(994);
            $this->match(self::CREATE);
            $this->setState(996);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(995);
                $this->ownerStatement();
            }
            $this->setState(998);
            $this->match(self::FUNCTION);
            $this->setState(999);
            $this->fullId();
            $this->setState(1000);
            $this->match(self::LR_BRACKET);
            $this->setState(1002);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(1001);
                $this->functionParameter();
            }
            $this->setState(1008);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(1004);
                $this->match(self::COMMA);
                $this->setState(1005);
                $this->functionParameter();
                $this->setState(1010);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(1011);
            $this->match(self::RR_BRACKET);
            $this->setState(1012);
            $this->match(self::RETURNS);
            $this->setState(1013);
            $this->dataType();
            $this->setState(1017);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 53, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(1014);
                    $this->routineOption();
                }

                $this->setState(1019);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 53, $this->ctx);
            }
            $this->setState(1022);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALTER:
                case self::ANALYZE:
                case self::CALL:
                case self::CHANGE:
                case self::CHECK:
                case self::CREATE:
                case self::CURRENT:
                case self::DATABASE:
                case self::DELETE:
                case self::DESC:
                case self::DESCRIBE:
                case self::DIAGNOSTICS:
                case self::DROP:
                case self::EXCEPT:
                case self::EXPLAIN:
                case self::GET:
                case self::GRANT:
                case self::GROUP:
                case self::INSERT:
                case self::KILL:
                case self::LEFT:
                case self::LOAD:
                case self::LOCK:
                case self::NUMBER:
                case self::OPTIMIZE:
                case self::ORDER:
                case self::PURGE:
                case self::RELEASE:
                case self::RENAME:
                case self::REPLACE:
                case self::RESIGNAL:
                case self::REVOKE:
                case self::RIGHT:
                case self::SCHEMA:
                case self::SELECT:
                case self::SET:
                case self::SHOW:
                case self::SIGNAL:
                case self::STACKED:
                case self::UNLOCK:
                case self::UPDATE:
                case self::USE:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::LR_BRACKET:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->setState(1020);
                    $this->routineBody();
                    break;
                case self::RETURN:
                    $this->setState(1021);
                    $this->returnStatement();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createServer(): Context\CreateServerContext
    {
        $localContext = new Context\CreateServerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 36, self::RULE_createServer);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1024);
            $this->match(self::CREATE);
            $this->setState(1025);
            $this->match(self::SERVER);
            $this->setState(1026);
            $this->uid();
            $this->setState(1027);
            $this->match(self::FOREIGN);
            $this->setState(1028);
            $this->match(self::DATA);
            $this->setState(1029);
            $this->match(self::WRAPPER);
            $this->setState(1030);

            $localContext->wrapperName = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::MYSQL || $_la === self::STRING_LITERAL)) {
                $localContext->wrapperName = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(1031);
            $this->match(self::OPTIONS);
            $this->setState(1032);
            $this->match(self::LR_BRACKET);
            $this->setState(1033);
            $this->serverOption();
            $this->setState(1038);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(1034);
                $this->match(self::COMMA);
                $this->setState(1035);
                $this->serverOption();
                $this->setState(1040);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(1041);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createTable(): Context\CreateTableContext
    {
        $localContext = new Context\CreateTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 38, self::RULE_createTable);

        try {
            $this->setState(1121);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 74, $this->ctx)) {
                case 1:
                    $localContext = new Context\CopyCreateTableContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1043);
                    $this->match(self::CREATE);
                    $this->setState(1045);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::TEMPORARY) {
                        $this->setState(1044);
                        $this->match(self::TEMPORARY);
                    }
                    $this->setState(1047);
                    $this->match(self::TABLE);
                    $this->setState(1049);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(1048);
                        $this->ifNotExists();
                    }
                    $this->setState(1051);
                    $this->tableName();
                    $this->setState(1059);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::LIKE:
                            $this->setState(1052);
                            $this->match(self::LIKE);
                            $this->setState(1053);
                            $this->tableName();
                            break;
                        case self::LR_BRACKET:
                            $this->setState(1054);
                            $this->match(self::LR_BRACKET);
                            $this->setState(1055);
                            $this->match(self::LIKE);
                            $this->setState(1056);
                            $localContext->parenthesisTable = $this->tableName();
                            $this->setState(1057);
                            $this->match(self::RR_BRACKET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 2:
                    $localContext = new Context\QueryCreateTableContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1061);
                    $this->match(self::CREATE);
                    $this->setState(1063);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::TEMPORARY) {
                        $this->setState(1062);
                        $this->match(self::TEMPORARY);
                    }
                    $this->setState(1065);
                    $this->match(self::TABLE);
                    $this->setState(1067);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(1066);
                        $this->ifNotExists();
                    }
                    $this->setState(1069);
                    $this->tableName();
                    $this->setState(1071);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 61, $this->ctx)) {
                        case 1:
                            $this->setState(1070);
                            $this->createDefinitions();
                            break;
                    }
                    $this->setState(1083);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 24) & ~0x3F) === 0 && ((1 << ($_la - 24)) & ((1 << (self::CHARACTER - 24)) | (1 << (self::COLLATE - 24)) | (1 << (self::DEFAULT - 24)) | (1 << (self::INDEX - 24)))) !== 0) || $_la === self::UNION || ((($_la - 328) & ~0x3F) === 0 && ((1 << ($_la - 328)) & ((1 << (self::AUTO_INCREMENT - 328)) | (1 << (self::AVG_ROW_LENGTH - 328)) | (1 << (self::CHECKSUM - 328)) | (1 << (self::PAGE_CHECKSUM - 328)) | (1 << (self::COMMENT - 328)) | (1 << (self::COMPRESSION - 328)) | (1 << (self::CONNECTION - 328)) | (1 << (self::DATA - 328)) | (1 << (self::DELAY_KEY_WRITE - 328)) | (1 << (self::ENCRYPTION - 328)) | (1 << (self::ENGINE - 328)))) !== 0) || ((($_la - 434) & ~0x3F) === 0 && ((1 << ($_la - 434)) & ((1 << (self::INSERT_METHOD - 434)) | (1 << (self::KEY_BLOCK_SIZE - 434)) | (1 << (self::MAX_ROWS - 434)) | (1 << (self::MIN_ROWS - 434)))) !== 0) || ((($_la - 515) & ~0x3F) === 0 && ((1 << ($_la - 515)) & ((1 << (self::PACK_KEYS - 515)) | (1 << (self::PASSWORD - 515)) | (1 << (self::ROW_FORMAT - 515)))) !== 0) || ((($_la - 595) & ~0x3F) === 0 && ((1 << ($_la - 595)) & ((1 << (self::STATS_AUTO_RECALC - 595)) | (1 << (self::STATS_PERSISTENT - 595)) | (1 << (self::STATS_SAMPLE_PAGES - 595)) | (1 << (self::STORAGE - 595)) | (1 << (self::TABLESPACE - 595)) | (1 << (self::TABLE_TYPE - 595)))) !== 0) || $_la === self::CHARSET) {
                        $this->setState(1073);
                        $this->tableOption();
                        $this->setState(1080);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while (((($_la - 24) & ~0x3F) === 0 && ((1 << ($_la - 24)) & ((1 << (self::CHARACTER - 24)) | (1 << (self::COLLATE - 24)) | (1 << (self::DEFAULT - 24)) | (1 << (self::INDEX - 24)))) !== 0) || $_la === self::UNION || ((($_la - 328) & ~0x3F) === 0 && ((1 << ($_la - 328)) & ((1 << (self::AUTO_INCREMENT - 328)) | (1 << (self::AVG_ROW_LENGTH - 328)) | (1 << (self::CHECKSUM - 328)) | (1 << (self::PAGE_CHECKSUM - 328)) | (1 << (self::COMMENT - 328)) | (1 << (self::COMPRESSION - 328)) | (1 << (self::CONNECTION - 328)) | (1 << (self::DATA - 328)) | (1 << (self::DELAY_KEY_WRITE - 328)) | (1 << (self::ENCRYPTION - 328)) | (1 << (self::ENGINE - 328)))) !== 0) || ((($_la - 434) & ~0x3F) === 0 && ((1 << ($_la - 434)) & ((1 << (self::INSERT_METHOD - 434)) | (1 << (self::KEY_BLOCK_SIZE - 434)) | (1 << (self::MAX_ROWS - 434)) | (1 << (self::MIN_ROWS - 434)))) !== 0) || ((($_la - 515) & ~0x3F) === 0 && ((1 << ($_la - 515)) & ((1 << (self::PACK_KEYS - 515)) | (1 << (self::PASSWORD - 515)) | (1 << (self::ROW_FORMAT - 515)))) !== 0) || ((($_la - 595) & ~0x3F) === 0 && ((1 << ($_la - 595)) & ((1 << (self::STATS_AUTO_RECALC - 595)) | (1 << (self::STATS_PERSISTENT - 595)) | (1 << (self::STATS_SAMPLE_PAGES - 595)) | (1 << (self::STORAGE - 595)) | (1 << (self::TABLESPACE - 595)) | (1 << (self::TABLE_TYPE - 595)))) !== 0) || $_la === self::CHARSET || $_la === self::COMMA) {
                            $this->setState(1075);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::COMMA) {
                                $this->setState(1074);
                                $this->match(self::COMMA);
                            }
                            $this->setState(1077);
                            $this->tableOption();
                            $this->setState(1082);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    $this->setState(1086);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PARTITION) {
                        $this->setState(1085);
                        $this->partitionDefinitions();
                    }
                    $this->setState(1089);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IGNORE || $_la === self::REPLACE) {
                        $this->setState(1088);

                        $localContext->keyViolate = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::IGNORE || $_la === self::REPLACE)) {
                            $localContext->keyViolate = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(1092);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS) {
                        $this->setState(1091);
                        $this->match(self::AS);
                    }
                    $this->setState(1094);
                    $this->selectStatement();
                    break;
                case 3:
                    $localContext = new Context\ColumnCreateTableContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1096);
                    $this->match(self::CREATE);
                    $this->setState(1098);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::TEMPORARY) {
                        $this->setState(1097);
                        $this->match(self::TEMPORARY);
                    }
                    $this->setState(1100);
                    $this->match(self::TABLE);
                    $this->setState(1102);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(1101);
                        $this->ifNotExists();
                    }
                    $this->setState(1104);
                    $this->tableName();
                    $this->setState(1105);
                    $this->createDefinitions();
                    $this->setState(1116);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 72, $this->ctx)) {
                        case 1:
                            $this->setState(1106);
                            $this->tableOption();
                            $this->setState(1113);
                            $this->errorHandler->sync($this);

                            $alt = $this->getInterpreter()->adaptivePredict($this->input, 71, $this->ctx);

                            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                                if ($alt === 1) {
                                    $this->setState(1108);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);

                                    if ($_la === self::COMMA) {
                                        $this->setState(1107);
                                        $this->match(self::COMMA);
                                    }
                                    $this->setState(1110);
                                    $this->tableOption();
                                }

                                $this->setState(1115);
                                $this->errorHandler->sync($this);

                                $alt = $this->getInterpreter()->adaptivePredict($this->input, 71, $this->ctx);
                            }
                            break;
                    }
                    $this->setState(1119);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PARTITION) {
                        $this->setState(1118);
                        $this->partitionDefinitions();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createTablespaceInnodb(): Context\CreateTablespaceInnodbContext
    {
        $localContext = new Context\CreateTablespaceInnodbContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 40, self::RULE_createTablespaceInnodb);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1123);
            $this->match(self::CREATE);
            $this->setState(1124);
            $this->match(self::TABLESPACE);
            $this->setState(1125);
            $this->uid();
            $this->setState(1126);
            $this->match(self::ADD);
            $this->setState(1127);
            $this->match(self::DATAFILE);
            $this->setState(1128);
            $localContext->datafile = $this->match(self::STRING_LITERAL);
            $this->setState(1132);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FILE_BLOCK_SIZE) {
                $this->setState(1129);
                $this->match(self::FILE_BLOCK_SIZE);
                $this->setState(1130);
                $this->match(self::EQUAL_SYMBOL);
                $this->setState(1131);
                $localContext->fileBlockSize = $this->fileSizeLiteral();
            }
            $this->setState(1139);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ENGINE) {
                $this->setState(1134);
                $this->match(self::ENGINE);
                $this->setState(1136);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1135);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1138);
                $this->engineName();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createTablespaceNdb(): Context\CreateTablespaceNdbContext
    {
        $localContext = new Context\CreateTablespaceNdbContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 42, self::RULE_createTablespaceNdb);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1141);
            $this->match(self::CREATE);
            $this->setState(1142);
            $this->match(self::TABLESPACE);
            $this->setState(1143);
            $this->uid();
            $this->setState(1144);
            $this->match(self::ADD);
            $this->setState(1145);
            $this->match(self::DATAFILE);
            $this->setState(1146);
            $localContext->datafile = $this->match(self::STRING_LITERAL);
            $this->setState(1147);
            $this->match(self::USE);
            $this->setState(1148);
            $this->match(self::LOGFILE);
            $this->setState(1149);
            $this->match(self::GROUP);
            $this->setState(1150);
            $this->uid();
            $this->setState(1156);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXTENT_SIZE) {
                $this->setState(1151);
                $this->match(self::EXTENT_SIZE);
                $this->setState(1153);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1152);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1155);
                $localContext->extentSize = $this->fileSizeLiteral();
            }
            $this->setState(1163);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INITIAL_SIZE) {
                $this->setState(1158);
                $this->match(self::INITIAL_SIZE);
                $this->setState(1160);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1159);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1162);
                $localContext->initialSize = $this->fileSizeLiteral();
            }
            $this->setState(1170);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AUTOEXTEND_SIZE) {
                $this->setState(1165);
                $this->match(self::AUTOEXTEND_SIZE);
                $this->setState(1167);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1166);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1169);
                $localContext->autoextendSize = $this->fileSizeLiteral();
            }
            $this->setState(1177);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::MAX_SIZE) {
                $this->setState(1172);
                $this->match(self::MAX_SIZE);
                $this->setState(1174);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1173);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1176);
                $localContext->maxSize = $this->fileSizeLiteral();
            }
            $this->setState(1184);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NODEGROUP) {
                $this->setState(1179);
                $this->match(self::NODEGROUP);
                $this->setState(1181);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1180);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1183);
                $this->uid();
            }
            $this->setState(1187);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WAIT) {
                $this->setState(1186);
                $this->match(self::WAIT);
            }
            $this->setState(1194);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMENT) {
                $this->setState(1189);
                $this->match(self::COMMENT);
                $this->setState(1191);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(1190);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(1193);
                $localContext->comment = $this->match(self::STRING_LITERAL);
            }
            $this->setState(1196);
            $this->match(self::ENGINE);
            $this->setState(1198);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EQUAL_SYMBOL) {
                $this->setState(1197);
                $this->match(self::EQUAL_SYMBOL);
            }
            $this->setState(1200);
            $this->engineName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createTrigger(): Context\CreateTriggerContext
    {
        $localContext = new Context\CreateTriggerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 44, self::RULE_createTrigger);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1202);
            $this->match(self::CREATE);
            $this->setState(1204);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(1203);
                $this->ownerStatement();
            }
            $this->setState(1206);
            $this->match(self::TRIGGER);
            $this->setState(1207);
            $localContext->thisTrigger = $this->fullId();
            $this->setState(1208);

            $localContext->triggerTime = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::BEFORE || $_la === self::AFTER)) {
                $localContext->triggerTime = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(1209);

            $localContext->triggerEvent = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::DELETE || $_la === self::INSERT || $_la === self::UPDATE)) {
                $localContext->triggerEvent = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(1210);
            $this->match(self::ON);
            $this->setState(1211);
            $this->tableName();
            $this->setState(1212);
            $this->match(self::FOR);
            $this->setState(1213);
            $this->match(self::EACH);
            $this->setState(1214);
            $this->match(self::ROW);
            $this->setState(1217);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 93, $this->ctx)) {
                case 1:
                    $this->setState(1215);

                    $localContext->triggerPlace = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FOLLOWS || $_la === self::PRECEDES)) {
                        $localContext->triggerPlace = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(1216);
                    $localContext->otherTrigger = $this->fullId();
                    break;
            }
            $this->setState(1219);
            $this->routineBody();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createView(): Context\CreateViewContext
    {
        $localContext = new Context\CreateViewContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 46, self::RULE_createView);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1221);
            $this->match(self::CREATE);
            $this->setState(1224);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::OR) {
                $this->setState(1222);
                $this->match(self::OR);
                $this->setState(1223);
                $this->match(self::REPLACE);
            }
            $this->setState(1229);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALGORITHM) {
                $this->setState(1226);
                $this->match(self::ALGORITHM);
                $this->setState(1227);
                $this->match(self::EQUAL_SYMBOL);
                $this->setState(1228);

                $localContext->algType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
                    $localContext->algType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(1232);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(1231);
                $this->ownerStatement();
            }
            $this->setState(1237);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SQL) {
                $this->setState(1234);
                $this->match(self::SQL);
                $this->setState(1235);
                $this->match(self::SECURITY);
                $this->setState(1236);

                $localContext->secContext = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::DEFINER || $_la === self::INVOKER)) {
                    $localContext->secContext = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(1239);
            $this->match(self::VIEW);
            $this->setState(1240);
            $this->fullId();
            $this->setState(1245);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LR_BRACKET) {
                $this->setState(1241);
                $this->match(self::LR_BRACKET);
                $this->setState(1242);
                $this->uidList();
                $this->setState(1243);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(1247);
            $this->match(self::AS);
            $this->setState(1248);
            $this->selectStatement();
            $this->setState(1255);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WITH) {
                $this->setState(1249);
                $this->match(self::WITH);
                $this->setState(1251);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::CASCADED || $_la === self::LOCAL) {
                    $this->setState(1250);

                    $localContext->checkOption = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CASCADED || $_la === self::LOCAL)) {
                        $localContext->checkOption = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                }
                $this->setState(1253);
                $this->match(self::CHECK);
                $this->setState(1254);
                $this->match(self::OPTION);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createDatabaseOption(): Context\CreateDatabaseOptionContext
    {
        $localContext = new Context\CreateDatabaseOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 48, self::RULE_createDatabaseOption);

        try {
            $this->setState(1280);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 107, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1258);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(1257);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(1263);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CHARACTER:
                            $this->setState(1260);
                            $this->match(self::CHARACTER);
                            $this->setState(1261);
                            $this->match(self::SET);
                            break;
                        case self::CHARSET:
                            $this->setState(1262);
                            $this->match(self::CHARSET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(1266);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1265);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1270);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::BINARY:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                            $this->setState(1268);
                            $this->charsetName();
                            break;
                        case self::DEFAULT:
                            $this->setState(1269);
                            $this->match(self::DEFAULT);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1273);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(1272);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(1275);
                    $this->match(self::COLLATE);
                    $this->setState(1277);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1276);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1279);
                    $this->collationName();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ownerStatement(): Context\OwnerStatementContext
    {
        $localContext = new Context\OwnerStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 50, self::RULE_ownerStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1282);
            $this->match(self::DEFINER);
            $this->setState(1283);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(1290);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::STRING_LITERAL:
                case self::ID:
                case self::STRING_USER_NAME:
                    $this->setState(1284);
                    $this->userName();
                    break;
                case self::CURRENT_USER:
                    $this->setState(1285);
                    $this->match(self::CURRENT_USER);
                    $this->setState(1288);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(1286);
                        $this->match(self::LR_BRACKET);
                        $this->setState(1287);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function scheduleExpression(): Context\ScheduleExpressionContext
    {
        $localContext = new Context\ScheduleExpressionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 52, self::RULE_scheduleExpression);

        try {
            $this->setState(1326);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::AT:
                    $localContext = new Context\PreciseScheduleContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1292);
                    $this->match(self::AT);
                    $this->setState(1293);
                    $this->timestampValue();
                    $this->setState(1297);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::PLUS) {
                        $this->setState(1294);
                        $this->intervalExpr();
                        $this->setState(1299);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case self::EVERY:
                    $localContext = new Context\IntervalScheduleContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1300);
                    $this->match(self::EVERY);
                    $this->setState(1303);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 111, $this->ctx)) {
                        case 1:
                            $this->setState(1301);
                            $this->decimalLiteral();
                            break;
                        case 2:
                            $this->setState(1302);
                            $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(1305);
                    $this->intervalType();
                    $this->setState(1314);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::STARTS) {
                        $this->setState(1306);
                        $this->match(self::STARTS);
                        $this->setState(1307);
                        $localContext->startTimestamp = $this->timestampValue();
                        $this->setState(1311);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::PLUS) {
                            $this->setState(1308);
                            $localContext->intervalExpr = $this->intervalExpr();
                            $localContext->startIntervals[] = $localContext->intervalExpr;
                            $this->setState(1313);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    $this->setState(1324);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ENDS) {
                        $this->setState(1316);
                        $this->match(self::ENDS);
                        $this->setState(1317);
                        $localContext->endTimestamp = $this->timestampValue();
                        $this->setState(1321);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::PLUS) {
                            $this->setState(1318);
                            $localContext->intervalExpr = $this->intervalExpr();
                            $localContext->endIntervals[] = $localContext->intervalExpr;
                            $this->setState(1323);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function timestampValue(): Context\TimestampValueContext
    {
        $localContext = new Context\TimestampValueContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 54, self::RULE_timestampValue);

        try {
            $this->setState(1332);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 117, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1328);
                    $this->match(self::CURRENT_TIMESTAMP);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1329);
                    $this->stringLiteral();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1330);
                    $this->decimalLiteral();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1331);
                    $this->recursiveExpression(0);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function intervalExpr(): Context\IntervalExprContext
    {
        $localContext = new Context\IntervalExprContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 56, self::RULE_intervalExpr);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1334);
            $this->match(self::PLUS);
            $this->setState(1335);
            $this->match(self::INTERVAL);
            $this->setState(1338);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 118, $this->ctx)) {
                case 1:
                    $this->setState(1336);
                    $this->decimalLiteral();
                    break;
                case 2:
                    $this->setState(1337);
                    $this->recursiveExpression(0);
                    break;
            }
            $this->setState(1340);
            $this->intervalType();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function intervalType(): Context\IntervalTypeContext
    {
        $localContext = new Context\IntervalTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 58, self::RULE_intervalType);

        try {
            $this->setState(1355);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1342);
                    $this->intervalTypeBase();
                    break;
                case self::YEAR:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1343);
                    $this->match(self::YEAR);
                    break;
                case self::YEAR_MONTH:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1344);
                    $this->match(self::YEAR_MONTH);
                    break;
                case self::DAY_HOUR:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1345);
                    $this->match(self::DAY_HOUR);
                    break;
                case self::DAY_MINUTE:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1346);
                    $this->match(self::DAY_MINUTE);
                    break;
                case self::DAY_SECOND:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(1347);
                    $this->match(self::DAY_SECOND);
                    break;
                case self::HOUR_MINUTE:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(1348);
                    $this->match(self::HOUR_MINUTE);
                    break;
                case self::HOUR_SECOND:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(1349);
                    $this->match(self::HOUR_SECOND);
                    break;
                case self::MINUTE_SECOND:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(1350);
                    $this->match(self::MINUTE_SECOND);
                    break;
                case self::SECOND_MICROSECOND:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(1351);
                    $this->match(self::SECOND_MICROSECOND);
                    break;
                case self::MINUTE_MICROSECOND:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(1352);
                    $this->match(self::MINUTE_MICROSECOND);
                    break;
                case self::HOUR_MICROSECOND:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(1353);
                    $this->match(self::HOUR_MICROSECOND);
                    break;
                case self::DAY_MICROSECOND:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(1354);
                    $this->match(self::DAY_MICROSECOND);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function enableType(): Context\EnableTypeContext
    {
        $localContext = new Context\EnableTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 60, self::RULE_enableType);

        try {
            $this->setState(1362);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 120, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1357);
                    $this->match(self::ENABLE);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1358);
                    $this->match(self::DISABLE);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1359);
                    $this->match(self::DISABLE);
                    $this->setState(1360);
                    $this->match(self::ON);
                    $this->setState(1361);
                    $this->match(self::SLAVE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexType(): Context\IndexTypeContext
    {
        $localContext = new Context\IndexTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 62, self::RULE_indexType);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1364);
            $this->match(self::USING);
            $this->setState(1365);

            $_la = $this->input->LA(1);

            if (! ($_la === self::BTREE || $_la === self::HASH)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexOption(): Context\IndexOptionContext
    {
        $localContext = new Context\IndexOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 64, self::RULE_indexOption);

        try {
            $this->setState(1380);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::KEY_BLOCK_SIZE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1367);
                    $this->match(self::KEY_BLOCK_SIZE);
                    $this->setState(1369);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1368);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1371);
                    $this->fileSizeLiteral();
                    break;
                case self::USING:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1372);
                    $this->indexType();
                    break;
                case self::WITH:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1373);
                    $this->match(self::WITH);
                    $this->setState(1374);
                    $this->match(self::PARSER);
                    $this->setState(1375);
                    $this->uid();
                    break;
                case self::COMMENT:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1376);
                    $this->match(self::COMMENT);
                    $this->setState(1377);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::INVISIBLE:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1378);
                    $this->match(self::INVISIBLE);
                    break;
                case self::VISIBLE:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(1379);
                    $this->match(self::VISIBLE);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function procedureParameter(): Context\ProcedureParameterContext
    {
        $localContext = new Context\ProcedureParameterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 66, self::RULE_procedureParameter);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1383);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ((($_la - 76) & ~0x3F) === 0 && ((1 << ($_la - 76)) & ((1 << (self::IN - 76)) | (1 << (self::INOUT - 76)) | (1 << (self::OUT - 76)))) !== 0) {
                $this->setState(1382);

                $localContext->direction = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ((($_la - 76) & ~0x3F) === 0 && ((1 << ($_la - 76)) & ((1 << (self::IN - 76)) | (1 << (self::INOUT - 76)) | (1 << (self::OUT - 76)))) !== 0)) {
                    $localContext->direction = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(1385);
            $this->uid();
            $this->setState(1386);
            $this->dataType();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function functionParameter(): Context\FunctionParameterContext
    {
        $localContext = new Context\FunctionParameterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 68, self::RULE_functionParameter);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1388);
            $this->uid();
            $this->setState(1389);
            $this->dataType();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function routineOption(): Context\RoutineOptionContext
    {
        $localContext = new Context\RoutineOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 70, self::RULE_routineOption);

        try {
            $this->setState(1414);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::COMMENT:
                    $localContext = new Context\RoutineCommentContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1391);
                    $this->match(self::COMMENT);
                    $this->setState(1392);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::LANGUAGE:
                    $localContext = new Context\RoutineLanguageContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1393);
                    $this->match(self::LANGUAGE);
                    $this->setState(1394);
                    $this->match(self::SQL);
                    break;
                case self::DETERMINISTIC:
                case self::NOT:
                    $localContext = new Context\RoutineBehaviorContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1396);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NOT) {
                        $this->setState(1395);
                        $this->match(self::NOT);
                    }
                    $this->setState(1398);
                    $this->match(self::DETERMINISTIC);
                    break;
                case self::MODIFIES:
                case self::READS:
                case self::CONTAINS:
                case self::NO:
                    $localContext = new Context\RoutineDataContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1409);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CONTAINS:
                            $this->setState(1399);
                            $this->match(self::CONTAINS);
                            $this->setState(1400);
                            $this->match(self::SQL);
                            break;
                        case self::NO:
                            $this->setState(1401);
                            $this->match(self::NO);
                            $this->setState(1402);
                            $this->match(self::SQL);
                            break;
                        case self::READS:
                            $this->setState(1403);
                            $this->match(self::READS);
                            $this->setState(1404);
                            $this->match(self::SQL);
                            $this->setState(1405);
                            $this->match(self::DATA);
                            break;
                        case self::MODIFIES:
                            $this->setState(1406);
                            $this->match(self::MODIFIES);
                            $this->setState(1407);
                            $this->match(self::SQL);
                            $this->setState(1408);
                            $this->match(self::DATA);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case self::SQL:
                    $localContext = new Context\RoutineSecurityContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1411);
                    $this->match(self::SQL);
                    $this->setState(1412);
                    $this->match(self::SECURITY);
                    $this->setState(1413);

                    $localContext->context = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFINER || $_la === self::INVOKER)) {
                        $localContext->context = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function serverOption(): Context\ServerOptionContext
    {
        $localContext = new Context\ServerOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 72, self::RULE_serverOption);

        try {
            $this->setState(1430);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::HOST:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1416);
                    $this->match(self::HOST);
                    $this->setState(1417);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::DATABASE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1418);
                    $this->match(self::DATABASE);
                    $this->setState(1419);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::USER:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1420);
                    $this->match(self::USER);
                    $this->setState(1421);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::PASSWORD:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1422);
                    $this->match(self::PASSWORD);
                    $this->setState(1423);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::SOCKET:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1424);
                    $this->match(self::SOCKET);
                    $this->setState(1425);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::OWNER:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(1426);
                    $this->match(self::OWNER);
                    $this->setState(1427);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::PORT:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(1428);
                    $this->match(self::PORT);
                    $this->setState(1429);
                    $this->decimalLiteral();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createDefinitions(): Context\CreateDefinitionsContext
    {
        $localContext = new Context\CreateDefinitionsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 74, self::RULE_createDefinitions);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1432);
            $this->match(self::LR_BRACKET);
            $this->setState(1433);
            $this->createDefinition();
            $this->setState(1438);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(1434);
                $this->match(self::COMMA);
                $this->setState(1435);
                $this->createDefinition();
                $this->setState(1440);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(1441);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createDefinition(): Context\CreateDefinitionContext
    {
        $localContext = new Context\CreateDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 76, self::RULE_createDefinition);

        try {
            $this->setState(1448);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $localContext = new Context\ColumnDeclarationContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1443);
                    $this->uid();
                    $this->setState(1444);
                    $this->columnDefinition();
                    break;
                case self::CHECK:
                case self::CONSTRAINT:
                case self::FOREIGN:
                case self::PRIMARY:
                case self::UNIQUE:
                    $localContext = new Context\ConstraintDeclarationContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1446);
                    $this->tableConstraint();
                    break;
                case self::FULLTEXT:
                case self::INDEX:
                case self::KEY:
                case self::SPATIAL:
                    $localContext = new Context\IndexDeclarationContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1447);
                    $this->indexColumnDefinition();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function columnDefinition(): Context\ColumnDefinitionContext
    {
        $localContext = new Context\ColumnDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 78, self::RULE_columnDefinition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1450);
            $this->dataType();
            $this->setState(1454);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 130, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(1451);
                    $this->columnConstraint();
                }

                $this->setState(1456);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 130, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function columnConstraint(): Context\ColumnConstraintContext
    {
        $localContext = new Context\ColumnConstraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 80, self::RULE_columnConstraint);

        try {
            $this->setState(1510);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::NOT:
                case self::NULL_LITERAL:
                case self::NULL_SPEC_LITERAL:
                    $localContext = new Context\NullColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1457);
                    $this->nullNotnull();
                    break;
                case self::DEFAULT:
                    $localContext = new Context\DefaultColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1458);
                    $this->match(self::DEFAULT);
                    $this->setState(1459);
                    $this->defaultValue();
                    break;
                case self::VISIBLE:
                    $localContext = new Context\VisibilityColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1460);
                    $this->match(self::VISIBLE);
                    break;
                case self::INVISIBLE:
                    $localContext = new Context\VisibilityColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1461);
                    $this->match(self::INVISIBLE);
                    break;
                case self::ON:
                case self::AUTO_INCREMENT:
                    $localContext = new Context\AutoIncrementColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1466);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::AUTO_INCREMENT:
                            $this->setState(1462);
                            $this->match(self::AUTO_INCREMENT);
                            break;
                        case self::ON:
                            $this->setState(1463);
                            $this->match(self::ON);
                            $this->setState(1464);
                            $this->match(self::UPDATE);
                            $this->setState(1465);
                            $this->currentTimestamp();
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case self::KEY:
                case self::PRIMARY:
                    $localContext = new Context\PrimaryKeyColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(1469);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PRIMARY) {
                        $this->setState(1468);
                        $this->match(self::PRIMARY);
                    }
                    $this->setState(1471);
                    $this->match(self::KEY);
                    break;
                case self::UNIQUE:
                    $localContext = new Context\UniqueKeyColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(1472);
                    $this->match(self::UNIQUE);
                    $this->setState(1474);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 133, $this->ctx)) {
                        case 1:
                            $this->setState(1473);
                            $this->match(self::KEY);
                            break;
                    }
                    break;
                case self::COMMENT:
                    $localContext = new Context\CommentColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(1476);
                    $this->match(self::COMMENT);
                    $this->setState(1477);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::COLUMN_FORMAT:
                    $localContext = new Context\FormatColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(1478);
                    $this->match(self::COLUMN_FORMAT);
                    $this->setState(1479);

                    $localContext->colformat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::DYNAMIC || $_la === self::FIXED)) {
                        $localContext->colformat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::STORAGE:
                    $localContext = new Context\StorageColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(1480);
                    $this->match(self::STORAGE);
                    $this->setState(1481);

                    $localContext->storageval = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
                        $localContext->storageval = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::REFERENCES:
                    $localContext = new Context\ReferenceColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(1482);
                    $this->referenceDefinition();
                    break;
                case self::COLLATE:
                    $localContext = new Context\CollateColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(1483);
                    $this->match(self::COLLATE);
                    $this->setState(1484);
                    $this->collationName();
                    break;
                case self::AS:
                case self::GENERATED:
                    $localContext = new Context\GeneratedColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(1487);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::GENERATED) {
                        $this->setState(1485);
                        $this->match(self::GENERATED);
                        $this->setState(1486);
                        $this->match(self::ALWAYS);
                    }
                    $this->setState(1489);
                    $this->match(self::AS);
                    $this->setState(1490);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1491);
                    $this->recursiveExpression(0);
                    $this->setState(1492);
                    $this->match(self::RR_BRACKET);
                    $this->setState(1494);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::STORED || $_la === self::VIRTUAL) {
                        $this->setState(1493);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::STORED || $_la === self::VIRTUAL)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    break;
                case self::SERIAL:
                    $localContext = new Context\SerialDefaultColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(1496);
                    $this->match(self::SERIAL);
                    $this->setState(1497);
                    $this->match(self::DEFAULT);
                    $this->setState(1498);
                    $this->match(self::VALUE);
                    break;
                case self::CHECK:
                case self::CONSTRAINT:
                    $localContext = new Context\CheckColumnConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(1503);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(1499);
                        $this->match(self::CONSTRAINT);
                        $this->setState(1501);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(1500);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(1505);
                    $this->match(self::CHECK);
                    $this->setState(1506);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1507);
                    $this->recursiveExpression(0);
                    $this->setState(1508);
                    $this->match(self::RR_BRACKET);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableConstraint(): Context\TableConstraintContext
    {
        $localContext = new Context\TableConstraintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 82, self::RULE_tableConstraint);

        try {
            $this->setState(1581);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 155, $this->ctx)) {
                case 1:
                    $localContext = new Context\PrimaryKeyTableConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1516);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(1512);
                        $this->match(self::CONSTRAINT);
                        $this->setState(1514);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(1513);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(1518);
                    $this->match(self::PRIMARY);
                    $this->setState(1519);
                    $this->match(self::KEY);
                    $this->setState(1521);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(1520);
                        $localContext->index = $this->uid();
                    }
                    $this->setState(1524);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(1523);
                        $this->indexType();
                    }
                    $this->setState(1526);
                    $this->indexColumnNames();
                    $this->setState(1530);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(1527);
                        $this->indexOption();
                        $this->setState(1532);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\UniqueKeyTableConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1537);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(1533);
                        $this->match(self::CONSTRAINT);
                        $this->setState(1535);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(1534);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(1539);
                    $this->match(self::UNIQUE);
                    $this->setState(1541);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INDEX || $_la === self::KEY) {
                        $this->setState(1540);

                        $localContext->indexFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::INDEX || $_la === self::KEY)) {
                            $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(1544);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(1543);
                        $localContext->index = $this->uid();
                    }
                    $this->setState(1547);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(1546);
                        $this->indexType();
                    }
                    $this->setState(1549);
                    $this->indexColumnNames();
                    $this->setState(1553);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(1550);
                        $this->indexOption();
                        $this->setState(1555);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 3:
                    $localContext = new Context\ForeignKeyTableConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1560);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(1556);
                        $this->match(self::CONSTRAINT);
                        $this->setState(1558);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(1557);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(1562);
                    $this->match(self::FOREIGN);
                    $this->setState(1563);
                    $this->match(self::KEY);
                    $this->setState(1565);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(1564);
                        $localContext->index = $this->uid();
                    }
                    $this->setState(1567);
                    $this->indexColumnNames();
                    $this->setState(1568);
                    $this->referenceDefinition();
                    break;
                case 4:
                    $localContext = new Context\CheckTableConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1574);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(1570);
                        $this->match(self::CONSTRAINT);
                        $this->setState(1572);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(1571);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(1576);
                    $this->match(self::CHECK);
                    $this->setState(1577);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1578);
                    $this->recursiveExpression(0);
                    $this->setState(1579);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function referenceDefinition(): Context\ReferenceDefinitionContext
    {
        $localContext = new Context\ReferenceDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 84, self::RULE_referenceDefinition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1583);
            $this->match(self::REFERENCES);
            $this->setState(1584);
            $this->tableName();
            $this->setState(1586);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 156, $this->ctx)) {
                case 1:
                    $this->setState(1585);
                    $this->indexColumnNames();
                    break;
            }
            $this->setState(1590);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::MATCH) {
                $this->setState(1588);
                $this->match(self::MATCH);
                $this->setState(1589);

                $localContext->matchType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::FULL || $_la === self::PARTIAL || $_la === self::SIMPLE)) {
                    $localContext->matchType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(1593);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 158, $this->ctx)) {
                case 1:
                    $this->setState(1592);
                    $this->referenceAction();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function referenceAction(): Context\ReferenceActionContext
    {
        $localContext = new Context\ReferenceActionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 86, self::RULE_referenceAction);

        try {
            $this->setState(1611);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 161, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1595);
                    $this->match(self::ON);
                    $this->setState(1596);
                    $this->match(self::DELETE);
                    $this->setState(1597);
                    $localContext->onDelete = $this->referenceControlType();
                    $this->setState(1601);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 159, $this->ctx)) {
                        case 1:
                            $this->setState(1598);
                            $this->match(self::ON);
                            $this->setState(1599);
                            $this->match(self::UPDATE);
                            $this->setState(1600);
                            $localContext->onUpdate = $this->referenceControlType();
                            break;
                    }
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1603);
                    $this->match(self::ON);
                    $this->setState(1604);
                    $this->match(self::UPDATE);
                    $this->setState(1605);
                    $localContext->onUpdate = $this->referenceControlType();
                    $this->setState(1609);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 160, $this->ctx)) {
                        case 1:
                            $this->setState(1606);
                            $this->match(self::ON);
                            $this->setState(1607);
                            $this->match(self::DELETE);
                            $this->setState(1608);
                            $localContext->onDelete = $this->referenceControlType();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function referenceControlType(): Context\ReferenceControlTypeContext
    {
        $localContext = new Context\ReferenceControlTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 88, self::RULE_referenceControlType);

        try {
            $this->setState(1619);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::RESTRICT:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1613);
                    $this->match(self::RESTRICT);
                    break;
                case self::CASCADE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1614);
                    $this->match(self::CASCADE);
                    break;
                case self::SET:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1615);
                    $this->match(self::SET);
                    $this->setState(1616);
                    $this->match(self::NULL_LITERAL);
                    break;
                case self::NO:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1617);
                    $this->match(self::NO);
                    $this->setState(1618);
                    $this->match(self::ACTION);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexColumnDefinition(): Context\IndexColumnDefinitionContext
    {
        $localContext = new Context\IndexColumnDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 90, self::RULE_indexColumnDefinition);

        try {
            $this->setState(1649);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::INDEX:
                case self::KEY:
                    $localContext = new Context\SimpleIndexDeclarationContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1621);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEY)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(1623);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(1622);
                        $this->uid();
                    }
                    $this->setState(1626);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(1625);
                        $this->indexType();
                    }
                    $this->setState(1628);
                    $this->indexColumnNames();
                    $this->setState(1632);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(1629);
                        $this->indexOption();
                        $this->setState(1634);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case self::FULLTEXT:
                case self::SPATIAL:
                    $localContext = new Context\SpecialIndexDeclarationContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1635);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(1637);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INDEX || $_la === self::KEY) {
                        $this->setState(1636);

                        $localContext->indexFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::INDEX || $_la === self::KEY)) {
                            $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(1640);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(1639);
                        $this->uid();
                    }
                    $this->setState(1642);
                    $this->indexColumnNames();
                    $this->setState(1646);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(1643);
                        $this->indexOption();
                        $this->setState(1648);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableOption(): Context\TableOptionContext
    {
        $localContext = new Context\TableOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 92, self::RULE_tableOption);

        try {
            $this->setState(1800);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 200, $this->ctx)) {
                case 1:
                    $localContext = new Context\TableOptionEngineContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1651);
                    $this->match(self::ENGINE);
                    $this->setState(1653);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1652);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1656);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONNECT || ((($_la - 742) & ~0x3F) === 0 && ((1 << ($_la - 742)) & ((1 << (self::ARCHIVE - 742)) | (1 << (self::BLACKHOLE - 742)) | (1 << (self::CSV - 742)) | (1 << (self::FEDERATED - 742)) | (1 << (self::INNODB - 742)) | (1 << (self::MEMORY - 742)) | (1 << (self::MRG_MYISAM - 742)) | (1 << (self::MYISAM - 742)) | (1 << (self::NDB - 742)) | (1 << (self::NDBCLUSTER - 742)) | (1 << (self::PERFORMANCE_SCHEMA - 742)) | (1 << (self::TOKUDB - 742)))) !== 0) || ((($_la - 1099) & ~0x3F) === 0 && ((1 << ($_la - 1099)) & ((1 << (self::STRING_LITERAL - 1099)) | (1 << (self::ID - 1099)) | (1 << (self::REVERSE_QUOTE_ID - 1099)))) !== 0)) {
                        $this->setState(1655);
                        $this->engineName();
                    }
                    break;
                case 2:
                    $localContext = new Context\TableOptionAutoIncrementContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1658);
                    $this->match(self::AUTO_INCREMENT);
                    $this->setState(1660);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1659);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1662);
                    $this->decimalLiteral();
                    break;
                case 3:
                    $localContext = new Context\TableOptionAverageContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1663);
                    $this->match(self::AVG_ROW_LENGTH);
                    $this->setState(1665);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1664);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1667);
                    $this->decimalLiteral();
                    break;
                case 4:
                    $localContext = new Context\TableOptionCharsetContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1669);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(1668);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(1674);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CHARACTER:
                            $this->setState(1671);
                            $this->match(self::CHARACTER);
                            $this->setState(1672);
                            $this->match(self::SET);
                            break;
                        case self::CHARSET:
                            $this->setState(1673);
                            $this->match(self::CHARSET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(1677);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1676);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1681);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::BINARY:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                            $this->setState(1679);
                            $this->charsetName();
                            break;
                        case self::DEFAULT:
                            $this->setState(1680);
                            $this->match(self::DEFAULT);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 5:
                    $localContext = new Context\TableOptionChecksumContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(1683);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CHECKSUM || $_la === self::PAGE_CHECKSUM)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(1685);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1684);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1687);

                    $localContext->boolValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->boolValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 6:
                    $localContext = new Context\TableOptionCollateContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(1689);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(1688);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(1691);
                    $this->match(self::COLLATE);
                    $this->setState(1693);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1692);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1695);
                    $this->collationName();
                    break;
                case 7:
                    $localContext = new Context\TableOptionCommentContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(1696);
                    $this->match(self::COMMENT);
                    $this->setState(1698);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1697);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1700);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 8:
                    $localContext = new Context\TableOptionCompressionContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(1701);
                    $this->match(self::COMPRESSION);
                    $this->setState(1703);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1702);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1705);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::STRING_LITERAL || $_la === self::ID)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 9:
                    $localContext = new Context\TableOptionConnectionContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(1706);
                    $this->match(self::CONNECTION);
                    $this->setState(1708);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1707);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1710);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 10:
                    $localContext = new Context\TableOptionDataDirectoryContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(1711);
                    $this->match(self::DATA);
                    $this->setState(1712);
                    $this->match(self::DIRECTORY);
                    $this->setState(1714);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1713);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1716);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 11:
                    $localContext = new Context\TableOptionDelayContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(1717);
                    $this->match(self::DELAY_KEY_WRITE);
                    $this->setState(1719);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1718);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1721);

                    $localContext->boolValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->boolValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 12:
                    $localContext = new Context\TableOptionEncryptionContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(1722);
                    $this->match(self::ENCRYPTION);
                    $this->setState(1724);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1723);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1726);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 13:
                    $localContext = new Context\TableOptionIndexDirectoryContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(1727);
                    $this->match(self::INDEX);
                    $this->setState(1728);
                    $this->match(self::DIRECTORY);
                    $this->setState(1730);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1729);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1732);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 14:
                    $localContext = new Context\TableOptionInsertMethodContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(1733);
                    $this->match(self::INSERT_METHOD);
                    $this->setState(1735);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1734);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1737);

                    $localContext->insertMethod = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FIRST || $_la === self::LAST || $_la === self::NO)) {
                        $localContext->insertMethod = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 15:
                    $localContext = new Context\TableOptionKeyBlockSizeContext($localContext);
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(1738);
                    $this->match(self::KEY_BLOCK_SIZE);
                    $this->setState(1740);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1739);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1742);
                    $this->fileSizeLiteral();
                    break;
                case 16:
                    $localContext = new Context\TableOptionMaxRowsContext($localContext);
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(1743);
                    $this->match(self::MAX_ROWS);
                    $this->setState(1745);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1744);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1747);
                    $this->decimalLiteral();
                    break;
                case 17:
                    $localContext = new Context\TableOptionMinRowsContext($localContext);
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(1748);
                    $this->match(self::MIN_ROWS);
                    $this->setState(1750);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1749);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1752);
                    $this->decimalLiteral();
                    break;
                case 18:
                    $localContext = new Context\TableOptionPackKeysContext($localContext);
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(1753);
                    $this->match(self::PACK_KEYS);
                    $this->setState(1755);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1754);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1757);

                    $localContext->extBoolValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 19:
                    $localContext = new Context\TableOptionPasswordContext($localContext);
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(1758);
                    $this->match(self::PASSWORD);
                    $this->setState(1760);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1759);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1762);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 20:
                    $localContext = new Context\TableOptionRowFormatContext($localContext);
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(1763);
                    $this->match(self::ROW_FORMAT);
                    $this->setState(1765);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1764);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1767);

                    $localContext->rowFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || ((($_la - 355) & ~0x3F) === 0 && ((1 << ($_la - 355)) & ((1 << (self::COMPACT - 355)) | (1 << (self::COMPRESSED - 355)) | (1 << (self::DYNAMIC - 355)) | (1 << (self::FIXED - 355)))) !== 0) || $_la === self::REDUNDANT || $_la === self::ID)) {
                        $localContext->rowFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 21:
                    $localContext = new Context\TableOptionRecalculationContext($localContext);
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(1768);
                    $this->match(self::STATS_AUTO_RECALC);
                    $this->setState(1770);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1769);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1772);

                    $localContext->extBoolValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 22:
                    $localContext = new Context\TableOptionPersistentContext($localContext);
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(1773);
                    $this->match(self::STATS_PERSISTENT);
                    $this->setState(1775);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1774);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1777);

                    $localContext->extBoolValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->extBoolValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 23:
                    $localContext = new Context\TableOptionSamplePageContext($localContext);
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(1778);
                    $this->match(self::STATS_SAMPLE_PAGES);
                    $this->setState(1780);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1779);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1782);
                    $this->decimalLiteral();
                    break;
                case 24:
                    $localContext = new Context\TableOptionTablespaceContext($localContext);
                    $this->enterOuterAlt($localContext, 24);
                    $this->setState(1783);
                    $this->match(self::TABLESPACE);
                    $this->setState(1784);
                    $this->uid();
                    $this->setState(1786);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 198, $this->ctx)) {
                        case 1:
                            $this->setState(1785);
                            $this->tablespaceStorage();
                            break;
                    }
                    break;
                case 25:
                    $localContext = new Context\TableOptionTableTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 25);
                    $this->setState(1788);
                    $this->match(self::TABLE_TYPE);
                    $this->setState(1789);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(1790);
                    $this->tableType();
                    break;
                case 26:
                    $localContext = new Context\TableOptionTablespaceContext($localContext);
                    $this->enterOuterAlt($localContext, 26);
                    $this->setState(1791);
                    $this->tablespaceStorage();
                    break;
                case 27:
                    $localContext = new Context\TableOptionUnionContext($localContext);
                    $this->enterOuterAlt($localContext, 27);
                    $this->setState(1792);
                    $this->match(self::UNION);
                    $this->setState(1794);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(1793);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(1796);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1797);
                    $this->tables();
                    $this->setState(1798);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableType(): Context\TableTypeContext
    {
        $localContext = new Context\TableTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 94, self::RULE_tableType);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1802);

            $_la = $this->input->LA(1);

            if (! ($_la === self::MYSQL || $_la === self::ODBC)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tablespaceStorage(): Context\TablespaceStorageContext
    {
        $localContext = new Context\TablespaceStorageContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 96, self::RULE_tablespaceStorage);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1804);
            $this->match(self::STORAGE);
            $this->setState(1805);

            $_la = $this->input->LA(1);

            if (! ($_la === self::DEFAULT || $_la === self::DISK || $_la === self::MEMORY)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionDefinitions(): Context\PartitionDefinitionsContext
    {
        $localContext = new Context\PartitionDefinitionsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 98, self::RULE_partitionDefinitions);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(1807);
            $this->match(self::PARTITION);
            $this->setState(1808);
            $this->match(self::BY);
            $this->setState(1809);
            $this->partitionFunctionDefinition();
            $this->setState(1812);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITIONS) {
                $this->setState(1810);
                $this->match(self::PARTITIONS);
                $this->setState(1811);
                $localContext->count = $this->decimalLiteral();
            }
            $this->setState(1821);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SUBPARTITION) {
                $this->setState(1814);
                $this->match(self::SUBPARTITION);
                $this->setState(1815);
                $this->match(self::BY);
                $this->setState(1816);
                $this->subpartitionFunctionDefinition();
                $this->setState(1819);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::SUBPARTITIONS) {
                    $this->setState(1817);
                    $this->match(self::SUBPARTITIONS);
                    $this->setState(1818);
                    $localContext->subCount = $this->decimalLiteral();
                }
            }
            $this->setState(1834);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 205, $this->ctx)) {
                case 1:
                    $this->setState(1823);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1824);
                    $this->partitionDefinition();
                    $this->setState(1829);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(1825);
                        $this->match(self::COMMA);
                        $this->setState(1826);
                        $this->partitionDefinition();
                        $this->setState(1831);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1832);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionFunctionDefinition(): Context\PartitionFunctionDefinitionContext
    {
        $localContext = new Context\PartitionFunctionDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 100, self::RULE_partitionFunctionDefinition);

        try {
            $this->setState(1881);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 211, $this->ctx)) {
                case 1:
                    $localContext = new Context\PartitionFunctionHashContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1837);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LINEAR) {
                        $this->setState(1836);
                        $this->match(self::LINEAR);
                    }
                    $this->setState(1839);
                    $this->match(self::HASH);
                    $this->setState(1840);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1841);
                    $this->recursiveExpression(0);
                    $this->setState(1842);
                    $this->match(self::RR_BRACKET);
                    break;
                case 2:
                    $localContext = new Context\PartitionFunctionKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1845);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LINEAR) {
                        $this->setState(1844);
                        $this->match(self::LINEAR);
                    }
                    $this->setState(1847);
                    $this->match(self::KEY);
                    $this->setState(1851);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ALGORITHM) {
                        $this->setState(1848);
                        $this->match(self::ALGORITHM);
                        $this->setState(1849);
                        $this->match(self::EQUAL_SYMBOL);
                        $this->setState(1850);

                        $localContext->algType = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
                            $localContext->algType = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(1853);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1854);
                    $this->uidList();
                    $this->setState(1855);
                    $this->match(self::RR_BRACKET);
                    break;
                case 3:
                    $localContext = new Context\PartitionFunctionRangeContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1857);
                    $this->match(self::RANGE);
                    $this->setState(1867);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::LR_BRACKET:
                            $this->setState(1858);
                            $this->match(self::LR_BRACKET);
                            $this->setState(1859);
                            $this->recursiveExpression(0);
                            $this->setState(1860);
                            $this->match(self::RR_BRACKET);
                            break;
                        case self::COLUMNS:
                            $this->setState(1862);
                            $this->match(self::COLUMNS);
                            $this->setState(1863);
                            $this->match(self::LR_BRACKET);
                            $this->setState(1864);
                            $this->uidList();
                            $this->setState(1865);
                            $this->match(self::RR_BRACKET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 4:
                    $localContext = new Context\PartitionFunctionListContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1869);
                    $this->match(self::LIST);
                    $this->setState(1879);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::LR_BRACKET:
                            $this->setState(1870);
                            $this->match(self::LR_BRACKET);
                            $this->setState(1871);
                            $this->recursiveExpression(0);
                            $this->setState(1872);
                            $this->match(self::RR_BRACKET);
                            break;
                        case self::COLUMNS:
                            $this->setState(1874);
                            $this->match(self::COLUMNS);
                            $this->setState(1875);
                            $this->match(self::LR_BRACKET);
                            $this->setState(1876);
                            $this->uidList();
                            $this->setState(1877);
                            $this->match(self::RR_BRACKET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function subpartitionFunctionDefinition(): Context\SubpartitionFunctionDefinitionContext
    {
        $localContext = new Context\SubpartitionFunctionDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 102, self::RULE_subpartitionFunctionDefinition);

        try {
            $this->setState(1904);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 215, $this->ctx)) {
                case 1:
                    $localContext = new Context\SubPartitionFunctionHashContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1884);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LINEAR) {
                        $this->setState(1883);
                        $this->match(self::LINEAR);
                    }
                    $this->setState(1886);
                    $this->match(self::HASH);
                    $this->setState(1887);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1888);
                    $this->recursiveExpression(0);
                    $this->setState(1889);
                    $this->match(self::RR_BRACKET);
                    break;
                case 2:
                    $localContext = new Context\SubPartitionFunctionKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1892);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LINEAR) {
                        $this->setState(1891);
                        $this->match(self::LINEAR);
                    }
                    $this->setState(1894);
                    $this->match(self::KEY);
                    $this->setState(1898);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ALGORITHM) {
                        $this->setState(1895);
                        $this->match(self::ALGORITHM);
                        $this->setState(1896);
                        $this->match(self::EQUAL_SYMBOL);
                        $this->setState(1897);

                        $localContext->algType = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::ONE_DECIMAL || $_la === self::TWO_DECIMAL)) {
                            $localContext->algType = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(1900);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1901);
                    $this->uidList();
                    $this->setState(1902);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionDefinition(): Context\PartitionDefinitionContext
    {
        $localContext = new Context\PartitionDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 104, self::RULE_partitionDefinition);

        try {
            $this->setState(2052);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 234, $this->ctx)) {
                case 1:
                    $localContext = new Context\PartitionComparisonContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(1906);
                    $this->match(self::PARTITION);
                    $this->setState(1907);
                    $this->uid();
                    $this->setState(1908);
                    $this->match(self::VALUES);
                    $this->setState(1909);
                    $this->match(self::LESS);
                    $this->setState(1910);
                    $this->match(self::THAN);
                    $this->setState(1911);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1912);
                    $this->partitionDefinerAtom();
                    $this->setState(1917);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(1913);
                        $this->match(self::COMMA);
                        $this->setState(1914);
                        $this->partitionDefinerAtom();
                        $this->setState(1919);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1920);
                    $this->match(self::RR_BRACKET);
                    $this->setState(1924);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(1921);
                        $this->partitionOption();
                        $this->setState(1926);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1938);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(1927);
                        $this->match(self::LR_BRACKET);
                        $this->setState(1928);
                        $this->subpartitionDefinition();
                        $this->setState(1933);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(1929);
                            $this->match(self::COMMA);
                            $this->setState(1930);
                            $this->subpartitionDefinition();
                            $this->setState(1935);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                        $this->setState(1936);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                case 2:
                    $localContext = new Context\PartitionComparisonContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(1940);
                    $this->match(self::PARTITION);
                    $this->setState(1941);
                    $this->uid();
                    $this->setState(1942);
                    $this->match(self::VALUES);
                    $this->setState(1943);
                    $this->match(self::LESS);
                    $this->setState(1944);
                    $this->match(self::THAN);
                    $this->setState(1945);
                    $this->partitionDefinerAtom();
                    $this->setState(1949);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(1946);
                        $this->partitionOption();
                        $this->setState(1951);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1963);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(1952);
                        $this->match(self::LR_BRACKET);
                        $this->setState(1953);
                        $this->subpartitionDefinition();
                        $this->setState(1958);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(1954);
                            $this->match(self::COMMA);
                            $this->setState(1955);
                            $this->subpartitionDefinition();
                            $this->setState(1960);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                        $this->setState(1961);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                case 3:
                    $localContext = new Context\PartitionListAtomContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(1965);
                    $this->match(self::PARTITION);
                    $this->setState(1966);
                    $this->uid();
                    $this->setState(1967);
                    $this->match(self::VALUES);
                    $this->setState(1968);
                    $this->match(self::IN);
                    $this->setState(1969);
                    $this->match(self::LR_BRACKET);
                    $this->setState(1970);
                    $this->partitionDefinerAtom();
                    $this->setState(1975);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(1971);
                        $this->match(self::COMMA);
                        $this->setState(1972);
                        $this->partitionDefinerAtom();
                        $this->setState(1977);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1978);
                    $this->match(self::RR_BRACKET);
                    $this->setState(1982);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(1979);
                        $this->partitionOption();
                        $this->setState(1984);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(1996);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(1985);
                        $this->match(self::LR_BRACKET);
                        $this->setState(1986);
                        $this->subpartitionDefinition();
                        $this->setState(1991);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(1987);
                            $this->match(self::COMMA);
                            $this->setState(1988);
                            $this->subpartitionDefinition();
                            $this->setState(1993);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                        $this->setState(1994);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                case 4:
                    $localContext = new Context\PartitionListVectorContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(1998);
                    $this->match(self::PARTITION);
                    $this->setState(1999);
                    $this->uid();
                    $this->setState(2000);
                    $this->match(self::VALUES);
                    $this->setState(2001);
                    $this->match(self::IN);
                    $this->setState(2002);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2003);
                    $this->partitionDefinerVector();
                    $this->setState(2008);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2004);
                        $this->match(self::COMMA);
                        $this->setState(2005);
                        $this->partitionDefinerVector();
                        $this->setState(2010);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2011);
                    $this->match(self::RR_BRACKET);
                    $this->setState(2015);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(2012);
                        $this->partitionOption();
                        $this->setState(2017);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2029);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(2018);
                        $this->match(self::LR_BRACKET);
                        $this->setState(2019);
                        $this->subpartitionDefinition();
                        $this->setState(2024);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(2020);
                            $this->match(self::COMMA);
                            $this->setState(2021);
                            $this->subpartitionDefinition();
                            $this->setState(2026);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                        $this->setState(2027);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                case 5:
                    $localContext = new Context\PartitionSimpleContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(2031);
                    $this->match(self::PARTITION);
                    $this->setState(2032);
                    $this->uid();
                    $this->setState(2036);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                        $this->setState(2033);
                        $this->partitionOption();
                        $this->setState(2038);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2050);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(2039);
                        $this->match(self::LR_BRACKET);
                        $this->setState(2040);
                        $this->subpartitionDefinition();
                        $this->setState(2045);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(2041);
                            $this->match(self::COMMA);
                            $this->setState(2042);
                            $this->subpartitionDefinition();
                            $this->setState(2047);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                        $this->setState(2048);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionDefinerAtom(): Context\PartitionDefinerAtomContext
    {
        $localContext = new Context\PartitionDefinerAtomContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 106, self::RULE_partitionDefinerAtom);

        try {
            $this->setState(2057);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 235, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2054);
                    $this->constant();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2055);
                    $this->recursiveExpression(0);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(2056);
                    $this->match(self::MAXVALUE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionDefinerVector(): Context\PartitionDefinerVectorContext
    {
        $localContext = new Context\PartitionDefinerVectorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 108, self::RULE_partitionDefinerVector);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2059);
            $this->match(self::LR_BRACKET);
            $this->setState(2060);
            $this->partitionDefinerAtom();
            $this->setState(2063);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(2061);
                $this->match(self::COMMA);
                $this->setState(2062);
                $this->partitionDefinerAtom();
                $this->setState(2065);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::COMMA);
            $this->setState(2067);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function subpartitionDefinition(): Context\SubpartitionDefinitionContext
    {
        $localContext = new Context\SubpartitionDefinitionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 110, self::RULE_subpartitionDefinition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2069);
            $this->match(self::SUBPARTITION);
            $this->setState(2070);
            $this->uid();
            $this->setState(2074);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::DEFAULT || $_la === self::INDEX || ((($_la - 353) & ~0x3F) === 0 && ((1 << ($_la - 353)) & ((1 << (self::COMMENT - 353)) | (1 << (self::DATA - 353)) | (1 << (self::ENGINE - 353)))) !== 0) || ((($_la - 478) & ~0x3F) === 0 && ((1 << ($_la - 478)) & ((1 << (self::MAX_ROWS - 478)) | (1 << (self::MIN_ROWS - 478)) | (1 << (self::NODEGROUP - 478)))) !== 0) || $_la === self::STORAGE || $_la === self::TABLESPACE) {
                $this->setState(2071);
                $this->partitionOption();
                $this->setState(2076);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionOption(): Context\PartitionOptionContext
    {
        $localContext = new Context\PartitionOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 112, self::RULE_partitionOption);

        try {
            $this->setState(2125);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DEFAULT:
                case self::ENGINE:
                case self::STORAGE:
                    $localContext = new Context\PartitionOptionEngineContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2078);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(2077);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(2081);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::STORAGE) {
                        $this->setState(2080);
                        $this->match(self::STORAGE);
                    }
                    $this->setState(2083);
                    $this->match(self::ENGINE);
                    $this->setState(2085);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2084);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2087);
                    $this->engineName();
                    break;
                case self::COMMENT:
                    $localContext = new Context\PartitionOptionCommentContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2088);
                    $this->match(self::COMMENT);
                    $this->setState(2090);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2089);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2092);
                    $localContext->comment = $this->match(self::STRING_LITERAL);
                    break;
                case self::DATA:
                    $localContext = new Context\PartitionOptionDataDirectoryContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(2093);
                    $this->match(self::DATA);
                    $this->setState(2094);
                    $this->match(self::DIRECTORY);
                    $this->setState(2096);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2095);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2098);
                    $localContext->dataDirectory = $this->match(self::STRING_LITERAL);
                    break;
                case self::INDEX:
                    $localContext = new Context\PartitionOptionIndexDirectoryContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(2099);
                    $this->match(self::INDEX);
                    $this->setState(2100);
                    $this->match(self::DIRECTORY);
                    $this->setState(2102);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2101);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2104);
                    $localContext->indexDirectory = $this->match(self::STRING_LITERAL);
                    break;
                case self::MAX_ROWS:
                    $localContext = new Context\PartitionOptionMaxRowsContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(2105);
                    $this->match(self::MAX_ROWS);
                    $this->setState(2107);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2106);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2109);
                    $localContext->maxRows = $this->decimalLiteral();
                    break;
                case self::MIN_ROWS:
                    $localContext = new Context\PartitionOptionMinRowsContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(2110);
                    $this->match(self::MIN_ROWS);
                    $this->setState(2112);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2111);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2114);
                    $localContext->minRows = $this->decimalLiteral();
                    break;
                case self::TABLESPACE:
                    $localContext = new Context\PartitionOptionTablespaceContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(2115);
                    $this->match(self::TABLESPACE);
                    $this->setState(2117);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2116);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2119);
                    $localContext->tablespace = $this->uid();
                    break;
                case self::NODEGROUP:
                    $localContext = new Context\PartitionOptionNodeGroupContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(2120);
                    $this->match(self::NODEGROUP);
                    $this->setState(2122);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2121);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2124);
                    $localContext->nodegroup = $this->uid();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterDatabase(): Context\AlterDatabaseContext
    {
        $localContext = new Context\AlterDatabaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 114, self::RULE_alterDatabase);

        try {
            $this->setState(2145);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 251, $this->ctx)) {
                case 1:
                    $localContext = new Context\AlterSimpleDatabaseContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2127);
                    $this->match(self::ALTER);
                    $this->setState(2128);

                    $localContext->dbFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DATABASE || $_la === self::SCHEMA)) {
                        $localContext->dbFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2130);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 249, $this->ctx)) {
                        case 1:
                            $this->setState(2129);
                            $this->uid();
                            break;
                    }
                    $this->setState(2133);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(2132);
                        $this->createDatabaseOption();
                        $this->setState(2135);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ((($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::CHARACTER) | (1 << self::COLLATE) | (1 << self::DEFAULT))) !== 0) || $_la === self::CHARSET);
                    break;
                case 2:
                    $localContext = new Context\AlterUpgradeNameContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2137);
                    $this->match(self::ALTER);
                    $this->setState(2138);

                    $localContext->dbFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DATABASE || $_la === self::SCHEMA)) {
                        $localContext->dbFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2139);
                    $this->uid();
                    $this->setState(2140);
                    $this->match(self::UPGRADE);
                    $this->setState(2141);
                    $this->match(self::DATA);
                    $this->setState(2142);
                    $this->match(self::DIRECTORY);
                    $this->setState(2143);
                    $this->match(self::NAME);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterEvent(): Context\AlterEventContext
    {
        $localContext = new Context\AlterEventContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 116, self::RULE_alterEvent);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2147);
            $this->match(self::ALTER);
            $this->setState(2149);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(2148);
                $this->ownerStatement();
            }
            $this->setState(2151);
            $this->match(self::EVENT);
            $this->setState(2152);
            $this->fullId();
            $this->setState(2156);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 253, $this->ctx)) {
                case 1:
                    $this->setState(2153);
                    $this->match(self::ON);
                    $this->setState(2154);
                    $this->match(self::SCHEDULE);
                    $this->setState(2155);
                    $this->scheduleExpression();
                    break;
            }
            $this->setState(2164);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ON) {
                $this->setState(2158);
                $this->match(self::ON);
                $this->setState(2159);
                $this->match(self::COMPLETION);
                $this->setState(2161);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NOT) {
                    $this->setState(2160);
                    $this->match(self::NOT);
                }
                $this->setState(2163);
                $this->match(self::PRESERVE);
            }
            $this->setState(2169);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 256, $this->ctx)) {
                case 1:
                    $this->setState(2166);
                    $this->match(self::RENAME);
                    $this->setState(2167);
                    $this->match(self::TO);
                    $this->setState(2168);
                    $this->fullId();
                    break;
            }
            $this->setState(2172);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DISABLE || $_la === self::ENABLE) {
                $this->setState(2171);
                $this->enableType();
            }
            $this->setState(2176);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMENT) {
                $this->setState(2174);
                $this->match(self::COMMENT);
                $this->setState(2175);
                $this->match(self::STRING_LITERAL);
            }
            $this->setState(2180);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 259, $this->ctx)) {
                case 1:
                    $this->setState(2178);
                    $this->match(self::DO);
                    $this->setState(2179);
                    $this->routineBody();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterFunction(): Context\AlterFunctionContext
    {
        $localContext = new Context\AlterFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 118, self::RULE_alterFunction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2182);
            $this->match(self::ALTER);
            $this->setState(2183);
            $this->match(self::FUNCTION);
            $this->setState(2184);
            $this->fullId();
            $this->setState(2188);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::DETERMINISTIC || ((($_la - 105) & ~0x3F) === 0 && ((1 << ($_la - 105)) & ((1 << (self::MODIFIES - 105)) | (1 << (self::NOT - 105)) | (1 << (self::READS - 105)) | (1 << (self::SQL - 105)))) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
                $this->setState(2185);
                $this->routineOption();
                $this->setState(2190);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterInstance(): Context\AlterInstanceContext
    {
        $localContext = new Context\AlterInstanceContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 120, self::RULE_alterInstance);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2191);
            $this->match(self::ALTER);
            $this->setState(2192);
            $this->match(self::INSTANCE);
            $this->setState(2193);
            $this->match(self::ROTATE);
            $this->setState(2194);
            $this->match(self::INNODB);
            $this->setState(2195);
            $this->match(self::MASTER);
            $this->setState(2196);
            $this->match(self::KEY);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterLogfileGroup(): Context\AlterLogfileGroupContext
    {
        $localContext = new Context\AlterLogfileGroupContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 122, self::RULE_alterLogfileGroup);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2198);
            $this->match(self::ALTER);
            $this->setState(2199);
            $this->match(self::LOGFILE);
            $this->setState(2200);
            $this->match(self::GROUP);
            $this->setState(2201);
            $this->uid();
            $this->setState(2202);
            $this->match(self::ADD);
            $this->setState(2203);
            $this->match(self::UNDOFILE);
            $this->setState(2204);
            $this->match(self::STRING_LITERAL);
            $this->setState(2210);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INITIAL_SIZE) {
                $this->setState(2205);
                $this->match(self::INITIAL_SIZE);
                $this->setState(2207);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(2206);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(2209);
                $this->fileSizeLiteral();
            }
            $this->setState(2213);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WAIT) {
                $this->setState(2212);
                $this->match(self::WAIT);
            }
            $this->setState(2215);
            $this->match(self::ENGINE);
            $this->setState(2217);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EQUAL_SYMBOL) {
                $this->setState(2216);
                $this->match(self::EQUAL_SYMBOL);
            }
            $this->setState(2219);
            $this->engineName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterProcedure(): Context\AlterProcedureContext
    {
        $localContext = new Context\AlterProcedureContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 124, self::RULE_alterProcedure);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2221);
            $this->match(self::ALTER);
            $this->setState(2222);
            $this->match(self::PROCEDURE);
            $this->setState(2223);
            $this->fullId();
            $this->setState(2227);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::DETERMINISTIC || ((($_la - 105) & ~0x3F) === 0 && ((1 << ($_la - 105)) & ((1 << (self::MODIFIES - 105)) | (1 << (self::NOT - 105)) | (1 << (self::READS - 105)) | (1 << (self::SQL - 105)))) !== 0) || $_la === self::COMMENT || $_la === self::CONTAINS || $_la === self::LANGUAGE || $_la === self::NO) {
                $this->setState(2224);
                $this->routineOption();
                $this->setState(2229);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterServer(): Context\AlterServerContext
    {
        $localContext = new Context\AlterServerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 126, self::RULE_alterServer);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2230);
            $this->match(self::ALTER);
            $this->setState(2231);
            $this->match(self::SERVER);
            $this->setState(2232);
            $this->uid();
            $this->setState(2233);
            $this->match(self::OPTIONS);
            $this->setState(2234);
            $this->match(self::LR_BRACKET);
            $this->setState(2235);
            $this->serverOption();
            $this->setState(2240);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(2236);
                $this->match(self::COMMA);
                $this->setState(2237);
                $this->serverOption();
                $this->setState(2242);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(2243);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterTable(): Context\AlterTableContext
    {
        $localContext = new Context\AlterTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 128, self::RULE_alterTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2245);
            $this->match(self::ALTER);
            $this->setState(2247);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::OFFLINE || $_la === self::ONLINE) {
                $this->setState(2246);

                $localContext->intimeAction = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::OFFLINE || $_la === self::ONLINE)) {
                    $localContext->intimeAction = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2250);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(2249);
                $this->match(self::IGNORE);
            }
            $this->setState(2252);
            $this->match(self::TABLE);
            $this->setState(2253);
            $this->tableName();
            $this->setState(2262);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 270, $this->ctx)) {
                case 1:
                    $this->setState(2254);
                    $this->alterSpecification();
                    $this->setState(2259);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2255);
                        $this->match(self::COMMA);
                        $this->setState(2256);
                        $this->alterSpecification();
                        $this->setState(2261);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
            $this->setState(2265);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(2264);
                $this->partitionDefinitions();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterTablespace(): Context\AlterTablespaceContext
    {
        $localContext = new Context\AlterTablespaceContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 130, self::RULE_alterTablespace);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2267);
            $this->match(self::ALTER);
            $this->setState(2268);
            $this->match(self::TABLESPACE);
            $this->setState(2269);
            $this->uid();
            $this->setState(2270);

            $localContext->objectAction = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::ADD || $_la === self::DROP)) {
                $localContext->objectAction = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(2271);
            $this->match(self::DATAFILE);
            $this->setState(2272);
            $this->match(self::STRING_LITERAL);
            $this->setState(2276);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INITIAL_SIZE) {
                $this->setState(2273);
                $this->match(self::INITIAL_SIZE);
                $this->setState(2274);
                $this->match(self::EQUAL_SYMBOL);
                $this->setState(2275);
                $this->fileSizeLiteral();
            }
            $this->setState(2279);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WAIT) {
                $this->setState(2278);
                $this->match(self::WAIT);
            }
            $this->setState(2281);
            $this->match(self::ENGINE);
            $this->setState(2283);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EQUAL_SYMBOL) {
                $this->setState(2282);
                $this->match(self::EQUAL_SYMBOL);
            }
            $this->setState(2285);
            $this->engineName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterView(): Context\AlterViewContext
    {
        $localContext = new Context\AlterViewContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 132, self::RULE_alterView);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2287);
            $this->match(self::ALTER);
            $this->setState(2291);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALGORITHM) {
                $this->setState(2288);
                $this->match(self::ALGORITHM);
                $this->setState(2289);
                $this->match(self::EQUAL_SYMBOL);
                $this->setState(2290);

                $localContext->algType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::MERGE || $_la === self::TEMPTABLE || $_la === self::UNDEFINED)) {
                    $localContext->algType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2294);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFINER) {
                $this->setState(2293);
                $this->ownerStatement();
            }
            $this->setState(2299);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SQL) {
                $this->setState(2296);
                $this->match(self::SQL);
                $this->setState(2297);
                $this->match(self::SECURITY);
                $this->setState(2298);

                $localContext->secContext = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::DEFINER || $_la === self::INVOKER)) {
                    $localContext->secContext = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2301);
            $this->match(self::VIEW);
            $this->setState(2302);
            $this->fullId();
            $this->setState(2307);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LR_BRACKET) {
                $this->setState(2303);
                $this->match(self::LR_BRACKET);
                $this->setState(2304);
                $this->uidList();
                $this->setState(2305);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(2309);
            $this->match(self::AS);
            $this->setState(2310);
            $this->selectStatement();
            $this->setState(2317);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WITH) {
                $this->setState(2311);
                $this->match(self::WITH);
                $this->setState(2313);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::CASCADED || $_la === self::LOCAL) {
                    $this->setState(2312);

                    $localContext->checkOpt = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CASCADED || $_la === self::LOCAL)) {
                        $localContext->checkOpt = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                }
                $this->setState(2315);
                $this->match(self::CHECK);
                $this->setState(2316);
                $this->match(self::OPTION);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterSpecification(): Context\AlterSpecificationContext
    {
        $localContext = new Context\AlterSpecificationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 134, self::RULE_alterSpecification);

        try {
            $this->setState(2685);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 335, $this->ctx)) {
                case 1:
                    $localContext = new Context\AlterByTableOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2319);
                    $this->tableOption();
                    $this->setState(2326);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 282, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(2321);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::COMMA) {
                                $this->setState(2320);
                                $this->match(self::COMMA);
                            }
                            $this->setState(2323);
                            $this->tableOption();
                        }

                        $this->setState(2328);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 282, $this->ctx);
                    }
                    break;
                case 2:
                    $localContext = new Context\AlterByAddColumnContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2329);
                    $this->match(self::ADD);
                    $this->setState(2331);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2330);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2333);
                    $this->uid();
                    $this->setState(2334);
                    $this->columnDefinition();
                    $this->setState(2338);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::FIRST:
                            $this->setState(2335);
                            $this->match(self::FIRST);
                            break;
                        case self::AFTER:
                            $this->setState(2336);
                            $this->match(self::AFTER);
                            $this->setState(2337);
                            $this->uid();
                            break;
                        case self::EOF:
                        case self::ALTER:
                        case self::ANALYZE:
                        case self::CALL:
                        case self::CHANGE:
                        case self::CHECK:
                        case self::CREATE:
                        case self::DELETE:
                        case self::DESC:
                        case self::DESCRIBE:
                        case self::DROP:
                        case self::EXPLAIN:
                        case self::GET:
                        case self::GRANT:
                        case self::INSERT:
                        case self::KILL:
                        case self::LOAD:
                        case self::LOCK:
                        case self::OPTIMIZE:
                        case self::PARTITION:
                        case self::PURGE:
                        case self::RELEASE:
                        case self::RENAME:
                        case self::REPLACE:
                        case self::RESIGNAL:
                        case self::REVOKE:
                        case self::SELECT:
                        case self::SET:
                        case self::SHOW:
                        case self::SIGNAL:
                        case self::UNLOCK:
                        case self::UPDATE:
                        case self::USE:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::CACHE:
                        case self::CHECKSUM:
                        case self::COMMIT:
                        case self::DEALLOCATE:
                        case self::DO:
                        case self::FLUSH:
                        case self::HANDLER:
                        case self::HELP:
                        case self::INSTALL:
                        case self::PREPARE:
                        case self::REPAIR:
                        case self::RESET:
                        case self::ROLLBACK:
                        case self::SAVEPOINT:
                        case self::START:
                        case self::STOP:
                        case self::TRUNCATE:
                        case self::UNINSTALL:
                        case self::XA:
                        case self::EXECUTE:
                        case self::SHUTDOWN:
                        case self::MINUS:
                        case self::LR_BRACKET:
                        case self::COMMA:
                        case self::SEMI:
                            break;
                        default:
                            break;
                    }
                    break;
                case 3:
                    $localContext = new Context\AlterByAddColumnsContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(2340);
                    $this->match(self::ADD);
                    $this->setState(2342);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2341);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2344);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2345);
                    $this->uid();
                    $this->setState(2346);
                    $this->columnDefinition();
                    $this->setState(2353);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2347);
                        $this->match(self::COMMA);
                        $this->setState(2348);
                        $this->uid();
                        $this->setState(2349);
                        $this->columnDefinition();
                        $this->setState(2355);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2356);
                    $this->match(self::RR_BRACKET);
                    break;
                case 4:
                    $localContext = new Context\AlterByAddIndexContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(2358);
                    $this->match(self::ADD);
                    $this->setState(2359);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEY)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2361);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(2360);
                        $this->uid();
                    }
                    $this->setState(2364);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(2363);
                        $this->indexType();
                    }
                    $this->setState(2366);
                    $this->indexColumnNames();
                    $this->setState(2370);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(2367);
                        $this->indexOption();
                        $this->setState(2372);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 5:
                    $localContext = new Context\AlterByAddPrimaryKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(2373);
                    $this->match(self::ADD);
                    $this->setState(2378);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(2374);
                        $this->match(self::CONSTRAINT);
                        $this->setState(2376);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(2375);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(2380);
                    $this->match(self::PRIMARY);
                    $this->setState(2381);
                    $this->match(self::KEY);
                    $this->setState(2383);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(2382);
                        $localContext->index = $this->uid();
                    }
                    $this->setState(2386);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(2385);
                        $this->indexType();
                    }
                    $this->setState(2388);
                    $this->indexColumnNames();
                    $this->setState(2392);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(2389);
                        $this->indexOption();
                        $this->setState(2394);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 6:
                    $localContext = new Context\AlterByAddUniqueKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(2395);
                    $this->match(self::ADD);
                    $this->setState(2400);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(2396);
                        $this->match(self::CONSTRAINT);
                        $this->setState(2398);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(2397);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(2402);
                    $this->match(self::UNIQUE);
                    $this->setState(2404);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INDEX || $_la === self::KEY) {
                        $this->setState(2403);

                        $localContext->indexFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::INDEX || $_la === self::KEY)) {
                            $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(2407);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(2406);
                        $localContext->indexName = $this->uid();
                    }
                    $this->setState(2410);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(2409);
                        $this->indexType();
                    }
                    $this->setState(2412);
                    $this->indexColumnNames();
                    $this->setState(2416);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(2413);
                        $this->indexOption();
                        $this->setState(2418);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 7:
                    $localContext = new Context\AlterByAddSpecialIndexContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(2419);
                    $this->match(self::ADD);
                    $this->setState(2420);

                    $localContext->keyType = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FULLTEXT || $_la === self::SPATIAL)) {
                        $localContext->keyType = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2422);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INDEX || $_la === self::KEY) {
                        $this->setState(2421);

                        $localContext->indexFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::INDEX || $_la === self::KEY)) {
                            $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(2425);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(2424);
                        $this->uid();
                    }
                    $this->setState(2427);
                    $this->indexColumnNames();
                    $this->setState(2431);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::USING || $_la === self::WITH || $_la === self::COMMENT || $_la === self::INVISIBLE || $_la === self::KEY_BLOCK_SIZE || $_la === self::VISIBLE) {
                        $this->setState(2428);
                        $this->indexOption();
                        $this->setState(2433);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 8:
                    $localContext = new Context\AlterByAddForeignKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(2434);
                    $this->match(self::ADD);
                    $this->setState(2439);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(2435);
                        $this->match(self::CONSTRAINT);
                        $this->setState(2437);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(2436);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(2441);
                    $this->match(self::FOREIGN);
                    $this->setState(2442);
                    $this->match(self::KEY);
                    $this->setState(2444);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(2443);
                        $localContext->indexName = $this->uid();
                    }
                    $this->setState(2446);
                    $this->indexColumnNames();
                    $this->setState(2447);
                    $this->referenceDefinition();
                    break;
                case 9:
                    $localContext = new Context\AlterByAddCheckTableConstraintContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(2449);
                    $this->match(self::ADD);
                    $this->setState(2454);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CONSTRAINT) {
                        $this->setState(2450);
                        $this->match(self::CONSTRAINT);
                        $this->setState(2452);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                            $this->setState(2451);
                            $localContext->name = $this->uid();
                        }
                    }
                    $this->setState(2456);
                    $this->match(self::CHECK);
                    $this->setState(2457);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2458);
                    $this->recursiveExpression(0);
                    $this->setState(2459);
                    $this->match(self::RR_BRACKET);
                    break;
                case 10:
                    $localContext = new Context\AlterBySetAlgorithmContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(2461);
                    $this->match(self::ALGORITHM);
                    $this->setState(2463);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2462);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2465);

                    $localContext->algType = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
                        $localContext->algType = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 11:
                    $localContext = new Context\AlterByChangeDefaultContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(2466);
                    $this->match(self::ALTER);
                    $this->setState(2468);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2467);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2470);
                    $this->uid();
                    $this->setState(2476);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::SET:
                            $this->setState(2471);
                            $this->match(self::SET);
                            $this->setState(2472);
                            $this->match(self::DEFAULT);
                            $this->setState(2473);
                            $this->defaultValue();
                            break;
                        case self::DROP:
                            $this->setState(2474);
                            $this->match(self::DROP);
                            $this->setState(2475);
                            $this->match(self::DEFAULT);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 12:
                    $localContext = new Context\AlterByChangeColumnContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(2478);
                    $this->match(self::CHANGE);
                    $this->setState(2480);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2479);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2482);
                    $localContext->oldColumn = $this->uid();
                    $this->setState(2483);
                    $localContext->newColumn = $this->uid();
                    $this->setState(2484);
                    $this->columnDefinition();
                    $this->setState(2488);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::FIRST:
                            $this->setState(2485);
                            $this->match(self::FIRST);
                            break;
                        case self::AFTER:
                            $this->setState(2486);
                            $this->match(self::AFTER);
                            $this->setState(2487);
                            $localContext->afterColumn = $this->uid();
                            break;
                        case self::EOF:
                        case self::ALTER:
                        case self::ANALYZE:
                        case self::CALL:
                        case self::CHANGE:
                        case self::CHECK:
                        case self::CREATE:
                        case self::DELETE:
                        case self::DESC:
                        case self::DESCRIBE:
                        case self::DROP:
                        case self::EXPLAIN:
                        case self::GET:
                        case self::GRANT:
                        case self::INSERT:
                        case self::KILL:
                        case self::LOAD:
                        case self::LOCK:
                        case self::OPTIMIZE:
                        case self::PARTITION:
                        case self::PURGE:
                        case self::RELEASE:
                        case self::RENAME:
                        case self::REPLACE:
                        case self::RESIGNAL:
                        case self::REVOKE:
                        case self::SELECT:
                        case self::SET:
                        case self::SHOW:
                        case self::SIGNAL:
                        case self::UNLOCK:
                        case self::UPDATE:
                        case self::USE:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::CACHE:
                        case self::CHECKSUM:
                        case self::COMMIT:
                        case self::DEALLOCATE:
                        case self::DO:
                        case self::FLUSH:
                        case self::HANDLER:
                        case self::HELP:
                        case self::INSTALL:
                        case self::PREPARE:
                        case self::REPAIR:
                        case self::RESET:
                        case self::ROLLBACK:
                        case self::SAVEPOINT:
                        case self::START:
                        case self::STOP:
                        case self::TRUNCATE:
                        case self::UNINSTALL:
                        case self::XA:
                        case self::EXECUTE:
                        case self::SHUTDOWN:
                        case self::MINUS:
                        case self::LR_BRACKET:
                        case self::COMMA:
                        case self::SEMI:
                            break;
                        default:
                            break;
                    }
                    break;
                case 13:
                    $localContext = new Context\AlterByRenameColumnContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(2490);
                    $this->match(self::RENAME);
                    $this->setState(2491);
                    $this->match(self::COLUMN);
                    $this->setState(2492);
                    $localContext->oldColumn = $this->uid();
                    $this->setState(2493);
                    $this->match(self::TO);
                    $this->setState(2494);
                    $localContext->newColumn = $this->uid();
                    break;
                case 14:
                    $localContext = new Context\AlterByLockContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(2496);
                    $this->match(self::LOCK);
                    $this->setState(2498);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EQUAL_SYMBOL) {
                        $this->setState(2497);
                        $this->match(self::EQUAL_SYMBOL);
                    }
                    $this->setState(2500);

                    $localContext->lockType = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
                        $localContext->lockType = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 15:
                    $localContext = new Context\AlterByModifyColumnContext($localContext);
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(2501);
                    $this->match(self::MODIFY);
                    $this->setState(2503);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2502);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2505);
                    $this->uid();
                    $this->setState(2506);
                    $this->columnDefinition();
                    $this->setState(2510);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::FIRST:
                            $this->setState(2507);
                            $this->match(self::FIRST);
                            break;
                        case self::AFTER:
                            $this->setState(2508);
                            $this->match(self::AFTER);
                            $this->setState(2509);
                            $this->uid();
                            break;
                        case self::EOF:
                        case self::ALTER:
                        case self::ANALYZE:
                        case self::CALL:
                        case self::CHANGE:
                        case self::CHECK:
                        case self::CREATE:
                        case self::DELETE:
                        case self::DESC:
                        case self::DESCRIBE:
                        case self::DROP:
                        case self::EXPLAIN:
                        case self::GET:
                        case self::GRANT:
                        case self::INSERT:
                        case self::KILL:
                        case self::LOAD:
                        case self::LOCK:
                        case self::OPTIMIZE:
                        case self::PARTITION:
                        case self::PURGE:
                        case self::RELEASE:
                        case self::RENAME:
                        case self::REPLACE:
                        case self::RESIGNAL:
                        case self::REVOKE:
                        case self::SELECT:
                        case self::SET:
                        case self::SHOW:
                        case self::SIGNAL:
                        case self::UNLOCK:
                        case self::UPDATE:
                        case self::USE:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::CACHE:
                        case self::CHECKSUM:
                        case self::COMMIT:
                        case self::DEALLOCATE:
                        case self::DO:
                        case self::FLUSH:
                        case self::HANDLER:
                        case self::HELP:
                        case self::INSTALL:
                        case self::PREPARE:
                        case self::REPAIR:
                        case self::RESET:
                        case self::ROLLBACK:
                        case self::SAVEPOINT:
                        case self::START:
                        case self::STOP:
                        case self::TRUNCATE:
                        case self::UNINSTALL:
                        case self::XA:
                        case self::EXECUTE:
                        case self::SHUTDOWN:
                        case self::MINUS:
                        case self::LR_BRACKET:
                        case self::COMMA:
                        case self::SEMI:
                            break;
                        default:
                            break;
                    }
                    break;
                case 16:
                    $localContext = new Context\AlterByDropColumnContext($localContext);
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(2512);
                    $this->match(self::DROP);
                    $this->setState(2514);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLUMN) {
                        $this->setState(2513);
                        $this->match(self::COLUMN);
                    }
                    $this->setState(2516);
                    $this->uid();
                    $this->setState(2518);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::RESTRICT) {
                        $this->setState(2517);
                        $this->match(self::RESTRICT);
                    }
                    break;
                case 17:
                    $localContext = new Context\AlterByDropConstraintCheckContext($localContext);
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(2520);
                    $this->match(self::DROP);
                    $this->setState(2521);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CHECK || $_la === self::CONSTRAINT)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2522);
                    $this->uid();
                    break;
                case 18:
                    $localContext = new Context\AlterByDropPrimaryKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(2523);
                    $this->match(self::DROP);
                    $this->setState(2524);
                    $this->match(self::PRIMARY);
                    $this->setState(2525);
                    $this->match(self::KEY);
                    break;
                case 19:
                    $localContext = new Context\AlterByRenameIndexContext($localContext);
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(2526);
                    $this->match(self::RENAME);
                    $this->setState(2527);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEY)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2528);
                    $this->uid();
                    $this->setState(2529);
                    $this->match(self::TO);
                    $this->setState(2530);
                    $this->uid();
                    break;
                case 20:
                    $localContext = new Context\AlterByAlterIndexVisibilityContext($localContext);
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(2532);
                    $this->match(self::ALTER);
                    $this->setState(2533);
                    $this->match(self::INDEX);
                    $this->setState(2534);
                    $this->uid();
                    $this->setState(2535);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INVISIBLE || $_la === self::VISIBLE)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 21:
                    $localContext = new Context\AlterByDropIndexContext($localContext);
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(2537);
                    $this->match(self::DROP);
                    $this->setState(2538);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEY)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2539);
                    $this->uid();
                    break;
                case 22:
                    $localContext = new Context\AlterByDropForeignKeyContext($localContext);
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(2540);
                    $this->match(self::DROP);
                    $this->setState(2541);
                    $this->match(self::FOREIGN);
                    $this->setState(2542);
                    $this->match(self::KEY);
                    $this->setState(2543);
                    $this->uid();
                    break;
                case 23:
                    $localContext = new Context\AlterByDisableKeysContext($localContext);
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(2544);
                    $this->match(self::DISABLE);
                    $this->setState(2545);
                    $this->match(self::KEYS);
                    break;
                case 24:
                    $localContext = new Context\AlterByEnableKeysContext($localContext);
                    $this->enterOuterAlt($localContext, 24);
                    $this->setState(2546);
                    $this->match(self::ENABLE);
                    $this->setState(2547);
                    $this->match(self::KEYS);
                    break;
                case 25:
                    $localContext = new Context\AlterByRenameContext($localContext);
                    $this->enterOuterAlt($localContext, 25);
                    $this->setState(2548);
                    $this->match(self::RENAME);
                    $this->setState(2550);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS || $_la === self::TO) {
                        $this->setState(2549);

                        $localContext->renameFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::AS || $_la === self::TO)) {
                            $localContext->renameFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(2554);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 320, $this->ctx)) {
                        case 1:
                            $this->setState(2552);
                            $this->uid();
                            break;
                        case 2:
                            $this->setState(2553);
                            $this->fullId();
                            break;
                    }
                    break;
                case 26:
                    $localContext = new Context\AlterByOrderContext($localContext);
                    $this->enterOuterAlt($localContext, 26);
                    $this->setState(2556);
                    $this->match(self::ORDER);
                    $this->setState(2557);
                    $this->match(self::BY);
                    $this->setState(2558);
                    $this->uidList();
                    break;
                case 27:
                    $localContext = new Context\AlterByConvertCharsetContext($localContext);
                    $this->enterOuterAlt($localContext, 27);
                    $this->setState(2559);
                    $this->match(self::CONVERT);
                    $this->setState(2560);
                    $this->match(self::TO);
                    $this->setState(2561);
                    $this->match(self::CHARACTER);
                    $this->setState(2562);
                    $this->match(self::SET);
                    $this->setState(2563);
                    $this->charsetName();
                    $this->setState(2566);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLLATE) {
                        $this->setState(2564);
                        $this->match(self::COLLATE);
                        $this->setState(2565);
                        $this->collationName();
                    }
                    break;
                case 28:
                    $localContext = new Context\AlterByDefaultCharsetContext($localContext);
                    $this->enterOuterAlt($localContext, 28);
                    $this->setState(2569);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT) {
                        $this->setState(2568);
                        $this->match(self::DEFAULT);
                    }
                    $this->setState(2571);
                    $this->match(self::CHARACTER);
                    $this->setState(2572);
                    $this->match(self::SET);
                    $this->setState(2573);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(2574);
                    $this->charsetName();
                    $this->setState(2578);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COLLATE) {
                        $this->setState(2575);
                        $this->match(self::COLLATE);
                        $this->setState(2576);
                        $this->match(self::EQUAL_SYMBOL);
                        $this->setState(2577);
                        $this->collationName();
                    }
                    break;
                case 29:
                    $localContext = new Context\AlterByDiscardTablespaceContext($localContext);
                    $this->enterOuterAlt($localContext, 29);
                    $this->setState(2580);
                    $this->match(self::DISCARD);
                    $this->setState(2581);
                    $this->match(self::TABLESPACE);
                    break;
                case 30:
                    $localContext = new Context\AlterByImportTablespaceContext($localContext);
                    $this->enterOuterAlt($localContext, 30);
                    $this->setState(2582);
                    $this->match(self::IMPORT);
                    $this->setState(2583);
                    $this->match(self::TABLESPACE);
                    break;
                case 31:
                    $localContext = new Context\AlterByForceContext($localContext);
                    $this->enterOuterAlt($localContext, 31);
                    $this->setState(2584);
                    $this->match(self::FORCE);
                    break;
                case 32:
                    $localContext = new Context\AlterByValidateContext($localContext);
                    $this->enterOuterAlt($localContext, 32);
                    $this->setState(2585);

                    $localContext->validationFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::WITH || $_la === self::WITHOUT)) {
                        $localContext->validationFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(2586);
                    $this->match(self::VALIDATION);
                    break;
                case 33:
                    $localContext = new Context\AlterByAddPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 33);
                    $this->setState(2587);
                    $this->match(self::ADD);
                    $this->setState(2588);
                    $this->match(self::PARTITION);
                    $this->setState(2589);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2590);
                    $this->partitionDefinition();
                    $this->setState(2595);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2591);
                        $this->match(self::COMMA);
                        $this->setState(2592);
                        $this->partitionDefinition();
                        $this->setState(2597);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2598);
                    $this->match(self::RR_BRACKET);
                    break;
                case 34:
                    $localContext = new Context\AlterByDropPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 34);
                    $this->setState(2600);
                    $this->match(self::DROP);
                    $this->setState(2601);
                    $this->match(self::PARTITION);
                    $this->setState(2602);
                    $this->uidList();
                    break;
                case 35:
                    $localContext = new Context\AlterByDiscardPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 35);
                    $this->setState(2603);
                    $this->match(self::DISCARD);
                    $this->setState(2604);
                    $this->match(self::PARTITION);
                    $this->setState(2607);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2605);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2606);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(2609);
                    $this->match(self::TABLESPACE);
                    break;
                case 36:
                    $localContext = new Context\AlterByImportPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 36);
                    $this->setState(2610);
                    $this->match(self::IMPORT);
                    $this->setState(2611);
                    $this->match(self::PARTITION);
                    $this->setState(2614);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2612);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2613);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(2616);
                    $this->match(self::TABLESPACE);
                    break;
                case 37:
                    $localContext = new Context\AlterByTruncatePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 37);
                    $this->setState(2617);
                    $this->match(self::TRUNCATE);
                    $this->setState(2618);
                    $this->match(self::PARTITION);
                    $this->setState(2621);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2619);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2620);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 38:
                    $localContext = new Context\AlterByCoalescePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 38);
                    $this->setState(2623);
                    $this->match(self::COALESCE);
                    $this->setState(2624);
                    $this->match(self::PARTITION);
                    $this->setState(2625);
                    $this->decimalLiteral();
                    break;
                case 39:
                    $localContext = new Context\AlterByReorganizePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 39);
                    $this->setState(2626);
                    $this->match(self::REORGANIZE);
                    $this->setState(2627);
                    $this->match(self::PARTITION);
                    $this->setState(2628);
                    $this->uidList();
                    $this->setState(2629);
                    $this->match(self::INTO);
                    $this->setState(2630);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2631);
                    $this->partitionDefinition();
                    $this->setState(2636);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2632);
                        $this->match(self::COMMA);
                        $this->setState(2633);
                        $this->partitionDefinition();
                        $this->setState(2638);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2639);
                    $this->match(self::RR_BRACKET);
                    break;
                case 40:
                    $localContext = new Context\AlterByExchangePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 40);
                    $this->setState(2641);
                    $this->match(self::EXCHANGE);
                    $this->setState(2642);
                    $this->match(self::PARTITION);
                    $this->setState(2643);
                    $this->uid();
                    $this->setState(2644);
                    $this->match(self::WITH);
                    $this->setState(2645);
                    $this->match(self::TABLE);
                    $this->setState(2646);
                    $this->tableName();
                    $this->setState(2649);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH || $_la === self::WITHOUT) {
                        $this->setState(2647);

                        $localContext->validationFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::WITH || $_la === self::WITHOUT)) {
                            $localContext->validationFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(2648);
                        $this->match(self::VALIDATION);
                    }
                    break;
                case 41:
                    $localContext = new Context\AlterByAnalyzePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 41);
                    $this->setState(2651);
                    $this->match(self::ANALYZE);
                    $this->setState(2652);
                    $this->match(self::PARTITION);
                    $this->setState(2655);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2653);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2654);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 42:
                    $localContext = new Context\AlterByCheckPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 42);
                    $this->setState(2657);
                    $this->match(self::CHECK);
                    $this->setState(2658);
                    $this->match(self::PARTITION);
                    $this->setState(2661);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2659);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2660);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 43:
                    $localContext = new Context\AlterByOptimizePartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 43);
                    $this->setState(2663);
                    $this->match(self::OPTIMIZE);
                    $this->setState(2664);
                    $this->match(self::PARTITION);
                    $this->setState(2667);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2665);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2666);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 44:
                    $localContext = new Context\AlterByRebuildPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 44);
                    $this->setState(2669);
                    $this->match(self::REBUILD);
                    $this->setState(2670);
                    $this->match(self::PARTITION);
                    $this->setState(2673);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2671);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2672);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 45:
                    $localContext = new Context\AlterByRepairPartitionContext($localContext);
                    $this->enterOuterAlt($localContext, 45);
                    $this->setState(2675);
                    $this->match(self::REPAIR);
                    $this->setState(2676);
                    $this->match(self::PARTITION);
                    $this->setState(2679);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::OPTIONAL:
                            $this->setState(2677);
                            $this->uidList();
                            break;
                        case self::ALL:
                            $this->setState(2678);
                            $this->match(self::ALL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 46:
                    $localContext = new Context\AlterByRemovePartitioningContext($localContext);
                    $this->enterOuterAlt($localContext, 46);
                    $this->setState(2681);
                    $this->match(self::REMOVE);
                    $this->setState(2682);
                    $this->match(self::PARTITIONING);
                    break;
                case 47:
                    $localContext = new Context\AlterByUpgradePartitioningContext($localContext);
                    $this->enterOuterAlt($localContext, 47);
                    $this->setState(2683);
                    $this->match(self::UPGRADE);
                    $this->setState(2684);
                    $this->match(self::PARTITIONING);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropDatabase(): Context\DropDatabaseContext
    {
        $localContext = new Context\DropDatabaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 136, self::RULE_dropDatabase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2687);
            $this->match(self::DROP);
            $this->setState(2688);

            $localContext->dbFormat = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::DATABASE || $_la === self::SCHEMA)) {
                $localContext->dbFormat = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(2690);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2689);
                $this->ifExists();
            }
            $this->setState(2692);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropEvent(): Context\DropEventContext
    {
        $localContext = new Context\DropEventContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 138, self::RULE_dropEvent);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2694);
            $this->match(self::DROP);
            $this->setState(2695);
            $this->match(self::EVENT);
            $this->setState(2697);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2696);
                $this->ifExists();
            }
            $this->setState(2699);
            $this->fullId();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropIndex(): Context\DropIndexContext
    {
        $localContext = new Context\DropIndexContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 140, self::RULE_dropIndex);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2701);
            $this->match(self::DROP);
            $this->setState(2702);
            $this->match(self::INDEX);
            $this->setState(2704);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 338, $this->ctx)) {
                case 1:
                    $this->setState(2703);

                    $localContext->intimeAction = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::OFFLINE || $_la === self::ONLINE)) {
                        $localContext->intimeAction = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
            }
            $this->setState(2706);
            $this->uid();
            $this->setState(2707);
            $this->match(self::ON);
            $this->setState(2708);
            $this->tableName();
            $this->setState(2721);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 342, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(2719);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ALGORITHM:
                            $this->setState(2709);
                            $this->match(self::ALGORITHM);
                            $this->setState(2711);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::EQUAL_SYMBOL) {
                                $this->setState(2710);
                                $this->match(self::EQUAL_SYMBOL);
                            }
                            $this->setState(2713);

                            $localContext->algType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::DEFAULT || $_la === self::COPY || $_la === self::INPLACE)) {
                                $localContext->algType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                        case self::LOCK:
                            $this->setState(2714);
                            $this->match(self::LOCK);
                            $this->setState(2716);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::EQUAL_SYMBOL) {
                                $this->setState(2715);
                                $this->match(self::EQUAL_SYMBOL);
                            }
                            $this->setState(2718);

                            $localContext->lockType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::DEFAULT || $_la === self::EXCLUSIVE || $_la === self::NONE || $_la === self::SHARED)) {
                                $localContext->lockType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                }

                $this->setState(2723);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 342, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropLogfileGroup(): Context\DropLogfileGroupContext
    {
        $localContext = new Context\DropLogfileGroupContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 142, self::RULE_dropLogfileGroup);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2724);
            $this->match(self::DROP);
            $this->setState(2725);
            $this->match(self::LOGFILE);
            $this->setState(2726);
            $this->match(self::GROUP);
            $this->setState(2727);
            $this->uid();
            $this->setState(2728);
            $this->match(self::ENGINE);
            $this->setState(2729);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(2730);
            $this->engineName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropProcedure(): Context\DropProcedureContext
    {
        $localContext = new Context\DropProcedureContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 144, self::RULE_dropProcedure);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2732);
            $this->match(self::DROP);
            $this->setState(2733);
            $this->match(self::PROCEDURE);
            $this->setState(2735);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2734);
                $this->ifExists();
            }
            $this->setState(2737);
            $this->fullId();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropFunction(): Context\DropFunctionContext
    {
        $localContext = new Context\DropFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 146, self::RULE_dropFunction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2739);
            $this->match(self::DROP);
            $this->setState(2740);
            $this->match(self::FUNCTION);
            $this->setState(2742);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2741);
                $this->ifExists();
            }
            $this->setState(2744);
            $this->fullId();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropServer(): Context\DropServerContext
    {
        $localContext = new Context\DropServerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 148, self::RULE_dropServer);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2746);
            $this->match(self::DROP);
            $this->setState(2747);
            $this->match(self::SERVER);
            $this->setState(2749);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2748);
                $this->ifExists();
            }
            $this->setState(2751);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropTable(): Context\DropTableContext
    {
        $localContext = new Context\DropTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 150, self::RULE_dropTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2753);
            $this->match(self::DROP);
            $this->setState(2755);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::TEMPORARY) {
                $this->setState(2754);
                $this->match(self::TEMPORARY);
            }
            $this->setState(2757);
            $this->match(self::TABLE);
            $this->setState(2759);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2758);
                $this->ifExists();
            }
            $this->setState(2761);
            $this->tables();
            $this->setState(2763);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CASCADE || $_la === self::RESTRICT) {
                $this->setState(2762);

                $localContext->dropType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::CASCADE || $_la === self::RESTRICT)) {
                    $localContext->dropType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropTablespace(): Context\DropTablespaceContext
    {
        $localContext = new Context\DropTablespaceContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 152, self::RULE_dropTablespace);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2765);
            $this->match(self::DROP);
            $this->setState(2766);
            $this->match(self::TABLESPACE);
            $this->setState(2767);
            $this->uid();
            $this->setState(2773);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ENGINE) {
                $this->setState(2768);
                $this->match(self::ENGINE);
                $this->setState(2770);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::EQUAL_SYMBOL) {
                    $this->setState(2769);
                    $this->match(self::EQUAL_SYMBOL);
                }
                $this->setState(2772);
                $this->engineName();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropTrigger(): Context\DropTriggerContext
    {
        $localContext = new Context\DropTriggerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 154, self::RULE_dropTrigger);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2775);
            $this->match(self::DROP);
            $this->setState(2776);
            $this->match(self::TRIGGER);
            $this->setState(2778);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2777);
                $this->ifExists();
            }
            $this->setState(2780);
            $this->fullId();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropView(): Context\DropViewContext
    {
        $localContext = new Context\DropViewContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 156, self::RULE_dropView);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2782);
            $this->match(self::DROP);
            $this->setState(2783);
            $this->match(self::VIEW);
            $this->setState(2785);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(2784);
                $this->ifExists();
            }
            $this->setState(2787);
            $this->fullId();
            $this->setState(2792);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(2788);
                $this->match(self::COMMA);
                $this->setState(2789);
                $this->fullId();
                $this->setState(2794);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(2796);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CASCADE || $_la === self::RESTRICT) {
                $this->setState(2795);

                $localContext->dropType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::CASCADE || $_la === self::RESTRICT)) {
                    $localContext->dropType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function renameTable(): Context\RenameTableContext
    {
        $localContext = new Context\RenameTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 158, self::RULE_renameTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2798);
            $this->match(self::RENAME);
            $this->setState(2799);
            $this->match(self::TABLE);
            $this->setState(2800);
            $this->renameTableClause();
            $this->setState(2805);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(2801);
                $this->match(self::COMMA);
                $this->setState(2802);
                $this->renameTableClause();
                $this->setState(2807);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function renameTableClause(): Context\RenameTableClauseContext
    {
        $localContext = new Context\RenameTableClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 160, self::RULE_renameTableClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2808);
            $this->tableName();
            $this->setState(2809);
            $this->match(self::TO);
            $this->setState(2810);
            $this->tableName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function truncateTable(): Context\TruncateTableContext
    {
        $localContext = new Context\TruncateTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 162, self::RULE_truncateTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2812);
            $this->match(self::TRUNCATE);
            $this->setState(2814);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::TABLE) {
                $this->setState(2813);
                $this->match(self::TABLE);
            }
            $this->setState(2816);
            $this->tableName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function callStatement(): Context\CallStatementContext
    {
        $localContext = new Context\CallStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 164, self::RULE_callStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2818);
            $this->match(self::CALL);
            $this->setState(2819);
            $this->fullId();
            $this->setState(2826);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 358, $this->ctx)) {
                case 1:
                    $this->setState(2820);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2823);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 357, $this->ctx)) {
                        case 1:
                            $this->setState(2821);
                            $this->constants();
                            break;
                        case 2:
                            $this->setState(2822);
                            $this->expressions();
                            break;
                    }
                    $this->setState(2825);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function deleteStatement(): Context\DeleteStatementContext
    {
        $localContext = new Context\DeleteStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 166, self::RULE_deleteStatement);

        try {
            $this->setState(2830);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 359, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2828);
                    $this->singleDeleteStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2829);
                    $this->multipleDeleteStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function doStatement(): Context\DoStatementContext
    {
        $localContext = new Context\DoStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 168, self::RULE_doStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2832);
            $this->match(self::DO);
            $this->setState(2833);
            $this->expressions();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerStatement(): Context\HandlerStatementContext
    {
        $localContext = new Context\HandlerStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 170, self::RULE_handlerStatement);

        try {
            $this->setState(2839);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 360, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(2835);
                    $this->handlerOpenStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(2836);
                    $this->handlerReadIndexStatement();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(2837);
                    $this->handlerReadStatement();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(2838);
                    $this->handlerCloseStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function insertStatement(): Context\InsertStatementContext
    {
        $localContext = new Context\InsertStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 172, self::RULE_insertStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2841);
            $this->match(self::INSERT);
            $this->setState(2843);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ((($_la - 41) & ~0x3F) === 0 && ((1 << ($_la - 41)) & ((1 << (self::DELAYED - 41)) | (1 << (self::HIGH_PRIORITY - 41)) | (1 << (self::LOW_PRIORITY - 41)))) !== 0) {
                $this->setState(2842);

                $localContext->priority = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ((($_la - 41) & ~0x3F) === 0 && ((1 << ($_la - 41)) & ((1 << (self::DELAYED - 41)) | (1 << (self::HIGH_PRIORITY - 41)) | (1 << (self::LOW_PRIORITY - 41)))) !== 0)) {
                    $localContext->priority = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2846);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(2845);
                $this->match(self::IGNORE);
            }
            $this->setState(2849);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INTO) {
                $this->setState(2848);
                $this->match(self::INTO);
            }
            $this->setState(2851);
            $this->tableName();
            $this->setState(2858);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(2852);
                $this->match(self::PARTITION);
                $this->setState(2853);
                $this->match(self::LR_BRACKET);
                $this->setState(2855);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                    $this->setState(2854);
                    $localContext->partitions = $this->uidList();
                }
                $this->setState(2857);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(2876);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SELECT:
                case self::VALUES:
                case self::VALUE:
                case self::LR_BRACKET:
                    $this->setState(2864);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 366, $this->ctx)) {
                        case 1:
                            $this->setState(2860);
                            $this->match(self::LR_BRACKET);
                            $this->setState(2861);
                            $localContext->columns = $this->uidList();
                            $this->setState(2862);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    $this->setState(2866);
                    $this->insertStatementValue();
                    break;
                case self::SET:
                    $this->setState(2867);
                    $this->match(self::SET);
                    $this->setState(2868);
                    $localContext->setFirst = $this->updatedElement();
                    $this->setState(2873);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2869);
                        $this->match(self::COMMA);
                        $this->setState(2870);
                        $localContext->updatedElement = $this->updatedElement();
                        $localContext->setElements[] = $localContext->updatedElement;
                        $this->setState(2875);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(2890);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ON) {
                $this->setState(2878);
                $this->match(self::ON);
                $this->setState(2879);
                $this->match(self::DUPLICATE);
                $this->setState(2880);
                $this->match(self::KEY);
                $this->setState(2881);
                $this->match(self::UPDATE);
                $this->setState(2882);
                $localContext->duplicatedFirst = $this->updatedElement();
                $this->setState(2887);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(2883);
                    $this->match(self::COMMA);
                    $this->setState(2884);
                    $localContext->updatedElement = $this->updatedElement();
                    $localContext->duplicatedElements[] = $localContext->updatedElement;
                    $this->setState(2889);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function loadDataStatement(): Context\LoadDataStatementContext
    {
        $localContext = new Context\LoadDataStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 174, self::RULE_loadDataStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2892);
            $this->match(self::LOAD);
            $this->setState(2893);
            $this->match(self::DATA);
            $this->setState(2895);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
                $this->setState(2894);

                $localContext->priority = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
                    $localContext->priority = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2898);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOCAL) {
                $this->setState(2897);
                $this->match(self::LOCAL);
            }
            $this->setState(2900);
            $this->match(self::INFILE);
            $this->setState(2901);
            $localContext->filename = $this->match(self::STRING_LITERAL);
            $this->setState(2903);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE || $_la === self::REPLACE) {
                $this->setState(2902);

                $localContext->violation = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::IGNORE || $_la === self::REPLACE)) {
                    $localContext->violation = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2905);
            $this->match(self::INTO);
            $this->setState(2906);
            $this->match(self::TABLE);
            $this->setState(2907);
            $this->tableName();
            $this->setState(2913);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(2908);
                $this->match(self::PARTITION);
                $this->setState(2909);
                $this->match(self::LR_BRACKET);
                $this->setState(2910);
                $this->uidList();
                $this->setState(2911);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(2918);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CHARACTER) {
                $this->setState(2915);
                $this->match(self::CHARACTER);
                $this->setState(2916);
                $this->match(self::SET);
                $this->setState(2917);
                $localContext->charset = $this->charsetName();
            }
            $this->setState(2926);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COLUMNS || $_la === self::FIELDS) {
                $this->setState(2920);

                $localContext->fieldsFormat = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::COLUMNS || $_la === self::FIELDS)) {
                    $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
                $this->setState(2922);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(2921);
                    $this->selectFieldsInto();
                    $this->setState(2924);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
            }
            $this->setState(2934);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LINES) {
                $this->setState(2928);
                $this->match(self::LINES);
                $this->setState(2930);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                do {
                    $this->setState(2929);
                    $this->selectLinesInto();
                    $this->setState(2932);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                } while ($_la === self::STARTING || $_la === self::TERMINATED);
            }
            $this->setState(2940);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(2936);
                $this->match(self::IGNORE);
                $this->setState(2937);
                $this->decimalLiteral();
                $this->setState(2938);

                $localContext->linesFormat = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::LINES || $_la === self::ROWS)) {
                    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2953);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 382, $this->ctx)) {
                case 1:
                    $this->setState(2942);
                    $this->match(self::LR_BRACKET);
                    $this->setState(2943);
                    $this->assignmentField();
                    $this->setState(2948);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2944);
                        $this->match(self::COMMA);
                        $this->setState(2945);
                        $this->assignmentField();
                        $this->setState(2950);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(2951);
                    $this->match(self::RR_BRACKET);
                    break;
            }
            $this->setState(2964);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 384, $this->ctx)) {
                case 1:
                    $this->setState(2955);
                    $this->match(self::SET);
                    $this->setState(2956);
                    $this->updatedElement();
                    $this->setState(2961);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(2957);
                        $this->match(self::COMMA);
                        $this->setState(2958);
                        $this->updatedElement();
                        $this->setState(2963);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function loadXmlStatement(): Context\LoadXmlStatementContext
    {
        $localContext = new Context\LoadXmlStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 176, self::RULE_loadXmlStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(2966);
            $this->match(self::LOAD);
            $this->setState(2967);
            $this->match(self::XML);
            $this->setState(2969);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT) {
                $this->setState(2968);

                $localContext->priority = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::LOW_PRIORITY || $_la === self::CONCURRENT)) {
                    $localContext->priority = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2972);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOCAL) {
                $this->setState(2971);
                $this->match(self::LOCAL);
            }
            $this->setState(2974);
            $this->match(self::INFILE);
            $this->setState(2975);
            $localContext->filename = $this->match(self::STRING_LITERAL);
            $this->setState(2977);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE || $_la === self::REPLACE) {
                $this->setState(2976);

                $localContext->violation = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::IGNORE || $_la === self::REPLACE)) {
                    $localContext->violation = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(2979);
            $this->match(self::INTO);
            $this->setState(2980);
            $this->match(self::TABLE);
            $this->setState(2981);
            $this->tableName();
            $this->setState(2985);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CHARACTER) {
                $this->setState(2982);
                $this->match(self::CHARACTER);
                $this->setState(2983);
                $this->match(self::SET);
                $this->setState(2984);
                $localContext->charset = $this->charsetName();
            }
            $this->setState(2993);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ROWS) {
                $this->setState(2987);
                $this->match(self::ROWS);
                $this->setState(2988);
                $this->match(self::IDENTIFIED);
                $this->setState(2989);
                $this->match(self::BY);
                $this->setState(2990);
                $this->match(self::LESS_SYMBOL);
                $this->setState(2991);
                $localContext->tag = $this->match(self::STRING_LITERAL);
                $this->setState(2992);
                $this->match(self::GREATER_SYMBOL);
            }
            $this->setState(2999);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(2995);
                $this->match(self::IGNORE);
                $this->setState(2996);
                $this->decimalLiteral();
                $this->setState(2997);

                $localContext->linesFormat = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::LINES || $_la === self::ROWS)) {
                    $localContext->linesFormat = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(3012);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 392, $this->ctx)) {
                case 1:
                    $this->setState(3001);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3002);
                    $this->assignmentField();
                    $this->setState(3007);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3003);
                        $this->match(self::COMMA);
                        $this->setState(3004);
                        $this->assignmentField();
                        $this->setState(3009);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(3010);
                    $this->match(self::RR_BRACKET);
                    break;
            }
            $this->setState(3023);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 394, $this->ctx)) {
                case 1:
                    $this->setState(3014);
                    $this->match(self::SET);
                    $this->setState(3015);
                    $this->updatedElement();
                    $this->setState(3020);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3016);
                        $this->match(self::COMMA);
                        $this->setState(3017);
                        $this->updatedElement();
                        $this->setState(3022);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function replaceStatement(): Context\ReplaceStatementContext
    {
        $localContext = new Context\ReplaceStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 178, self::RULE_replaceStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3025);
            $this->match(self::REPLACE);
            $this->setState(3027);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DELAYED || $_la === self::LOW_PRIORITY) {
                $this->setState(3026);

                $localContext->priority = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::DELAYED || $_la === self::LOW_PRIORITY)) {
                    $localContext->priority = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(3030);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INTO) {
                $this->setState(3029);
                $this->match(self::INTO);
            }
            $this->setState(3032);
            $this->tableName();
            $this->setState(3038);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(3033);
                $this->match(self::PARTITION);
                $this->setState(3034);
                $this->match(self::LR_BRACKET);
                $this->setState(3035);
                $localContext->partitions = $this->uidList();
                $this->setState(3036);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(3056);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SELECT:
                case self::VALUES:
                case self::VALUE:
                case self::LR_BRACKET:
                    $this->setState(3044);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 398, $this->ctx)) {
                        case 1:
                            $this->setState(3040);
                            $this->match(self::LR_BRACKET);
                            $this->setState(3041);
                            $localContext->columns = $this->uidList();
                            $this->setState(3042);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    $this->setState(3046);
                    $this->insertStatementValue();
                    break;
                case self::SET:
                    $this->setState(3047);
                    $this->match(self::SET);
                    $this->setState(3048);
                    $localContext->setFirst = $this->updatedElement();
                    $this->setState(3053);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3049);
                        $this->match(self::COMMA);
                        $this->setState(3050);
                        $localContext->updatedElement = $this->updatedElement();
                        $localContext->setElements[] = $localContext->updatedElement;
                        $this->setState(3055);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectStatement(): Context\SelectStatementContext
    {
        $localContext = new Context\SelectStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 180, self::RULE_selectStatement);

        try {
            $this->setState(3113);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 416, $this->ctx)) {
                case 1:
                    $localContext = new Context\SimpleSelectContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3058);
                    $this->querySpecification();
                    $this->setState(3060);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 401, $this->ctx)) {
                        case 1:
                            $this->setState(3059);
                            $this->lockClause();
                            break;
                    }
                    break;
                case 2:
                    $localContext = new Context\ParenthesisSelectContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3062);
                    $this->queryExpression();
                    $this->setState(3064);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 402, $this->ctx)) {
                        case 1:
                            $this->setState(3063);
                            $this->lockClause();
                            break;
                    }
                    break;
                case 3:
                    $localContext = new Context\UnionSelectContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3066);
                    $this->querySpecificationNointo();
                    $this->setState(3068);
                    $this->errorHandler->sync($this);

                    $alt = 1;

                    do {
                        switch ($alt) {
                            case 1:
                                $this->setState(3067);
                                $this->unionStatement();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }

                        $this->setState(3070);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 403, $this->ctx);
                    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
                    $this->setState(3080);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::UNION) {
                        $this->setState(3072);
                        $this->match(self::UNION);
                        $this->setState(3074);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::ALL || $_la === self::DISTINCT) {
                            $this->setState(3073);

                            $localContext->unionType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::ALL || $_la === self::DISTINCT)) {
                                $localContext->unionType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                        }
                        $this->setState(3078);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::SELECT:
                                $this->setState(3076);
                                $this->querySpecification();
                                break;
                            case self::LR_BRACKET:
                                $this->setState(3077);
                                $this->queryExpression();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                    }
                    $this->setState(3083);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 407, $this->ctx)) {
                        case 1:
                            $this->setState(3082);
                            $this->orderByClause();
                            break;
                    }
                    $this->setState(3086);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIMIT) {
                        $this->setState(3085);
                        $this->limitClause();
                    }
                    $this->setState(3089);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 409, $this->ctx)) {
                        case 1:
                            $this->setState(3088);
                            $this->lockClause();
                            break;
                    }
                    break;
                case 4:
                    $localContext = new Context\UnionParenthesisSelectContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(3091);
                    $this->queryExpressionNointo();
                    $this->setState(3093);
                    $this->errorHandler->sync($this);

                    $alt = 1;

                    do {
                        switch ($alt) {
                            case 1:
                                $this->setState(3092);
                                $this->unionParenthesis();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }

                        $this->setState(3095);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 410, $this->ctx);
                    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
                    $this->setState(3102);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::UNION) {
                        $this->setState(3097);
                        $this->match(self::UNION);
                        $this->setState(3099);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::ALL || $_la === self::DISTINCT) {
                            $this->setState(3098);

                            $localContext->unionType = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::ALL || $_la === self::DISTINCT)) {
                                $localContext->unionType = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                        }
                        $this->setState(3101);
                        $this->queryExpression();
                    }
                    $this->setState(3105);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 413, $this->ctx)) {
                        case 1:
                            $this->setState(3104);
                            $this->orderByClause();
                            break;
                    }
                    $this->setState(3108);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIMIT) {
                        $this->setState(3107);
                        $this->limitClause();
                    }
                    $this->setState(3111);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 415, $this->ctx)) {
                        case 1:
                            $this->setState(3110);
                            $this->lockClause();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function updateStatement(): Context\UpdateStatementContext
    {
        $localContext = new Context\UpdateStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 182, self::RULE_updateStatement);

        try {
            $this->setState(3117);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 417, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3115);
                    $this->singleUpdateStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3116);
                    $this->multipleUpdateStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function insertStatementValue(): Context\InsertStatementValueContext
    {
        $localContext = new Context\InsertStatementValueContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 184, self::RULE_insertStatementValue);

        try {
            $this->setState(3137);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SELECT:
                case self::LR_BRACKET:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3119);
                    $this->selectStatement();
                    break;
                case self::VALUES:
                case self::VALUE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3120);

                    $localContext->insertFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::VALUES || $_la === self::VALUE)) {
                        $localContext->insertFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(3121);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3123);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 418, $this->ctx)) {
                        case 1:
                            $this->setState(3122);
                            $this->expressionsWithDefaults();
                            break;
                    }
                    $this->setState(3125);
                    $this->match(self::RR_BRACKET);
                    $this->setState(3134);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3126);
                        $this->match(self::COMMA);
                        $this->setState(3127);
                        $this->match(self::LR_BRACKET);
                        $this->setState(3129);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 419, $this->ctx)) {
                            case 1:
                                $this->setState(3128);
                                $this->expressionsWithDefaults();
                                break;
                        }
                        $this->setState(3131);
                        $this->match(self::RR_BRACKET);
                        $this->setState(3136);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function updatedElement(): Context\UpdatedElementContext
    {
        $localContext = new Context\UpdatedElementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 186, self::RULE_updatedElement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3139);
            $this->fullColumnName();
            $this->setState(3140);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(3143);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 422, $this->ctx)) {
                case 1:
                    $this->setState(3141);
                    $this->recursiveExpression(0);
                    break;
                case 2:
                    $this->setState(3142);
                    $this->match(self::DEFAULT);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function assignmentField(): Context\AssignmentFieldContext
    {
        $localContext = new Context\AssignmentFieldContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 188, self::RULE_assignmentField);

        try {
            $this->setState(3147);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3145);
                    $this->uid();
                    break;
                case self::LOCAL_ID:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3146);
                    $this->match(self::LOCAL_ID);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lockClause(): Context\LockClauseContext
    {
        $localContext = new Context\LockClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 190, self::RULE_lockClause);

        try {
            $this->setState(3155);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::FOR:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3149);
                    $this->match(self::FOR);
                    $this->setState(3150);
                    $this->match(self::UPDATE);
                    break;
                case self::LOCK:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3151);
                    $this->match(self::LOCK);
                    $this->setState(3152);
                    $this->match(self::IN);
                    $this->setState(3153);
                    $this->match(self::SHARE);
                    $this->setState(3154);
                    $this->match(self::MODE);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function singleDeleteStatement(): Context\SingleDeleteStatementContext
    {
        $localContext = new Context\SingleDeleteStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 192, self::RULE_singleDeleteStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3157);
            $this->match(self::DELETE);
            $this->setState(3159);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY) {
                $this->setState(3158);
                $localContext->priority = $this->match(self::LOW_PRIORITY);
            }
            $this->setState(3162);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::QUICK) {
                $this->setState(3161);
                $this->match(self::QUICK);
            }
            $this->setState(3165);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(3164);
                $this->match(self::IGNORE);
            }
            $this->setState(3167);
            $this->match(self::FROM);
            $this->setState(3168);
            $this->tableName();
            $this->setState(3174);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(3169);
                $this->match(self::PARTITION);
                $this->setState(3170);
                $this->match(self::LR_BRACKET);
                $this->setState(3171);
                $this->uidList();
                $this->setState(3172);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(3178);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3176);
                $this->match(self::WHERE);
                $this->setState(3177);
                $this->recursiveExpression(0);
            }
            $this->setState(3181);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ORDER) {
                $this->setState(3180);
                $this->orderByClause();
            }
            $this->setState(3185);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LIMIT) {
                $this->setState(3183);
                $this->match(self::LIMIT);
                $this->setState(3184);
                $this->limitClauseAtom();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function multipleDeleteStatement(): Context\MultipleDeleteStatementContext
    {
        $localContext = new Context\MultipleDeleteStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 194, self::RULE_multipleDeleteStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3187);
            $this->match(self::DELETE);
            $this->setState(3189);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY) {
                $this->setState(3188);
                $localContext->priority = $this->match(self::LOW_PRIORITY);
            }
            $this->setState(3192);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 433, $this->ctx)) {
                case 1:
                    $this->setState(3191);
                    $this->match(self::QUICK);
                    break;
            }
            $this->setState(3195);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(3194);
                $this->match(self::IGNORE);
            }
            $this->setState(3236);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->setState(3197);
                    $this->tableName();
                    $this->setState(3200);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DOT) {
                        $this->setState(3198);
                        $this->match(self::DOT);
                        $this->setState(3199);
                        $this->match(self::STAR);
                    }
                    $this->setState(3210);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3202);
                        $this->match(self::COMMA);
                        $this->setState(3203);
                        $this->tableName();
                        $this->setState(3206);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::DOT) {
                            $this->setState(3204);
                            $this->match(self::DOT);
                            $this->setState(3205);
                            $this->match(self::STAR);
                        }
                        $this->setState(3212);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(3213);
                    $this->match(self::FROM);
                    $this->setState(3214);
                    $this->tableSources();
                    break;
                case self::FROM:
                    $this->setState(3216);
                    $this->match(self::FROM);
                    $this->setState(3217);
                    $this->tableName();
                    $this->setState(3220);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DOT) {
                        $this->setState(3218);
                        $this->match(self::DOT);
                        $this->setState(3219);
                        $this->match(self::STAR);
                    }
                    $this->setState(3230);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3222);
                        $this->match(self::COMMA);
                        $this->setState(3223);
                        $this->tableName();
                        $this->setState(3226);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::DOT) {
                            $this->setState(3224);
                            $this->match(self::DOT);
                            $this->setState(3225);
                            $this->match(self::STAR);
                        }
                        $this->setState(3232);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(3233);
                    $this->match(self::USING);
                    $this->setState(3234);
                    $this->tableSources();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(3240);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3238);
                $this->match(self::WHERE);
                $this->setState(3239);
                $this->recursiveExpression(0);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerOpenStatement(): Context\HandlerOpenStatementContext
    {
        $localContext = new Context\HandlerOpenStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 196, self::RULE_handlerOpenStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3242);
            $this->match(self::HANDLER);
            $this->setState(3243);
            $this->tableName();
            $this->setState(3244);
            $this->match(self::OPEN);
            $this->setState(3249);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 444, $this->ctx)) {
                case 1:
                    $this->setState(3246);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS) {
                        $this->setState(3245);
                        $this->match(self::AS);
                    }
                    $this->setState(3248);
                    $this->uid();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerReadIndexStatement(): Context\HandlerReadIndexStatementContext
    {
        $localContext = new Context\HandlerReadIndexStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 198, self::RULE_handlerReadIndexStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3251);
            $this->match(self::HANDLER);
            $this->setState(3252);
            $this->tableName();
            $this->setState(3253);
            $this->match(self::READ);
            $this->setState(3254);
            $localContext->index = $this->uid();
            $this->setState(3261);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::EQUAL_SYMBOL:
                case self::GREATER_SYMBOL:
                case self::LESS_SYMBOL:
                case self::EXCLAMATION_SYMBOL:
                    $this->setState(3255);
                    $this->comparisonOperator();
                    $this->setState(3256);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3257);
                    $this->constants();
                    $this->setState(3258);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::FIRST:
                case self::LAST:
                case self::NEXT:
                case self::PREV:
                    $this->setState(3260);

                    $localContext->moveOrder = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FIRST || $_la === self::LAST || $_la === self::NEXT || $_la === self::PREV)) {
                        $localContext->moveOrder = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(3265);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3263);
                $this->match(self::WHERE);
                $this->setState(3264);
                $this->recursiveExpression(0);
            }
            $this->setState(3269);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LIMIT) {
                $this->setState(3267);
                $this->match(self::LIMIT);
                $this->setState(3268);
                $this->limitClauseAtom();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerReadStatement(): Context\HandlerReadStatementContext
    {
        $localContext = new Context\HandlerReadStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 200, self::RULE_handlerReadStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3271);
            $this->match(self::HANDLER);
            $this->setState(3272);
            $this->tableName();
            $this->setState(3273);
            $this->match(self::READ);
            $this->setState(3274);

            $localContext->moveOrder = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::FIRST || $_la === self::NEXT)) {
                $localContext->moveOrder = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(3277);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3275);
                $this->match(self::WHERE);
                $this->setState(3276);
                $this->recursiveExpression(0);
            }
            $this->setState(3281);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LIMIT) {
                $this->setState(3279);
                $this->match(self::LIMIT);
                $this->setState(3280);
                $this->limitClauseAtom();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerCloseStatement(): Context\HandlerCloseStatementContext
    {
        $localContext = new Context\HandlerCloseStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 202, self::RULE_handlerCloseStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3283);
            $this->match(self::HANDLER);
            $this->setState(3284);
            $this->tableName();
            $this->setState(3285);
            $this->match(self::CLOSE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function singleUpdateStatement(): Context\SingleUpdateStatementContext
    {
        $localContext = new Context\SingleUpdateStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 204, self::RULE_singleUpdateStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3287);
            $this->match(self::UPDATE);
            $this->setState(3289);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY) {
                $this->setState(3288);
                $localContext->priority = $this->match(self::LOW_PRIORITY);
            }
            $this->setState(3292);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(3291);
                $this->match(self::IGNORE);
            }
            $this->setState(3294);
            $this->tableName();
            $this->setState(3299);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 12) & ~0x3F) === 0 && ((1 << ($_la - 12)) & ((1 << (self::AS - 12)) | (1 << (self::CURRENT - 12)) | (1 << (self::DATABASE - 12)) | (1 << (self::DIAGNOSTICS - 12)) | (1 << (self::EXCEPT - 12)) | (1 << (self::GROUP - 12)))) !== 0) || ((($_la - 92) & ~0x3F) === 0 && ((1 << ($_la - 92)) & ((1 << (self::LEFT - 92)) | (1 << (self::NUMBER - 92)) | (1 << (self::ORDER - 92)) | (1 << (self::RIGHT - 92)) | (1 << (self::SCHEMA - 92)))) !== 0) || ((($_la - 158) & ~0x3F) === 0 && ((1 << ($_la - 158)) & ((1 << (self::STACKED - 158)) | (1 << (self::DATE - 158)) | (1 << (self::TIME - 158)) | (1 << (self::TIMESTAMP - 158)) | (1 << (self::DATETIME - 158)) | (1 << (self::YEAR - 158)) | (1 << (self::BINARY - 158)))) !== 0) || ((($_la - 223) & ~0x3F) === 0 && ((1 << ($_la - 223)) & ((1 << (self::TEXT - 223)) | (1 << (self::ENUM - 223)) | (1 << (self::SERIAL - 223)) | (1 << (self::JSON_ARRAY - 223)) | (1 << (self::JSON_OBJECT - 223)) | (1 << (self::JSON_QUOTE - 223)) | (1 << (self::JSON_CONTAINS - 223)) | (1 << (self::JSON_CONTAINS_PATH - 223)) | (1 << (self::JSON_EXTRACT - 223)) | (1 << (self::JSON_KEYS - 223)) | (1 << (self::JSON_OVERLAPS - 223)) | (1 << (self::JSON_SEARCH - 223)) | (1 << (self::JSON_VALUE - 223)) | (1 << (self::JSON_ARRAY_APPEND - 223)) | (1 << (self::JSON_ARRAY_INSERT - 223)) | (1 << (self::JSON_INSERT - 223)) | (1 << (self::JSON_MERGE - 223)) | (1 << (self::JSON_MERGE_PATCH - 223)) | (1 << (self::JSON_MERGE_PRESERVE - 223)) | (1 << (self::JSON_REMOVE - 223)) | (1 << (self::JSON_REPLACE - 223)) | (1 << (self::JSON_SET - 223)) | (1 << (self::JSON_UNQUOTE - 223)) | (1 << (self::JSON_DEPTH - 223)) | (1 << (self::JSON_LENGTH - 223)) | (1 << (self::JSON_TYPE - 223)) | (1 << (self::JSON_VALID - 223)) | (1 << (self::JSON_TABLE - 223)) | (1 << (self::JSON_SCHEMA_VALID - 223)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 223)) | (1 << (self::JSON_PRETTY - 223)) | (1 << (self::JSON_STORAGE_FREE - 223)) | (1 << (self::JSON_STORAGE_SIZE - 223)) | (1 << (self::JSON_ARRAYAGG - 223)) | (1 << (self::JSON_OBJECTAGG - 223)) | (1 << (self::AVG - 223)) | (1 << (self::BIT_AND - 223)) | (1 << (self::BIT_OR - 223)) | (1 << (self::BIT_XOR - 223)) | (1 << (self::COUNT - 223)) | (1 << (self::GROUP_CONCAT - 223)) | (1 << (self::MAX - 223)) | (1 << (self::MIN - 223)))) !== 0) || ((($_la - 291) & ~0x3F) === 0 && ((1 << ($_la - 291)) & ((1 << (self::STD - 291)) | (1 << (self::STDDEV - 291)) | (1 << (self::STDDEV_POP - 291)) | (1 << (self::STDDEV_SAMP - 291)) | (1 << (self::SUM - 291)) | (1 << (self::VAR_POP - 291)) | (1 << (self::VAR_SAMP - 291)) | (1 << (self::VARIANCE - 291)) | (1 << (self::POSITION - 291)) | (1 << (self::ACCOUNT - 291)) | (1 << (self::ACTION - 291)) | (1 << (self::AFTER - 291)) | (1 << (self::AGGREGATE - 291)) | (1 << (self::ALGORITHM - 291)) | (1 << (self::ANY - 291)) | (1 << (self::AT - 291)) | (1 << (self::AUTHORS - 291)) | (1 << (self::AUTOCOMMIT - 291)) | (1 << (self::AUTOEXTEND_SIZE - 291)) | (1 << (self::AUTO_INCREMENT - 291)) | (1 << (self::AVG_ROW_LENGTH - 291)) | (1 << (self::BEGIN - 291)) | (1 << (self::BINLOG - 291)) | (1 << (self::BIT - 291)) | (1 << (self::BLOCK - 291)) | (1 << (self::BOOL - 291)) | (1 << (self::BOOLEAN - 291)) | (1 << (self::BTREE - 291)) | (1 << (self::CACHE - 291)) | (1 << (self::CASCADED - 291)) | (1 << (self::CHAIN - 291)) | (1 << (self::CHANGED - 291)) | (1 << (self::CHANNEL - 291)) | (1 << (self::CHECKSUM - 291)) | (1 << (self::PAGE_CHECKSUM - 291)) | (1 << (self::CIPHER - 291)) | (1 << (self::CLASS_ORIGIN - 291)) | (1 << (self::CLIENT - 291)) | (1 << (self::CLOSE - 291)) | (1 << (self::COALESCE - 291)) | (1 << (self::CODE - 291)) | (1 << (self::COLUMNS - 291)) | (1 << (self::COLUMN_FORMAT - 291)) | (1 << (self::COLUMN_NAME - 291)) | (1 << (self::COMMENT - 291)) | (1 << (self::COMMIT - 291)))) !== 0) || ((($_la - 355) & ~0x3F) === 0 && ((1 << ($_la - 355)) & ((1 << (self::COMPACT - 355)) | (1 << (self::COMPLETION - 355)) | (1 << (self::COMPRESSED - 355)) | (1 << (self::COMPRESSION - 355)) | (1 << (self::CONCURRENT - 355)) | (1 << (self::CONNECT - 355)) | (1 << (self::CONNECTION - 355)) | (1 << (self::CONSISTENT - 355)) | (1 << (self::CONSTRAINT_CATALOG - 355)) | (1 << (self::CONSTRAINT_SCHEMA - 355)) | (1 << (self::CONSTRAINT_NAME - 355)) | (1 << (self::CONTAINS - 355)) | (1 << (self::CONTEXT - 355)) | (1 << (self::CONTRIBUTORS - 355)) | (1 << (self::COPY - 355)) | (1 << (self::CPU - 355)) | (1 << (self::CURSOR_NAME - 355)) | (1 << (self::DATA - 355)) | (1 << (self::DATAFILE - 355)) | (1 << (self::DEALLOCATE - 355)) | (1 << (self::DEFAULT_AUTH - 355)) | (1 << (self::DEFINER - 355)) | (1 << (self::DELAY_KEY_WRITE - 355)) | (1 << (self::DES_KEY_FILE - 355)) | (1 << (self::DIRECTORY - 355)) | (1 << (self::DISABLE - 355)) | (1 << (self::DISCARD - 355)) | (1 << (self::DISK - 355)) | (1 << (self::DO - 355)) | (1 << (self::DUMPFILE - 355)) | (1 << (self::DUPLICATE - 355)) | (1 << (self::DYNAMIC - 355)) | (1 << (self::ENABLE - 355)) | (1 << (self::ENCRYPTION - 355)) | (1 << (self::END - 355)) | (1 << (self::ENDS - 355)) | (1 << (self::ENGINE - 355)) | (1 << (self::ENGINES - 355)) | (1 << (self::ERROR - 355)) | (1 << (self::ERRORS - 355)) | (1 << (self::ESCAPE - 355)) | (1 << (self::EVEN - 355)) | (1 << (self::EVENT - 355)) | (1 << (self::EVENTS - 355)) | (1 << (self::EVERY - 355)) | (1 << (self::EXCHANGE - 355)) | (1 << (self::EXCLUSIVE - 355)) | (1 << (self::EXPIRE - 355)) | (1 << (self::EXPORT - 355)) | (1 << (self::EXTENDED - 355)) | (1 << (self::EXTENT_SIZE - 355)) | (1 << (self::FAST - 355)) | (1 << (self::FAULTS - 355)) | (1 << (self::FIELDS - 355)) | (1 << (self::FILE_BLOCK_SIZE - 355)) | (1 << (self::FILTER - 355)) | (1 << (self::FIRST - 355)) | (1 << (self::FIXED - 355)) | (1 << (self::FLUSH - 355)) | (1 << (self::FOLLOWS - 355)) | (1 << (self::FOUND - 355)) | (1 << (self::FULL - 355)) | (1 << (self::FUNCTION - 355)))) !== 0) || ((($_la - 419) & ~0x3F) === 0 && ((1 << ($_la - 419)) & ((1 << (self::GENERAL - 419)) | (1 << (self::GLOBAL - 419)) | (1 << (self::GRANTS - 419)) | (1 << (self::GROUP_REPLICATION - 419)) | (1 << (self::HANDLER - 419)) | (1 << (self::HASH - 419)) | (1 << (self::HELP - 419)) | (1 << (self::HOST - 419)) | (1 << (self::HOSTS - 419)) | (1 << (self::IDENTIFIED - 419)) | (1 << (self::IGNORE_SERVER_IDS - 419)) | (1 << (self::IMPORT - 419)) | (1 << (self::INDEXES - 419)) | (1 << (self::INITIAL_SIZE - 419)) | (1 << (self::INPLACE - 419)) | (1 << (self::INSERT_METHOD - 419)) | (1 << (self::INSTALL - 419)) | (1 << (self::INSTANCE - 419)) | (1 << (self::INVISIBLE - 419)) | (1 << (self::INVOKER - 419)) | (1 << (self::IO - 419)) | (1 << (self::IO_THREAD - 419)) | (1 << (self::IPC - 419)) | (1 << (self::ISOLATION - 419)) | (1 << (self::ISSUER - 419)) | (1 << (self::JSON - 419)) | (1 << (self::KEY_BLOCK_SIZE - 419)) | (1 << (self::LANGUAGE - 419)) | (1 << (self::LAST - 419)) | (1 << (self::LEAVES - 419)) | (1 << (self::LESS - 419)) | (1 << (self::LEVEL - 419)) | (1 << (self::LIST - 419)) | (1 << (self::LOCAL - 419)) | (1 << (self::LOGFILE - 419)) | (1 << (self::LOGS - 419)) | (1 << (self::MASTER - 419)) | (1 << (self::MASTER_AUTO_POSITION - 419)) | (1 << (self::MASTER_CONNECT_RETRY - 419)) | (1 << (self::MASTER_DELAY - 419)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 419)) | (1 << (self::MASTER_HOST - 419)) | (1 << (self::MASTER_LOG_FILE - 419)) | (1 << (self::MASTER_LOG_POS - 419)) | (1 << (self::MASTER_PASSWORD - 419)) | (1 << (self::MASTER_PORT - 419)) | (1 << (self::MASTER_RETRY_COUNT - 419)) | (1 << (self::MASTER_SSL - 419)) | (1 << (self::MASTER_SSL_CA - 419)) | (1 << (self::MASTER_SSL_CAPATH - 419)) | (1 << (self::MASTER_SSL_CERT - 419)) | (1 << (self::MASTER_SSL_CIPHER - 419)) | (1 << (self::MASTER_SSL_CRL - 419)) | (1 << (self::MASTER_SSL_CRLPATH - 419)) | (1 << (self::MASTER_SSL_KEY - 419)) | (1 << (self::MASTER_TLS_VERSION - 419)) | (1 << (self::MASTER_USER - 419)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 419)) | (1 << (self::MAX_QUERIES_PER_HOUR - 419)) | (1 << (self::MAX_ROWS - 419)) | (1 << (self::MAX_SIZE - 419)) | (1 << (self::MAX_UPDATES_PER_HOUR - 419)) | (1 << (self::MAX_USER_CONNECTIONS - 419)) | (1 << (self::MEDIUM - 419)))) !== 0) || ((($_la - 483) & ~0x3F) === 0 && ((1 << ($_la - 483)) & ((1 << (self::MEMBER - 483)) | (1 << (self::MERGE - 483)) | (1 << (self::MESSAGE_TEXT - 483)) | (1 << (self::MID - 483)) | (1 << (self::MIGRATE - 483)) | (1 << (self::MIN_ROWS - 483)) | (1 << (self::MODE - 483)) | (1 << (self::MODIFY - 483)) | (1 << (self::MUTEX - 483)) | (1 << (self::MYSQL - 483)) | (1 << (self::MYSQL_ERRNO - 483)) | (1 << (self::NAME - 483)) | (1 << (self::NAMES - 483)) | (1 << (self::NCHAR - 483)) | (1 << (self::NEVER - 483)) | (1 << (self::NEXT - 483)) | (1 << (self::NO - 483)) | (1 << (self::NODEGROUP - 483)) | (1 << (self::NONE - 483)) | (1 << (self::ODBC - 483)) | (1 << (self::OFFLINE - 483)) | (1 << (self::OFFSET - 483)) | (1 << (self::OF - 483)) | (1 << (self::OJ - 483)) | (1 << (self::OLD_PASSWORD - 483)) | (1 << (self::ONE - 483)) | (1 << (self::ONLINE - 483)) | (1 << (self::ONLY - 483)) | (1 << (self::OPEN - 483)) | (1 << (self::OPTIMIZER_COSTS - 483)) | (1 << (self::OPTIONS - 483)) | (1 << (self::OWNER - 483)) | (1 << (self::PACK_KEYS - 483)) | (1 << (self::PAGE - 483)) | (1 << (self::PARSER - 483)) | (1 << (self::PARTIAL - 483)) | (1 << (self::PARTITIONING - 483)) | (1 << (self::PARTITIONS - 483)) | (1 << (self::PASSWORD - 483)) | (1 << (self::PHASE - 483)) | (1 << (self::PLUGIN - 483)) | (1 << (self::PLUGIN_DIR - 483)) | (1 << (self::PLUGINS - 483)) | (1 << (self::PORT - 483)) | (1 << (self::PRECEDES - 483)) | (1 << (self::PREPARE - 483)) | (1 << (self::PRESERVE - 483)) | (1 << (self::PREV - 483)) | (1 << (self::PROCESSLIST - 483)) | (1 << (self::PROFILE - 483)) | (1 << (self::PROFILES - 483)) | (1 << (self::PROXY - 483)) | (1 << (self::QUERY - 483)) | (1 << (self::QUICK - 483)) | (1 << (self::REBUILD - 483)) | (1 << (self::RECOVER - 483)) | (1 << (self::REDO_BUFFER_SIZE - 483)) | (1 << (self::REDUNDANT - 483)) | (1 << (self::RELAY - 483)) | (1 << (self::RELAY_LOG_FILE - 483)) | (1 << (self::RELAY_LOG_POS - 483)) | (1 << (self::RELAYLOG - 483)) | (1 << (self::REMOVE - 483)))) !== 0) || ((($_la - 547) & ~0x3F) === 0 && ((1 << ($_la - 547)) & ((1 << (self::REORGANIZE - 547)) | (1 << (self::REPAIR - 547)) | (1 << (self::REPLICATE_DO_DB - 547)) | (1 << (self::REPLICATE_DO_TABLE - 547)) | (1 << (self::REPLICATE_IGNORE_DB - 547)) | (1 << (self::REPLICATE_IGNORE_TABLE - 547)) | (1 << (self::REPLICATE_REWRITE_DB - 547)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 547)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 547)) | (1 << (self::REPLICATION - 547)) | (1 << (self::RESET - 547)) | (1 << (self::RESUME - 547)) | (1 << (self::RETURNED_SQLSTATE - 547)) | (1 << (self::RETURNS - 547)) | (1 << (self::ROLE - 547)) | (1 << (self::ROLLBACK - 547)) | (1 << (self::ROLLUP - 547)) | (1 << (self::ROTATE - 547)) | (1 << (self::ROW - 547)) | (1 << (self::ROWS - 547)) | (1 << (self::ROW_FORMAT - 547)) | (1 << (self::SAVEPOINT - 547)) | (1 << (self::SCHEDULE - 547)) | (1 << (self::SECURITY - 547)) | (1 << (self::SERVER - 547)) | (1 << (self::SESSION - 547)) | (1 << (self::SHARE - 547)) | (1 << (self::SHARED - 547)) | (1 << (self::SIGNED - 547)) | (1 << (self::SIMPLE - 547)) | (1 << (self::SLAVE - 547)) | (1 << (self::SLOW - 547)) | (1 << (self::SNAPSHOT - 547)) | (1 << (self::SOCKET - 547)) | (1 << (self::SOME - 547)) | (1 << (self::SONAME - 547)) | (1 << (self::SOUNDS - 547)) | (1 << (self::SOURCE - 547)) | (1 << (self::SQL_AFTER_GTIDS - 547)) | (1 << (self::SQL_AFTER_MTS_GAPS - 547)) | (1 << (self::SQL_BEFORE_GTIDS - 547)) | (1 << (self::SQL_BUFFER_RESULT - 547)) | (1 << (self::SQL_CACHE - 547)) | (1 << (self::SQL_NO_CACHE - 547)) | (1 << (self::SQL_THREAD - 547)) | (1 << (self::START - 547)) | (1 << (self::STARTS - 547)) | (1 << (self::STATS_AUTO_RECALC - 547)) | (1 << (self::STATS_PERSISTENT - 547)) | (1 << (self::STATS_SAMPLE_PAGES - 547)) | (1 << (self::STATUS - 547)) | (1 << (self::STOP - 547)) | (1 << (self::STORAGE - 547)) | (1 << (self::STRING - 547)) | (1 << (self::SUBCLASS_ORIGIN - 547)) | (1 << (self::SUBJECT - 547)) | (1 << (self::SUBPARTITION - 547)) | (1 << (self::SUBPARTITIONS - 547)) | (1 << (self::SUSPEND - 547)) | (1 << (self::SWAPS - 547)) | (1 << (self::SWITCHES - 547)) | (1 << (self::TABLE_NAME - 547)))) !== 0) || ((($_la - 611) & ~0x3F) === 0 && ((1 << ($_la - 611)) & ((1 << (self::TABLESPACE - 611)) | (1 << (self::TEMPORARY - 611)) | (1 << (self::TEMPTABLE - 611)) | (1 << (self::THAN - 611)) | (1 << (self::TRADITIONAL - 611)) | (1 << (self::TRANSACTION - 611)) | (1 << (self::TRANSACTIONAL - 611)) | (1 << (self::TRIGGERS - 611)) | (1 << (self::TRUNCATE - 611)) | (1 << (self::UNDEFINED - 611)) | (1 << (self::UNDOFILE - 611)) | (1 << (self::UNDO_BUFFER_SIZE - 611)) | (1 << (self::UNINSTALL - 611)) | (1 << (self::UNKNOWN - 611)) | (1 << (self::UNTIL - 611)) | (1 << (self::UPGRADE - 611)) | (1 << (self::USER - 611)) | (1 << (self::USE_FRM - 611)) | (1 << (self::USER_RESOURCES - 611)) | (1 << (self::VALIDATION - 611)) | (1 << (self::VALUE - 611)) | (1 << (self::VARIABLES - 611)) | (1 << (self::VIEW - 611)) | (1 << (self::VISIBLE - 611)) | (1 << (self::WAIT - 611)) | (1 << (self::WARNINGS - 611)) | (1 << (self::WITHOUT - 611)) | (1 << (self::WORK - 611)) | (1 << (self::WRAPPER - 611)) | (1 << (self::X509 - 611)) | (1 << (self::XA - 611)) | (1 << (self::XML - 611)) | (1 << (self::EUR - 611)) | (1 << (self::USA - 611)) | (1 << (self::JIS - 611)) | (1 << (self::ISO - 611)) | (1 << (self::INTERNAL - 611)) | (1 << (self::QUARTER - 611)) | (1 << (self::MONTH - 611)) | (1 << (self::DAY - 611)) | (1 << (self::HOUR - 611)) | (1 << (self::MINUTE - 611)) | (1 << (self::WEEK - 611)) | (1 << (self::SECOND - 611)) | (1 << (self::MICROSECOND - 611)) | (1 << (self::TABLES - 611)) | (1 << (self::ROUTINE - 611)) | (1 << (self::EXECUTE - 611)) | (1 << (self::FILE - 611)) | (1 << (self::PROCESS - 611)) | (1 << (self::RELOAD - 611)) | (1 << (self::SHUTDOWN - 611)) | (1 << (self::SUPER - 611)) | (1 << (self::PRIVILEGES - 611)) | (1 << (self::AUDIT_ADMIN - 611)) | (1 << (self::BACKUP_ADMIN - 611)) | (1 << (self::BINLOG_ADMIN - 611)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 611)) | (1 << (self::CLONE_ADMIN - 611)))) !== 0) || ((($_la - 675) & ~0x3F) === 0 && ((1 << ($_la - 675)) & ((1 << (self::CONNECTION_ADMIN - 675)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 675)) | (1 << (self::FIREWALL_ADMIN - 675)) | (1 << (self::FIREWALL_USER - 675)) | (1 << (self::GROUP_REPLICATION_ADMIN - 675)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 675)) | (1 << (self::NDB_STORED_USER - 675)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 675)) | (1 << (self::REPLICATION_APPLIER - 675)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 675)) | (1 << (self::RESOURCE_GROUP_ADMIN - 675)) | (1 << (self::RESOURCE_GROUP_USER - 675)) | (1 << (self::ROLE_ADMIN - 675)) | (1 << (self::SESSION_VARIABLES_ADMIN - 675)) | (1 << (self::SET_USER_ID - 675)) | (1 << (self::SHOW_ROUTINE - 675)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 675)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 675)) | (1 << (self::VERSION_TOKEN_ADMIN - 675)) | (1 << (self::XA_RECOVER_ADMIN - 675)) | (1 << (self::ARMSCII8 - 675)) | (1 << (self::ASCII - 675)) | (1 << (self::BIG5 - 675)) | (1 << (self::CP1250 - 675)) | (1 << (self::CP1251 - 675)) | (1 << (self::CP1256 - 675)) | (1 << (self::CP1257 - 675)) | (1 << (self::CP850 - 675)) | (1 << (self::CP852 - 675)) | (1 << (self::CP866 - 675)) | (1 << (self::CP932 - 675)) | (1 << (self::DEC8 - 675)) | (1 << (self::EUCJPMS - 675)) | (1 << (self::EUCKR - 675)) | (1 << (self::GB18030 - 675)) | (1 << (self::GB2312 - 675)) | (1 << (self::GBK - 675)) | (1 << (self::GEOSTD8 - 675)) | (1 << (self::GREEK - 675)) | (1 << (self::HEBREW - 675)) | (1 << (self::HP8 - 675)) | (1 << (self::KEYBCS2 - 675)) | (1 << (self::KOI8R - 675)) | (1 << (self::KOI8U - 675)) | (1 << (self::LATIN1 - 675)) | (1 << (self::LATIN2 - 675)) | (1 << (self::LATIN5 - 675)) | (1 << (self::LATIN7 - 675)) | (1 << (self::MACCE - 675)) | (1 << (self::MACROMAN - 675)) | (1 << (self::SJIS - 675)) | (1 << (self::SWE7 - 675)) | (1 << (self::TIS620 - 675)) | (1 << (self::UCS2 - 675)) | (1 << (self::UJIS - 675)) | (1 << (self::UTF16 - 675)) | (1 << (self::UTF16LE - 675)) | (1 << (self::UTF32 - 675)))) !== 0) || ((($_la - 739) & ~0x3F) === 0 && ((1 << ($_la - 739)) & ((1 << (self::UTF8 - 739)) | (1 << (self::UTF8MB3 - 739)) | (1 << (self::UTF8MB4 - 739)) | (1 << (self::ARCHIVE - 739)) | (1 << (self::BLACKHOLE - 739)) | (1 << (self::CSV - 739)) | (1 << (self::FEDERATED - 739)) | (1 << (self::INNODB - 739)) | (1 << (self::MEMORY - 739)) | (1 << (self::MRG_MYISAM - 739)) | (1 << (self::MYISAM - 739)) | (1 << (self::NDB - 739)) | (1 << (self::NDBCLUSTER - 739)) | (1 << (self::PERFORMANCE_SCHEMA - 739)) | (1 << (self::TOKUDB - 739)) | (1 << (self::REPEATABLE - 739)) | (1 << (self::COMMITTED - 739)) | (1 << (self::UNCOMMITTED - 739)) | (1 << (self::SERIALIZABLE - 739)) | (1 << (self::GEOMETRYCOLLECTION - 739)) | (1 << (self::LINESTRING - 739)) | (1 << (self::MULTILINESTRING - 739)) | (1 << (self::MULTIPOINT - 739)) | (1 << (self::MULTIPOLYGON - 739)) | (1 << (self::POINT - 739)) | (1 << (self::POLYGON - 739)) | (1 << (self::ABS - 739)) | (1 << (self::ACOS - 739)) | (1 << (self::ADDDATE - 739)) | (1 << (self::ADDTIME - 739)) | (1 << (self::AES_DECRYPT - 739)) | (1 << (self::AES_ENCRYPT - 739)) | (1 << (self::AREA - 739)) | (1 << (self::ASBINARY - 739)) | (1 << (self::ASIN - 739)) | (1 << (self::ASTEXT - 739)) | (1 << (self::ASWKB - 739)) | (1 << (self::ASWKT - 739)) | (1 << (self::ASYMMETRIC_DECRYPT - 739)) | (1 << (self::ASYMMETRIC_DERIVE - 739)) | (1 << (self::ASYMMETRIC_ENCRYPT - 739)) | (1 << (self::ASYMMETRIC_SIGN - 739)) | (1 << (self::ASYMMETRIC_VERIFY - 739)) | (1 << (self::ATAN - 739)) | (1 << (self::ATAN2 - 739)) | (1 << (self::BENCHMARK - 739)) | (1 << (self::BIN - 739)) | (1 << (self::BIT_COUNT - 739)) | (1 << (self::BIT_LENGTH - 739)) | (1 << (self::BUFFER - 739)) | (1 << (self::CATALOG_NAME - 739)) | (1 << (self::CEIL - 739)) | (1 << (self::CEILING - 739)) | (1 << (self::CENTROID - 739)) | (1 << (self::CHARACTER_LENGTH - 739)) | (1 << (self::CHARSET - 739)) | (1 << (self::CHAR_LENGTH - 739)) | (1 << (self::COERCIBILITY - 739)) | (1 << (self::COLLATION - 739)) | (1 << (self::COMPRESS - 739)) | (1 << (self::CONCAT - 739)) | (1 << (self::CONCAT_WS - 739)))) !== 0) || ((($_la - 803) & ~0x3F) === 0 && ((1 << ($_la - 803)) & ((1 << (self::CONNECTION_ID - 803)) | (1 << (self::CONV - 803)) | (1 << (self::CONVERT_TZ - 803)) | (1 << (self::COS - 803)) | (1 << (self::COT - 803)) | (1 << (self::CRC32 - 803)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 803)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 803)) | (1 << (self::CREATE_DH_PARAMETERS - 803)) | (1 << (self::CREATE_DIGEST - 803)) | (1 << (self::CROSSES - 803)) | (1 << (self::DATEDIFF - 803)) | (1 << (self::DATE_FORMAT - 803)) | (1 << (self::DAYNAME - 803)) | (1 << (self::DAYOFMONTH - 803)) | (1 << (self::DAYOFWEEK - 803)) | (1 << (self::DAYOFYEAR - 803)) | (1 << (self::DECODE - 803)) | (1 << (self::DEGREES - 803)) | (1 << (self::DES_DECRYPT - 803)) | (1 << (self::DES_ENCRYPT - 803)) | (1 << (self::DIMENSION - 803)) | (1 << (self::DISJOINT - 803)) | (1 << (self::ELT - 803)) | (1 << (self::ENCODE - 803)) | (1 << (self::ENCRYPT - 803)) | (1 << (self::ENDPOINT - 803)) | (1 << (self::ENVELOPE - 803)) | (1 << (self::EQUALS - 803)) | (1 << (self::EXP - 803)) | (1 << (self::EXPORT_SET - 803)) | (1 << (self::EXTERIORRING - 803)) | (1 << (self::EXTRACTVALUE - 803)) | (1 << (self::FIELD - 803)) | (1 << (self::FIND_IN_SET - 803)) | (1 << (self::FLOOR - 803)) | (1 << (self::FORMAT - 803)) | (1 << (self::FOUND_ROWS - 803)) | (1 << (self::FROM_BASE64 - 803)) | (1 << (self::FROM_DAYS - 803)) | (1 << (self::FROM_UNIXTIME - 803)) | (1 << (self::GEOMCOLLFROMTEXT - 803)) | (1 << (self::GEOMCOLLFROMWKB - 803)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 803)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 803)) | (1 << (self::GEOMETRYFROMTEXT - 803)) | (1 << (self::GEOMETRYFROMWKB - 803)) | (1 << (self::GEOMETRYN - 803)) | (1 << (self::GEOMETRYTYPE - 803)) | (1 << (self::GEOMFROMTEXT - 803)) | (1 << (self::GEOMFROMWKB - 803)) | (1 << (self::GET_FORMAT - 803)) | (1 << (self::GET_LOCK - 803)) | (1 << (self::GLENGTH - 803)) | (1 << (self::GREATEST - 803)) | (1 << (self::GTID_SUBSET - 803)) | (1 << (self::GTID_SUBTRACT - 803)) | (1 << (self::HEX - 803)) | (1 << (self::IFNULL - 803)) | (1 << (self::INET6_ATON - 803)) | (1 << (self::INET6_NTOA - 803)) | (1 << (self::INET_ATON - 803)) | (1 << (self::INET_NTOA - 803)) | (1 << (self::INSTR - 803)))) !== 0) || ((($_la - 867) & ~0x3F) === 0 && ((1 << ($_la - 867)) & ((1 << (self::INTERIORRINGN - 867)) | (1 << (self::INTERSECTS - 867)) | (1 << (self::ISCLOSED - 867)) | (1 << (self::ISEMPTY - 867)) | (1 << (self::ISNULL - 867)) | (1 << (self::ISSIMPLE - 867)) | (1 << (self::IS_FREE_LOCK - 867)) | (1 << (self::IS_IPV4 - 867)) | (1 << (self::IS_IPV4_COMPAT - 867)) | (1 << (self::IS_IPV4_MAPPED - 867)) | (1 << (self::IS_IPV6 - 867)) | (1 << (self::IS_USED_LOCK - 867)) | (1 << (self::LAST_INSERT_ID - 867)) | (1 << (self::LCASE - 867)) | (1 << (self::LEAST - 867)) | (1 << (self::LENGTH - 867)) | (1 << (self::LINEFROMTEXT - 867)) | (1 << (self::LINEFROMWKB - 867)) | (1 << (self::LINESTRINGFROMTEXT - 867)) | (1 << (self::LINESTRINGFROMWKB - 867)) | (1 << (self::LN - 867)) | (1 << (self::LOAD_FILE - 867)) | (1 << (self::LOCATE - 867)) | (1 << (self::LOG - 867)) | (1 << (self::LOG10 - 867)) | (1 << (self::LOG2 - 867)) | (1 << (self::LOWER - 867)) | (1 << (self::LPAD - 867)) | (1 << (self::LTRIM - 867)) | (1 << (self::MAKEDATE - 867)) | (1 << (self::MAKETIME - 867)) | (1 << (self::MAKE_SET - 867)) | (1 << (self::MASTER_POS_WAIT - 867)) | (1 << (self::MBRCONTAINS - 867)) | (1 << (self::MBRDISJOINT - 867)) | (1 << (self::MBREQUAL - 867)) | (1 << (self::MBRINTERSECTS - 867)) | (1 << (self::MBROVERLAPS - 867)) | (1 << (self::MBRTOUCHES - 867)) | (1 << (self::MBRWITHIN - 867)) | (1 << (self::MD5 - 867)) | (1 << (self::MLINEFROMTEXT - 867)) | (1 << (self::MLINEFROMWKB - 867)) | (1 << (self::MONTHNAME - 867)) | (1 << (self::MPOINTFROMTEXT - 867)) | (1 << (self::MPOINTFROMWKB - 867)) | (1 << (self::MPOLYFROMTEXT - 867)) | (1 << (self::MPOLYFROMWKB - 867)) | (1 << (self::MULTILINESTRINGFROMTEXT - 867)) | (1 << (self::MULTILINESTRINGFROMWKB - 867)) | (1 << (self::MULTIPOINTFROMTEXT - 867)) | (1 << (self::MULTIPOINTFROMWKB - 867)) | (1 << (self::MULTIPOLYGONFROMTEXT - 867)) | (1 << (self::MULTIPOLYGONFROMWKB - 867)) | (1 << (self::NAME_CONST - 867)) | (1 << (self::NULLIF - 867)) | (1 << (self::NUMGEOMETRIES - 867)) | (1 << (self::NUMINTERIORRINGS - 867)) | (1 << (self::NUMPOINTS - 867)) | (1 << (self::OCT - 867)) | (1 << (self::OCTET_LENGTH - 867)) | (1 << (self::ORD - 867)) | (1 << (self::OVERLAPS - 867)) | (1 << (self::PERIOD_ADD - 867)))) !== 0) || ((($_la - 931) & ~0x3F) === 0 && ((1 << ($_la - 931)) & ((1 << (self::PERIOD_DIFF - 931)) | (1 << (self::PI - 931)) | (1 << (self::POINTFROMTEXT - 931)) | (1 << (self::POINTFROMWKB - 931)) | (1 << (self::POINTN - 931)) | (1 << (self::POLYFROMTEXT - 931)) | (1 << (self::POLYFROMWKB - 931)) | (1 << (self::POLYGONFROMTEXT - 931)) | (1 << (self::POLYGONFROMWKB - 931)) | (1 << (self::POW - 931)) | (1 << (self::POWER - 931)) | (1 << (self::QUOTE - 931)) | (1 << (self::RADIANS - 931)) | (1 << (self::RAND - 931)) | (1 << (self::RANDOM_BYTES - 931)) | (1 << (self::RELEASE_LOCK - 931)) | (1 << (self::REVERSE - 931)) | (1 << (self::ROUND - 931)) | (1 << (self::ROW_COUNT - 931)) | (1 << (self::RPAD - 931)) | (1 << (self::RTRIM - 931)) | (1 << (self::SEC_TO_TIME - 931)) | (1 << (self::SESSION_USER - 931)) | (1 << (self::SHA - 931)) | (1 << (self::SHA1 - 931)) | (1 << (self::SHA2 - 931)) | (1 << (self::SCHEMA_NAME - 931)) | (1 << (self::SIGN - 931)) | (1 << (self::SIN - 931)) | (1 << (self::SLEEP - 931)) | (1 << (self::SOUNDEX - 931)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 931)) | (1 << (self::SQRT - 931)) | (1 << (self::SRID - 931)) | (1 << (self::STARTPOINT - 931)) | (1 << (self::STRCMP - 931)) | (1 << (self::STR_TO_DATE - 931)) | (1 << (self::ST_AREA - 931)) | (1 << (self::ST_ASBINARY - 931)) | (1 << (self::ST_ASTEXT - 931)) | (1 << (self::ST_ASWKB - 931)) | (1 << (self::ST_ASWKT - 931)) | (1 << (self::ST_BUFFER - 931)) | (1 << (self::ST_CENTROID - 931)) | (1 << (self::ST_CONTAINS - 931)) | (1 << (self::ST_CROSSES - 931)) | (1 << (self::ST_DIFFERENCE - 931)) | (1 << (self::ST_DIMENSION - 931)) | (1 << (self::ST_DISJOINT - 931)) | (1 << (self::ST_DISTANCE - 931)) | (1 << (self::ST_ENDPOINT - 931)) | (1 << (self::ST_ENVELOPE - 931)) | (1 << (self::ST_EQUALS - 931)) | (1 << (self::ST_EXTERIORRING - 931)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 931)) | (1 << (self::ST_GEOMCOLLFROMTXT - 931)) | (1 << (self::ST_GEOMCOLLFROMWKB - 931)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 931)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 931)) | (1 << (self::ST_GEOMETRYFROMTEXT - 931)) | (1 << (self::ST_GEOMETRYFROMWKB - 931)) | (1 << (self::ST_GEOMETRYN - 931)) | (1 << (self::ST_GEOMETRYTYPE - 931)) | (1 << (self::ST_GEOMFROMTEXT - 931)))) !== 0) || ((($_la - 995) & ~0x3F) === 0 && ((1 << ($_la - 995)) & ((1 << (self::ST_GEOMFROMWKB - 995)) | (1 << (self::ST_INTERIORRINGN - 995)) | (1 << (self::ST_INTERSECTION - 995)) | (1 << (self::ST_INTERSECTS - 995)) | (1 << (self::ST_ISCLOSED - 995)) | (1 << (self::ST_ISEMPTY - 995)) | (1 << (self::ST_ISSIMPLE - 995)) | (1 << (self::ST_LINEFROMTEXT - 995)) | (1 << (self::ST_LINEFROMWKB - 995)) | (1 << (self::ST_LINESTRINGFROMTEXT - 995)) | (1 << (self::ST_LINESTRINGFROMWKB - 995)) | (1 << (self::ST_NUMGEOMETRIES - 995)) | (1 << (self::ST_NUMINTERIORRING - 995)) | (1 << (self::ST_NUMINTERIORRINGS - 995)) | (1 << (self::ST_NUMPOINTS - 995)) | (1 << (self::ST_OVERLAPS - 995)) | (1 << (self::ST_POINTFROMTEXT - 995)) | (1 << (self::ST_POINTFROMWKB - 995)) | (1 << (self::ST_POINTN - 995)) | (1 << (self::ST_POLYFROMTEXT - 995)) | (1 << (self::ST_POLYFROMWKB - 995)) | (1 << (self::ST_POLYGONFROMTEXT - 995)) | (1 << (self::ST_POLYGONFROMWKB - 995)) | (1 << (self::ST_SRID - 995)) | (1 << (self::ST_STARTPOINT - 995)) | (1 << (self::ST_SYMDIFFERENCE - 995)) | (1 << (self::ST_TOUCHES - 995)) | (1 << (self::ST_UNION - 995)) | (1 << (self::ST_WITHIN - 995)) | (1 << (self::ST_X - 995)) | (1 << (self::ST_Y - 995)) | (1 << (self::SUBDATE - 995)) | (1 << (self::SUBSTRING_INDEX - 995)) | (1 << (self::SUBTIME - 995)) | (1 << (self::SYSTEM_USER - 995)) | (1 << (self::TAN - 995)) | (1 << (self::TIMEDIFF - 995)) | (1 << (self::TIMESTAMPADD - 995)) | (1 << (self::TIMESTAMPDIFF - 995)) | (1 << (self::TIME_FORMAT - 995)) | (1 << (self::TIME_TO_SEC - 995)) | (1 << (self::TOUCHES - 995)) | (1 << (self::TO_BASE64 - 995)) | (1 << (self::TO_DAYS - 995)) | (1 << (self::TO_SECONDS - 995)) | (1 << (self::UCASE - 995)) | (1 << (self::UNCOMPRESS - 995)) | (1 << (self::UNCOMPRESSED_LENGTH - 995)) | (1 << (self::UNHEX - 995)) | (1 << (self::UNIX_TIMESTAMP - 995)) | (1 << (self::UPDATEXML - 995)) | (1 << (self::UPPER - 995)) | (1 << (self::UUID - 995)) | (1 << (self::UUID_SHORT - 995)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 995)) | (1 << (self::VERSION - 995)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 995)) | (1 << (self::WEEKDAY - 995)) | (1 << (self::WEEKOFYEAR - 995)) | (1 << (self::WEIGHT_STRING - 995)) | (1 << (self::WITHIN - 995)) | (1 << (self::YEARWEEK - 995)) | (1 << (self::Y_FUNCTION - 995)) | (1 << (self::X_FUNCTION - 995)))) !== 0) || ((($_la - 1074) & ~0x3F) === 0 && ((1 << ($_la - 1074)) & ((1 << (self::MOD - 1074)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1074)) | (1 << (self::STRING_LITERAL - 1074)) | (1 << (self::ID - 1074)) | (1 << (self::REVERSE_QUOTE_ID - 1074)) | (1 << (self::OPTIONAL - 1074)))) !== 0)) {
                $this->setState(3296);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::AS) {
                    $this->setState(3295);
                    $this->match(self::AS);
                }
                $this->setState(3298);
                $this->uid();
            }
            $this->setState(3301);
            $this->match(self::SET);
            $this->setState(3302);
            $this->updatedElement();
            $this->setState(3307);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3303);
                $this->match(self::COMMA);
                $this->setState(3304);
                $this->updatedElement();
                $this->setState(3309);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(3312);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3310);
                $this->match(self::WHERE);
                $this->setState(3311);
                $this->recursiveExpression(0);
            }
            $this->setState(3315);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ORDER) {
                $this->setState(3314);
                $this->orderByClause();
            }
            $this->setState(3318);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LIMIT) {
                $this->setState(3317);
                $this->limitClause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function multipleUpdateStatement(): Context\MultipleUpdateStatementContext
    {
        $localContext = new Context\MultipleUpdateStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 206, self::RULE_multipleUpdateStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3320);
            $this->match(self::UPDATE);
            $this->setState(3322);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LOW_PRIORITY) {
                $this->setState(3321);
                $localContext->priority = $this->match(self::LOW_PRIORITY);
            }
            $this->setState(3325);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(3324);
                $this->match(self::IGNORE);
            }
            $this->setState(3327);
            $this->tableSources();
            $this->setState(3328);
            $this->match(self::SET);
            $this->setState(3329);
            $this->updatedElement();
            $this->setState(3334);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3330);
                $this->match(self::COMMA);
                $this->setState(3331);
                $this->updatedElement();
                $this->setState(3336);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(3339);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3337);
                $this->match(self::WHERE);
                $this->setState(3338);
                $this->recursiveExpression(0);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function orderByClause(): Context\OrderByClauseContext
    {
        $localContext = new Context\OrderByClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 208, self::RULE_orderByClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3341);
            $this->match(self::ORDER);
            $this->setState(3342);
            $this->match(self::BY);
            $this->setState(3343);
            $this->orderByExpression();
            $this->setState(3348);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3344);
                $this->match(self::COMMA);
                $this->setState(3345);
                $this->orderByExpression();
                $this->setState(3350);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function orderByExpression(): Context\OrderByExpressionContext
    {
        $localContext = new Context\OrderByExpressionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 210, self::RULE_orderByExpression);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3351);
            $this->recursiveExpression(0);
            $this->setState(3353);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 463, $this->ctx)) {
                case 1:
                    $this->setState(3352);

                    $localContext->order = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ASC || $_la === self::DESC)) {
                        $localContext->order = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableSources(): Context\TableSourcesContext
    {
        $localContext = new Context\TableSourcesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 212, self::RULE_tableSources);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3355);
            $this->tableSource();
            $this->setState(3360);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3356);
                $this->match(self::COMMA);
                $this->setState(3357);
                $this->tableSource();
                $this->setState(3362);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableSource(): Context\TableSourceContext
    {
        $localContext = new Context\TableSourceContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 214, self::RULE_tableSource);

        try {
            $this->setState(3380);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 467, $this->ctx)) {
                case 1:
                    $localContext = new Context\TableSourceBaseContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3363);
                    $this->tableSourceItem();
                    $this->setState(3367);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 465, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(3364);
                            $this->joinPart();
                        }

                        $this->setState(3369);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 465, $this->ctx);
                    }
                    break;
                case 2:
                    $localContext = new Context\TableSourceNestedContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3370);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3371);
                    $this->tableSourceItem();
                    $this->setState(3375);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while (((($_la - 33) & ~0x3F) === 0 && ((1 << ($_la - 33)) & ((1 << (self::CROSS - 33)) | (1 << (self::INNER - 33)) | (1 << (self::JOIN - 33)) | (1 << (self::LEFT - 33)))) !== 0) || ((($_la - 106) & ~0x3F) === 0 && ((1 << ($_la - 106)) & ((1 << (self::NATURAL - 106)) | (1 << (self::RIGHT - 106)) | (1 << (self::STRAIGHT_JOIN - 106)))) !== 0)) {
                        $this->setState(3372);
                        $this->joinPart();
                        $this->setState(3377);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(3378);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableSourceItem(): Context\TableSourceItemContext
    {
        $localContext = new Context\TableSourceItemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 216, self::RULE_tableSourceItem);

        try {
            $this->setState(3422);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 475, $this->ctx)) {
                case 1:
                    $localContext = new Context\AtomTableItemContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3382);
                    $this->tableName();
                    $this->setState(3388);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PARTITION) {
                        $this->setState(3383);
                        $this->match(self::PARTITION);
                        $this->setState(3384);
                        $this->match(self::LR_BRACKET);
                        $this->setState(3385);
                        $this->uidList();
                        $this->setState(3386);
                        $this->match(self::RR_BRACKET);
                    }
                    $this->setState(3394);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 470, $this->ctx)) {
                        case 1:
                            $this->setState(3391);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::AS) {
                                $this->setState(3390);
                                $this->match(self::AS);
                            }
                            $this->setState(3393);
                            $localContext->alias = $this->uid();
                            break;
                    }
                    $this->setState(3404);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 472, $this->ctx)) {
                        case 1:
                            $this->setState(3396);
                            $this->indexHint();
                            $this->setState(3401);
                            $this->errorHandler->sync($this);

                            $alt = $this->getInterpreter()->adaptivePredict($this->input, 471, $this->ctx);

                            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                                if ($alt === 1) {
                                    $this->setState(3397);
                                    $this->match(self::COMMA);
                                    $this->setState(3398);
                                    $this->indexHint();
                                }

                                $this->setState(3403);
                                $this->errorHandler->sync($this);

                                $alt = $this->getInterpreter()->adaptivePredict($this->input, 471, $this->ctx);
                            }
                            break;
                    }
                    break;
                case 2:
                    $localContext = new Context\SubqueryTableItemContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3411);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 473, $this->ctx)) {
                        case 1:
                            $this->setState(3406);
                            $this->selectStatement();
                            break;
                        case 2:
                            $this->setState(3407);
                            $this->match(self::LR_BRACKET);
                            $this->setState(3408);
                            $localContext->parenthesisSubquery = $this->selectStatement();
                            $this->setState(3409);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    $this->setState(3414);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS) {
                        $this->setState(3413);
                        $this->match(self::AS);
                    }
                    $this->setState(3416);
                    $localContext->alias = $this->uid();
                    break;
                case 3:
                    $localContext = new Context\TableSourcesItemContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3418);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3419);
                    $this->tableSources();
                    $this->setState(3420);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexHint(): Context\IndexHintContext
    {
        $localContext = new Context\IndexHintContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 218, self::RULE_indexHint);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3424);

            $localContext->indexHintAction = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::FORCE || $_la === self::IGNORE || $_la === self::USE)) {
                $localContext->indexHintAction = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(3425);

            $localContext->keyFormat = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::INDEX || $_la === self::KEY)) {
                $localContext->keyFormat = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(3428);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FOR) {
                $this->setState(3426);
                $this->match(self::FOR);
                $this->setState(3427);
                $this->indexHintType();
            }
            $this->setState(3430);
            $this->match(self::LR_BRACKET);
            $this->setState(3431);
            $this->uidList();
            $this->setState(3432);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexHintType(): Context\IndexHintTypeContext
    {
        $localContext = new Context\IndexHintTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 220, self::RULE_indexHintType);

        try {
            $this->setState(3439);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::JOIN:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3434);
                    $this->match(self::JOIN);
                    break;
                case self::ORDER:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3435);
                    $this->match(self::ORDER);
                    $this->setState(3436);
                    $this->match(self::BY);
                    break;
                case self::GROUP:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3437);
                    $this->match(self::GROUP);
                    $this->setState(3438);
                    $this->match(self::BY);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function joinPart(): Context\JoinPartContext
    {
        $localContext = new Context\JoinPartContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 222, self::RULE_joinPart);

        try {
            $this->setState(3485);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CROSS:
                case self::INNER:
                case self::JOIN:
                    $localContext = new Context\InnerJoinContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3442);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CROSS || $_la === self::INNER) {
                        $this->setState(3441);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::CROSS || $_la === self::INNER)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(3444);
                    $this->match(self::JOIN);
                    $this->setState(3445);
                    $this->tableSourceItem();
                    $this->setState(3453);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 479, $this->ctx)) {
                        case 1:
                            $this->setState(3446);
                            $this->match(self::ON);
                            $this->setState(3447);
                            $this->recursiveExpression(0);
                            break;
                        case 2:
                            $this->setState(3448);
                            $this->match(self::USING);
                            $this->setState(3449);
                            $this->match(self::LR_BRACKET);
                            $this->setState(3450);
                            $this->uidList();
                            $this->setState(3451);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    break;
                case self::STRAIGHT_JOIN:
                    $localContext = new Context\StraightJoinContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3455);
                    $this->match(self::STRAIGHT_JOIN);
                    $this->setState(3456);
                    $this->tableSourceItem();
                    $this->setState(3459);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 480, $this->ctx)) {
                        case 1:
                            $this->setState(3457);
                            $this->match(self::ON);
                            $this->setState(3458);
                            $this->recursiveExpression(0);
                            break;
                    }
                    break;
                case self::LEFT:
                case self::RIGHT:
                    $localContext = new Context\OuterJoinContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3461);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::LEFT || $_la === self::RIGHT)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(3463);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::OUTER) {
                        $this->setState(3462);
                        $this->match(self::OUTER);
                    }
                    $this->setState(3465);
                    $this->match(self::JOIN);
                    $this->setState(3466);
                    $this->tableSourceItem();
                    $this->setState(3474);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ON:
                            $this->setState(3467);
                            $this->match(self::ON);
                            $this->setState(3468);
                            $this->recursiveExpression(0);
                            break;
                        case self::USING:
                            $this->setState(3469);
                            $this->match(self::USING);
                            $this->setState(3470);
                            $this->match(self::LR_BRACKET);
                            $this->setState(3471);
                            $this->uidList();
                            $this->setState(3472);
                            $this->match(self::RR_BRACKET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case self::NATURAL:
                    $localContext = new Context\NaturalJoinContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(3476);
                    $this->match(self::NATURAL);
                    $this->setState(3481);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LEFT || $_la === self::RIGHT) {
                        $this->setState(3477);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::LEFT || $_la === self::RIGHT)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(3479);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);

                        if ($_la === self::OUTER) {
                            $this->setState(3478);
                            $this->match(self::OUTER);
                        }
                    }
                    $this->setState(3483);
                    $this->match(self::JOIN);
                    $this->setState(3484);
                    $this->tableSourceItem();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function queryExpression(): Context\QueryExpressionContext
    {
        $localContext = new Context\QueryExpressionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 224, self::RULE_queryExpression);

        try {
            $this->setState(3495);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 486, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3487);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3488);
                    $this->querySpecification();
                    $this->setState(3489);
                    $this->match(self::RR_BRACKET);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3491);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3492);
                    $this->queryExpression();
                    $this->setState(3493);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function queryExpressionNointo(): Context\QueryExpressionNointoContext
    {
        $localContext = new Context\QueryExpressionNointoContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 226, self::RULE_queryExpressionNointo);

        try {
            $this->setState(3505);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 487, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3497);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3498);
                    $this->querySpecificationNointo();
                    $this->setState(3499);
                    $this->match(self::RR_BRACKET);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3501);
                    $this->match(self::LR_BRACKET);
                    $this->setState(3502);
                    $this->queryExpressionNointo();
                    $this->setState(3503);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function querySpecification(): Context\QuerySpecificationContext
    {
        $localContext = new Context\QuerySpecificationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 228, self::RULE_querySpecification);

        try {
            $this->setState(3565);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 504, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3507);
                    $this->match(self::SELECT);
                    $this->setState(3511);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 488, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(3508);
                            $this->selectSpec();
                        }

                        $this->setState(3513);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 488, $this->ctx);
                    }
                    $this->setState(3514);
                    $this->selectElements();
                    $this->setState(3516);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INTO) {
                        $this->setState(3515);
                        $this->selectIntoExpression();
                    }
                    $this->setState(3519);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 490, $this->ctx)) {
                        case 1:
                            $this->setState(3518);
                            $this->fromClause();
                            break;
                    }
                    $this->setState(3522);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 491, $this->ctx)) {
                        case 1:
                            $this->setState(3521);
                            $this->groupByClause();
                            break;
                    }
                    $this->setState(3525);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::HAVING) {
                        $this->setState(3524);
                        $this->havingClause();
                    }
                    $this->setState(3528);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WINDOW) {
                        $this->setState(3527);
                        $this->windowClause();
                    }
                    $this->setState(3531);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 494, $this->ctx)) {
                        case 1:
                            $this->setState(3530);
                            $this->orderByClause();
                            break;
                    }
                    $this->setState(3534);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 495, $this->ctx)) {
                        case 1:
                            $this->setState(3533);
                            $this->limitClause();
                            break;
                    }
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3536);
                    $this->match(self::SELECT);
                    $this->setState(3540);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 496, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(3537);
                            $this->selectSpec();
                        }

                        $this->setState(3542);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 496, $this->ctx);
                    }
                    $this->setState(3543);
                    $this->selectElements();
                    $this->setState(3545);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 497, $this->ctx)) {
                        case 1:
                            $this->setState(3544);
                            $this->fromClause();
                            break;
                    }
                    $this->setState(3548);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 498, $this->ctx)) {
                        case 1:
                            $this->setState(3547);
                            $this->groupByClause();
                            break;
                    }
                    $this->setState(3551);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::HAVING) {
                        $this->setState(3550);
                        $this->havingClause();
                    }
                    $this->setState(3554);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WINDOW) {
                        $this->setState(3553);
                        $this->windowClause();
                    }
                    $this->setState(3557);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 501, $this->ctx)) {
                        case 1:
                            $this->setState(3556);
                            $this->orderByClause();
                            break;
                    }
                    $this->setState(3560);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 502, $this->ctx)) {
                        case 1:
                            $this->setState(3559);
                            $this->limitClause();
                            break;
                    }
                    $this->setState(3563);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INTO) {
                        $this->setState(3562);
                        $this->selectIntoExpression();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function querySpecificationNointo(): Context\QuerySpecificationNointoContext
    {
        $localContext = new Context\QuerySpecificationNointoContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 230, self::RULE_querySpecificationNointo);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3567);
            $this->match(self::SELECT);
            $this->setState(3571);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 505, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(3568);
                    $this->selectSpec();
                }

                $this->setState(3573);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 505, $this->ctx);
            }
            $this->setState(3574);
            $this->selectElements();
            $this->setState(3576);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 506, $this->ctx)) {
                case 1:
                    $this->setState(3575);
                    $this->fromClause();
                    break;
            }
            $this->setState(3579);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 507, $this->ctx)) {
                case 1:
                    $this->setState(3578);
                    $this->groupByClause();
                    break;
            }
            $this->setState(3582);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::HAVING) {
                $this->setState(3581);
                $this->havingClause();
            }
            $this->setState(3585);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WINDOW) {
                $this->setState(3584);
                $this->windowClause();
            }
            $this->setState(3588);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 510, $this->ctx)) {
                case 1:
                    $this->setState(3587);
                    $this->orderByClause();
                    break;
            }
            $this->setState(3591);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 511, $this->ctx)) {
                case 1:
                    $this->setState(3590);
                    $this->limitClause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function unionParenthesis(): Context\UnionParenthesisContext
    {
        $localContext = new Context\UnionParenthesisContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 232, self::RULE_unionParenthesis);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3593);
            $this->match(self::UNION);
            $this->setState(3595);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALL || $_la === self::DISTINCT) {
                $this->setState(3594);

                $localContext->unionType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::ALL || $_la === self::DISTINCT)) {
                    $localContext->unionType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(3597);
            $this->queryExpressionNointo();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function unionStatement(): Context\UnionStatementContext
    {
        $localContext = new Context\UnionStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 234, self::RULE_unionStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3599);
            $this->match(self::UNION);
            $this->setState(3601);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALL || $_la === self::DISTINCT) {
                $this->setState(3600);

                $localContext->unionType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::ALL || $_la === self::DISTINCT)) {
                    $localContext->unionType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(3605);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SELECT:
                    $this->setState(3603);
                    $this->querySpecificationNointo();
                    break;
                case self::LR_BRACKET:
                    $this->setState(3604);
                    $this->queryExpressionNointo();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectSpec(): Context\SelectSpecContext
    {
        $localContext = new Context\SelectSpecContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 236, self::RULE_selectSpec);

        try {
            $this->setState(3615);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALL:
                case self::DISTINCT:
                case self::DISTINCTROW:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3607);

                    $_la = $this->input->LA(1);

                    if (! (($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::ALL) | (1 << self::DISTINCT) | (1 << self::DISTINCTROW))) !== 0)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::HIGH_PRIORITY:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3608);
                    $this->match(self::HIGH_PRIORITY);
                    break;
                case self::STRAIGHT_JOIN:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3609);
                    $this->match(self::STRAIGHT_JOIN);
                    break;
                case self::SQL_SMALL_RESULT:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(3610);
                    $this->match(self::SQL_SMALL_RESULT);
                    break;
                case self::SQL_BIG_RESULT:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(3611);
                    $this->match(self::SQL_BIG_RESULT);
                    break;
                case self::SQL_BUFFER_RESULT:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(3612);
                    $this->match(self::SQL_BUFFER_RESULT);
                    break;
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(3613);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::SQL_CACHE || $_la === self::SQL_NO_CACHE)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::SQL_CALC_FOUND_ROWS:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(3614);
                    $this->match(self::SQL_CALC_FOUND_ROWS);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectElements(): Context\SelectElementsContext
    {
        $localContext = new Context\SelectElementsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 238, self::RULE_selectElements);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3619);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 516, $this->ctx)) {
                case 1:
                    $this->setState(3617);
                    $localContext->star = $this->match(self::STAR);
                    break;
                case 2:
                    $this->setState(3618);
                    $this->selectElement();
                    break;
            }
            $this->setState(3625);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3621);
                $this->match(self::COMMA);
                $this->setState(3622);
                $this->selectElement();
                $this->setState(3627);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectElement(): Context\SelectElementContext
    {
        $localContext = new Context\SelectElementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 240, self::RULE_selectElement);

        try {
            $this->setState(3657);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 525, $this->ctx)) {
                case 1:
                    $localContext = new Context\SelectStarElementContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3628);
                    $this->fullId();
                    $this->setState(3629);
                    $this->match(self::DOT);
                    $this->setState(3630);
                    $this->match(self::STAR);
                    break;
                case 2:
                    $localContext = new Context\SelectColumnElementContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3632);
                    $this->fullColumnName();
                    $this->setState(3637);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 519, $this->ctx)) {
                        case 1:
                            $this->setState(3634);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::AS) {
                                $this->setState(3633);
                                $this->match(self::AS);
                            }
                            $this->setState(3636);
                            $this->uid();
                            break;
                    }
                    break;
                case 3:
                    $localContext = new Context\SelectFunctionElementContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3639);
                    $this->functionCall();
                    $this->setState(3644);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 521, $this->ctx)) {
                        case 1:
                            $this->setState(3641);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::AS) {
                                $this->setState(3640);
                                $this->match(self::AS);
                            }
                            $this->setState(3643);
                            $this->uid();
                            break;
                    }
                    break;
                case 4:
                    $localContext = new Context\SelectExpressionElementContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(3648);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 522, $this->ctx)) {
                        case 1:
                            $this->setState(3646);
                            $this->match(self::LOCAL_ID);
                            $this->setState(3647);
                            $this->match(self::VAR_ASSIGN);
                            break;
                    }
                    $this->setState(3650);
                    $this->recursiveExpression(0);
                    $this->setState(3655);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 524, $this->ctx)) {
                        case 1:
                            $this->setState(3652);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::AS) {
                                $this->setState(3651);
                                $this->match(self::AS);
                            }
                            $this->setState(3654);
                            $this->uid();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectIntoExpression(): Context\SelectIntoExpressionContext
    {
        $localContext = new Context\SelectIntoExpressionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 242, self::RULE_selectIntoExpression);

        try {
            $this->setState(3695);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 532, $this->ctx)) {
                case 1:
                    $localContext = new Context\SelectIntoVariablesContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3659);
                    $this->match(self::INTO);
                    $this->setState(3660);
                    $this->assignmentField();
                    $this->setState(3665);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(3661);
                        $this->match(self::COMMA);
                        $this->setState(3662);
                        $this->assignmentField();
                        $this->setState(3667);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\SelectIntoDumpFileContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3668);
                    $this->match(self::INTO);
                    $this->setState(3669);
                    $this->match(self::DUMPFILE);
                    $this->setState(3670);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 3:
                    $localContext = new Context\SelectIntoTextFileContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3671);
                    $this->match(self::INTO);
                    $this->setState(3672);
                    $this->match(self::OUTFILE);
                    $this->setState(3673);
                    $localContext->filename = $this->match(self::STRING_LITERAL);
                    $this->setState(3677);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CHARACTER) {
                        $this->setState(3674);
                        $this->match(self::CHARACTER);
                        $this->setState(3675);
                        $this->match(self::SET);
                        $this->setState(3676);
                        $localContext->charset = $this->charsetName();
                    }
                    $this->setState(3685);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 529, $this->ctx)) {
                        case 1:
                            $this->setState(3679);

                            $localContext->fieldsFormat = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::COLUMNS || $_la === self::FIELDS)) {
                                $localContext->fieldsFormat = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            $this->setState(3681);
                            $this->errorHandler->sync($this);

                            $_la = $this->input->LA(1);
                            do {
                                $this->setState(3680);
                                $this->selectFieldsInto();
                                $this->setState(3683);
                                $this->errorHandler->sync($this);
                                $_la = $this->input->LA(1);
                            } while ($_la === self::ENCLOSED || $_la === self::ESCAPED || $_la === self::OPTIONALLY || $_la === self::TERMINATED);
                            break;
                    }
                    $this->setState(3693);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LINES) {
                        $this->setState(3687);
                        $this->match(self::LINES);
                        $this->setState(3689);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        do {
                            $this->setState(3688);
                            $this->selectLinesInto();
                            $this->setState(3691);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        } while ($_la === self::STARTING || $_la === self::TERMINATED);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectFieldsInto(): Context\SelectFieldsIntoContext
    {
        $localContext = new Context\SelectFieldsIntoContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 244, self::RULE_selectFieldsInto);

        try {
            $this->setState(3709);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::TERMINATED:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3697);
                    $this->match(self::TERMINATED);
                    $this->setState(3698);
                    $this->match(self::BY);
                    $this->setState(3699);
                    $localContext->terminationField = $this->match(self::STRING_LITERAL);
                    break;
                case self::ENCLOSED:
                case self::OPTIONALLY:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3701);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::OPTIONALLY) {
                        $this->setState(3700);
                        $this->match(self::OPTIONALLY);
                    }
                    $this->setState(3703);
                    $this->match(self::ENCLOSED);
                    $this->setState(3704);
                    $this->match(self::BY);
                    $this->setState(3705);
                    $localContext->enclosion = $this->match(self::STRING_LITERAL);
                    break;
                case self::ESCAPED:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3706);
                    $this->match(self::ESCAPED);
                    $this->setState(3707);
                    $this->match(self::BY);
                    $this->setState(3708);
                    $localContext->escaping = $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function selectLinesInto(): Context\SelectLinesIntoContext
    {
        $localContext = new Context\SelectLinesIntoContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 246, self::RULE_selectLinesInto);

        try {
            $this->setState(3717);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::STARTING:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3711);
                    $this->match(self::STARTING);
                    $this->setState(3712);
                    $this->match(self::BY);
                    $this->setState(3713);
                    $localContext->starting = $this->match(self::STRING_LITERAL);
                    break;
                case self::TERMINATED:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3714);
                    $this->match(self::TERMINATED);
                    $this->setState(3715);
                    $this->match(self::BY);
                    $this->setState(3716);
                    $localContext->terminationLine = $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function fromClause(): Context\FromClauseContext
    {
        $localContext = new Context\FromClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 248, self::RULE_fromClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3721);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FROM) {
                $this->setState(3719);
                $this->match(self::FROM);
                $this->setState(3720);
                $this->tableSources();
            }
            $this->setState(3725);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WHERE) {
                $this->setState(3723);
                $this->match(self::WHERE);
                $this->setState(3724);
                $localContext->whereExpr = $this->recursiveExpression(0);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function groupByClause(): Context\GroupByClauseContext
    {
        $localContext = new Context\GroupByClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 250, self::RULE_groupByClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3727);
            $this->match(self::GROUP);
            $this->setState(3728);
            $this->match(self::BY);
            $this->setState(3729);
            $this->groupByItem();
            $this->setState(3734);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3730);
                $this->match(self::COMMA);
                $this->setState(3731);
                $this->groupByItem();
                $this->setState(3736);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(3739);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 539, $this->ctx)) {
                case 1:
                    $this->setState(3737);
                    $this->match(self::WITH);
                    $this->setState(3738);
                    $this->match(self::ROLLUP);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function havingClause(): Context\HavingClauseContext
    {
        $localContext = new Context\HavingClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 252, self::RULE_havingClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3741);
            $this->match(self::HAVING);
            $this->setState(3742);
            $localContext->havingExpr = $this->recursiveExpression(0);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function windowClause(): Context\WindowClauseContext
    {
        $localContext = new Context\WindowClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 254, self::RULE_windowClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3744);
            $this->match(self::WINDOW);
            $this->setState(3745);
            $this->windowName();
            $this->setState(3746);
            $this->match(self::AS);
            $this->setState(3747);
            $this->match(self::LR_BRACKET);
            $this->setState(3748);
            $this->windowSpec();
            $this->setState(3749);
            $this->match(self::RR_BRACKET);
            $this->setState(3759);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3750);
                $this->match(self::COMMA);
                $this->setState(3751);
                $this->windowName();
                $this->setState(3752);
                $this->match(self::AS);
                $this->setState(3753);
                $this->match(self::LR_BRACKET);
                $this->setState(3754);
                $this->windowSpec();
                $this->setState(3755);
                $this->match(self::RR_BRACKET);
                $this->setState(3761);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function groupByItem(): Context\GroupByItemContext
    {
        $localContext = new Context\GroupByItemContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 256, self::RULE_groupByItem);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3762);
            $this->recursiveExpression(0);
            $this->setState(3764);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 541, $this->ctx)) {
                case 1:
                    $this->setState(3763);

                    $localContext->order = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ASC || $_la === self::DESC)) {
                        $localContext->order = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function limitClause(): Context\LimitClauseContext
    {
        $localContext = new Context\LimitClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 258, self::RULE_limitClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3766);
            $this->match(self::LIMIT);
            $this->setState(3777);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 543, $this->ctx)) {
                case 1:
                    $this->setState(3770);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 542, $this->ctx)) {
                        case 1:
                            $this->setState(3767);
                            $localContext->offset = $this->limitClauseAtom();
                            $this->setState(3768);
                            $this->match(self::COMMA);
                            break;
                    }
                    $this->setState(3772);
                    $localContext->limit = $this->limitClauseAtom();
                    break;
                case 2:
                    $this->setState(3773);
                    $localContext->limit = $this->limitClauseAtom();
                    $this->setState(3774);
                    $this->match(self::OFFSET);
                    $this->setState(3775);
                    $localContext->offset = $this->limitClauseAtom();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function limitClauseAtom(): Context\LimitClauseAtomContext
    {
        $localContext = new Context\LimitClauseAtomContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 260, self::RULE_limitClauseAtom);

        try {
            $this->setState(3782);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ZERO_DECIMAL:
                case self::ONE_DECIMAL:
                case self::TWO_DECIMAL:
                case self::DECIMAL_LITERAL:
                case self::REAL_LITERAL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3779);
                    $this->decimalLiteral();
                    break;
                case self::LOCAL_ID:
                case self::GLOBAL_ID:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3780);
                    $this->mysqlVariable();
                    break;
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3781);
                    $this->simpleId();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function startTransaction(): Context\StartTransactionContext
    {
        $localContext = new Context\StartTransactionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 262, self::RULE_startTransaction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3784);
            $this->match(self::START);
            $this->setState(3785);
            $this->match(self::TRANSACTION);
            $this->setState(3794);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::READ || $_la === self::WITH) {
                $this->setState(3786);
                $this->transactionMode();
                $this->setState(3791);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(3787);
                    $this->match(self::COMMA);
                    $this->setState(3788);
                    $this->transactionMode();
                    $this->setState(3793);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function beginWork(): Context\BeginWorkContext
    {
        $localContext = new Context\BeginWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 264, self::RULE_beginWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3796);
            $this->match(self::BEGIN);
            $this->setState(3798);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WORK) {
                $this->setState(3797);
                $this->match(self::WORK);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function commitWork(): Context\CommitWorkContext
    {
        $localContext = new Context\CommitWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 266, self::RULE_commitWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3800);
            $this->match(self::COMMIT);
            $this->setState(3802);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WORK) {
                $this->setState(3801);
                $this->match(self::WORK);
            }
            $this->setState(3809);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AND) {
                $this->setState(3804);
                $this->match(self::AND);
                $this->setState(3806);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NO) {
                    $this->setState(3805);
                    $localContext->nochain = $this->match(self::NO);
                }
                $this->setState(3808);
                $this->match(self::CHAIN);
            }
            $this->setState(3815);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 552, $this->ctx)) {
                case 1:
                    $this->setState(3812);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NO) {
                        $this->setState(3811);
                        $localContext->norelease = $this->match(self::NO);
                    }
                    $this->setState(3814);
                    $this->match(self::RELEASE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function rollbackWork(): Context\RollbackWorkContext
    {
        $localContext = new Context\RollbackWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 268, self::RULE_rollbackWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3817);
            $this->match(self::ROLLBACK);
            $this->setState(3819);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WORK) {
                $this->setState(3818);
                $this->match(self::WORK);
            }
            $this->setState(3826);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AND) {
                $this->setState(3821);
                $this->match(self::AND);
                $this->setState(3823);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::NO) {
                    $this->setState(3822);
                    $localContext->nochain = $this->match(self::NO);
                }
                $this->setState(3825);
                $this->match(self::CHAIN);
            }
            $this->setState(3832);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 557, $this->ctx)) {
                case 1:
                    $this->setState(3829);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NO) {
                        $this->setState(3828);
                        $localContext->norelease = $this->match(self::NO);
                    }
                    $this->setState(3831);
                    $this->match(self::RELEASE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function savepointStatement(): Context\SavepointStatementContext
    {
        $localContext = new Context\SavepointStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 270, self::RULE_savepointStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3834);
            $this->match(self::SAVEPOINT);
            $this->setState(3835);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function rollbackStatement(): Context\RollbackStatementContext
    {
        $localContext = new Context\RollbackStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 272, self::RULE_rollbackStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3837);
            $this->match(self::ROLLBACK);
            $this->setState(3839);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WORK) {
                $this->setState(3838);
                $this->match(self::WORK);
            }
            $this->setState(3841);
            $this->match(self::TO);
            $this->setState(3843);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 559, $this->ctx)) {
                case 1:
                    $this->setState(3842);
                    $this->match(self::SAVEPOINT);
                    break;
            }
            $this->setState(3845);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function releaseStatement(): Context\ReleaseStatementContext
    {
        $localContext = new Context\ReleaseStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 274, self::RULE_releaseStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3847);
            $this->match(self::RELEASE);
            $this->setState(3848);
            $this->match(self::SAVEPOINT);
            $this->setState(3849);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lockTables(): Context\LockTablesContext
    {
        $localContext = new Context\LockTablesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 276, self::RULE_lockTables);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3851);
            $this->match(self::LOCK);
            $this->setState(3852);
            $this->match(self::TABLES);
            $this->setState(3853);
            $this->lockTableElement();
            $this->setState(3858);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3854);
                $this->match(self::COMMA);
                $this->setState(3855);
                $this->lockTableElement();
                $this->setState(3860);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function unlockTables(): Context\UnlockTablesContext
    {
        $localContext = new Context\UnlockTablesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 278, self::RULE_unlockTables);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3861);
            $this->match(self::UNLOCK);
            $this->setState(3862);
            $this->match(self::TABLES);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function setAutocommitStatement(): Context\SetAutocommitStatementContext
    {
        $localContext = new Context\SetAutocommitStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 280, self::RULE_setAutocommitStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3864);
            $this->match(self::SET);
            $this->setState(3865);
            $this->match(self::AUTOCOMMIT);
            $this->setState(3866);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(3867);

            $localContext->autocommitValue = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                $localContext->autocommitValue = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function setTransactionStatement(): Context\SetTransactionStatementContext
    {
        $localContext = new Context\SetTransactionStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 282, self::RULE_setTransactionStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3869);
            $this->match(self::SET);
            $this->setState(3871);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::GLOBAL || $_la === self::SESSION) {
                $this->setState(3870);

                $localContext->transactionContext = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::GLOBAL || $_la === self::SESSION)) {
                    $localContext->transactionContext = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(3873);
            $this->match(self::TRANSACTION);
            $this->setState(3874);
            $this->transactionOption();
            $this->setState(3879);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3875);
                $this->match(self::COMMA);
                $this->setState(3876);
                $this->transactionOption();
                $this->setState(3881);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function transactionMode(): Context\TransactionModeContext
    {
        $localContext = new Context\TransactionModeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 284, self::RULE_transactionMode);

        try {
            $this->setState(3889);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 563, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3882);
                    $this->match(self::WITH);
                    $this->setState(3883);
                    $this->match(self::CONSISTENT);
                    $this->setState(3884);
                    $this->match(self::SNAPSHOT);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3885);
                    $this->match(self::READ);
                    $this->setState(3886);
                    $this->match(self::WRITE);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3887);
                    $this->match(self::READ);
                    $this->setState(3888);
                    $this->match(self::ONLY);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lockTableElement(): Context\LockTableElementContext
    {
        $localContext = new Context\LockTableElementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 286, self::RULE_lockTableElement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3891);
            $this->tableName();
            $this->setState(3896);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 12) & ~0x3F) === 0 && ((1 << ($_la - 12)) & ((1 << (self::AS - 12)) | (1 << (self::CURRENT - 12)) | (1 << (self::DATABASE - 12)) | (1 << (self::DIAGNOSTICS - 12)) | (1 << (self::EXCEPT - 12)) | (1 << (self::GROUP - 12)))) !== 0) || ((($_la - 92) & ~0x3F) === 0 && ((1 << ($_la - 92)) & ((1 << (self::LEFT - 92)) | (1 << (self::NUMBER - 92)) | (1 << (self::ORDER - 92)) | (1 << (self::RIGHT - 92)) | (1 << (self::SCHEMA - 92)))) !== 0) || ((($_la - 158) & ~0x3F) === 0 && ((1 << ($_la - 158)) & ((1 << (self::STACKED - 158)) | (1 << (self::DATE - 158)) | (1 << (self::TIME - 158)) | (1 << (self::TIMESTAMP - 158)) | (1 << (self::DATETIME - 158)) | (1 << (self::YEAR - 158)) | (1 << (self::BINARY - 158)))) !== 0) || ((($_la - 223) & ~0x3F) === 0 && ((1 << ($_la - 223)) & ((1 << (self::TEXT - 223)) | (1 << (self::ENUM - 223)) | (1 << (self::SERIAL - 223)) | (1 << (self::JSON_ARRAY - 223)) | (1 << (self::JSON_OBJECT - 223)) | (1 << (self::JSON_QUOTE - 223)) | (1 << (self::JSON_CONTAINS - 223)) | (1 << (self::JSON_CONTAINS_PATH - 223)) | (1 << (self::JSON_EXTRACT - 223)) | (1 << (self::JSON_KEYS - 223)) | (1 << (self::JSON_OVERLAPS - 223)) | (1 << (self::JSON_SEARCH - 223)) | (1 << (self::JSON_VALUE - 223)) | (1 << (self::JSON_ARRAY_APPEND - 223)) | (1 << (self::JSON_ARRAY_INSERT - 223)) | (1 << (self::JSON_INSERT - 223)) | (1 << (self::JSON_MERGE - 223)) | (1 << (self::JSON_MERGE_PATCH - 223)) | (1 << (self::JSON_MERGE_PRESERVE - 223)) | (1 << (self::JSON_REMOVE - 223)) | (1 << (self::JSON_REPLACE - 223)) | (1 << (self::JSON_SET - 223)) | (1 << (self::JSON_UNQUOTE - 223)) | (1 << (self::JSON_DEPTH - 223)) | (1 << (self::JSON_LENGTH - 223)) | (1 << (self::JSON_TYPE - 223)) | (1 << (self::JSON_VALID - 223)) | (1 << (self::JSON_TABLE - 223)) | (1 << (self::JSON_SCHEMA_VALID - 223)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 223)) | (1 << (self::JSON_PRETTY - 223)) | (1 << (self::JSON_STORAGE_FREE - 223)) | (1 << (self::JSON_STORAGE_SIZE - 223)) | (1 << (self::JSON_ARRAYAGG - 223)) | (1 << (self::JSON_OBJECTAGG - 223)) | (1 << (self::AVG - 223)) | (1 << (self::BIT_AND - 223)) | (1 << (self::BIT_OR - 223)) | (1 << (self::BIT_XOR - 223)) | (1 << (self::COUNT - 223)) | (1 << (self::GROUP_CONCAT - 223)) | (1 << (self::MAX - 223)) | (1 << (self::MIN - 223)))) !== 0) || ((($_la - 291) & ~0x3F) === 0 && ((1 << ($_la - 291)) & ((1 << (self::STD - 291)) | (1 << (self::STDDEV - 291)) | (1 << (self::STDDEV_POP - 291)) | (1 << (self::STDDEV_SAMP - 291)) | (1 << (self::SUM - 291)) | (1 << (self::VAR_POP - 291)) | (1 << (self::VAR_SAMP - 291)) | (1 << (self::VARIANCE - 291)) | (1 << (self::POSITION - 291)) | (1 << (self::ACCOUNT - 291)) | (1 << (self::ACTION - 291)) | (1 << (self::AFTER - 291)) | (1 << (self::AGGREGATE - 291)) | (1 << (self::ALGORITHM - 291)) | (1 << (self::ANY - 291)) | (1 << (self::AT - 291)) | (1 << (self::AUTHORS - 291)) | (1 << (self::AUTOCOMMIT - 291)) | (1 << (self::AUTOEXTEND_SIZE - 291)) | (1 << (self::AUTO_INCREMENT - 291)) | (1 << (self::AVG_ROW_LENGTH - 291)) | (1 << (self::BEGIN - 291)) | (1 << (self::BINLOG - 291)) | (1 << (self::BIT - 291)) | (1 << (self::BLOCK - 291)) | (1 << (self::BOOL - 291)) | (1 << (self::BOOLEAN - 291)) | (1 << (self::BTREE - 291)) | (1 << (self::CACHE - 291)) | (1 << (self::CASCADED - 291)) | (1 << (self::CHAIN - 291)) | (1 << (self::CHANGED - 291)) | (1 << (self::CHANNEL - 291)) | (1 << (self::CHECKSUM - 291)) | (1 << (self::PAGE_CHECKSUM - 291)) | (1 << (self::CIPHER - 291)) | (1 << (self::CLASS_ORIGIN - 291)) | (1 << (self::CLIENT - 291)) | (1 << (self::CLOSE - 291)) | (1 << (self::COALESCE - 291)) | (1 << (self::CODE - 291)) | (1 << (self::COLUMNS - 291)) | (1 << (self::COLUMN_FORMAT - 291)) | (1 << (self::COLUMN_NAME - 291)) | (1 << (self::COMMENT - 291)) | (1 << (self::COMMIT - 291)))) !== 0) || ((($_la - 355) & ~0x3F) === 0 && ((1 << ($_la - 355)) & ((1 << (self::COMPACT - 355)) | (1 << (self::COMPLETION - 355)) | (1 << (self::COMPRESSED - 355)) | (1 << (self::COMPRESSION - 355)) | (1 << (self::CONCURRENT - 355)) | (1 << (self::CONNECT - 355)) | (1 << (self::CONNECTION - 355)) | (1 << (self::CONSISTENT - 355)) | (1 << (self::CONSTRAINT_CATALOG - 355)) | (1 << (self::CONSTRAINT_SCHEMA - 355)) | (1 << (self::CONSTRAINT_NAME - 355)) | (1 << (self::CONTAINS - 355)) | (1 << (self::CONTEXT - 355)) | (1 << (self::CONTRIBUTORS - 355)) | (1 << (self::COPY - 355)) | (1 << (self::CPU - 355)) | (1 << (self::CURSOR_NAME - 355)) | (1 << (self::DATA - 355)) | (1 << (self::DATAFILE - 355)) | (1 << (self::DEALLOCATE - 355)) | (1 << (self::DEFAULT_AUTH - 355)) | (1 << (self::DEFINER - 355)) | (1 << (self::DELAY_KEY_WRITE - 355)) | (1 << (self::DES_KEY_FILE - 355)) | (1 << (self::DIRECTORY - 355)) | (1 << (self::DISABLE - 355)) | (1 << (self::DISCARD - 355)) | (1 << (self::DISK - 355)) | (1 << (self::DO - 355)) | (1 << (self::DUMPFILE - 355)) | (1 << (self::DUPLICATE - 355)) | (1 << (self::DYNAMIC - 355)) | (1 << (self::ENABLE - 355)) | (1 << (self::ENCRYPTION - 355)) | (1 << (self::END - 355)) | (1 << (self::ENDS - 355)) | (1 << (self::ENGINE - 355)) | (1 << (self::ENGINES - 355)) | (1 << (self::ERROR - 355)) | (1 << (self::ERRORS - 355)) | (1 << (self::ESCAPE - 355)) | (1 << (self::EVEN - 355)) | (1 << (self::EVENT - 355)) | (1 << (self::EVENTS - 355)) | (1 << (self::EVERY - 355)) | (1 << (self::EXCHANGE - 355)) | (1 << (self::EXCLUSIVE - 355)) | (1 << (self::EXPIRE - 355)) | (1 << (self::EXPORT - 355)) | (1 << (self::EXTENDED - 355)) | (1 << (self::EXTENT_SIZE - 355)) | (1 << (self::FAST - 355)) | (1 << (self::FAULTS - 355)) | (1 << (self::FIELDS - 355)) | (1 << (self::FILE_BLOCK_SIZE - 355)) | (1 << (self::FILTER - 355)) | (1 << (self::FIRST - 355)) | (1 << (self::FIXED - 355)) | (1 << (self::FLUSH - 355)) | (1 << (self::FOLLOWS - 355)) | (1 << (self::FOUND - 355)) | (1 << (self::FULL - 355)) | (1 << (self::FUNCTION - 355)))) !== 0) || ((($_la - 419) & ~0x3F) === 0 && ((1 << ($_la - 419)) & ((1 << (self::GENERAL - 419)) | (1 << (self::GLOBAL - 419)) | (1 << (self::GRANTS - 419)) | (1 << (self::GROUP_REPLICATION - 419)) | (1 << (self::HANDLER - 419)) | (1 << (self::HASH - 419)) | (1 << (self::HELP - 419)) | (1 << (self::HOST - 419)) | (1 << (self::HOSTS - 419)) | (1 << (self::IDENTIFIED - 419)) | (1 << (self::IGNORE_SERVER_IDS - 419)) | (1 << (self::IMPORT - 419)) | (1 << (self::INDEXES - 419)) | (1 << (self::INITIAL_SIZE - 419)) | (1 << (self::INPLACE - 419)) | (1 << (self::INSERT_METHOD - 419)) | (1 << (self::INSTALL - 419)) | (1 << (self::INSTANCE - 419)) | (1 << (self::INVISIBLE - 419)) | (1 << (self::INVOKER - 419)) | (1 << (self::IO - 419)) | (1 << (self::IO_THREAD - 419)) | (1 << (self::IPC - 419)) | (1 << (self::ISOLATION - 419)) | (1 << (self::ISSUER - 419)) | (1 << (self::JSON - 419)) | (1 << (self::KEY_BLOCK_SIZE - 419)) | (1 << (self::LANGUAGE - 419)) | (1 << (self::LAST - 419)) | (1 << (self::LEAVES - 419)) | (1 << (self::LESS - 419)) | (1 << (self::LEVEL - 419)) | (1 << (self::LIST - 419)) | (1 << (self::LOCAL - 419)) | (1 << (self::LOGFILE - 419)) | (1 << (self::LOGS - 419)) | (1 << (self::MASTER - 419)) | (1 << (self::MASTER_AUTO_POSITION - 419)) | (1 << (self::MASTER_CONNECT_RETRY - 419)) | (1 << (self::MASTER_DELAY - 419)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 419)) | (1 << (self::MASTER_HOST - 419)) | (1 << (self::MASTER_LOG_FILE - 419)) | (1 << (self::MASTER_LOG_POS - 419)) | (1 << (self::MASTER_PASSWORD - 419)) | (1 << (self::MASTER_PORT - 419)) | (1 << (self::MASTER_RETRY_COUNT - 419)) | (1 << (self::MASTER_SSL - 419)) | (1 << (self::MASTER_SSL_CA - 419)) | (1 << (self::MASTER_SSL_CAPATH - 419)) | (1 << (self::MASTER_SSL_CERT - 419)) | (1 << (self::MASTER_SSL_CIPHER - 419)) | (1 << (self::MASTER_SSL_CRL - 419)) | (1 << (self::MASTER_SSL_CRLPATH - 419)) | (1 << (self::MASTER_SSL_KEY - 419)) | (1 << (self::MASTER_TLS_VERSION - 419)) | (1 << (self::MASTER_USER - 419)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 419)) | (1 << (self::MAX_QUERIES_PER_HOUR - 419)) | (1 << (self::MAX_ROWS - 419)) | (1 << (self::MAX_SIZE - 419)) | (1 << (self::MAX_UPDATES_PER_HOUR - 419)) | (1 << (self::MAX_USER_CONNECTIONS - 419)) | (1 << (self::MEDIUM - 419)))) !== 0) || ((($_la - 483) & ~0x3F) === 0 && ((1 << ($_la - 483)) & ((1 << (self::MEMBER - 483)) | (1 << (self::MERGE - 483)) | (1 << (self::MESSAGE_TEXT - 483)) | (1 << (self::MID - 483)) | (1 << (self::MIGRATE - 483)) | (1 << (self::MIN_ROWS - 483)) | (1 << (self::MODE - 483)) | (1 << (self::MODIFY - 483)) | (1 << (self::MUTEX - 483)) | (1 << (self::MYSQL - 483)) | (1 << (self::MYSQL_ERRNO - 483)) | (1 << (self::NAME - 483)) | (1 << (self::NAMES - 483)) | (1 << (self::NCHAR - 483)) | (1 << (self::NEVER - 483)) | (1 << (self::NEXT - 483)) | (1 << (self::NO - 483)) | (1 << (self::NODEGROUP - 483)) | (1 << (self::NONE - 483)) | (1 << (self::ODBC - 483)) | (1 << (self::OFFLINE - 483)) | (1 << (self::OFFSET - 483)) | (1 << (self::OF - 483)) | (1 << (self::OJ - 483)) | (1 << (self::OLD_PASSWORD - 483)) | (1 << (self::ONE - 483)) | (1 << (self::ONLINE - 483)) | (1 << (self::ONLY - 483)) | (1 << (self::OPEN - 483)) | (1 << (self::OPTIMIZER_COSTS - 483)) | (1 << (self::OPTIONS - 483)) | (1 << (self::OWNER - 483)) | (1 << (self::PACK_KEYS - 483)) | (1 << (self::PAGE - 483)) | (1 << (self::PARSER - 483)) | (1 << (self::PARTIAL - 483)) | (1 << (self::PARTITIONING - 483)) | (1 << (self::PARTITIONS - 483)) | (1 << (self::PASSWORD - 483)) | (1 << (self::PHASE - 483)) | (1 << (self::PLUGIN - 483)) | (1 << (self::PLUGIN_DIR - 483)) | (1 << (self::PLUGINS - 483)) | (1 << (self::PORT - 483)) | (1 << (self::PRECEDES - 483)) | (1 << (self::PREPARE - 483)) | (1 << (self::PRESERVE - 483)) | (1 << (self::PREV - 483)) | (1 << (self::PROCESSLIST - 483)) | (1 << (self::PROFILE - 483)) | (1 << (self::PROFILES - 483)) | (1 << (self::PROXY - 483)) | (1 << (self::QUERY - 483)) | (1 << (self::QUICK - 483)) | (1 << (self::REBUILD - 483)) | (1 << (self::RECOVER - 483)) | (1 << (self::REDO_BUFFER_SIZE - 483)) | (1 << (self::REDUNDANT - 483)) | (1 << (self::RELAY - 483)) | (1 << (self::RELAY_LOG_FILE - 483)) | (1 << (self::RELAY_LOG_POS - 483)) | (1 << (self::RELAYLOG - 483)) | (1 << (self::REMOVE - 483)))) !== 0) || ((($_la - 547) & ~0x3F) === 0 && ((1 << ($_la - 547)) & ((1 << (self::REORGANIZE - 547)) | (1 << (self::REPAIR - 547)) | (1 << (self::REPLICATE_DO_DB - 547)) | (1 << (self::REPLICATE_DO_TABLE - 547)) | (1 << (self::REPLICATE_IGNORE_DB - 547)) | (1 << (self::REPLICATE_IGNORE_TABLE - 547)) | (1 << (self::REPLICATE_REWRITE_DB - 547)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 547)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 547)) | (1 << (self::REPLICATION - 547)) | (1 << (self::RESET - 547)) | (1 << (self::RESUME - 547)) | (1 << (self::RETURNED_SQLSTATE - 547)) | (1 << (self::RETURNS - 547)) | (1 << (self::ROLE - 547)) | (1 << (self::ROLLBACK - 547)) | (1 << (self::ROLLUP - 547)) | (1 << (self::ROTATE - 547)) | (1 << (self::ROW - 547)) | (1 << (self::ROWS - 547)) | (1 << (self::ROW_FORMAT - 547)) | (1 << (self::SAVEPOINT - 547)) | (1 << (self::SCHEDULE - 547)) | (1 << (self::SECURITY - 547)) | (1 << (self::SERVER - 547)) | (1 << (self::SESSION - 547)) | (1 << (self::SHARE - 547)) | (1 << (self::SHARED - 547)) | (1 << (self::SIGNED - 547)) | (1 << (self::SIMPLE - 547)) | (1 << (self::SLAVE - 547)) | (1 << (self::SLOW - 547)) | (1 << (self::SNAPSHOT - 547)) | (1 << (self::SOCKET - 547)) | (1 << (self::SOME - 547)) | (1 << (self::SONAME - 547)) | (1 << (self::SOUNDS - 547)) | (1 << (self::SOURCE - 547)) | (1 << (self::SQL_AFTER_GTIDS - 547)) | (1 << (self::SQL_AFTER_MTS_GAPS - 547)) | (1 << (self::SQL_BEFORE_GTIDS - 547)) | (1 << (self::SQL_BUFFER_RESULT - 547)) | (1 << (self::SQL_CACHE - 547)) | (1 << (self::SQL_NO_CACHE - 547)) | (1 << (self::SQL_THREAD - 547)) | (1 << (self::START - 547)) | (1 << (self::STARTS - 547)) | (1 << (self::STATS_AUTO_RECALC - 547)) | (1 << (self::STATS_PERSISTENT - 547)) | (1 << (self::STATS_SAMPLE_PAGES - 547)) | (1 << (self::STATUS - 547)) | (1 << (self::STOP - 547)) | (1 << (self::STORAGE - 547)) | (1 << (self::STRING - 547)) | (1 << (self::SUBCLASS_ORIGIN - 547)) | (1 << (self::SUBJECT - 547)) | (1 << (self::SUBPARTITION - 547)) | (1 << (self::SUBPARTITIONS - 547)) | (1 << (self::SUSPEND - 547)) | (1 << (self::SWAPS - 547)) | (1 << (self::SWITCHES - 547)) | (1 << (self::TABLE_NAME - 547)))) !== 0) || ((($_la - 611) & ~0x3F) === 0 && ((1 << ($_la - 611)) & ((1 << (self::TABLESPACE - 611)) | (1 << (self::TEMPORARY - 611)) | (1 << (self::TEMPTABLE - 611)) | (1 << (self::THAN - 611)) | (1 << (self::TRADITIONAL - 611)) | (1 << (self::TRANSACTION - 611)) | (1 << (self::TRANSACTIONAL - 611)) | (1 << (self::TRIGGERS - 611)) | (1 << (self::TRUNCATE - 611)) | (1 << (self::UNDEFINED - 611)) | (1 << (self::UNDOFILE - 611)) | (1 << (self::UNDO_BUFFER_SIZE - 611)) | (1 << (self::UNINSTALL - 611)) | (1 << (self::UNKNOWN - 611)) | (1 << (self::UNTIL - 611)) | (1 << (self::UPGRADE - 611)) | (1 << (self::USER - 611)) | (1 << (self::USE_FRM - 611)) | (1 << (self::USER_RESOURCES - 611)) | (1 << (self::VALIDATION - 611)) | (1 << (self::VALUE - 611)) | (1 << (self::VARIABLES - 611)) | (1 << (self::VIEW - 611)) | (1 << (self::VISIBLE - 611)) | (1 << (self::WAIT - 611)) | (1 << (self::WARNINGS - 611)) | (1 << (self::WITHOUT - 611)) | (1 << (self::WORK - 611)) | (1 << (self::WRAPPER - 611)) | (1 << (self::X509 - 611)) | (1 << (self::XA - 611)) | (1 << (self::XML - 611)) | (1 << (self::EUR - 611)) | (1 << (self::USA - 611)) | (1 << (self::JIS - 611)) | (1 << (self::ISO - 611)) | (1 << (self::INTERNAL - 611)) | (1 << (self::QUARTER - 611)) | (1 << (self::MONTH - 611)) | (1 << (self::DAY - 611)) | (1 << (self::HOUR - 611)) | (1 << (self::MINUTE - 611)) | (1 << (self::WEEK - 611)) | (1 << (self::SECOND - 611)) | (1 << (self::MICROSECOND - 611)) | (1 << (self::TABLES - 611)) | (1 << (self::ROUTINE - 611)) | (1 << (self::EXECUTE - 611)) | (1 << (self::FILE - 611)) | (1 << (self::PROCESS - 611)) | (1 << (self::RELOAD - 611)) | (1 << (self::SHUTDOWN - 611)) | (1 << (self::SUPER - 611)) | (1 << (self::PRIVILEGES - 611)) | (1 << (self::AUDIT_ADMIN - 611)) | (1 << (self::BACKUP_ADMIN - 611)) | (1 << (self::BINLOG_ADMIN - 611)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 611)) | (1 << (self::CLONE_ADMIN - 611)))) !== 0) || ((($_la - 675) & ~0x3F) === 0 && ((1 << ($_la - 675)) & ((1 << (self::CONNECTION_ADMIN - 675)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 675)) | (1 << (self::FIREWALL_ADMIN - 675)) | (1 << (self::FIREWALL_USER - 675)) | (1 << (self::GROUP_REPLICATION_ADMIN - 675)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 675)) | (1 << (self::NDB_STORED_USER - 675)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 675)) | (1 << (self::REPLICATION_APPLIER - 675)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 675)) | (1 << (self::RESOURCE_GROUP_ADMIN - 675)) | (1 << (self::RESOURCE_GROUP_USER - 675)) | (1 << (self::ROLE_ADMIN - 675)) | (1 << (self::SESSION_VARIABLES_ADMIN - 675)) | (1 << (self::SET_USER_ID - 675)) | (1 << (self::SHOW_ROUTINE - 675)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 675)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 675)) | (1 << (self::VERSION_TOKEN_ADMIN - 675)) | (1 << (self::XA_RECOVER_ADMIN - 675)) | (1 << (self::ARMSCII8 - 675)) | (1 << (self::ASCII - 675)) | (1 << (self::BIG5 - 675)) | (1 << (self::CP1250 - 675)) | (1 << (self::CP1251 - 675)) | (1 << (self::CP1256 - 675)) | (1 << (self::CP1257 - 675)) | (1 << (self::CP850 - 675)) | (1 << (self::CP852 - 675)) | (1 << (self::CP866 - 675)) | (1 << (self::CP932 - 675)) | (1 << (self::DEC8 - 675)) | (1 << (self::EUCJPMS - 675)) | (1 << (self::EUCKR - 675)) | (1 << (self::GB18030 - 675)) | (1 << (self::GB2312 - 675)) | (1 << (self::GBK - 675)) | (1 << (self::GEOSTD8 - 675)) | (1 << (self::GREEK - 675)) | (1 << (self::HEBREW - 675)) | (1 << (self::HP8 - 675)) | (1 << (self::KEYBCS2 - 675)) | (1 << (self::KOI8R - 675)) | (1 << (self::KOI8U - 675)) | (1 << (self::LATIN1 - 675)) | (1 << (self::LATIN2 - 675)) | (1 << (self::LATIN5 - 675)) | (1 << (self::LATIN7 - 675)) | (1 << (self::MACCE - 675)) | (1 << (self::MACROMAN - 675)) | (1 << (self::SJIS - 675)) | (1 << (self::SWE7 - 675)) | (1 << (self::TIS620 - 675)) | (1 << (self::UCS2 - 675)) | (1 << (self::UJIS - 675)) | (1 << (self::UTF16 - 675)) | (1 << (self::UTF16LE - 675)) | (1 << (self::UTF32 - 675)))) !== 0) || ((($_la - 739) & ~0x3F) === 0 && ((1 << ($_la - 739)) & ((1 << (self::UTF8 - 739)) | (1 << (self::UTF8MB3 - 739)) | (1 << (self::UTF8MB4 - 739)) | (1 << (self::ARCHIVE - 739)) | (1 << (self::BLACKHOLE - 739)) | (1 << (self::CSV - 739)) | (1 << (self::FEDERATED - 739)) | (1 << (self::INNODB - 739)) | (1 << (self::MEMORY - 739)) | (1 << (self::MRG_MYISAM - 739)) | (1 << (self::MYISAM - 739)) | (1 << (self::NDB - 739)) | (1 << (self::NDBCLUSTER - 739)) | (1 << (self::PERFORMANCE_SCHEMA - 739)) | (1 << (self::TOKUDB - 739)) | (1 << (self::REPEATABLE - 739)) | (1 << (self::COMMITTED - 739)) | (1 << (self::UNCOMMITTED - 739)) | (1 << (self::SERIALIZABLE - 739)) | (1 << (self::GEOMETRYCOLLECTION - 739)) | (1 << (self::LINESTRING - 739)) | (1 << (self::MULTILINESTRING - 739)) | (1 << (self::MULTIPOINT - 739)) | (1 << (self::MULTIPOLYGON - 739)) | (1 << (self::POINT - 739)) | (1 << (self::POLYGON - 739)) | (1 << (self::ABS - 739)) | (1 << (self::ACOS - 739)) | (1 << (self::ADDDATE - 739)) | (1 << (self::ADDTIME - 739)) | (1 << (self::AES_DECRYPT - 739)) | (1 << (self::AES_ENCRYPT - 739)) | (1 << (self::AREA - 739)) | (1 << (self::ASBINARY - 739)) | (1 << (self::ASIN - 739)) | (1 << (self::ASTEXT - 739)) | (1 << (self::ASWKB - 739)) | (1 << (self::ASWKT - 739)) | (1 << (self::ASYMMETRIC_DECRYPT - 739)) | (1 << (self::ASYMMETRIC_DERIVE - 739)) | (1 << (self::ASYMMETRIC_ENCRYPT - 739)) | (1 << (self::ASYMMETRIC_SIGN - 739)) | (1 << (self::ASYMMETRIC_VERIFY - 739)) | (1 << (self::ATAN - 739)) | (1 << (self::ATAN2 - 739)) | (1 << (self::BENCHMARK - 739)) | (1 << (self::BIN - 739)) | (1 << (self::BIT_COUNT - 739)) | (1 << (self::BIT_LENGTH - 739)) | (1 << (self::BUFFER - 739)) | (1 << (self::CATALOG_NAME - 739)) | (1 << (self::CEIL - 739)) | (1 << (self::CEILING - 739)) | (1 << (self::CENTROID - 739)) | (1 << (self::CHARACTER_LENGTH - 739)) | (1 << (self::CHARSET - 739)) | (1 << (self::CHAR_LENGTH - 739)) | (1 << (self::COERCIBILITY - 739)) | (1 << (self::COLLATION - 739)) | (1 << (self::COMPRESS - 739)) | (1 << (self::CONCAT - 739)) | (1 << (self::CONCAT_WS - 739)))) !== 0) || ((($_la - 803) & ~0x3F) === 0 && ((1 << ($_la - 803)) & ((1 << (self::CONNECTION_ID - 803)) | (1 << (self::CONV - 803)) | (1 << (self::CONVERT_TZ - 803)) | (1 << (self::COS - 803)) | (1 << (self::COT - 803)) | (1 << (self::CRC32 - 803)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 803)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 803)) | (1 << (self::CREATE_DH_PARAMETERS - 803)) | (1 << (self::CREATE_DIGEST - 803)) | (1 << (self::CROSSES - 803)) | (1 << (self::DATEDIFF - 803)) | (1 << (self::DATE_FORMAT - 803)) | (1 << (self::DAYNAME - 803)) | (1 << (self::DAYOFMONTH - 803)) | (1 << (self::DAYOFWEEK - 803)) | (1 << (self::DAYOFYEAR - 803)) | (1 << (self::DECODE - 803)) | (1 << (self::DEGREES - 803)) | (1 << (self::DES_DECRYPT - 803)) | (1 << (self::DES_ENCRYPT - 803)) | (1 << (self::DIMENSION - 803)) | (1 << (self::DISJOINT - 803)) | (1 << (self::ELT - 803)) | (1 << (self::ENCODE - 803)) | (1 << (self::ENCRYPT - 803)) | (1 << (self::ENDPOINT - 803)) | (1 << (self::ENVELOPE - 803)) | (1 << (self::EQUALS - 803)) | (1 << (self::EXP - 803)) | (1 << (self::EXPORT_SET - 803)) | (1 << (self::EXTERIORRING - 803)) | (1 << (self::EXTRACTVALUE - 803)) | (1 << (self::FIELD - 803)) | (1 << (self::FIND_IN_SET - 803)) | (1 << (self::FLOOR - 803)) | (1 << (self::FORMAT - 803)) | (1 << (self::FOUND_ROWS - 803)) | (1 << (self::FROM_BASE64 - 803)) | (1 << (self::FROM_DAYS - 803)) | (1 << (self::FROM_UNIXTIME - 803)) | (1 << (self::GEOMCOLLFROMTEXT - 803)) | (1 << (self::GEOMCOLLFROMWKB - 803)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 803)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 803)) | (1 << (self::GEOMETRYFROMTEXT - 803)) | (1 << (self::GEOMETRYFROMWKB - 803)) | (1 << (self::GEOMETRYN - 803)) | (1 << (self::GEOMETRYTYPE - 803)) | (1 << (self::GEOMFROMTEXT - 803)) | (1 << (self::GEOMFROMWKB - 803)) | (1 << (self::GET_FORMAT - 803)) | (1 << (self::GET_LOCK - 803)) | (1 << (self::GLENGTH - 803)) | (1 << (self::GREATEST - 803)) | (1 << (self::GTID_SUBSET - 803)) | (1 << (self::GTID_SUBTRACT - 803)) | (1 << (self::HEX - 803)) | (1 << (self::IFNULL - 803)) | (1 << (self::INET6_ATON - 803)) | (1 << (self::INET6_NTOA - 803)) | (1 << (self::INET_ATON - 803)) | (1 << (self::INET_NTOA - 803)) | (1 << (self::INSTR - 803)))) !== 0) || ((($_la - 867) & ~0x3F) === 0 && ((1 << ($_la - 867)) & ((1 << (self::INTERIORRINGN - 867)) | (1 << (self::INTERSECTS - 867)) | (1 << (self::ISCLOSED - 867)) | (1 << (self::ISEMPTY - 867)) | (1 << (self::ISNULL - 867)) | (1 << (self::ISSIMPLE - 867)) | (1 << (self::IS_FREE_LOCK - 867)) | (1 << (self::IS_IPV4 - 867)) | (1 << (self::IS_IPV4_COMPAT - 867)) | (1 << (self::IS_IPV4_MAPPED - 867)) | (1 << (self::IS_IPV6 - 867)) | (1 << (self::IS_USED_LOCK - 867)) | (1 << (self::LAST_INSERT_ID - 867)) | (1 << (self::LCASE - 867)) | (1 << (self::LEAST - 867)) | (1 << (self::LENGTH - 867)) | (1 << (self::LINEFROMTEXT - 867)) | (1 << (self::LINEFROMWKB - 867)) | (1 << (self::LINESTRINGFROMTEXT - 867)) | (1 << (self::LINESTRINGFROMWKB - 867)) | (1 << (self::LN - 867)) | (1 << (self::LOAD_FILE - 867)) | (1 << (self::LOCATE - 867)) | (1 << (self::LOG - 867)) | (1 << (self::LOG10 - 867)) | (1 << (self::LOG2 - 867)) | (1 << (self::LOWER - 867)) | (1 << (self::LPAD - 867)) | (1 << (self::LTRIM - 867)) | (1 << (self::MAKEDATE - 867)) | (1 << (self::MAKETIME - 867)) | (1 << (self::MAKE_SET - 867)) | (1 << (self::MASTER_POS_WAIT - 867)) | (1 << (self::MBRCONTAINS - 867)) | (1 << (self::MBRDISJOINT - 867)) | (1 << (self::MBREQUAL - 867)) | (1 << (self::MBRINTERSECTS - 867)) | (1 << (self::MBROVERLAPS - 867)) | (1 << (self::MBRTOUCHES - 867)) | (1 << (self::MBRWITHIN - 867)) | (1 << (self::MD5 - 867)) | (1 << (self::MLINEFROMTEXT - 867)) | (1 << (self::MLINEFROMWKB - 867)) | (1 << (self::MONTHNAME - 867)) | (1 << (self::MPOINTFROMTEXT - 867)) | (1 << (self::MPOINTFROMWKB - 867)) | (1 << (self::MPOLYFROMTEXT - 867)) | (1 << (self::MPOLYFROMWKB - 867)) | (1 << (self::MULTILINESTRINGFROMTEXT - 867)) | (1 << (self::MULTILINESTRINGFROMWKB - 867)) | (1 << (self::MULTIPOINTFROMTEXT - 867)) | (1 << (self::MULTIPOINTFROMWKB - 867)) | (1 << (self::MULTIPOLYGONFROMTEXT - 867)) | (1 << (self::MULTIPOLYGONFROMWKB - 867)) | (1 << (self::NAME_CONST - 867)) | (1 << (self::NULLIF - 867)) | (1 << (self::NUMGEOMETRIES - 867)) | (1 << (self::NUMINTERIORRINGS - 867)) | (1 << (self::NUMPOINTS - 867)) | (1 << (self::OCT - 867)) | (1 << (self::OCTET_LENGTH - 867)) | (1 << (self::ORD - 867)) | (1 << (self::OVERLAPS - 867)) | (1 << (self::PERIOD_ADD - 867)))) !== 0) || ((($_la - 931) & ~0x3F) === 0 && ((1 << ($_la - 931)) & ((1 << (self::PERIOD_DIFF - 931)) | (1 << (self::PI - 931)) | (1 << (self::POINTFROMTEXT - 931)) | (1 << (self::POINTFROMWKB - 931)) | (1 << (self::POINTN - 931)) | (1 << (self::POLYFROMTEXT - 931)) | (1 << (self::POLYFROMWKB - 931)) | (1 << (self::POLYGONFROMTEXT - 931)) | (1 << (self::POLYGONFROMWKB - 931)) | (1 << (self::POW - 931)) | (1 << (self::POWER - 931)) | (1 << (self::QUOTE - 931)) | (1 << (self::RADIANS - 931)) | (1 << (self::RAND - 931)) | (1 << (self::RANDOM_BYTES - 931)) | (1 << (self::RELEASE_LOCK - 931)) | (1 << (self::REVERSE - 931)) | (1 << (self::ROUND - 931)) | (1 << (self::ROW_COUNT - 931)) | (1 << (self::RPAD - 931)) | (1 << (self::RTRIM - 931)) | (1 << (self::SEC_TO_TIME - 931)) | (1 << (self::SESSION_USER - 931)) | (1 << (self::SHA - 931)) | (1 << (self::SHA1 - 931)) | (1 << (self::SHA2 - 931)) | (1 << (self::SCHEMA_NAME - 931)) | (1 << (self::SIGN - 931)) | (1 << (self::SIN - 931)) | (1 << (self::SLEEP - 931)) | (1 << (self::SOUNDEX - 931)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 931)) | (1 << (self::SQRT - 931)) | (1 << (self::SRID - 931)) | (1 << (self::STARTPOINT - 931)) | (1 << (self::STRCMP - 931)) | (1 << (self::STR_TO_DATE - 931)) | (1 << (self::ST_AREA - 931)) | (1 << (self::ST_ASBINARY - 931)) | (1 << (self::ST_ASTEXT - 931)) | (1 << (self::ST_ASWKB - 931)) | (1 << (self::ST_ASWKT - 931)) | (1 << (self::ST_BUFFER - 931)) | (1 << (self::ST_CENTROID - 931)) | (1 << (self::ST_CONTAINS - 931)) | (1 << (self::ST_CROSSES - 931)) | (1 << (self::ST_DIFFERENCE - 931)) | (1 << (self::ST_DIMENSION - 931)) | (1 << (self::ST_DISJOINT - 931)) | (1 << (self::ST_DISTANCE - 931)) | (1 << (self::ST_ENDPOINT - 931)) | (1 << (self::ST_ENVELOPE - 931)) | (1 << (self::ST_EQUALS - 931)) | (1 << (self::ST_EXTERIORRING - 931)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 931)) | (1 << (self::ST_GEOMCOLLFROMTXT - 931)) | (1 << (self::ST_GEOMCOLLFROMWKB - 931)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 931)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 931)) | (1 << (self::ST_GEOMETRYFROMTEXT - 931)) | (1 << (self::ST_GEOMETRYFROMWKB - 931)) | (1 << (self::ST_GEOMETRYN - 931)) | (1 << (self::ST_GEOMETRYTYPE - 931)) | (1 << (self::ST_GEOMFROMTEXT - 931)))) !== 0) || ((($_la - 995) & ~0x3F) === 0 && ((1 << ($_la - 995)) & ((1 << (self::ST_GEOMFROMWKB - 995)) | (1 << (self::ST_INTERIORRINGN - 995)) | (1 << (self::ST_INTERSECTION - 995)) | (1 << (self::ST_INTERSECTS - 995)) | (1 << (self::ST_ISCLOSED - 995)) | (1 << (self::ST_ISEMPTY - 995)) | (1 << (self::ST_ISSIMPLE - 995)) | (1 << (self::ST_LINEFROMTEXT - 995)) | (1 << (self::ST_LINEFROMWKB - 995)) | (1 << (self::ST_LINESTRINGFROMTEXT - 995)) | (1 << (self::ST_LINESTRINGFROMWKB - 995)) | (1 << (self::ST_NUMGEOMETRIES - 995)) | (1 << (self::ST_NUMINTERIORRING - 995)) | (1 << (self::ST_NUMINTERIORRINGS - 995)) | (1 << (self::ST_NUMPOINTS - 995)) | (1 << (self::ST_OVERLAPS - 995)) | (1 << (self::ST_POINTFROMTEXT - 995)) | (1 << (self::ST_POINTFROMWKB - 995)) | (1 << (self::ST_POINTN - 995)) | (1 << (self::ST_POLYFROMTEXT - 995)) | (1 << (self::ST_POLYFROMWKB - 995)) | (1 << (self::ST_POLYGONFROMTEXT - 995)) | (1 << (self::ST_POLYGONFROMWKB - 995)) | (1 << (self::ST_SRID - 995)) | (1 << (self::ST_STARTPOINT - 995)) | (1 << (self::ST_SYMDIFFERENCE - 995)) | (1 << (self::ST_TOUCHES - 995)) | (1 << (self::ST_UNION - 995)) | (1 << (self::ST_WITHIN - 995)) | (1 << (self::ST_X - 995)) | (1 << (self::ST_Y - 995)) | (1 << (self::SUBDATE - 995)) | (1 << (self::SUBSTRING_INDEX - 995)) | (1 << (self::SUBTIME - 995)) | (1 << (self::SYSTEM_USER - 995)) | (1 << (self::TAN - 995)) | (1 << (self::TIMEDIFF - 995)) | (1 << (self::TIMESTAMPADD - 995)) | (1 << (self::TIMESTAMPDIFF - 995)) | (1 << (self::TIME_FORMAT - 995)) | (1 << (self::TIME_TO_SEC - 995)) | (1 << (self::TOUCHES - 995)) | (1 << (self::TO_BASE64 - 995)) | (1 << (self::TO_DAYS - 995)) | (1 << (self::TO_SECONDS - 995)) | (1 << (self::UCASE - 995)) | (1 << (self::UNCOMPRESS - 995)) | (1 << (self::UNCOMPRESSED_LENGTH - 995)) | (1 << (self::UNHEX - 995)) | (1 << (self::UNIX_TIMESTAMP - 995)) | (1 << (self::UPDATEXML - 995)) | (1 << (self::UPPER - 995)) | (1 << (self::UUID - 995)) | (1 << (self::UUID_SHORT - 995)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 995)) | (1 << (self::VERSION - 995)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 995)) | (1 << (self::WEEKDAY - 995)) | (1 << (self::WEEKOFYEAR - 995)) | (1 << (self::WEIGHT_STRING - 995)) | (1 << (self::WITHIN - 995)) | (1 << (self::YEARWEEK - 995)) | (1 << (self::Y_FUNCTION - 995)) | (1 << (self::X_FUNCTION - 995)))) !== 0) || ((($_la - 1074) & ~0x3F) === 0 && ((1 << ($_la - 1074)) & ((1 << (self::MOD - 1074)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1074)) | (1 << (self::STRING_LITERAL - 1074)) | (1 << (self::ID - 1074)) | (1 << (self::REVERSE_QUOTE_ID - 1074)) | (1 << (self::OPTIONAL - 1074)))) !== 0)) {
                $this->setState(3893);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::AS) {
                    $this->setState(3892);
                    $this->match(self::AS);
                }
                $this->setState(3895);
                $this->uid();
            }
            $this->setState(3898);
            $this->lockAction();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lockAction(): Context\LockActionContext
    {
        $localContext = new Context\LockActionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 288, self::RULE_lockAction);

        try {
            $this->setState(3908);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::READ:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3900);
                    $this->match(self::READ);
                    $this->setState(3902);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LOCAL) {
                        $this->setState(3901);
                        $this->match(self::LOCAL);
                    }
                    break;
                case self::LOW_PRIORITY:
                case self::WRITE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3905);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LOW_PRIORITY) {
                        $this->setState(3904);
                        $this->match(self::LOW_PRIORITY);
                    }
                    $this->setState(3907);
                    $this->match(self::WRITE);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function transactionOption(): Context\TransactionOptionContext
    {
        $localContext = new Context\TransactionOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 290, self::RULE_transactionOption);

        try {
            $this->setState(3917);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 569, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3910);
                    $this->match(self::ISOLATION);
                    $this->setState(3911);
                    $this->match(self::LEVEL);
                    $this->setState(3912);
                    $this->transactionLevel();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3913);
                    $this->match(self::READ);
                    $this->setState(3914);
                    $this->match(self::WRITE);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3915);
                    $this->match(self::READ);
                    $this->setState(3916);
                    $this->match(self::ONLY);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function transactionLevel(): Context\TransactionLevelContext
    {
        $localContext = new Context\TransactionLevelContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 292, self::RULE_transactionLevel);

        try {
            $this->setState(3926);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 570, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(3919);
                    $this->match(self::REPEATABLE);
                    $this->setState(3920);
                    $this->match(self::READ);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(3921);
                    $this->match(self::READ);
                    $this->setState(3922);
                    $this->match(self::COMMITTED);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(3923);
                    $this->match(self::READ);
                    $this->setState(3924);
                    $this->match(self::UNCOMMITTED);
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(3925);
                    $this->match(self::SERIALIZABLE);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function changeMaster(): Context\ChangeMasterContext
    {
        $localContext = new Context\ChangeMasterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 294, self::RULE_changeMaster);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3928);
            $this->match(self::CHANGE);
            $this->setState(3929);
            $this->match(self::MASTER);
            $this->setState(3930);
            $this->match(self::TO);
            $this->setState(3931);
            $this->masterOption();
            $this->setState(3936);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3932);
                $this->match(self::COMMA);
                $this->setState(3933);
                $this->masterOption();
                $this->setState(3938);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(3940);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FOR) {
                $this->setState(3939);
                $this->channelOption();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function changeReplicationFilter(): Context\ChangeReplicationFilterContext
    {
        $localContext = new Context\ChangeReplicationFilterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 296, self::RULE_changeReplicationFilter);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3942);
            $this->match(self::CHANGE);
            $this->setState(3943);
            $this->match(self::REPLICATION);
            $this->setState(3944);
            $this->match(self::FILTER);
            $this->setState(3945);
            $this->replicationFilter();
            $this->setState(3950);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(3946);
                $this->match(self::COMMA);
                $this->setState(3947);
                $this->replicationFilter();
                $this->setState(3952);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function purgeBinaryLogs(): Context\PurgeBinaryLogsContext
    {
        $localContext = new Context\PurgeBinaryLogsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 298, self::RULE_purgeBinaryLogs);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3953);
            $this->match(self::PURGE);
            $this->setState(3954);

            $localContext->purgeFormat = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::BINARY || $_la === self::MASTER)) {
                $localContext->purgeFormat = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(3955);
            $this->match(self::LOGS);
            $this->setState(3960);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::TO:
                    $this->setState(3956);
                    $this->match(self::TO);
                    $this->setState(3957);
                    $localContext->fileName = $this->match(self::STRING_LITERAL);
                    break;
                case self::BEFORE:
                    $this->setState(3958);
                    $this->match(self::BEFORE);
                    $this->setState(3959);
                    $localContext->timeValue = $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function resetMaster(): Context\ResetMasterContext
    {
        $localContext = new Context\ResetMasterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 300, self::RULE_resetMaster);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3962);
            $this->match(self::RESET);
            $this->setState(3963);
            $this->match(self::MASTER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function resetSlave(): Context\ResetSlaveContext
    {
        $localContext = new Context\ResetSlaveContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 302, self::RULE_resetSlave);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3965);
            $this->match(self::RESET);
            $this->setState(3966);
            $this->match(self::SLAVE);
            $this->setState(3968);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ALL) {
                $this->setState(3967);
                $this->match(self::ALL);
            }
            $this->setState(3971);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FOR) {
                $this->setState(3970);
                $this->channelOption();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function startSlave(): Context\StartSlaveContext
    {
        $localContext = new Context\StartSlaveContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 304, self::RULE_startSlave);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3973);
            $this->match(self::START);
            $this->setState(3974);
            $this->match(self::SLAVE);
            $this->setState(3983);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
                $this->setState(3975);
                $this->threadType();
                $this->setState(3980);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(3976);
                    $this->match(self::COMMA);
                    $this->setState(3977);
                    $this->threadType();
                    $this->setState(3982);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
            }
            $this->setState(3987);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::UNTIL) {
                $this->setState(3985);
                $this->match(self::UNTIL);
                $this->setState(3986);
                $this->untilOption();
            }
            $this->setState(3992);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::DEFAULT_AUTH || $_la === self::PASSWORD || $_la === self::PLUGIN_DIR || $_la === self::USER) {
                $this->setState(3989);
                $this->connectionOption();
                $this->setState(3994);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(3996);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FOR) {
                $this->setState(3995);
                $this->channelOption();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function stopSlave(): Context\StopSlaveContext
    {
        $localContext = new Context\StopSlaveContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 306, self::RULE_stopSlave);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(3998);
            $this->match(self::STOP);
            $this->setState(3999);
            $this->match(self::SLAVE);
            $this->setState(4008);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IO_THREAD || $_la === self::SQL_THREAD) {
                $this->setState(4000);
                $this->threadType();
                $this->setState(4005);
                $this->errorHandler->sync($this);

                $_la = $this->input->LA(1);
                while ($_la === self::COMMA) {
                    $this->setState(4001);
                    $this->match(self::COMMA);
                    $this->setState(4002);
                    $this->threadType();
                    $this->setState(4007);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function startGroupReplication(): Context\StartGroupReplicationContext
    {
        $localContext = new Context\StartGroupReplicationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 308, self::RULE_startGroupReplication);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4010);
            $this->match(self::START);
            $this->setState(4011);
            $this->match(self::GROUP_REPLICATION);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function stopGroupReplication(): Context\StopGroupReplicationContext
    {
        $localContext = new Context\StopGroupReplicationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 310, self::RULE_stopGroupReplication);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4013);
            $this->match(self::STOP);
            $this->setState(4014);
            $this->match(self::GROUP_REPLICATION);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function masterOption(): Context\MasterOptionContext
    {
        $localContext = new Context\MasterOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 312, self::RULE_masterOption);

        try {
            $this->setState(4045);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MASTER_BIND:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_PASSWORD:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::RELAY_LOG_FILE:
                    $localContext = new Context\MasterStringOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4016);
                    $this->stringMasterOption();
                    $this->setState(4017);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4018);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_LOG_POS:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::RELAY_LOG_POS:
                    $localContext = new Context\MasterDecimalOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4020);
                    $this->decimalMasterOption();
                    $this->setState(4021);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4022);
                    $this->decimalLiteral();
                    break;
                case self::MASTER_SSL_VERIFY_SERVER_CERT:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_SSL:
                    $localContext = new Context\MasterBoolOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4024);
                    $this->boolMasterOption();
                    $this->setState(4025);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4026);

                    $localContext->boolVal = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ZERO_DECIMAL || $_la === self::ONE_DECIMAL)) {
                        $localContext->boolVal = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::MASTER_HEARTBEAT_PERIOD:
                    $localContext = new Context\MasterRealOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4028);
                    $this->match(self::MASTER_HEARTBEAT_PERIOD);
                    $this->setState(4029);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4030);
                    $this->match(self::REAL_LITERAL);
                    break;
                case self::IGNORE_SERVER_IDS:
                    $localContext = new Context\MasterUidListOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4031);
                    $this->match(self::IGNORE_SERVER_IDS);
                    $this->setState(4032);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4033);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4042);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                        $this->setState(4034);
                        $this->uid();
                        $this->setState(4039);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(4035);
                            $this->match(self::COMMA);
                            $this->setState(4036);
                            $this->uid();
                            $this->setState(4041);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    $this->setState(4044);
                    $this->match(self::RR_BRACKET);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function stringMasterOption(): Context\StringMasterOptionContext
    {
        $localContext = new Context\StringMasterOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 314, self::RULE_stringMasterOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4047);

            $_la = $this->input->LA(1);

            if (! ($_la === self::MASTER_BIND || ((($_la - 460) & ~0x3F) === 0 && ((1 << ($_la - 460)) & ((1 << (self::MASTER_HOST - 460)) | (1 << (self::MASTER_LOG_FILE - 460)) | (1 << (self::MASTER_PASSWORD - 460)) | (1 << (self::MASTER_SSL_CA - 460)) | (1 << (self::MASTER_SSL_CAPATH - 460)) | (1 << (self::MASTER_SSL_CERT - 460)) | (1 << (self::MASTER_SSL_CIPHER - 460)) | (1 << (self::MASTER_SSL_CRL - 460)) | (1 << (self::MASTER_SSL_CRLPATH - 460)) | (1 << (self::MASTER_SSL_KEY - 460)) | (1 << (self::MASTER_TLS_VERSION - 460)) | (1 << (self::MASTER_USER - 460)))) !== 0) || $_la === self::RELAY_LOG_FILE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function decimalMasterOption(): Context\DecimalMasterOptionContext
    {
        $localContext = new Context\DecimalMasterOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 316, self::RULE_decimalMasterOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4049);

            $_la = $this->input->LA(1);

            if (! (((($_la - 457) & ~0x3F) === 0 && ((1 << ($_la - 457)) & ((1 << (self::MASTER_CONNECT_RETRY - 457)) | (1 << (self::MASTER_DELAY - 457)) | (1 << (self::MASTER_LOG_POS - 457)) | (1 << (self::MASTER_PORT - 457)) | (1 << (self::MASTER_RETRY_COUNT - 457)))) !== 0) || $_la === self::RELAY_LOG_POS)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function boolMasterOption(): Context\BoolMasterOptionContext
    {
        $localContext = new Context\BoolMasterOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 318, self::RULE_boolMasterOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4051);

            $_la = $this->input->LA(1);

            if (! ($_la === self::MASTER_SSL_VERIFY_SERVER_CERT || $_la === self::MASTER_AUTO_POSITION || $_la === self::MASTER_SSL)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function channelOption(): Context\ChannelOptionContext
    {
        $localContext = new Context\ChannelOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 320, self::RULE_channelOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4053);
            $this->match(self::FOR);
            $this->setState(4054);
            $this->match(self::CHANNEL);
            $this->setState(4055);
            $this->match(self::STRING_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function replicationFilter(): Context\ReplicationFilterContext
    {
        $localContext = new Context\ReplicationFilterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 322, self::RULE_replicationFilter);

        try {
            $this->setState(4106);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::REPLICATE_DO_DB:
                    $localContext = new Context\DoDbReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4057);
                    $this->match(self::REPLICATE_DO_DB);
                    $this->setState(4058);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4059);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4060);
                    $this->uidList();
                    $this->setState(4061);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_IGNORE_DB:
                    $localContext = new Context\IgnoreDbReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4063);
                    $this->match(self::REPLICATE_IGNORE_DB);
                    $this->setState(4064);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4065);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4066);
                    $this->uidList();
                    $this->setState(4067);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_DO_TABLE:
                    $localContext = new Context\DoTableReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4069);
                    $this->match(self::REPLICATE_DO_TABLE);
                    $this->setState(4070);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4071);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4072);
                    $this->tables();
                    $this->setState(4073);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_IGNORE_TABLE:
                    $localContext = new Context\IgnoreTableReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4075);
                    $this->match(self::REPLICATE_IGNORE_TABLE);
                    $this->setState(4076);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4077);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4078);
                    $this->tables();
                    $this->setState(4079);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_WILD_DO_TABLE:
                    $localContext = new Context\WildDoTableReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4081);
                    $this->match(self::REPLICATE_WILD_DO_TABLE);
                    $this->setState(4082);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4083);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4084);
                    $this->simpleStrings();
                    $this->setState(4085);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_WILD_IGNORE_TABLE:
                    $localContext = new Context\WildIgnoreTableReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(4087);
                    $this->match(self::REPLICATE_WILD_IGNORE_TABLE);
                    $this->setState(4088);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4089);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4090);
                    $this->simpleStrings();
                    $this->setState(4091);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::REPLICATE_REWRITE_DB:
                    $localContext = new Context\RewriteDbReplicationContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(4093);
                    $this->match(self::REPLICATE_REWRITE_DB);
                    $this->setState(4094);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4095);
                    $this->match(self::LR_BRACKET);
                    $this->setState(4096);
                    $this->tablePair();
                    $this->setState(4101);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4097);
                        $this->match(self::COMMA);
                        $this->setState(4098);
                        $this->tablePair();
                        $this->setState(4103);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4104);
                    $this->match(self::RR_BRACKET);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tablePair(): Context\TablePairContext
    {
        $localContext = new Context\TablePairContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 324, self::RULE_tablePair);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4108);
            $this->match(self::LR_BRACKET);
            $this->setState(4109);
            $localContext->firstTable = $this->tableName();
            $this->setState(4110);
            $this->match(self::COMMA);
            $this->setState(4111);
            $localContext->secondTable = $this->tableName();
            $this->setState(4112);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function threadType(): Context\ThreadTypeContext
    {
        $localContext = new Context\ThreadTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 326, self::RULE_threadType);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4114);

            $_la = $this->input->LA(1);

            if (! ($_la === self::IO_THREAD || $_la === self::SQL_THREAD)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function untilOption(): Context\UntilOptionContext
    {
        $localContext = new Context\UntilOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 328, self::RULE_untilOption);

        try {
            $this->setState(4134);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SQL_AFTER_GTIDS:
                case self::SQL_BEFORE_GTIDS:
                    $localContext = new Context\GtidsUntilOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4116);

                    $localContext->gtids = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::SQL_AFTER_GTIDS || $_la === self::SQL_BEFORE_GTIDS)) {
                        $localContext->gtids = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(4117);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4118);
                    $this->gtuidSet();
                    break;
                case self::MASTER_LOG_FILE:
                    $localContext = new Context\MasterLogUntilOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4119);
                    $this->match(self::MASTER_LOG_FILE);
                    $this->setState(4120);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4121);
                    $this->match(self::STRING_LITERAL);
                    $this->setState(4122);
                    $this->match(self::COMMA);
                    $this->setState(4123);
                    $this->match(self::MASTER_LOG_POS);
                    $this->setState(4124);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4125);
                    $this->decimalLiteral();
                    break;
                case self::RELAY_LOG_FILE:
                    $localContext = new Context\RelayLogUntilOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4126);
                    $this->match(self::RELAY_LOG_FILE);
                    $this->setState(4127);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4128);
                    $this->match(self::STRING_LITERAL);
                    $this->setState(4129);
                    $this->match(self::COMMA);
                    $this->setState(4130);
                    $this->match(self::RELAY_LOG_POS);
                    $this->setState(4131);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4132);
                    $this->decimalLiteral();
                    break;
                case self::SQL_AFTER_MTS_GAPS:
                    $localContext = new Context\SqlGapsUntilOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4133);
                    $this->match(self::SQL_AFTER_MTS_GAPS);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function connectionOption(): Context\ConnectionOptionContext
    {
        $localContext = new Context\ConnectionOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 330, self::RULE_connectionOption);

        try {
            $this->setState(4148);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::USER:
                    $localContext = new Context\UserConnectionOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4136);
                    $this->match(self::USER);
                    $this->setState(4137);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4138);
                    $localContext->conOptUser = $this->match(self::STRING_LITERAL);
                    break;
                case self::PASSWORD:
                    $localContext = new Context\PasswordConnectionOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4139);
                    $this->match(self::PASSWORD);
                    $this->setState(4140);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4141);
                    $localContext->conOptPassword = $this->match(self::STRING_LITERAL);
                    break;
                case self::DEFAULT_AUTH:
                    $localContext = new Context\DefaultAuthConnectionOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4142);
                    $this->match(self::DEFAULT_AUTH);
                    $this->setState(4143);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4144);
                    $localContext->conOptDefAuth = $this->match(self::STRING_LITERAL);
                    break;
                case self::PLUGIN_DIR:
                    $localContext = new Context\PluginDirConnectionOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4145);
                    $this->match(self::PLUGIN_DIR);
                    $this->setState(4146);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(4147);
                    $localContext->conOptPluginDir = $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function gtuidSet(): Context\GtuidSetContext
    {
        $localContext = new Context\GtuidSetContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 332, self::RULE_gtuidSet);

        try {
            $this->setState(4159);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ZERO_DECIMAL:
                case self::ONE_DECIMAL:
                case self::TWO_DECIMAL:
                case self::DECIMAL_LITERAL:
                case self::REAL_LITERAL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4150);
                    $this->uuidSet();
                    $this->setState(4155);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4151);
                        $this->match(self::COMMA);
                        $this->setState(4152);
                        $this->uuidSet();
                        $this->setState(4157);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case self::STRING_LITERAL:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4158);
                    $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaStartTransaction(): Context\XaStartTransactionContext
    {
        $localContext = new Context\XaStartTransactionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 334, self::RULE_xaStartTransaction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4161);
            $this->match(self::XA);
            $this->setState(4162);

            $localContext->xaStart = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::BEGIN || $_la === self::START)) {
                $localContext->xaStart = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(4163);
            $this->xid();
            $this->setState(4165);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::JOIN || $_la === self::RESUME) {
                $this->setState(4164);

                $localContext->xaAction = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::JOIN || $_la === self::RESUME)) {
                    $localContext->xaAction = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaEndTransaction(): Context\XaEndTransactionContext
    {
        $localContext = new Context\XaEndTransactionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 336, self::RULE_xaEndTransaction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4167);
            $this->match(self::XA);
            $this->setState(4168);
            $this->match(self::END);
            $this->setState(4169);
            $this->xid();
            $this->setState(4175);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::SUSPEND) {
                $this->setState(4170);
                $this->match(self::SUSPEND);
                $this->setState(4173);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::FOR) {
                    $this->setState(4171);
                    $this->match(self::FOR);
                    $this->setState(4172);
                    $this->match(self::MIGRATE);
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaPrepareStatement(): Context\XaPrepareStatementContext
    {
        $localContext = new Context\XaPrepareStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 338, self::RULE_xaPrepareStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4177);
            $this->match(self::XA);
            $this->setState(4178);
            $this->match(self::PREPARE);
            $this->setState(4179);
            $this->xid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaCommitWork(): Context\XaCommitWorkContext
    {
        $localContext = new Context\XaCommitWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 340, self::RULE_xaCommitWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4181);
            $this->match(self::XA);
            $this->setState(4182);
            $this->match(self::COMMIT);
            $this->setState(4183);
            $this->xid();
            $this->setState(4186);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ONE) {
                $this->setState(4184);
                $this->match(self::ONE);
                $this->setState(4185);
                $this->match(self::PHASE);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaRollbackWork(): Context\XaRollbackWorkContext
    {
        $localContext = new Context\XaRollbackWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 342, self::RULE_xaRollbackWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4188);
            $this->match(self::XA);
            $this->setState(4189);
            $this->match(self::ROLLBACK);
            $this->setState(4190);
            $this->xid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xaRecoverWork(): Context\XaRecoverWorkContext
    {
        $localContext = new Context\XaRecoverWorkContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 344, self::RULE_xaRecoverWork);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4192);
            $this->match(self::XA);
            $this->setState(4193);
            $this->match(self::RECOVER);
            $this->setState(4196);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CONVERT) {
                $this->setState(4194);
                $this->match(self::CONVERT);
                $this->setState(4195);
                $this->xid();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function prepareStatement(): Context\PrepareStatementContext
    {
        $localContext = new Context\PrepareStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 346, self::RULE_prepareStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4198);
            $this->match(self::PREPARE);
            $this->setState(4199);
            $this->uid();
            $this->setState(4200);
            $this->match(self::FROM);
            $this->setState(4203);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::STRING_LITERAL:
                    $this->setState(4201);
                    $localContext->query = $this->match(self::STRING_LITERAL);
                    break;
                case self::LOCAL_ID:
                    $this->setState(4202);
                    $localContext->variable = $this->match(self::LOCAL_ID);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function executeStatement(): Context\ExecuteStatementContext
    {
        $localContext = new Context\ExecuteStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 348, self::RULE_executeStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4205);
            $this->match(self::EXECUTE);
            $this->setState(4206);
            $this->uid();
            $this->setState(4209);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USING) {
                $this->setState(4207);
                $this->match(self::USING);
                $this->setState(4208);
                $this->userVariables();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function deallocatePrepare(): Context\DeallocatePrepareContext
    {
        $localContext = new Context\DeallocatePrepareContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 350, self::RULE_deallocatePrepare);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4211);

            $localContext->dropFormat = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::DROP || $_la === self::DEALLOCATE)) {
                $localContext->dropFormat = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(4212);
            $this->match(self::PREPARE);
            $this->setState(4213);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function routineBody(): Context\RoutineBodyContext
    {
        $localContext = new Context\RoutineBodyContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 352, self::RULE_routineBody);

        try {
            $this->setState(4217);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 600, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4215);
                    $this->blockStatement();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4216);
                    $this->sqlStatement();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function blockStatement(): Context\BlockStatementContext
    {
        $localContext = new Context\BlockStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 354, self::RULE_blockStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4222);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 601, $this->ctx)) {
                case 1:
                    $this->setState(4219);
                    $this->uid();
                    $this->setState(4220);
                    $this->match(self::COLON_SYMB);
                    break;
            }
            $this->setState(4224);
            $this->match(self::BEGIN);
            $this->setState(4263);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 607, $this->ctx)) {
                case 1:
                    $this->setState(4230);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 602, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(4225);
                            $this->declareVariable();
                            $this->setState(4226);
                            $this->match(self::SEMI);
                        }

                        $this->setState(4232);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 602, $this->ctx);
                    }
                    $this->setState(4238);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 603, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(4233);
                            $this->declareCondition();
                            $this->setState(4234);
                            $this->match(self::SEMI);
                        }

                        $this->setState(4240);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 603, $this->ctx);
                    }
                    $this->setState(4246);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 604, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(4241);
                            $this->declareCursor();
                            $this->setState(4242);
                            $this->match(self::SEMI);
                        }

                        $this->setState(4248);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 604, $this->ctx);
                    }
                    $this->setState(4254);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::DECLARE) {
                        $this->setState(4249);
                        $this->declareHandler();
                        $this->setState(4250);
                        $this->match(self::SEMI);
                        $this->setState(4256);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4260);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 606, $this->ctx);

                    while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                        if ($alt === 1) {
                            $this->setState(4257);
                            $this->procedureSqlStatement();
                        }

                        $this->setState(4262);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 606, $this->ctx);
                    }
                    break;
            }
            $this->setState(4265);
            $this->match(self::END);
            $this->setState(4267);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 608, $this->ctx)) {
                case 1:
                    $this->setState(4266);
                    $this->uid();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function caseStatement(): Context\CaseStatementContext
    {
        $localContext = new Context\CaseStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 356, self::RULE_caseStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4269);
            $this->match(self::CASE);
            $this->setState(4272);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 609, $this->ctx)) {
                case 1:
                    $this->setState(4270);
                    $this->uid();
                    break;
                case 2:
                    $this->setState(4271);
                    $this->recursiveExpression(0);
                    break;
            }
            $this->setState(4275);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(4274);
                $this->caseAlternative();
                $this->setState(4277);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::WHEN);
            $this->setState(4285);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ELSE) {
                $this->setState(4279);
                $this->match(self::ELSE);
                $this->setState(4281);
                $this->errorHandler->sync($this);

                $alt = 1;

                do {
                    switch ($alt) {
                        case 1:
                            $this->setState(4280);
                            $this->procedureSqlStatement();
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }

                    $this->setState(4283);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 611, $this->ctx);
                } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            }
            $this->setState(4287);
            $this->match(self::END);
            $this->setState(4288);
            $this->match(self::CASE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ifStatement(): Context\IfStatementContext
    {
        $localContext = new Context\IfStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 358, self::RULE_ifStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4290);
            $this->match(self::IF);
            $this->setState(4291);
            $this->recursiveExpression(0);
            $this->setState(4292);
            $this->match(self::THEN);
            $this->setState(4294);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4293);
                        $localContext->procedureSqlStatement = $this->procedureSqlStatement();
                        $localContext->thenStatements[] = $localContext->procedureSqlStatement;
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4296);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 613, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            $this->setState(4301);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::ELSEIF) {
                $this->setState(4298);
                $this->elifAlternative();
                $this->setState(4303);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(4310);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ELSE) {
                $this->setState(4304);
                $this->match(self::ELSE);
                $this->setState(4306);
                $this->errorHandler->sync($this);

                $alt = 1;

                do {
                    switch ($alt) {
                        case 1:
                            $this->setState(4305);
                            $localContext->procedureSqlStatement = $this->procedureSqlStatement();
                            $localContext->elseStatements[] = $localContext->procedureSqlStatement;
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }

                    $this->setState(4308);
                    $this->errorHandler->sync($this);

                    $alt = $this->getInterpreter()->adaptivePredict($this->input, 615, $this->ctx);
                } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            }
            $this->setState(4312);
            $this->match(self::END);
            $this->setState(4313);
            $this->match(self::IF);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function iterateStatement(): Context\IterateStatementContext
    {
        $localContext = new Context\IterateStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 360, self::RULE_iterateStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4315);
            $this->match(self::ITERATE);
            $this->setState(4316);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function leaveStatement(): Context\LeaveStatementContext
    {
        $localContext = new Context\LeaveStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 362, self::RULE_leaveStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4318);
            $this->match(self::LEAVE);
            $this->setState(4319);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function loopStatement(): Context\LoopStatementContext
    {
        $localContext = new Context\LoopStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 364, self::RULE_loopStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4324);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4321);
                $this->uid();
                $this->setState(4322);
                $this->match(self::COLON_SYMB);
            }
            $this->setState(4326);
            $this->match(self::LOOP);
            $this->setState(4328);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4327);
                        $this->procedureSqlStatement();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4330);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 618, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            $this->setState(4332);
            $this->match(self::END);
            $this->setState(4333);
            $this->match(self::LOOP);
            $this->setState(4335);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4334);
                $this->uid();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function repeatStatement(): Context\RepeatStatementContext
    {
        $localContext = new Context\RepeatStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 366, self::RULE_repeatStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4340);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4337);
                $this->uid();
                $this->setState(4338);
                $this->match(self::COLON_SYMB);
            }
            $this->setState(4342);
            $this->match(self::REPEAT);
            $this->setState(4344);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4343);
                        $this->procedureSqlStatement();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4346);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 621, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            $this->setState(4348);
            $this->match(self::UNTIL);
            $this->setState(4349);
            $this->recursiveExpression(0);
            $this->setState(4350);
            $this->match(self::END);
            $this->setState(4351);
            $this->match(self::REPEAT);
            $this->setState(4353);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4352);
                $this->uid();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function returnStatement(): Context\ReturnStatementContext
    {
        $localContext = new Context\ReturnStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 368, self::RULE_returnStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4355);
            $this->match(self::RETURN);
            $this->setState(4356);
            $this->recursiveExpression(0);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function whileStatement(): Context\WhileStatementContext
    {
        $localContext = new Context\WhileStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 370, self::RULE_whileStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4361);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4358);
                $this->uid();
                $this->setState(4359);
                $this->match(self::COLON_SYMB);
            }
            $this->setState(4363);
            $this->match(self::WHILE);
            $this->setState(4364);
            $this->recursiveExpression(0);
            $this->setState(4365);
            $this->match(self::DO);
            $this->setState(4367);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4366);
                        $this->procedureSqlStatement();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4369);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 624, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
            $this->setState(4371);
            $this->match(self::END);
            $this->setState(4372);
            $this->match(self::WHILE);
            $this->setState(4374);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DATABASE - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)) | (1 << (self::LEFT - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::RIGHT - 110)) | (1 << (self::SCHEMA - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::BINARY - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)) | (1 << (self::SERIAL - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::AVG - 270)) | (1 << (self::BIT_AND - 270)) | (1 << (self::BIT_OR - 270)) | (1 << (self::BIT_XOR - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::GROUP_CONCAT - 270)) | (1 << (self::MAX - 270)) | (1 << (self::MIN - 270)) | (1 << (self::STD - 270)) | (1 << (self::STDDEV - 270)) | (1 << (self::STDDEV_POP - 270)) | (1 << (self::STDDEV_SAMP - 270)) | (1 << (self::SUM - 270)) | (1 << (self::VAR_POP - 270)) | (1 << (self::VAR_SAMP - 270)) | (1 << (self::VARIANCE - 270)) | (1 << (self::POSITION - 270)) | (1 << (self::ACCOUNT - 270)) | (1 << (self::ACTION - 270)) | (1 << (self::AFTER - 270)) | (1 << (self::AGGREGATE - 270)) | (1 << (self::ALGORITHM - 270)) | (1 << (self::ANY - 270)) | (1 << (self::AT - 270)) | (1 << (self::AUTHORS - 270)) | (1 << (self::AUTOCOMMIT - 270)) | (1 << (self::AUTOEXTEND_SIZE - 270)) | (1 << (self::AUTO_INCREMENT - 270)) | (1 << (self::AVG_ROW_LENGTH - 270)) | (1 << (self::BEGIN - 270)) | (1 << (self::BINLOG - 270)) | (1 << (self::BIT - 270)) | (1 << (self::BLOCK - 270)))) !== 0) || ((($_la - 334) & ~0x3F) === 0 && ((1 << ($_la - 334)) & ((1 << (self::BOOL - 334)) | (1 << (self::BOOLEAN - 334)) | (1 << (self::BTREE - 334)) | (1 << (self::CACHE - 334)) | (1 << (self::CASCADED - 334)) | (1 << (self::CHAIN - 334)) | (1 << (self::CHANGED - 334)) | (1 << (self::CHANNEL - 334)) | (1 << (self::CHECKSUM - 334)) | (1 << (self::PAGE_CHECKSUM - 334)) | (1 << (self::CIPHER - 334)) | (1 << (self::CLASS_ORIGIN - 334)) | (1 << (self::CLIENT - 334)) | (1 << (self::CLOSE - 334)) | (1 << (self::COALESCE - 334)) | (1 << (self::CODE - 334)) | (1 << (self::COLUMNS - 334)) | (1 << (self::COLUMN_FORMAT - 334)) | (1 << (self::COLUMN_NAME - 334)) | (1 << (self::COMMENT - 334)) | (1 << (self::COMMIT - 334)) | (1 << (self::COMPACT - 334)) | (1 << (self::COMPLETION - 334)) | (1 << (self::COMPRESSED - 334)) | (1 << (self::COMPRESSION - 334)) | (1 << (self::CONCURRENT - 334)) | (1 << (self::CONNECT - 334)) | (1 << (self::CONNECTION - 334)) | (1 << (self::CONSISTENT - 334)) | (1 << (self::CONSTRAINT_CATALOG - 334)) | (1 << (self::CONSTRAINT_SCHEMA - 334)) | (1 << (self::CONSTRAINT_NAME - 334)) | (1 << (self::CONTAINS - 334)) | (1 << (self::CONTEXT - 334)) | (1 << (self::CONTRIBUTORS - 334)) | (1 << (self::COPY - 334)) | (1 << (self::CPU - 334)) | (1 << (self::CURSOR_NAME - 334)) | (1 << (self::DATA - 334)) | (1 << (self::DATAFILE - 334)) | (1 << (self::DEALLOCATE - 334)) | (1 << (self::DEFAULT_AUTH - 334)) | (1 << (self::DEFINER - 334)) | (1 << (self::DELAY_KEY_WRITE - 334)) | (1 << (self::DES_KEY_FILE - 334)) | (1 << (self::DIRECTORY - 334)) | (1 << (self::DISABLE - 334)) | (1 << (self::DISCARD - 334)) | (1 << (self::DISK - 334)) | (1 << (self::DO - 334)) | (1 << (self::DUMPFILE - 334)) | (1 << (self::DUPLICATE - 334)) | (1 << (self::DYNAMIC - 334)) | (1 << (self::ENABLE - 334)) | (1 << (self::ENCRYPTION - 334)) | (1 << (self::END - 334)) | (1 << (self::ENDS - 334)) | (1 << (self::ENGINE - 334)) | (1 << (self::ENGINES - 334)) | (1 << (self::ERROR - 334)) | (1 << (self::ERRORS - 334)) | (1 << (self::ESCAPE - 334)) | (1 << (self::EVEN - 334)) | (1 << (self::EVENT - 334)))) !== 0) || ((($_la - 398) & ~0x3F) === 0 && ((1 << ($_la - 398)) & ((1 << (self::EVENTS - 398)) | (1 << (self::EVERY - 398)) | (1 << (self::EXCHANGE - 398)) | (1 << (self::EXCLUSIVE - 398)) | (1 << (self::EXPIRE - 398)) | (1 << (self::EXPORT - 398)) | (1 << (self::EXTENDED - 398)) | (1 << (self::EXTENT_SIZE - 398)) | (1 << (self::FAST - 398)) | (1 << (self::FAULTS - 398)) | (1 << (self::FIELDS - 398)) | (1 << (self::FILE_BLOCK_SIZE - 398)) | (1 << (self::FILTER - 398)) | (1 << (self::FIRST - 398)) | (1 << (self::FIXED - 398)) | (1 << (self::FLUSH - 398)) | (1 << (self::FOLLOWS - 398)) | (1 << (self::FOUND - 398)) | (1 << (self::FULL - 398)) | (1 << (self::FUNCTION - 398)) | (1 << (self::GENERAL - 398)) | (1 << (self::GLOBAL - 398)) | (1 << (self::GRANTS - 398)) | (1 << (self::GROUP_REPLICATION - 398)) | (1 << (self::HANDLER - 398)) | (1 << (self::HASH - 398)) | (1 << (self::HELP - 398)) | (1 << (self::HOST - 398)) | (1 << (self::HOSTS - 398)) | (1 << (self::IDENTIFIED - 398)) | (1 << (self::IGNORE_SERVER_IDS - 398)) | (1 << (self::IMPORT - 398)) | (1 << (self::INDEXES - 398)) | (1 << (self::INITIAL_SIZE - 398)) | (1 << (self::INPLACE - 398)) | (1 << (self::INSERT_METHOD - 398)) | (1 << (self::INSTALL - 398)) | (1 << (self::INSTANCE - 398)) | (1 << (self::INVISIBLE - 398)) | (1 << (self::INVOKER - 398)) | (1 << (self::IO - 398)) | (1 << (self::IO_THREAD - 398)) | (1 << (self::IPC - 398)) | (1 << (self::ISOLATION - 398)) | (1 << (self::ISSUER - 398)) | (1 << (self::JSON - 398)) | (1 << (self::KEY_BLOCK_SIZE - 398)) | (1 << (self::LANGUAGE - 398)) | (1 << (self::LAST - 398)) | (1 << (self::LEAVES - 398)) | (1 << (self::LESS - 398)) | (1 << (self::LEVEL - 398)) | (1 << (self::LIST - 398)) | (1 << (self::LOCAL - 398)) | (1 << (self::LOGFILE - 398)) | (1 << (self::LOGS - 398)) | (1 << (self::MASTER - 398)) | (1 << (self::MASTER_AUTO_POSITION - 398)) | (1 << (self::MASTER_CONNECT_RETRY - 398)) | (1 << (self::MASTER_DELAY - 398)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 398)) | (1 << (self::MASTER_HOST - 398)) | (1 << (self::MASTER_LOG_FILE - 398)))) !== 0) || ((($_la - 462) & ~0x3F) === 0 && ((1 << ($_la - 462)) & ((1 << (self::MASTER_LOG_POS - 462)) | (1 << (self::MASTER_PASSWORD - 462)) | (1 << (self::MASTER_PORT - 462)) | (1 << (self::MASTER_RETRY_COUNT - 462)) | (1 << (self::MASTER_SSL - 462)) | (1 << (self::MASTER_SSL_CA - 462)) | (1 << (self::MASTER_SSL_CAPATH - 462)) | (1 << (self::MASTER_SSL_CERT - 462)) | (1 << (self::MASTER_SSL_CIPHER - 462)) | (1 << (self::MASTER_SSL_CRL - 462)) | (1 << (self::MASTER_SSL_CRLPATH - 462)) | (1 << (self::MASTER_SSL_KEY - 462)) | (1 << (self::MASTER_TLS_VERSION - 462)) | (1 << (self::MASTER_USER - 462)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 462)) | (1 << (self::MAX_QUERIES_PER_HOUR - 462)) | (1 << (self::MAX_ROWS - 462)) | (1 << (self::MAX_SIZE - 462)) | (1 << (self::MAX_UPDATES_PER_HOUR - 462)) | (1 << (self::MAX_USER_CONNECTIONS - 462)) | (1 << (self::MEDIUM - 462)) | (1 << (self::MEMBER - 462)) | (1 << (self::MERGE - 462)) | (1 << (self::MESSAGE_TEXT - 462)) | (1 << (self::MID - 462)) | (1 << (self::MIGRATE - 462)) | (1 << (self::MIN_ROWS - 462)) | (1 << (self::MODE - 462)) | (1 << (self::MODIFY - 462)) | (1 << (self::MUTEX - 462)) | (1 << (self::MYSQL - 462)) | (1 << (self::MYSQL_ERRNO - 462)) | (1 << (self::NAME - 462)) | (1 << (self::NAMES - 462)) | (1 << (self::NCHAR - 462)) | (1 << (self::NEVER - 462)) | (1 << (self::NEXT - 462)) | (1 << (self::NO - 462)) | (1 << (self::NODEGROUP - 462)) | (1 << (self::NONE - 462)) | (1 << (self::ODBC - 462)) | (1 << (self::OFFLINE - 462)) | (1 << (self::OFFSET - 462)) | (1 << (self::OF - 462)) | (1 << (self::OJ - 462)) | (1 << (self::OLD_PASSWORD - 462)) | (1 << (self::ONE - 462)) | (1 << (self::ONLINE - 462)) | (1 << (self::ONLY - 462)) | (1 << (self::OPEN - 462)) | (1 << (self::OPTIMIZER_COSTS - 462)) | (1 << (self::OPTIONS - 462)) | (1 << (self::OWNER - 462)) | (1 << (self::PACK_KEYS - 462)) | (1 << (self::PAGE - 462)) | (1 << (self::PARSER - 462)) | (1 << (self::PARTIAL - 462)) | (1 << (self::PARTITIONING - 462)) | (1 << (self::PARTITIONS - 462)) | (1 << (self::PASSWORD - 462)) | (1 << (self::PHASE - 462)) | (1 << (self::PLUGIN - 462)) | (1 << (self::PLUGIN_DIR - 462)) | (1 << (self::PLUGINS - 462)))) !== 0) || ((($_la - 526) & ~0x3F) === 0 && ((1 << ($_la - 526)) & ((1 << (self::PORT - 526)) | (1 << (self::PRECEDES - 526)) | (1 << (self::PREPARE - 526)) | (1 << (self::PRESERVE - 526)) | (1 << (self::PREV - 526)) | (1 << (self::PROCESSLIST - 526)) | (1 << (self::PROFILE - 526)) | (1 << (self::PROFILES - 526)) | (1 << (self::PROXY - 526)) | (1 << (self::QUERY - 526)) | (1 << (self::QUICK - 526)) | (1 << (self::REBUILD - 526)) | (1 << (self::RECOVER - 526)) | (1 << (self::REDO_BUFFER_SIZE - 526)) | (1 << (self::REDUNDANT - 526)) | (1 << (self::RELAY - 526)) | (1 << (self::RELAY_LOG_FILE - 526)) | (1 << (self::RELAY_LOG_POS - 526)) | (1 << (self::RELAYLOG - 526)) | (1 << (self::REMOVE - 526)) | (1 << (self::REORGANIZE - 526)) | (1 << (self::REPAIR - 526)) | (1 << (self::REPLICATE_DO_DB - 526)) | (1 << (self::REPLICATE_DO_TABLE - 526)) | (1 << (self::REPLICATE_IGNORE_DB - 526)) | (1 << (self::REPLICATE_IGNORE_TABLE - 526)) | (1 << (self::REPLICATE_REWRITE_DB - 526)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 526)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 526)) | (1 << (self::REPLICATION - 526)) | (1 << (self::RESET - 526)) | (1 << (self::RESUME - 526)) | (1 << (self::RETURNED_SQLSTATE - 526)) | (1 << (self::RETURNS - 526)) | (1 << (self::ROLE - 526)) | (1 << (self::ROLLBACK - 526)) | (1 << (self::ROLLUP - 526)) | (1 << (self::ROTATE - 526)) | (1 << (self::ROW - 526)) | (1 << (self::ROWS - 526)) | (1 << (self::ROW_FORMAT - 526)) | (1 << (self::SAVEPOINT - 526)) | (1 << (self::SCHEDULE - 526)) | (1 << (self::SECURITY - 526)) | (1 << (self::SERVER - 526)) | (1 << (self::SESSION - 526)) | (1 << (self::SHARE - 526)) | (1 << (self::SHARED - 526)) | (1 << (self::SIGNED - 526)) | (1 << (self::SIMPLE - 526)) | (1 << (self::SLAVE - 526)) | (1 << (self::SLOW - 526)) | (1 << (self::SNAPSHOT - 526)) | (1 << (self::SOCKET - 526)) | (1 << (self::SOME - 526)) | (1 << (self::SONAME - 526)) | (1 << (self::SOUNDS - 526)) | (1 << (self::SOURCE - 526)) | (1 << (self::SQL_AFTER_GTIDS - 526)) | (1 << (self::SQL_AFTER_MTS_GAPS - 526)) | (1 << (self::SQL_BEFORE_GTIDS - 526)) | (1 << (self::SQL_BUFFER_RESULT - 526)))) !== 0) || ((($_la - 590) & ~0x3F) === 0 && ((1 << ($_la - 590)) & ((1 << (self::SQL_CACHE - 590)) | (1 << (self::SQL_NO_CACHE - 590)) | (1 << (self::SQL_THREAD - 590)) | (1 << (self::START - 590)) | (1 << (self::STARTS - 590)) | (1 << (self::STATS_AUTO_RECALC - 590)) | (1 << (self::STATS_PERSISTENT - 590)) | (1 << (self::STATS_SAMPLE_PAGES - 590)) | (1 << (self::STATUS - 590)) | (1 << (self::STOP - 590)) | (1 << (self::STORAGE - 590)) | (1 << (self::STRING - 590)) | (1 << (self::SUBCLASS_ORIGIN - 590)) | (1 << (self::SUBJECT - 590)) | (1 << (self::SUBPARTITION - 590)) | (1 << (self::SUBPARTITIONS - 590)) | (1 << (self::SUSPEND - 590)) | (1 << (self::SWAPS - 590)) | (1 << (self::SWITCHES - 590)) | (1 << (self::TABLE_NAME - 590)) | (1 << (self::TABLESPACE - 590)) | (1 << (self::TEMPORARY - 590)) | (1 << (self::TEMPTABLE - 590)) | (1 << (self::THAN - 590)) | (1 << (self::TRADITIONAL - 590)) | (1 << (self::TRANSACTION - 590)) | (1 << (self::TRANSACTIONAL - 590)) | (1 << (self::TRIGGERS - 590)) | (1 << (self::TRUNCATE - 590)) | (1 << (self::UNDEFINED - 590)) | (1 << (self::UNDOFILE - 590)) | (1 << (self::UNDO_BUFFER_SIZE - 590)) | (1 << (self::UNINSTALL - 590)) | (1 << (self::UNKNOWN - 590)) | (1 << (self::UNTIL - 590)) | (1 << (self::UPGRADE - 590)) | (1 << (self::USER - 590)) | (1 << (self::USE_FRM - 590)) | (1 << (self::USER_RESOURCES - 590)) | (1 << (self::VALIDATION - 590)) | (1 << (self::VALUE - 590)) | (1 << (self::VARIABLES - 590)) | (1 << (self::VIEW - 590)) | (1 << (self::VISIBLE - 590)) | (1 << (self::WAIT - 590)) | (1 << (self::WARNINGS - 590)) | (1 << (self::WITHOUT - 590)) | (1 << (self::WORK - 590)) | (1 << (self::WRAPPER - 590)) | (1 << (self::X509 - 590)) | (1 << (self::XA - 590)) | (1 << (self::XML - 590)) | (1 << (self::EUR - 590)) | (1 << (self::USA - 590)) | (1 << (self::JIS - 590)) | (1 << (self::ISO - 590)) | (1 << (self::INTERNAL - 590)) | (1 << (self::QUARTER - 590)) | (1 << (self::MONTH - 590)))) !== 0) || ((($_la - 654) & ~0x3F) === 0 && ((1 << ($_la - 654)) & ((1 << (self::DAY - 654)) | (1 << (self::HOUR - 654)) | (1 << (self::MINUTE - 654)) | (1 << (self::WEEK - 654)) | (1 << (self::SECOND - 654)) | (1 << (self::MICROSECOND - 654)) | (1 << (self::TABLES - 654)) | (1 << (self::ROUTINE - 654)) | (1 << (self::EXECUTE - 654)) | (1 << (self::FILE - 654)) | (1 << (self::PROCESS - 654)) | (1 << (self::RELOAD - 654)) | (1 << (self::SHUTDOWN - 654)) | (1 << (self::SUPER - 654)) | (1 << (self::PRIVILEGES - 654)) | (1 << (self::AUDIT_ADMIN - 654)) | (1 << (self::BACKUP_ADMIN - 654)) | (1 << (self::BINLOG_ADMIN - 654)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 654)) | (1 << (self::CLONE_ADMIN - 654)) | (1 << (self::CONNECTION_ADMIN - 654)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 654)) | (1 << (self::FIREWALL_ADMIN - 654)) | (1 << (self::FIREWALL_USER - 654)) | (1 << (self::GROUP_REPLICATION_ADMIN - 654)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 654)) | (1 << (self::NDB_STORED_USER - 654)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 654)) | (1 << (self::REPLICATION_APPLIER - 654)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_ADMIN - 654)) | (1 << (self::RESOURCE_GROUP_USER - 654)) | (1 << (self::ROLE_ADMIN - 654)) | (1 << (self::SESSION_VARIABLES_ADMIN - 654)) | (1 << (self::SET_USER_ID - 654)) | (1 << (self::SHOW_ROUTINE - 654)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 654)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 654)) | (1 << (self::VERSION_TOKEN_ADMIN - 654)) | (1 << (self::XA_RECOVER_ADMIN - 654)) | (1 << (self::ARMSCII8 - 654)) | (1 << (self::ASCII - 654)) | (1 << (self::BIG5 - 654)) | (1 << (self::CP1250 - 654)) | (1 << (self::CP1251 - 654)) | (1 << (self::CP1256 - 654)) | (1 << (self::CP1257 - 654)) | (1 << (self::CP850 - 654)) | (1 << (self::CP852 - 654)) | (1 << (self::CP866 - 654)) | (1 << (self::CP932 - 654)) | (1 << (self::DEC8 - 654)) | (1 << (self::EUCJPMS - 654)) | (1 << (self::EUCKR - 654)) | (1 << (self::GB18030 - 654)) | (1 << (self::GB2312 - 654)) | (1 << (self::GBK - 654)))) !== 0) || ((($_la - 718) & ~0x3F) === 0 && ((1 << ($_la - 718)) & ((1 << (self::GEOSTD8 - 718)) | (1 << (self::GREEK - 718)) | (1 << (self::HEBREW - 718)) | (1 << (self::HP8 - 718)) | (1 << (self::KEYBCS2 - 718)) | (1 << (self::KOI8R - 718)) | (1 << (self::KOI8U - 718)) | (1 << (self::LATIN1 - 718)) | (1 << (self::LATIN2 - 718)) | (1 << (self::LATIN5 - 718)) | (1 << (self::LATIN7 - 718)) | (1 << (self::MACCE - 718)) | (1 << (self::MACROMAN - 718)) | (1 << (self::SJIS - 718)) | (1 << (self::SWE7 - 718)) | (1 << (self::TIS620 - 718)) | (1 << (self::UCS2 - 718)) | (1 << (self::UJIS - 718)) | (1 << (self::UTF16 - 718)) | (1 << (self::UTF16LE - 718)) | (1 << (self::UTF32 - 718)) | (1 << (self::UTF8 - 718)) | (1 << (self::UTF8MB3 - 718)) | (1 << (self::UTF8MB4 - 718)) | (1 << (self::ARCHIVE - 718)) | (1 << (self::BLACKHOLE - 718)) | (1 << (self::CSV - 718)) | (1 << (self::FEDERATED - 718)) | (1 << (self::INNODB - 718)) | (1 << (self::MEMORY - 718)) | (1 << (self::MRG_MYISAM - 718)) | (1 << (self::MYISAM - 718)) | (1 << (self::NDB - 718)) | (1 << (self::NDBCLUSTER - 718)) | (1 << (self::PERFORMANCE_SCHEMA - 718)) | (1 << (self::TOKUDB - 718)) | (1 << (self::REPEATABLE - 718)) | (1 << (self::COMMITTED - 718)) | (1 << (self::UNCOMMITTED - 718)) | (1 << (self::SERIALIZABLE - 718)) | (1 << (self::GEOMETRYCOLLECTION - 718)) | (1 << (self::LINESTRING - 718)) | (1 << (self::MULTILINESTRING - 718)) | (1 << (self::MULTIPOINT - 718)) | (1 << (self::MULTIPOLYGON - 718)) | (1 << (self::POINT - 718)) | (1 << (self::POLYGON - 718)) | (1 << (self::ABS - 718)) | (1 << (self::ACOS - 718)) | (1 << (self::ADDDATE - 718)) | (1 << (self::ADDTIME - 718)) | (1 << (self::AES_DECRYPT - 718)) | (1 << (self::AES_ENCRYPT - 718)) | (1 << (self::AREA - 718)) | (1 << (self::ASBINARY - 718)) | (1 << (self::ASIN - 718)) | (1 << (self::ASTEXT - 718)) | (1 << (self::ASWKB - 718)) | (1 << (self::ASWKT - 718)) | (1 << (self::ASYMMETRIC_DECRYPT - 718)) | (1 << (self::ASYMMETRIC_DERIVE - 718)) | (1 << (self::ASYMMETRIC_ENCRYPT - 718)))) !== 0) || ((($_la - 782) & ~0x3F) === 0 && ((1 << ($_la - 782)) & ((1 << (self::ASYMMETRIC_SIGN - 782)) | (1 << (self::ASYMMETRIC_VERIFY - 782)) | (1 << (self::ATAN - 782)) | (1 << (self::ATAN2 - 782)) | (1 << (self::BENCHMARK - 782)) | (1 << (self::BIN - 782)) | (1 << (self::BIT_COUNT - 782)) | (1 << (self::BIT_LENGTH - 782)) | (1 << (self::BUFFER - 782)) | (1 << (self::CATALOG_NAME - 782)) | (1 << (self::CEIL - 782)) | (1 << (self::CEILING - 782)) | (1 << (self::CENTROID - 782)) | (1 << (self::CHARACTER_LENGTH - 782)) | (1 << (self::CHARSET - 782)) | (1 << (self::CHAR_LENGTH - 782)) | (1 << (self::COERCIBILITY - 782)) | (1 << (self::COLLATION - 782)) | (1 << (self::COMPRESS - 782)) | (1 << (self::CONCAT - 782)) | (1 << (self::CONCAT_WS - 782)) | (1 << (self::CONNECTION_ID - 782)) | (1 << (self::CONV - 782)) | (1 << (self::CONVERT_TZ - 782)) | (1 << (self::COS - 782)) | (1 << (self::COT - 782)) | (1 << (self::CRC32 - 782)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 782)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 782)) | (1 << (self::CREATE_DH_PARAMETERS - 782)) | (1 << (self::CREATE_DIGEST - 782)) | (1 << (self::CROSSES - 782)) | (1 << (self::DATEDIFF - 782)) | (1 << (self::DATE_FORMAT - 782)) | (1 << (self::DAYNAME - 782)) | (1 << (self::DAYOFMONTH - 782)) | (1 << (self::DAYOFWEEK - 782)) | (1 << (self::DAYOFYEAR - 782)) | (1 << (self::DECODE - 782)) | (1 << (self::DEGREES - 782)) | (1 << (self::DES_DECRYPT - 782)) | (1 << (self::DES_ENCRYPT - 782)) | (1 << (self::DIMENSION - 782)) | (1 << (self::DISJOINT - 782)) | (1 << (self::ELT - 782)) | (1 << (self::ENCODE - 782)) | (1 << (self::ENCRYPT - 782)) | (1 << (self::ENDPOINT - 782)) | (1 << (self::ENVELOPE - 782)) | (1 << (self::EQUALS - 782)) | (1 << (self::EXP - 782)) | (1 << (self::EXPORT_SET - 782)) | (1 << (self::EXTERIORRING - 782)) | (1 << (self::EXTRACTVALUE - 782)) | (1 << (self::FIELD - 782)) | (1 << (self::FIND_IN_SET - 782)) | (1 << (self::FLOOR - 782)) | (1 << (self::FORMAT - 782)) | (1 << (self::FOUND_ROWS - 782)) | (1 << (self::FROM_BASE64 - 782)) | (1 << (self::FROM_DAYS - 782)) | (1 << (self::FROM_UNIXTIME - 782)) | (1 << (self::GEOMCOLLFROMTEXT - 782)) | (1 << (self::GEOMCOLLFROMWKB - 782)))) !== 0) || ((($_la - 846) & ~0x3F) === 0 && ((1 << ($_la - 846)) & ((1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 846)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 846)) | (1 << (self::GEOMETRYFROMTEXT - 846)) | (1 << (self::GEOMETRYFROMWKB - 846)) | (1 << (self::GEOMETRYN - 846)) | (1 << (self::GEOMETRYTYPE - 846)) | (1 << (self::GEOMFROMTEXT - 846)) | (1 << (self::GEOMFROMWKB - 846)) | (1 << (self::GET_FORMAT - 846)) | (1 << (self::GET_LOCK - 846)) | (1 << (self::GLENGTH - 846)) | (1 << (self::GREATEST - 846)) | (1 << (self::GTID_SUBSET - 846)) | (1 << (self::GTID_SUBTRACT - 846)) | (1 << (self::HEX - 846)) | (1 << (self::IFNULL - 846)) | (1 << (self::INET6_ATON - 846)) | (1 << (self::INET6_NTOA - 846)) | (1 << (self::INET_ATON - 846)) | (1 << (self::INET_NTOA - 846)) | (1 << (self::INSTR - 846)) | (1 << (self::INTERIORRINGN - 846)) | (1 << (self::INTERSECTS - 846)) | (1 << (self::ISCLOSED - 846)) | (1 << (self::ISEMPTY - 846)) | (1 << (self::ISNULL - 846)) | (1 << (self::ISSIMPLE - 846)) | (1 << (self::IS_FREE_LOCK - 846)) | (1 << (self::IS_IPV4 - 846)) | (1 << (self::IS_IPV4_COMPAT - 846)) | (1 << (self::IS_IPV4_MAPPED - 846)) | (1 << (self::IS_IPV6 - 846)) | (1 << (self::IS_USED_LOCK - 846)) | (1 << (self::LAST_INSERT_ID - 846)) | (1 << (self::LCASE - 846)) | (1 << (self::LEAST - 846)) | (1 << (self::LENGTH - 846)) | (1 << (self::LINEFROMTEXT - 846)) | (1 << (self::LINEFROMWKB - 846)) | (1 << (self::LINESTRINGFROMTEXT - 846)) | (1 << (self::LINESTRINGFROMWKB - 846)) | (1 << (self::LN - 846)) | (1 << (self::LOAD_FILE - 846)) | (1 << (self::LOCATE - 846)) | (1 << (self::LOG - 846)) | (1 << (self::LOG10 - 846)) | (1 << (self::LOG2 - 846)) | (1 << (self::LOWER - 846)) | (1 << (self::LPAD - 846)) | (1 << (self::LTRIM - 846)) | (1 << (self::MAKEDATE - 846)) | (1 << (self::MAKETIME - 846)) | (1 << (self::MAKE_SET - 846)) | (1 << (self::MASTER_POS_WAIT - 846)) | (1 << (self::MBRCONTAINS - 846)) | (1 << (self::MBRDISJOINT - 846)) | (1 << (self::MBREQUAL - 846)) | (1 << (self::MBRINTERSECTS - 846)) | (1 << (self::MBROVERLAPS - 846)) | (1 << (self::MBRTOUCHES - 846)) | (1 << (self::MBRWITHIN - 846)) | (1 << (self::MD5 - 846)) | (1 << (self::MLINEFROMTEXT - 846)) | (1 << (self::MLINEFROMWKB - 846)))) !== 0) || ((($_la - 910) & ~0x3F) === 0 && ((1 << ($_la - 910)) & ((1 << (self::MONTHNAME - 910)) | (1 << (self::MPOINTFROMTEXT - 910)) | (1 << (self::MPOINTFROMWKB - 910)) | (1 << (self::MPOLYFROMTEXT - 910)) | (1 << (self::MPOLYFROMWKB - 910)) | (1 << (self::MULTILINESTRINGFROMTEXT - 910)) | (1 << (self::MULTILINESTRINGFROMWKB - 910)) | (1 << (self::MULTIPOINTFROMTEXT - 910)) | (1 << (self::MULTIPOINTFROMWKB - 910)) | (1 << (self::MULTIPOLYGONFROMTEXT - 910)) | (1 << (self::MULTIPOLYGONFROMWKB - 910)) | (1 << (self::NAME_CONST - 910)) | (1 << (self::NULLIF - 910)) | (1 << (self::NUMGEOMETRIES - 910)) | (1 << (self::NUMINTERIORRINGS - 910)) | (1 << (self::NUMPOINTS - 910)) | (1 << (self::OCT - 910)) | (1 << (self::OCTET_LENGTH - 910)) | (1 << (self::ORD - 910)) | (1 << (self::OVERLAPS - 910)) | (1 << (self::PERIOD_ADD - 910)) | (1 << (self::PERIOD_DIFF - 910)) | (1 << (self::PI - 910)) | (1 << (self::POINTFROMTEXT - 910)) | (1 << (self::POINTFROMWKB - 910)) | (1 << (self::POINTN - 910)) | (1 << (self::POLYFROMTEXT - 910)) | (1 << (self::POLYFROMWKB - 910)) | (1 << (self::POLYGONFROMTEXT - 910)) | (1 << (self::POLYGONFROMWKB - 910)) | (1 << (self::POW - 910)) | (1 << (self::POWER - 910)) | (1 << (self::QUOTE - 910)) | (1 << (self::RADIANS - 910)) | (1 << (self::RAND - 910)) | (1 << (self::RANDOM_BYTES - 910)) | (1 << (self::RELEASE_LOCK - 910)) | (1 << (self::REVERSE - 910)) | (1 << (self::ROUND - 910)) | (1 << (self::ROW_COUNT - 910)) | (1 << (self::RPAD - 910)) | (1 << (self::RTRIM - 910)) | (1 << (self::SEC_TO_TIME - 910)) | (1 << (self::SESSION_USER - 910)) | (1 << (self::SHA - 910)) | (1 << (self::SHA1 - 910)) | (1 << (self::SHA2 - 910)) | (1 << (self::SCHEMA_NAME - 910)) | (1 << (self::SIGN - 910)) | (1 << (self::SIN - 910)) | (1 << (self::SLEEP - 910)) | (1 << (self::SOUNDEX - 910)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 910)) | (1 << (self::SQRT - 910)) | (1 << (self::SRID - 910)) | (1 << (self::STARTPOINT - 910)) | (1 << (self::STRCMP - 910)) | (1 << (self::STR_TO_DATE - 910)) | (1 << (self::ST_AREA - 910)) | (1 << (self::ST_ASBINARY - 910)) | (1 << (self::ST_ASTEXT - 910)) | (1 << (self::ST_ASWKB - 910)) | (1 << (self::ST_ASWKT - 910)) | (1 << (self::ST_BUFFER - 910)))) !== 0) || ((($_la - 974) & ~0x3F) === 0 && ((1 << ($_la - 974)) & ((1 << (self::ST_CENTROID - 974)) | (1 << (self::ST_CONTAINS - 974)) | (1 << (self::ST_CROSSES - 974)) | (1 << (self::ST_DIFFERENCE - 974)) | (1 << (self::ST_DIMENSION - 974)) | (1 << (self::ST_DISJOINT - 974)) | (1 << (self::ST_DISTANCE - 974)) | (1 << (self::ST_ENDPOINT - 974)) | (1 << (self::ST_ENVELOPE - 974)) | (1 << (self::ST_EQUALS - 974)) | (1 << (self::ST_EXTERIORRING - 974)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 974)) | (1 << (self::ST_GEOMCOLLFROMTXT - 974)) | (1 << (self::ST_GEOMCOLLFROMWKB - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 974)) | (1 << (self::ST_GEOMETRYFROMTEXT - 974)) | (1 << (self::ST_GEOMETRYFROMWKB - 974)) | (1 << (self::ST_GEOMETRYN - 974)) | (1 << (self::ST_GEOMETRYTYPE - 974)) | (1 << (self::ST_GEOMFROMTEXT - 974)) | (1 << (self::ST_GEOMFROMWKB - 974)) | (1 << (self::ST_INTERIORRINGN - 974)) | (1 << (self::ST_INTERSECTION - 974)) | (1 << (self::ST_INTERSECTS - 974)) | (1 << (self::ST_ISCLOSED - 974)) | (1 << (self::ST_ISEMPTY - 974)) | (1 << (self::ST_ISSIMPLE - 974)) | (1 << (self::ST_LINEFROMTEXT - 974)) | (1 << (self::ST_LINEFROMWKB - 974)) | (1 << (self::ST_LINESTRINGFROMTEXT - 974)) | (1 << (self::ST_LINESTRINGFROMWKB - 974)) | (1 << (self::ST_NUMGEOMETRIES - 974)) | (1 << (self::ST_NUMINTERIORRING - 974)) | (1 << (self::ST_NUMINTERIORRINGS - 974)) | (1 << (self::ST_NUMPOINTS - 974)) | (1 << (self::ST_OVERLAPS - 974)) | (1 << (self::ST_POINTFROMTEXT - 974)) | (1 << (self::ST_POINTFROMWKB - 974)) | (1 << (self::ST_POINTN - 974)) | (1 << (self::ST_POLYFROMTEXT - 974)) | (1 << (self::ST_POLYFROMWKB - 974)) | (1 << (self::ST_POLYGONFROMTEXT - 974)) | (1 << (self::ST_POLYGONFROMWKB - 974)) | (1 << (self::ST_SRID - 974)) | (1 << (self::ST_STARTPOINT - 974)) | (1 << (self::ST_SYMDIFFERENCE - 974)) | (1 << (self::ST_TOUCHES - 974)) | (1 << (self::ST_UNION - 974)) | (1 << (self::ST_WITHIN - 974)) | (1 << (self::ST_X - 974)) | (1 << (self::ST_Y - 974)) | (1 << (self::SUBDATE - 974)) | (1 << (self::SUBSTRING_INDEX - 974)) | (1 << (self::SUBTIME - 974)) | (1 << (self::SYSTEM_USER - 974)) | (1 << (self::TAN - 974)) | (1 << (self::TIMEDIFF - 974)) | (1 << (self::TIMESTAMPADD - 974)) | (1 << (self::TIMESTAMPDIFF - 974)) | (1 << (self::TIME_FORMAT - 974)) | (1 << (self::TIME_TO_SEC - 974)) | (1 << (self::TOUCHES - 974)) | (1 << (self::TO_BASE64 - 974)))) !== 0) || ((($_la - 1038) & ~0x3F) === 0 && ((1 << ($_la - 1038)) & ((1 << (self::TO_DAYS - 1038)) | (1 << (self::TO_SECONDS - 1038)) | (1 << (self::UCASE - 1038)) | (1 << (self::UNCOMPRESS - 1038)) | (1 << (self::UNCOMPRESSED_LENGTH - 1038)) | (1 << (self::UNHEX - 1038)) | (1 << (self::UNIX_TIMESTAMP - 1038)) | (1 << (self::UPDATEXML - 1038)) | (1 << (self::UPPER - 1038)) | (1 << (self::UUID - 1038)) | (1 << (self::UUID_SHORT - 1038)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1038)) | (1 << (self::VERSION - 1038)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1038)) | (1 << (self::WEEKDAY - 1038)) | (1 << (self::WEEKOFYEAR - 1038)) | (1 << (self::WEIGHT_STRING - 1038)) | (1 << (self::WITHIN - 1038)) | (1 << (self::YEARWEEK - 1038)) | (1 << (self::Y_FUNCTION - 1038)) | (1 << (self::X_FUNCTION - 1038)) | (1 << (self::MOD - 1038)) | (1 << (self::CHARSET_REVERSE_QOUTE_STRING - 1038)) | (1 << (self::STRING_LITERAL - 1038)))) !== 0) || ((($_la - 1107) & ~0x3F) === 0 && ((1 << ($_la - 1107)) & ((1 << (self::ID - 1107)) | (1 << (self::REVERSE_QUOTE_ID - 1107)) | (1 << (self::OPTIONAL - 1107)))) !== 0)) {
                $this->setState(4373);
                $this->uid();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function cursorStatement(): Context\CursorStatementContext
    {
        $localContext = new Context\CursorStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 372, self::RULE_cursorStatement);

        try {
            $this->setState(4391);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CLOSE:
                    $localContext = new Context\CloseCursorContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4376);
                    $this->match(self::CLOSE);
                    $this->setState(4377);
                    $this->uid();
                    break;
                case self::FETCH:
                    $localContext = new Context\FetchCursorContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4378);
                    $this->match(self::FETCH);
                    $this->setState(4383);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 627, $this->ctx)) {
                        case 1:
                            $this->setState(4380);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::NEXT) {
                                $this->setState(4379);
                                $this->match(self::NEXT);
                            }
                            $this->setState(4382);
                            $this->match(self::FROM);
                            break;
                    }
                    $this->setState(4385);
                    $this->uid();
                    $this->setState(4386);
                    $this->match(self::INTO);
                    $this->setState(4387);
                    $this->uidList();
                    break;
                case self::OPEN:
                    $localContext = new Context\OpenCursorContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4389);
                    $this->match(self::OPEN);
                    $this->setState(4390);
                    $this->uid();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function declareVariable(): Context\DeclareVariableContext
    {
        $localContext = new Context\DeclareVariableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 374, self::RULE_declareVariable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4393);
            $this->match(self::DECLARE);
            $this->setState(4394);
            $this->uidList();
            $this->setState(4395);
            $this->dataType();
            $this->setState(4398);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::DEFAULT) {
                $this->setState(4396);
                $this->match(self::DEFAULT);
                $this->setState(4397);
                $this->recursiveExpression(0);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function declareCondition(): Context\DeclareConditionContext
    {
        $localContext = new Context\DeclareConditionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 376, self::RULE_declareCondition);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4400);
            $this->match(self::DECLARE);
            $this->setState(4401);
            $this->uid();
            $this->setState(4402);
            $this->match(self::CONDITION);
            $this->setState(4403);
            $this->match(self::FOR);
            $this->setState(4410);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ZERO_DECIMAL:
                case self::ONE_DECIMAL:
                case self::TWO_DECIMAL:
                case self::DECIMAL_LITERAL:
                case self::REAL_LITERAL:
                    $this->setState(4404);
                    $this->decimalLiteral();
                    break;
                case self::SQLSTATE:
                    $this->setState(4405);
                    $this->match(self::SQLSTATE);
                    $this->setState(4407);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VALUE) {
                        $this->setState(4406);
                        $this->match(self::VALUE);
                    }
                    $this->setState(4409);
                    $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function declareCursor(): Context\DeclareCursorContext
    {
        $localContext = new Context\DeclareCursorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 378, self::RULE_declareCursor);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4412);
            $this->match(self::DECLARE);
            $this->setState(4413);
            $this->uid();
            $this->setState(4414);
            $this->match(self::CURSOR);
            $this->setState(4415);
            $this->match(self::FOR);
            $this->setState(4416);
            $this->selectStatement();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function declareHandler(): Context\DeclareHandlerContext
    {
        $localContext = new Context\DeclareHandlerContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 380, self::RULE_declareHandler);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4418);
            $this->match(self::DECLARE);
            $this->setState(4419);

            $localContext->handlerAction = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::CONTINUE || $_la === self::EXIT || $_la === self::UNDO)) {
                $localContext->handlerAction = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(4420);
            $this->match(self::HANDLER);
            $this->setState(4421);
            $this->match(self::FOR);
            $this->setState(4422);
            $this->handlerConditionValue();
            $this->setState(4427);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(4423);
                $this->match(self::COMMA);
                $this->setState(4424);
                $this->handlerConditionValue();
                $this->setState(4429);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(4430);
            $this->routineBody();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function handlerConditionValue(): Context\HandlerConditionValueContext
    {
        $localContext = new Context\HandlerConditionValueContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 382, self::RULE_handlerConditionValue);

        try {
            $this->setState(4443);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ZERO_DECIMAL:
                case self::ONE_DECIMAL:
                case self::TWO_DECIMAL:
                case self::DECIMAL_LITERAL:
                case self::REAL_LITERAL:
                    $localContext = new Context\HandlerConditionCodeContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4432);
                    $this->decimalLiteral();
                    break;
                case self::SQLSTATE:
                    $localContext = new Context\HandlerConditionStateContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4433);
                    $this->match(self::SQLSTATE);
                    $this->setState(4435);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VALUE) {
                        $this->setState(4434);
                        $this->match(self::VALUE);
                    }
                    $this->setState(4437);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $localContext = new Context\HandlerConditionNameContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4438);
                    $this->uid();
                    break;
                case self::SQLWARNING:
                    $localContext = new Context\HandlerConditionWarningContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4439);
                    $this->match(self::SQLWARNING);
                    break;
                case self::NOT:
                    $localContext = new Context\HandlerConditionNotfoundContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4440);
                    $this->match(self::NOT);
                    $this->setState(4441);
                    $this->match(self::FOUND);
                    break;
                case self::SQLEXCEPTION:
                    $localContext = new Context\HandlerConditionExceptionContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(4442);
                    $this->match(self::SQLEXCEPTION);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function procedureSqlStatement(): Context\ProcedureSqlStatementContext
    {
        $localContext = new Context\ProcedureSqlStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 384, self::RULE_procedureSqlStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4447);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 635, $this->ctx)) {
                case 1:
                    $this->setState(4445);
                    $this->compoundStatement();
                    break;
                case 2:
                    $this->setState(4446);
                    $this->sqlStatement();
                    break;
            }
            $this->setState(4449);
            $this->match(self::SEMI);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function caseAlternative(): Context\CaseAlternativeContext
    {
        $localContext = new Context\CaseAlternativeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 386, self::RULE_caseAlternative);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4451);
            $this->match(self::WHEN);
            $this->setState(4454);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 636, $this->ctx)) {
                case 1:
                    $this->setState(4452);
                    $this->constant();
                    break;
                case 2:
                    $this->setState(4453);
                    $this->recursiveExpression(0);
                    break;
            }
            $this->setState(4456);
            $this->match(self::THEN);
            $this->setState(4458);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4457);
                        $this->procedureSqlStatement();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4460);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 637, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function elifAlternative(): Context\ElifAlternativeContext
    {
        $localContext = new Context\ElifAlternativeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 388, self::RULE_elifAlternative);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4462);
            $this->match(self::ELSEIF);
            $this->setState(4463);
            $this->recursiveExpression(0);
            $this->setState(4464);
            $this->match(self::THEN);
            $this->setState(4466);
            $this->errorHandler->sync($this);

            $alt = 1;

            do {
                switch ($alt) {
                    case 1:
                        $this->setState(4465);
                        $this->procedureSqlStatement();
                        break;
                    default:
                        throw new NoViableAltException($this);
                }

                $this->setState(4468);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 638, $this->ctx);
            } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function alterUser(): Context\AlterUserContext
    {
        $localContext = new Context\AlterUserContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 390, self::RULE_alterUser);

        try {
            $this->setState(4524);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 650, $this->ctx)) {
                case 1:
                    $localContext = new Context\AlterUserMysqlV56Context($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4470);
                    $this->match(self::ALTER);
                    $this->setState(4471);
                    $this->match(self::USER);
                    $this->setState(4472);
                    $this->userSpecification();
                    $this->setState(4477);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4473);
                        $this->match(self::COMMA);
                        $this->setState(4474);
                        $this->userSpecification();
                        $this->setState(4479);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\AlterUserMysqlV57Context($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4480);
                    $this->match(self::ALTER);
                    $this->setState(4481);
                    $this->match(self::USER);
                    $this->setState(4483);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(4482);
                        $this->ifExists();
                    }
                    $this->setState(4485);
                    $this->userAuthOption();
                    $this->setState(4490);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4486);
                        $this->match(self::COMMA);
                        $this->setState(4487);
                        $this->userAuthOption();
                        $this->setState(4492);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4507);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::REQUIRE) {
                        $this->setState(4493);
                        $this->match(self::REQUIRE);
                        $this->setState(4505);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::NONE:
                                $this->setState(4494);
                                $localContext->tlsNone = $this->match(self::NONE);
                                break;
                            case self::SSL:
                            case self::CIPHER:
                            case self::ISSUER:
                            case self::SUBJECT:
                            case self::X509:
                                $this->setState(4495);
                                $this->tlsOption();
                                $this->setState(4502);
                                $this->errorHandler->sync($this);

                                $_la = $this->input->LA(1);
                                while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
                                    $this->setState(4497);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);

                                    if ($_la === self::AND) {
                                        $this->setState(4496);
                                        $this->match(self::AND);
                                    }
                                    $this->setState(4499);
                                    $this->tlsOption();
                                    $this->setState(4504);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);
                                }
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                    }
                    $this->setState(4515);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(4509);
                        $this->match(self::WITH);
                        $this->setState(4511);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        do {
                            $this->setState(4510);
                            $this->userResourceOption();
                            $this->setState(4513);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        } while ((($_la - 476) & ~0x3F) === 0 && ((1 << ($_la - 476)) & ((1 << (self::MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (self::MAX_QUERIES_PER_HOUR - 476)) | (1 << (self::MAX_UPDATES_PER_HOUR - 476)) | (1 << (self::MAX_USER_CONNECTIONS - 476)))) !== 0);
                    }
                    $this->setState(4521);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::ACCOUNT || $_la === self::PASSWORD) {
                        $this->setState(4519);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::PASSWORD:
                                $this->setState(4517);
                                $this->userPasswordOption();
                                break;
                            case self::ACCOUNT:
                                $this->setState(4518);
                                $this->userLockOption();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(4523);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createUser(): Context\CreateUserContext
    {
        $localContext = new Context\CreateUserContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 392, self::RULE_createUser);

        try {
            $this->setState(4580);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 662, $this->ctx)) {
                case 1:
                    $localContext = new Context\CreateUserMysqlV56Context($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4526);
                    $this->match(self::CREATE);
                    $this->setState(4527);
                    $this->match(self::USER);
                    $this->setState(4528);
                    $this->userAuthOption();
                    $this->setState(4533);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4529);
                        $this->match(self::COMMA);
                        $this->setState(4530);
                        $this->userAuthOption();
                        $this->setState(4535);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\CreateUserMysqlV57Context($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4536);
                    $this->match(self::CREATE);
                    $this->setState(4537);
                    $this->match(self::USER);
                    $this->setState(4539);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(4538);
                        $this->ifNotExists();
                    }
                    $this->setState(4541);
                    $this->userAuthOption();
                    $this->setState(4546);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4542);
                        $this->match(self::COMMA);
                        $this->setState(4543);
                        $this->userAuthOption();
                        $this->setState(4548);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4563);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::REQUIRE) {
                        $this->setState(4549);
                        $this->match(self::REQUIRE);
                        $this->setState(4561);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::NONE:
                                $this->setState(4550);
                                $localContext->tlsNone = $this->match(self::NONE);
                                break;
                            case self::SSL:
                            case self::CIPHER:
                            case self::ISSUER:
                            case self::SUBJECT:
                            case self::X509:
                                $this->setState(4551);
                                $this->tlsOption();
                                $this->setState(4558);
                                $this->errorHandler->sync($this);

                                $_la = $this->input->LA(1);
                                while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
                                    $this->setState(4553);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);

                                    if ($_la === self::AND) {
                                        $this->setState(4552);
                                        $this->match(self::AND);
                                    }
                                    $this->setState(4555);
                                    $this->tlsOption();
                                    $this->setState(4560);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);
                                }
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                    }
                    $this->setState(4571);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(4565);
                        $this->match(self::WITH);
                        $this->setState(4567);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        do {
                            $this->setState(4566);
                            $this->userResourceOption();
                            $this->setState(4569);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        } while ((($_la - 476) & ~0x3F) === 0 && ((1 << ($_la - 476)) & ((1 << (self::MAX_CONNECTIONS_PER_HOUR - 476)) | (1 << (self::MAX_QUERIES_PER_HOUR - 476)) | (1 << (self::MAX_UPDATES_PER_HOUR - 476)) | (1 << (self::MAX_USER_CONNECTIONS - 476)))) !== 0);
                    }
                    $this->setState(4577);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::ACCOUNT || $_la === self::PASSWORD) {
                        $this->setState(4575);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::PASSWORD:
                                $this->setState(4573);
                                $this->userPasswordOption();
                                break;
                            case self::ACCOUNT:
                                $this->setState(4574);
                                $this->userLockOption();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(4579);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dropUser(): Context\DropUserContext
    {
        $localContext = new Context\DropUserContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 394, self::RULE_dropUser);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4582);
            $this->match(self::DROP);
            $this->setState(4583);
            $this->match(self::USER);
            $this->setState(4585);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IF) {
                $this->setState(4584);
                $this->ifExists();
            }
            $this->setState(4587);
            $this->userName();
            $this->setState(4592);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(4588);
                $this->match(self::COMMA);
                $this->setState(4589);
                $this->userName();
                $this->setState(4594);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function grantStatement(): Context\GrantStatementContext
    {
        $localContext = new Context\GrantStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 396, self::RULE_grantStatement);

        try {
            $this->setState(4688);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 683, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4595);
                    $this->match(self::GRANT);
                    $this->setState(4596);
                    $this->privelegeClause();
                    $this->setState(4601);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4597);
                        $this->match(self::COMMA);
                        $this->setState(4598);
                        $this->privelegeClause();
                        $this->setState(4603);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4604);
                    $this->match(self::ON);
                    $this->setState(4606);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 666, $this->ctx)) {
                        case 1:
                            $this->setState(4605);

                            $localContext->privilegeObject = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
                                $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(4608);
                    $this->privilegeLevel();
                    $this->setState(4609);
                    $this->match(self::TO);
                    $this->setState(4610);
                    $this->userAuthOption();
                    $this->setState(4615);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4611);
                        $this->match(self::COMMA);
                        $this->setState(4612);
                        $this->userAuthOption();
                        $this->setState(4617);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4632);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::REQUIRE) {
                        $this->setState(4618);
                        $this->match(self::REQUIRE);
                        $this->setState(4630);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::NONE:
                                $this->setState(4619);
                                $localContext->tlsNone = $this->match(self::NONE);
                                break;
                            case self::SSL:
                            case self::CIPHER:
                            case self::ISSUER:
                            case self::SUBJECT:
                            case self::X509:
                                $this->setState(4620);
                                $this->tlsOption();
                                $this->setState(4627);
                                $this->errorHandler->sync($this);

                                $_la = $this->input->LA(1);
                                while ($_la === self::AND || $_la === self::SSL || $_la === self::CIPHER || $_la === self::ISSUER || $_la === self::SUBJECT || $_la === self::X509) {
                                    $this->setState(4622);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);

                                    if ($_la === self::AND) {
                                        $this->setState(4621);
                                        $this->match(self::AND);
                                    }
                                    $this->setState(4624);
                                    $this->tlsOption();
                                    $this->setState(4629);
                                    $this->errorHandler->sync($this);
                                    $_la = $this->input->LA(1);
                                }
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                    }
                    $this->setState(4643);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(4634);
                        $this->match(self::WITH);
                        $this->setState(4640);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 673, $this->ctx);

                        while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                            if ($alt === 1) {
                                $this->setState(4638);
                                $this->errorHandler->sync($this);

                                switch ($this->input->LA(1)) {
                                    case self::GRANT:
                                        $this->setState(4635);
                                        $this->match(self::GRANT);
                                        $this->setState(4636);
                                        $this->match(self::OPTION);
                                        break;
                                    case self::MAX_CONNECTIONS_PER_HOUR:
                                    case self::MAX_QUERIES_PER_HOUR:
                                    case self::MAX_UPDATES_PER_HOUR:
                                    case self::MAX_USER_CONNECTIONS:
                                        $this->setState(4637);
                                        $this->userResourceOption();
                                        break;
                                    default:
                                        throw new NoViableAltException($this);
                                }
                            }

                            $this->setState(4642);
                            $this->errorHandler->sync($this);

                            $alt = $this->getInterpreter()->adaptivePredict($this->input, 673, $this->ctx);
                        }
                    }
                    $this->setState(4651);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS) {
                        $this->setState(4645);
                        $this->match(self::AS);
                        $this->setState(4646);
                        $this->userName();
                        $this->setState(4647);
                        $this->match(self::WITH);
                        $this->setState(4648);
                        $this->match(self::ROLE);
                        $this->setState(4649);
                        $this->roleOption();
                    }
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4653);
                    $this->match(self::GRANT);
                    $this->setState(4656);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 676, $this->ctx)) {
                        case 1:
                            $this->setState(4654);
                            $this->userName();
                            break;
                        case 2:
                            $this->setState(4655);
                            $this->uid();
                            break;
                    }
                    $this->setState(4665);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4658);
                        $this->match(self::COMMA);
                        $this->setState(4661);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 677, $this->ctx)) {
                            case 1:
                                $this->setState(4659);
                                $this->userName();
                                break;
                            case 2:
                                $this->setState(4660);
                                $this->uid();
                                break;
                        }
                        $this->setState(4667);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4668);
                    $this->match(self::TO);
                    $this->setState(4671);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 679, $this->ctx)) {
                        case 1:
                            $this->setState(4669);
                            $this->userName();
                            break;
                        case 2:
                            $this->setState(4670);
                            $this->uid();
                            break;
                    }
                    $this->setState(4680);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4673);
                        $this->match(self::COMMA);
                        $this->setState(4676);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 680, $this->ctx)) {
                            case 1:
                                $this->setState(4674);
                                $this->userName();
                                break;
                            case 2:
                                $this->setState(4675);
                                $this->uid();
                                break;
                        }
                        $this->setState(4682);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4686);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(4683);
                        $this->match(self::WITH);
                        $this->setState(4684);
                        $this->match(self::ADMIN);
                        $this->setState(4685);
                        $this->match(self::OPTION);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function roleOption(): Context\RoleOptionContext
    {
        $localContext = new Context\RoleOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 398, self::RULE_roleOption);

        try {
            $this->setState(4712);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DEFAULT:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4690);
                    $this->match(self::DEFAULT);
                    break;
                case self::NONE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4691);
                    $this->match(self::NONE);
                    break;
                case self::ALL:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4692);
                    $this->match(self::ALL);
                    $this->setState(4702);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::EXCEPT) {
                        $this->setState(4693);
                        $this->match(self::EXCEPT);
                        $this->setState(4694);
                        $this->userName();
                        $this->setState(4699);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(4695);
                            $this->match(self::COMMA);
                            $this->setState(4696);
                            $this->userName();
                            $this->setState(4701);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    break;
                case self::STRING_LITERAL:
                case self::ID:
                case self::STRING_USER_NAME:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4704);
                    $this->userName();
                    $this->setState(4709);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4705);
                        $this->match(self::COMMA);
                        $this->setState(4706);
                        $this->userName();
                        $this->setState(4711);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function grantProxy(): Context\GrantProxyContext
    {
        $localContext = new Context\GrantProxyContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 400, self::RULE_grantProxy);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4714);
            $this->match(self::GRANT);
            $this->setState(4715);
            $this->match(self::PROXY);
            $this->setState(4716);
            $this->match(self::ON);
            $this->setState(4717);
            $localContext->fromFirst = $this->userName();
            $this->setState(4718);
            $this->match(self::TO);
            $this->setState(4719);
            $localContext->toFirst = $this->userName();
            $this->setState(4724);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(4720);
                $this->match(self::COMMA);
                $this->setState(4721);
                $localContext->userName = $this->userName();
                $localContext->toOther[] = $localContext->userName;
                $this->setState(4726);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(4730);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::WITH) {
                $this->setState(4727);
                $this->match(self::WITH);
                $this->setState(4728);
                $this->match(self::GRANT);
                $this->setState(4729);
                $this->match(self::OPTION);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function renameUser(): Context\RenameUserContext
    {
        $localContext = new Context\RenameUserContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 402, self::RULE_renameUser);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4732);
            $this->match(self::RENAME);
            $this->setState(4733);
            $this->match(self::USER);
            $this->setState(4734);
            $this->renameUserClause();
            $this->setState(4739);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(4735);
                $this->match(self::COMMA);
                $this->setState(4736);
                $this->renameUserClause();
                $this->setState(4741);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function revokeStatement(): Context\RevokeStatementContext
    {
        $localContext = new Context\RevokeStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 404, self::RULE_revokeStatement);

        try {
            $this->setState(4806);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 700, $this->ctx)) {
                case 1:
                    $localContext = new Context\DetailRevokeContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4742);
                    $this->match(self::REVOKE);
                    $this->setState(4743);
                    $this->privelegeClause();
                    $this->setState(4748);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4744);
                        $this->match(self::COMMA);
                        $this->setState(4745);
                        $this->privelegeClause();
                        $this->setState(4750);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4751);
                    $this->match(self::ON);
                    $this->setState(4753);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 692, $this->ctx)) {
                        case 1:
                            $this->setState(4752);

                            $localContext->privilegeObject = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::PROCEDURE || $_la === self::TABLE || $_la === self::FUNCTION)) {
                                $localContext->privilegeObject = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(4755);
                    $this->privilegeLevel();
                    $this->setState(4756);
                    $this->match(self::FROM);
                    $this->setState(4757);
                    $this->userName();
                    $this->setState(4762);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4758);
                        $this->match(self::COMMA);
                        $this->setState(4759);
                        $this->userName();
                        $this->setState(4764);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\ShortRevokeContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4765);
                    $this->match(self::REVOKE);
                    $this->setState(4766);
                    $this->match(self::ALL);
                    $this->setState(4768);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PRIVILEGES) {
                        $this->setState(4767);
                        $this->match(self::PRIVILEGES);
                    }
                    $this->setState(4770);
                    $this->match(self::COMMA);
                    $this->setState(4771);
                    $this->match(self::GRANT);
                    $this->setState(4772);
                    $this->match(self::OPTION);
                    $this->setState(4773);
                    $this->match(self::FROM);
                    $this->setState(4774);
                    $this->userName();
                    $this->setState(4779);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4775);
                        $this->match(self::COMMA);
                        $this->setState(4776);
                        $this->userName();
                        $this->setState(4781);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 3:
                    $localContext = new Context\RoleRevokeContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4782);
                    $this->match(self::REVOKE);
                    $this->setState(4783);
                    $this->uid();
                    $this->setState(4788);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4784);
                        $this->match(self::COMMA);
                        $this->setState(4785);
                        $this->uid();
                        $this->setState(4790);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(4791);
                    $this->match(self::FROM);
                    $this->setState(4794);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 697, $this->ctx)) {
                        case 1:
                            $this->setState(4792);
                            $this->userName();
                            break;
                        case 2:
                            $this->setState(4793);
                            $this->uid();
                            break;
                    }
                    $this->setState(4803);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(4796);
                        $this->match(self::COMMA);
                        $this->setState(4799);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 698, $this->ctx)) {
                            case 1:
                                $this->setState(4797);
                                $this->userName();
                                break;
                            case 2:
                                $this->setState(4798);
                                $this->uid();
                                break;
                        }
                        $this->setState(4805);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function revokeProxy(): Context\RevokeProxyContext
    {
        $localContext = new Context\RevokeProxyContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 406, self::RULE_revokeProxy);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4808);
            $this->match(self::REVOKE);
            $this->setState(4809);
            $this->match(self::PROXY);
            $this->setState(4810);
            $this->match(self::ON);
            $this->setState(4811);
            $localContext->onUser = $this->userName();
            $this->setState(4812);
            $this->match(self::FROM);
            $this->setState(4813);
            $localContext->fromFirst = $this->userName();
            $this->setState(4818);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(4814);
                $this->match(self::COMMA);
                $this->setState(4815);
                $localContext->userName = $this->userName();
                $localContext->fromOther[] = $localContext->userName;
                $this->setState(4820);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function setPasswordStatement(): Context\SetPasswordStatementContext
    {
        $localContext = new Context\SetPasswordStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 408, self::RULE_setPasswordStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4821);
            $this->match(self::SET);
            $this->setState(4822);
            $this->match(self::PASSWORD);
            $this->setState(4825);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::FOR) {
                $this->setState(4823);
                $this->match(self::FOR);
                $this->setState(4824);
                $this->userName();
            }
            $this->setState(4827);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(4830);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::OLD_PASSWORD:
                case self::PASSWORD:
                    $this->setState(4828);
                    $this->passwordFunctionClause();
                    break;
                case self::STRING_LITERAL:
                    $this->setState(4829);
                    $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userSpecification(): Context\UserSpecificationContext
    {
        $localContext = new Context\UserSpecificationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 410, self::RULE_userSpecification);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4832);
            $this->userName();
            $this->setState(4833);
            $this->userPasswordOption();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userAuthOption(): Context\UserAuthOptionContext
    {
        $localContext = new Context\UserAuthOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 412, self::RULE_userAuthOption);

        try {
            $this->setState(4863);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 707, $this->ctx)) {
                case 1:
                    $localContext = new Context\PasswordAuthOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4835);
                    $this->userName();
                    $this->setState(4836);
                    $this->match(self::IDENTIFIED);
                    $this->setState(4837);
                    $this->match(self::BY);
                    $this->setState(4838);
                    $this->match(self::PASSWORD);
                    $this->setState(4839);
                    $localContext->hashed = $this->match(self::STRING_LITERAL);
                    break;
                case 2:
                    $localContext = new Context\StringAuthOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4841);
                    $this->userName();
                    $this->setState(4842);
                    $this->match(self::IDENTIFIED);
                    $this->setState(4845);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(4843);
                        $this->match(self::WITH);
                        $this->setState(4844);
                        $this->authPlugin();
                    }
                    $this->setState(4847);
                    $this->match(self::BY);
                    $this->setState(4848);
                    $this->match(self::STRING_LITERAL);
                    $this->setState(4852);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::RETAIN) {
                        $this->setState(4849);
                        $this->match(self::RETAIN);
                        $this->setState(4850);
                        $this->match(self::CURRENT);
                        $this->setState(4851);
                        $this->match(self::PASSWORD);
                    }
                    break;
                case 3:
                    $localContext = new Context\HashAuthOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4854);
                    $this->userName();
                    $this->setState(4855);
                    $this->match(self::IDENTIFIED);
                    $this->setState(4856);
                    $this->match(self::WITH);
                    $this->setState(4857);
                    $this->authPlugin();
                    $this->setState(4860);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 706, $this->ctx)) {
                        case 1:
                            $this->setState(4858);
                            $this->match(self::AS);
                            $this->setState(4859);
                            $this->match(self::STRING_LITERAL);
                            break;
                    }
                    break;
                case 4:
                    $localContext = new Context\SimpleAuthOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4862);
                    $this->userName();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tlsOption(): Context\TlsOptionContext
    {
        $localContext = new Context\TlsOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 414, self::RULE_tlsOption);

        try {
            $this->setState(4873);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SSL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4865);
                    $this->match(self::SSL);
                    break;
                case self::X509:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4866);
                    $this->match(self::X509);
                    break;
                case self::CIPHER:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4867);
                    $this->match(self::CIPHER);
                    $this->setState(4868);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::ISSUER:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4869);
                    $this->match(self::ISSUER);
                    $this->setState(4870);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::SUBJECT:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4871);
                    $this->match(self::SUBJECT);
                    $this->setState(4872);
                    $this->match(self::STRING_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userResourceOption(): Context\UserResourceOptionContext
    {
        $localContext = new Context\UserResourceOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 416, self::RULE_userResourceOption);

        try {
            $this->setState(4883);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::MAX_QUERIES_PER_HOUR:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4875);
                    $this->match(self::MAX_QUERIES_PER_HOUR);
                    $this->setState(4876);
                    $this->decimalLiteral();
                    break;
                case self::MAX_UPDATES_PER_HOUR:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4877);
                    $this->match(self::MAX_UPDATES_PER_HOUR);
                    $this->setState(4878);
                    $this->decimalLiteral();
                    break;
                case self::MAX_CONNECTIONS_PER_HOUR:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4879);
                    $this->match(self::MAX_CONNECTIONS_PER_HOUR);
                    $this->setState(4880);
                    $this->decimalLiteral();
                    break;
                case self::MAX_USER_CONNECTIONS:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4881);
                    $this->match(self::MAX_USER_CONNECTIONS);
                    $this->setState(4882);
                    $this->decimalLiteral();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userPasswordOption(): Context\UserPasswordOptionContext
    {
        $localContext = new Context\UserPasswordOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 418, self::RULE_userPasswordOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4885);
            $this->match(self::PASSWORD);
            $this->setState(4886);
            $this->match(self::EXPIRE);
            $this->setState(4893);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DEFAULT:
                    $this->setState(4887);
                    $localContext->expireType = $this->match(self::DEFAULT);
                    break;
                case self::NEVER:
                    $this->setState(4888);
                    $localContext->expireType = $this->match(self::NEVER);
                    break;
                case self::INTERVAL:
                    $this->setState(4889);
                    $localContext->expireType = $this->match(self::INTERVAL);
                    $this->setState(4890);
                    $this->decimalLiteral();
                    $this->setState(4891);
                    $this->match(self::DAY);
                    break;
                case self::EOF:
                case self::ALTER:
                case self::ANALYZE:
                case self::CALL:
                case self::CHANGE:
                case self::CHECK:
                case self::CREATE:
                case self::DELETE:
                case self::DESC:
                case self::DESCRIBE:
                case self::DROP:
                case self::EXPLAIN:
                case self::GET:
                case self::GRANT:
                case self::INSERT:
                case self::KILL:
                case self::LOAD:
                case self::LOCK:
                case self::OPTIMIZE:
                case self::PURGE:
                case self::RELEASE:
                case self::RENAME:
                case self::REPLACE:
                case self::RESIGNAL:
                case self::REVOKE:
                case self::SELECT:
                case self::SET:
                case self::SHOW:
                case self::SIGNAL:
                case self::UNLOCK:
                case self::UPDATE:
                case self::USE:
                case self::ACCOUNT:
                case self::BEGIN:
                case self::BINLOG:
                case self::CACHE:
                case self::CHECKSUM:
                case self::COMMIT:
                case self::DEALLOCATE:
                case self::DO:
                case self::FLUSH:
                case self::HANDLER:
                case self::HELP:
                case self::INSTALL:
                case self::PASSWORD:
                case self::PREPARE:
                case self::REPAIR:
                case self::RESET:
                case self::ROLLBACK:
                case self::SAVEPOINT:
                case self::START:
                case self::STOP:
                case self::TRUNCATE:
                case self::UNINSTALL:
                case self::XA:
                case self::EXECUTE:
                case self::SHUTDOWN:
                case self::MINUS:
                case self::LR_BRACKET:
                case self::COMMA:
                case self::SEMI:
                    break;
                default:
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userLockOption(): Context\UserLockOptionContext
    {
        $localContext = new Context\UserLockOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 420, self::RULE_userLockOption);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4895);
            $this->match(self::ACCOUNT);
            $this->setState(4896);

            $localContext->lockType = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::LOCK || $_la === self::UNLOCK)) {
                $localContext->lockType = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function privelegeClause(): Context\PrivelegeClauseContext
    {
        $localContext = new Context\PrivelegeClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 422, self::RULE_privelegeClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(4898);
            $this->privilege();
            $this->setState(4903);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::LR_BRACKET) {
                $this->setState(4899);
                $this->match(self::LR_BRACKET);
                $this->setState(4900);
                $this->uidList();
                $this->setState(4901);
                $this->match(self::RR_BRACKET);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function privilege(): Context\PrivilegeContext
    {
        $localContext = new Context\PrivilegeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 424, self::RULE_privilege);

        try {
            $this->setState(4984);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4905);
                    $this->match(self::ALL);
                    $this->setState(4907);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PRIVILEGES) {
                        $this->setState(4906);
                        $this->match(self::PRIVILEGES);
                    }
                    break;
                case self::ALTER:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4909);
                    $this->match(self::ALTER);
                    $this->setState(4911);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ROUTINE) {
                        $this->setState(4910);
                        $this->match(self::ROUTINE);
                    }
                    break;
                case self::CREATE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4913);
                    $this->match(self::CREATE);
                    $this->setState(4921);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::TEMPORARY:
                            $this->setState(4914);
                            $this->match(self::TEMPORARY);
                            $this->setState(4915);
                            $this->match(self::TABLES);
                            break;
                        case self::ROUTINE:
                            $this->setState(4916);
                            $this->match(self::ROUTINE);
                            break;
                        case self::VIEW:
                            $this->setState(4917);
                            $this->match(self::VIEW);
                            break;
                        case self::USER:
                            $this->setState(4918);
                            $this->match(self::USER);
                            break;
                        case self::TABLESPACE:
                            $this->setState(4919);
                            $this->match(self::TABLESPACE);
                            break;
                        case self::ROLE:
                            $this->setState(4920);
                            $this->match(self::ROLE);
                            break;
                        case self::ON:
                        case self::LR_BRACKET:
                        case self::COMMA:
                            break;
                        default:
                            break;
                    }
                    break;
                case self::DELETE:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4923);
                    $this->match(self::DELETE);
                    break;
                case self::DROP:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4924);
                    $this->match(self::DROP);
                    $this->setState(4926);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ROLE) {
                        $this->setState(4925);
                        $this->match(self::ROLE);
                    }
                    break;
                case self::EVENT:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(4928);
                    $this->match(self::EVENT);
                    break;
                case self::EXECUTE:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(4929);
                    $this->match(self::EXECUTE);
                    break;
                case self::FILE:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(4930);
                    $this->match(self::FILE);
                    break;
                case self::GRANT:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(4931);
                    $this->match(self::GRANT);
                    $this->setState(4932);
                    $this->match(self::OPTION);
                    break;
                case self::INDEX:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(4933);
                    $this->match(self::INDEX);
                    break;
                case self::INSERT:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(4934);
                    $this->match(self::INSERT);
                    break;
                case self::LOCK:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(4935);
                    $this->match(self::LOCK);
                    $this->setState(4936);
                    $this->match(self::TABLES);
                    break;
                case self::PROCESS:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(4937);
                    $this->match(self::PROCESS);
                    break;
                case self::PROXY:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(4938);
                    $this->match(self::PROXY);
                    break;
                case self::REFERENCES:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(4939);
                    $this->match(self::REFERENCES);
                    break;
                case self::RELOAD:
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(4940);
                    $this->match(self::RELOAD);
                    break;
                case self::REPLICATION:
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(4941);
                    $this->match(self::REPLICATION);
                    $this->setState(4942);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CLIENT || $_la === self::SLAVE)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::SELECT:
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(4943);
                    $this->match(self::SELECT);
                    break;
                case self::SHOW:
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(4944);
                    $this->match(self::SHOW);
                    $this->setState(4945);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DATABASES || $_la === self::VIEW)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::SHUTDOWN:
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(4946);
                    $this->match(self::SHUTDOWN);
                    break;
                case self::SUPER:
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(4947);
                    $this->match(self::SUPER);
                    break;
                case self::TRIGGER:
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(4948);
                    $this->match(self::TRIGGER);
                    break;
                case self::UPDATE:
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(4949);
                    $this->match(self::UPDATE);
                    break;
                case self::USAGE:
                    $this->enterOuterAlt($localContext, 24);
                    $this->setState(4950);
                    $this->match(self::USAGE);
                    break;
                case self::APPLICATION_PASSWORD_ADMIN:
                    $this->enterOuterAlt($localContext, 25);
                    $this->setState(4951);
                    $this->match(self::APPLICATION_PASSWORD_ADMIN);
                    break;
                case self::AUDIT_ADMIN:
                    $this->enterOuterAlt($localContext, 26);
                    $this->setState(4952);
                    $this->match(self::AUDIT_ADMIN);
                    break;
                case self::BACKUP_ADMIN:
                    $this->enterOuterAlt($localContext, 27);
                    $this->setState(4953);
                    $this->match(self::BACKUP_ADMIN);
                    break;
                case self::BINLOG_ADMIN:
                    $this->enterOuterAlt($localContext, 28);
                    $this->setState(4954);
                    $this->match(self::BINLOG_ADMIN);
                    break;
                case self::BINLOG_ENCRYPTION_ADMIN:
                    $this->enterOuterAlt($localContext, 29);
                    $this->setState(4955);
                    $this->match(self::BINLOG_ENCRYPTION_ADMIN);
                    break;
                case self::CLONE_ADMIN:
                    $this->enterOuterAlt($localContext, 30);
                    $this->setState(4956);
                    $this->match(self::CLONE_ADMIN);
                    break;
                case self::CONNECTION_ADMIN:
                    $this->enterOuterAlt($localContext, 31);
                    $this->setState(4957);
                    $this->match(self::CONNECTION_ADMIN);
                    break;
                case self::ENCRYPTION_KEY_ADMIN:
                    $this->enterOuterAlt($localContext, 32);
                    $this->setState(4958);
                    $this->match(self::ENCRYPTION_KEY_ADMIN);
                    break;
                case self::FIREWALL_ADMIN:
                    $this->enterOuterAlt($localContext, 33);
                    $this->setState(4959);
                    $this->match(self::FIREWALL_ADMIN);
                    break;
                case self::FIREWALL_USER:
                    $this->enterOuterAlt($localContext, 34);
                    $this->setState(4960);
                    $this->match(self::FIREWALL_USER);
                    break;
                case self::FLUSH_OPTIMIZER_COSTS:
                    $this->enterOuterAlt($localContext, 35);
                    $this->setState(4961);
                    $this->match(self::FLUSH_OPTIMIZER_COSTS);
                    break;
                case self::FLUSH_STATUS:
                    $this->enterOuterAlt($localContext, 36);
                    $this->setState(4962);
                    $this->match(self::FLUSH_STATUS);
                    break;
                case self::FLUSH_TABLES:
                    $this->enterOuterAlt($localContext, 37);
                    $this->setState(4963);
                    $this->match(self::FLUSH_TABLES);
                    break;
                case self::FLUSH_USER_RESOURCES:
                    $this->enterOuterAlt($localContext, 38);
                    $this->setState(4964);
                    $this->match(self::FLUSH_USER_RESOURCES);
                    break;
                case self::GROUP_REPLICATION_ADMIN:
                    $this->enterOuterAlt($localContext, 39);
                    $this->setState(4965);
                    $this->match(self::GROUP_REPLICATION_ADMIN);
                    break;
                case self::INNODB_REDO_LOG_ARCHIVE:
                    $this->enterOuterAlt($localContext, 40);
                    $this->setState(4966);
                    $this->match(self::INNODB_REDO_LOG_ARCHIVE);
                    break;
                case self::INNODB_REDO_LOG_ENABLE:
                    $this->enterOuterAlt($localContext, 41);
                    $this->setState(4967);
                    $this->match(self::INNODB_REDO_LOG_ENABLE);
                    break;
                case self::NDB_STORED_USER:
                    $this->enterOuterAlt($localContext, 42);
                    $this->setState(4968);
                    $this->match(self::NDB_STORED_USER);
                    break;
                case self::PERSIST_RO_VARIABLES_ADMIN:
                    $this->enterOuterAlt($localContext, 43);
                    $this->setState(4969);
                    $this->match(self::PERSIST_RO_VARIABLES_ADMIN);
                    break;
                case self::REPLICATION_APPLIER:
                    $this->enterOuterAlt($localContext, 44);
                    $this->setState(4970);
                    $this->match(self::REPLICATION_APPLIER);
                    break;
                case self::REPLICATION_SLAVE_ADMIN:
                    $this->enterOuterAlt($localContext, 45);
                    $this->setState(4971);
                    $this->match(self::REPLICATION_SLAVE_ADMIN);
                    break;
                case self::RESOURCE_GROUP_ADMIN:
                    $this->enterOuterAlt($localContext, 46);
                    $this->setState(4972);
                    $this->match(self::RESOURCE_GROUP_ADMIN);
                    break;
                case self::RESOURCE_GROUP_USER:
                    $this->enterOuterAlt($localContext, 47);
                    $this->setState(4973);
                    $this->match(self::RESOURCE_GROUP_USER);
                    break;
                case self::ROLE_ADMIN:
                    $this->enterOuterAlt($localContext, 48);
                    $this->setState(4974);
                    $this->match(self::ROLE_ADMIN);
                    break;
                case self::SERVICE_CONNECTION_ADMIN:
                    $this->enterOuterAlt($localContext, 49);
                    $this->setState(4975);
                    $this->match(self::SERVICE_CONNECTION_ADMIN);
                    break;
                case self::SESSION_VARIABLES_ADMIN:
                    $this->enterOuterAlt($localContext, 50);
                    $this->setState(4976);
                    $this->match(self::SESSION_VARIABLES_ADMIN);
                    break;
                case self::SET_USER_ID:
                    $this->enterOuterAlt($localContext, 51);
                    $this->setState(4977);
                    $this->match(self::SET_USER_ID);
                    break;
                case self::SHOW_ROUTINE:
                    $this->enterOuterAlt($localContext, 52);
                    $this->setState(4978);
                    $this->match(self::SHOW_ROUTINE);
                    break;
                case self::SYSTEM_USER:
                    $this->enterOuterAlt($localContext, 53);
                    $this->setState(4979);
                    $this->match(self::SYSTEM_USER);
                    break;
                case self::SYSTEM_VARIABLES_ADMIN:
                    $this->enterOuterAlt($localContext, 54);
                    $this->setState(4980);
                    $this->match(self::SYSTEM_VARIABLES_ADMIN);
                    break;
                case self::TABLE_ENCRYPTION_ADMIN:
                    $this->enterOuterAlt($localContext, 55);
                    $this->setState(4981);
                    $this->match(self::TABLE_ENCRYPTION_ADMIN);
                    break;
                case self::VERSION_TOKEN_ADMIN:
                    $this->enterOuterAlt($localContext, 56);
                    $this->setState(4982);
                    $this->match(self::VERSION_TOKEN_ADMIN);
                    break;
                case self::XA_RECOVER_ADMIN:
                    $this->enterOuterAlt($localContext, 57);
                    $this->setState(4983);
                    $this->match(self::XA_RECOVER_ADMIN);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function privilegeLevel(): Context\PrivilegeLevelContext
    {
        $localContext = new Context\PrivilegeLevelContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 426, self::RULE_privilegeLevel);

        try {
            $this->setState(5002);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 717, $this->ctx)) {
                case 1:
                    $localContext = new Context\CurrentSchemaPriviLevelContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(4986);
                    $this->match(self::STAR);
                    break;
                case 2:
                    $localContext = new Context\GlobalPrivLevelContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(4987);
                    $this->match(self::STAR);
                    $this->setState(4988);
                    $this->match(self::DOT);
                    $this->setState(4989);
                    $this->match(self::STAR);
                    break;
                case 3:
                    $localContext = new Context\DefiniteSchemaPrivLevelContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(4990);
                    $this->uid();
                    $this->setState(4991);
                    $this->match(self::DOT);
                    $this->setState(4992);
                    $this->match(self::STAR);
                    break;
                case 4:
                    $localContext = new Context\DefiniteFullTablePrivLevelContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(4994);
                    $this->uid();
                    $this->setState(4995);
                    $this->match(self::DOT);
                    $this->setState(4996);
                    $this->uid();
                    break;
                case 5:
                    $localContext = new Context\DefiniteFullTablePrivLevel2Context($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(4998);
                    $this->uid();
                    $this->setState(4999);
                    $this->dottedId();
                    break;
                case 6:
                    $localContext = new Context\DefiniteTablePrivLevelContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5001);
                    $this->uid();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function renameUserClause(): Context\RenameUserClauseContext
    {
        $localContext = new Context\RenameUserClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 428, self::RULE_renameUserClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5004);
            $localContext->fromFirst = $this->userName();
            $this->setState(5005);
            $this->match(self::TO);
            $this->setState(5006);
            $localContext->toFirst = $this->userName();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function analyzeTable(): Context\AnalyzeTableContext
    {
        $localContext = new Context\AnalyzeTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 430, self::RULE_analyzeTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5008);
            $this->match(self::ANALYZE);
            $this->setState(5010);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
                $this->setState(5009);

                $localContext->actionOption = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
                    $localContext->actionOption = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5012);
            $this->match(self::TABLE);
            $this->setState(5013);
            $this->tables();
            $this->setState(5031);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 721, $this->ctx)) {
                case 1:
                    $this->setState(5014);
                    $this->match(self::UPDATE);
                    $this->setState(5015);
                    $this->match(self::HISTOGRAM);
                    $this->setState(5016);
                    $this->match(self::ON);
                    $this->setState(5017);
                    $this->fullColumnName();
                    $this->setState(5022);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5018);
                        $this->match(self::COMMA);
                        $this->setState(5019);
                        $this->fullColumnName();
                        $this->setState(5024);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(5029);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WITH) {
                        $this->setState(5025);
                        $this->match(self::WITH);
                        $this->setState(5026);
                        $this->decimalLiteral();
                        $this->setState(5027);
                        $this->match(self::BUCKETS);
                    }
                    break;
            }
            $this->setState(5044);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 723, $this->ctx)) {
                case 1:
                    $this->setState(5033);
                    $this->match(self::DROP);
                    $this->setState(5034);
                    $this->match(self::HISTOGRAM);
                    $this->setState(5035);
                    $this->match(self::ON);
                    $this->setState(5036);
                    $this->fullColumnName();
                    $this->setState(5041);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5037);
                        $this->match(self::COMMA);
                        $this->setState(5038);
                        $this->fullColumnName();
                        $this->setState(5043);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function checkTable(): Context\CheckTableContext
    {
        $localContext = new Context\CheckTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 432, self::RULE_checkTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5046);
            $this->match(self::CHECK);
            $this->setState(5047);
            $this->match(self::TABLE);
            $this->setState(5048);
            $this->tables();
            $this->setState(5052);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::FOR || $_la === self::CHANGED || $_la === self::EXTENDED || $_la === self::FAST || $_la === self::MEDIUM || $_la === self::QUICK) {
                $this->setState(5049);
                $this->checkTableOption();
                $this->setState(5054);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function checksumTable(): Context\ChecksumTableContext
    {
        $localContext = new Context\ChecksumTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 434, self::RULE_checksumTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5055);
            $this->match(self::CHECKSUM);
            $this->setState(5056);
            $this->match(self::TABLE);
            $this->setState(5057);
            $this->tables();
            $this->setState(5059);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXTENDED || $_la === self::QUICK) {
                $this->setState(5058);

                $localContext->actionOption = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::EXTENDED || $_la === self::QUICK)) {
                    $localContext->actionOption = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function optimizeTable(): Context\OptimizeTableContext
    {
        $localContext = new Context\OptimizeTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 436, self::RULE_optimizeTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5061);
            $this->match(self::OPTIMIZE);
            $this->setState(5063);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
                $this->setState(5062);

                $localContext->actionOption = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
                    $localContext->actionOption = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5065);

            $_la = $this->input->LA(1);

            if (! ($_la === self::TABLE || $_la === self::TABLES)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(5066);
            $this->tableNames();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function repairTable(): Context\RepairTableContext
    {
        $localContext = new Context\RepairTableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 438, self::RULE_repairTable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5068);
            $this->match(self::REPAIR);
            $this->setState(5070);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
                $this->setState(5069);

                $localContext->actionOption = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
                    $localContext->actionOption = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5072);
            $this->match(self::TABLE);
            $this->setState(5073);
            $this->tables();
            $this->setState(5075);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::QUICK) {
                $this->setState(5074);
                $this->match(self::QUICK);
            }
            $this->setState(5078);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXTENDED) {
                $this->setState(5077);
                $this->match(self::EXTENDED);
            }
            $this->setState(5081);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::USE_FRM) {
                $this->setState(5080);
                $this->match(self::USE_FRM);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function checkTableOption(): Context\CheckTableOptionContext
    {
        $localContext = new Context\CheckTableOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 440, self::RULE_checkTableOption);

        try {
            $this->setState(5090);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::FOR:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5083);
                    $this->match(self::FOR);
                    $this->setState(5084);
                    $this->match(self::UPGRADE);
                    break;
                case self::QUICK:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5085);
                    $this->match(self::QUICK);
                    break;
                case self::FAST:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5086);
                    $this->match(self::FAST);
                    break;
                case self::MEDIUM:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5087);
                    $this->match(self::MEDIUM);
                    break;
                case self::EXTENDED:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5088);
                    $this->match(self::EXTENDED);
                    break;
                case self::CHANGED:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5089);
                    $this->match(self::CHANGED);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function createUdfunction(): Context\CreateUdfunctionContext
    {
        $localContext = new Context\CreateUdfunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 442, self::RULE_createUdfunction);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5092);
            $this->match(self::CREATE);
            $this->setState(5094);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::AGGREGATE) {
                $this->setState(5093);
                $this->match(self::AGGREGATE);
            }
            $this->setState(5096);
            $this->match(self::FUNCTION);
            $this->setState(5097);
            $this->uid();
            $this->setState(5098);
            $this->match(self::RETURNS);
            $this->setState(5099);

            $localContext->returnType = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! (((($_la - 195) & ~0x3F) === 0 && ((1 << ($_la - 195)) & ((1 << (self::INTEGER - 195)) | (1 << (self::REAL - 195)) | (1 << (self::DECIMAL - 195)))) !== 0) || $_la === self::STRING)) {
                $localContext->returnType = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(5100);
            $this->match(self::SONAME);
            $this->setState(5101);
            $this->match(self::STRING_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function installPlugin(): Context\InstallPluginContext
    {
        $localContext = new Context\InstallPluginContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 444, self::RULE_installPlugin);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5103);
            $this->match(self::INSTALL);
            $this->setState(5104);
            $this->match(self::PLUGIN);
            $this->setState(5105);
            $this->uid();
            $this->setState(5106);
            $this->match(self::SONAME);
            $this->setState(5107);
            $this->match(self::STRING_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function uninstallPlugin(): Context\UninstallPluginContext
    {
        $localContext = new Context\UninstallPluginContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 446, self::RULE_uninstallPlugin);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5109);
            $this->match(self::UNINSTALL);
            $this->setState(5110);
            $this->match(self::PLUGIN);
            $this->setState(5111);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function setStatement(): Context\SetStatementContext
    {
        $localContext = new Context\SetStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 448, self::RULE_setStatement);

        try {
            $this->setState(5164);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 739, $this->ctx)) {
                case 1:
                    $localContext = new Context\SetVariableContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5113);
                    $this->match(self::SET);
                    $this->setState(5114);
                    $this->variableClause();
                    $this->setState(5115);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5116);
                    $this->recursiveExpression(0);
                    $this->setState(5124);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5117);
                        $this->match(self::COMMA);
                        $this->setState(5118);
                        $this->variableClause();
                        $this->setState(5119);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5120);
                        $this->recursiveExpression(0);
                        $this->setState(5126);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\SetCharsetContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5127);
                    $this->match(self::SET);
                    $this->setState(5131);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::CHARACTER:
                            $this->setState(5128);
                            $this->match(self::CHARACTER);
                            $this->setState(5129);
                            $this->match(self::SET);
                            break;
                        case self::CHARSET:
                            $this->setState(5130);
                            $this->match(self::CHARSET);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(5135);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::BINARY:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                            $this->setState(5133);
                            $this->charsetName();
                            break;
                        case self::DEFAULT:
                            $this->setState(5134);
                            $this->match(self::DEFAULT);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 3:
                    $localContext = new Context\SetNamesContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5137);
                    $this->match(self::SET);
                    $this->setState(5138);
                    $this->match(self::NAMES);
                    $this->setState(5145);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::BINARY:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                            $this->setState(5139);
                            $this->charsetName();
                            $this->setState(5142);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::COLLATE) {
                                $this->setState(5140);
                                $this->match(self::COLLATE);
                                $this->setState(5141);
                                $this->collationName();
                            }
                            break;
                        case self::DEFAULT:
                            $this->setState(5144);
                            $this->match(self::DEFAULT);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 4:
                    $localContext = new Context\SetPasswordContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5147);
                    $this->setPasswordStatement();
                    break;
                case 5:
                    $localContext = new Context\SetTransactionContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5148);
                    $this->setTransactionStatement();
                    break;
                case 6:
                    $localContext = new Context\SetAutocommitContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5149);
                    $this->setAutocommitStatement();
                    break;
                case 7:
                    $localContext = new Context\SetNewValueInsideTriggerContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5150);
                    $this->match(self::SET);
                    $this->setState(5151);
                    $this->fullId();
                    $this->setState(5152);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5153);
                    $this->recursiveExpression(0);
                    $this->setState(5161);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5154);
                        $this->match(self::COMMA);
                        $this->setState(5155);
                        $this->fullId();
                        $this->setState(5156);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::VAR_ASSIGN || $_la === self::EQUAL_SYMBOL)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5157);
                        $this->recursiveExpression(0);
                        $this->setState(5163);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showStatement(): Context\ShowStatementContext
    {
        $localContext = new Context\ShowStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 450, self::RULE_showStatement);

        try {
            $this->setState(5317);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 761, $this->ctx)) {
                case 1:
                    $localContext = new Context\ShowMasterLogsContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5166);
                    $this->match(self::SHOW);
                    $this->setState(5167);

                    $localContext->logFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::BINARY || $_la === self::MASTER)) {
                        $localContext->logFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5168);
                    $this->match(self::LOGS);
                    break;
                case 2:
                    $localContext = new Context\ShowLogEventsContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5169);
                    $this->match(self::SHOW);
                    $this->setState(5170);

                    $localContext->logFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::BINLOG || $_la === self::RELAYLOG)) {
                        $localContext->logFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5171);
                    $this->match(self::EVENTS);
                    $this->setState(5174);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IN) {
                        $this->setState(5172);
                        $this->match(self::IN);
                        $this->setState(5173);
                        $localContext->filename = $this->match(self::STRING_LITERAL);
                    }
                    $this->setState(5178);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FROM) {
                        $this->setState(5176);
                        $this->match(self::FROM);
                        $this->setState(5177);
                        $localContext->fromPosition = $this->decimalLiteral();
                    }
                    $this->setState(5187);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIMIT) {
                        $this->setState(5180);
                        $this->match(self::LIMIT);
                        $this->setState(5184);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 742, $this->ctx)) {
                            case 1:
                                $this->setState(5181);
                                $localContext->offset = $this->decimalLiteral();
                                $this->setState(5182);
                                $this->match(self::COMMA);
                                break;
                        }
                        $this->setState(5186);
                        $localContext->rowCount = $this->decimalLiteral();
                    }
                    break;
                case 3:
                    $localContext = new Context\ShowObjectFilterContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5189);
                    $this->match(self::SHOW);
                    $this->setState(5190);
                    $this->showCommonEntity();
                    $this->setState(5192);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIKE || $_la === self::WHERE) {
                        $this->setState(5191);
                        $this->showFilter();
                    }
                    break;
                case 4:
                    $localContext = new Context\ShowColumnsContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5194);
                    $this->match(self::SHOW);
                    $this->setState(5196);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FULL) {
                        $this->setState(5195);
                        $this->match(self::FULL);
                    }
                    $this->setState(5198);

                    $localContext->columnsFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::COLUMNS || $_la === self::FIELDS)) {
                        $localContext->columnsFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5199);

                    $localContext->tableFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FROM || $_la === self::IN)) {
                        $localContext->tableFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5200);
                    $this->tableName();
                    $this->setState(5203);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FROM || $_la === self::IN) {
                        $this->setState(5201);

                        $localContext->schemaFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::FROM || $_la === self::IN)) {
                            $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5202);
                        $this->uid();
                    }
                    $this->setState(5206);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIKE || $_la === self::WHERE) {
                        $this->setState(5205);
                        $this->showFilter();
                    }
                    break;
                case 5:
                    $localContext = new Context\ShowCreateDbContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5208);
                    $this->match(self::SHOW);
                    $this->setState(5209);
                    $this->match(self::CREATE);
                    $this->setState(5210);

                    $localContext->schemaFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::DATABASE || $_la === self::SCHEMA)) {
                        $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5212);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::IF) {
                        $this->setState(5211);
                        $this->ifNotExists();
                    }
                    $this->setState(5214);
                    $this->uid();
                    break;
                case 6:
                    $localContext = new Context\ShowCreateFullIdObjectContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5215);
                    $this->match(self::SHOW);
                    $this->setState(5216);
                    $this->match(self::CREATE);
                    $this->setState(5217);

                    $localContext->namedEntity = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! (((($_la - 123) & ~0x3F) === 0 && ((1 << ($_la - 123)) & ((1 << (self::PROCEDURE - 123)) | (1 << (self::TABLE - 123)) | (1 << (self::TRIGGER - 123)))) !== 0) || $_la === self::EVENT || $_la === self::FUNCTION || $_la === self::VIEW)) {
                        $localContext->namedEntity = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5218);
                    $this->fullId();
                    break;
                case 7:
                    $localContext = new Context\ShowCreateUserContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5219);
                    $this->match(self::SHOW);
                    $this->setState(5220);
                    $this->match(self::CREATE);
                    $this->setState(5221);
                    $this->match(self::USER);
                    $this->setState(5222);
                    $this->userName();
                    break;
                case 8:
                    $localContext = new Context\ShowEngineContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5223);
                    $this->match(self::SHOW);
                    $this->setState(5224);
                    $this->match(self::ENGINE);
                    $this->setState(5225);
                    $this->engineName();
                    $this->setState(5226);

                    $localContext->engineOption = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::MUTEX || $_la === self::STATUS)) {
                        $localContext->engineOption = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 9:
                    $localContext = new Context\ShowGlobalInfoContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(5228);
                    $this->match(self::SHOW);
                    $this->setState(5229);
                    $this->showGlobalInfoClause();
                    break;
                case 10:
                    $localContext = new Context\ShowErrorsContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(5230);
                    $this->match(self::SHOW);
                    $this->setState(5231);

                    $localContext->errorFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ERRORS || $_la === self::WARNINGS)) {
                        $localContext->errorFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }

                    $this->setState(5232);
                    $this->match(self::LIMIT);
                    $this->setState(5236);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 749, $this->ctx)) {
                        case 1:
                            $this->setState(5233);
                            $localContext->offset = $this->decimalLiteral();
                            $this->setState(5234);
                            $this->match(self::COMMA);
                            break;
                    }
                    $this->setState(5238);
                    $localContext->rowCount = $this->decimalLiteral();
                    break;
                case 11:
                    $localContext = new Context\ShowCountErrorsContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(5239);
                    $this->match(self::SHOW);
                    $this->setState(5240);
                    $this->match(self::COUNT);
                    $this->setState(5241);
                    $this->match(self::LR_BRACKET);
                    $this->setState(5242);
                    $this->match(self::STAR);
                    $this->setState(5243);
                    $this->match(self::RR_BRACKET);
                    $this->setState(5244);

                    $localContext->errorFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::ERRORS || $_la === self::WARNINGS)) {
                        $localContext->errorFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 12:
                    $localContext = new Context\ShowSchemaFilterContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(5245);
                    $this->match(self::SHOW);
                    $this->setState(5246);
                    $this->showSchemaEntity();
                    $this->setState(5249);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FROM || $_la === self::IN) {
                        $this->setState(5247);

                        $localContext->schemaFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::FROM || $_la === self::IN)) {
                            $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5248);
                        $this->uid();
                    }
                    $this->setState(5252);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIKE || $_la === self::WHERE) {
                        $this->setState(5251);
                        $this->showFilter();
                    }
                    break;
                case 13:
                    $localContext = new Context\ShowRoutineContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(5254);
                    $this->match(self::SHOW);
                    $this->setState(5255);

                    $localContext->routine = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::PROCEDURE || $_la === self::FUNCTION)) {
                        $localContext->routine = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5256);
                    $this->match(self::CODE);
                    $this->setState(5257);
                    $this->fullId();
                    break;
                case 14:
                    $localContext = new Context\ShowGrantsContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(5258);
                    $this->match(self::SHOW);
                    $this->setState(5259);
                    $this->match(self::GRANTS);
                    $this->setState(5262);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(5260);
                        $this->match(self::FOR);
                        $this->setState(5261);
                        $this->userName();
                    }
                    break;
                case 15:
                    $localContext = new Context\ShowIndexesContext($localContext);
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(5264);
                    $this->match(self::SHOW);
                    $this->setState(5265);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEYS || $_la === self::INDEXES)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5266);

                    $localContext->tableFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FROM || $_la === self::IN)) {
                        $localContext->tableFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5267);
                    $this->tableName();
                    $this->setState(5270);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FROM || $_la === self::IN) {
                        $this->setState(5268);

                        $localContext->schemaFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::FROM || $_la === self::IN)) {
                            $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5269);
                        $this->uid();
                    }
                    $this->setState(5274);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::WHERE) {
                        $this->setState(5272);
                        $this->match(self::WHERE);
                        $this->setState(5273);
                        $this->recursiveExpression(0);
                    }
                    break;
                case 16:
                    $localContext = new Context\ShowOpenTablesContext($localContext);
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(5276);
                    $this->match(self::SHOW);
                    $this->setState(5277);
                    $this->match(self::OPEN);
                    $this->setState(5278);
                    $this->match(self::TABLES);
                    $this->setState(5281);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FROM || $_la === self::IN) {
                        $this->setState(5279);

                        $localContext->schemaFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::FROM || $_la === self::IN)) {
                            $localContext->schemaFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5280);
                        $this->uid();
                    }
                    $this->setState(5284);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LIKE || $_la === self::WHERE) {
                        $this->setState(5283);
                        $this->showFilter();
                    }
                    break;
                case 17:
                    $localContext = new Context\ShowProfileContext($localContext);
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(5286);
                    $this->match(self::SHOW);
                    $this->setState(5287);
                    $this->match(self::PROFILE);
                    $this->setState(5288);
                    $this->showProfileType();
                    $this->setState(5293);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5289);
                        $this->match(self::COMMA);
                        $this->setState(5290);
                        $this->showProfileType();
                        $this->setState(5295);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(5299);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(5296);
                        $this->match(self::FOR);
                        $this->setState(5297);
                        $this->match(self::QUERY);
                        $this->setState(5298);
                        $localContext->queryCount = $this->decimalLiteral();
                    }

                    $this->setState(5301);
                    $this->match(self::LIMIT);
                    $this->setState(5305);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 759, $this->ctx)) {
                        case 1:
                            $this->setState(5302);
                            $localContext->offset = $this->decimalLiteral();
                            $this->setState(5303);
                            $this->match(self::COMMA);
                            break;
                    }
                    $this->setState(5307);
                    $localContext->rowCount = $this->decimalLiteral();
                    break;
                case 18:
                    $localContext = new Context\ShowSlaveStatusContext($localContext);
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(5309);
                    $this->match(self::SHOW);
                    $this->setState(5310);
                    $this->match(self::SLAVE);
                    $this->setState(5311);
                    $this->match(self::STATUS);
                    $this->setState(5315);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(5312);
                        $this->match(self::FOR);
                        $this->setState(5313);
                        $this->match(self::CHANNEL);
                        $this->setState(5314);
                        $this->match(self::STRING_LITERAL);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function variableClause(): Context\VariableClauseContext
    {
        $localContext = new Context\VariableClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 452, self::RULE_variableClause);

        try {
            $this->setState(5329);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LOCAL_ID:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5319);
                    $this->match(self::LOCAL_ID);
                    break;
                case self::GLOBAL_ID:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5320);
                    $this->match(self::GLOBAL_ID);
                    break;
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::AT_SIGN:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5326);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 763, $this->ctx)) {
                        case 1:
                            $this->setState(5323);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::AT_SIGN) {
                                $this->setState(5321);
                                $this->match(self::AT_SIGN);
                                $this->setState(5322);
                                $this->match(self::AT_SIGN);
                            }
                            $this->setState(5325);

                            $_la = $this->input->LA(1);

                            if (! ($_la === self::GLOBAL || $_la === self::LOCAL || $_la === self::SESSION)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(5328);
                    $this->uid();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showCommonEntity(): Context\ShowCommonEntityContext
    {
        $localContext = new Context\ShowCommonEntityContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 454, self::RULE_showCommonEntity);

        try {
            $this->setState(5344);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CHARACTER:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5331);
                    $this->match(self::CHARACTER);
                    $this->setState(5332);
                    $this->match(self::SET);
                    break;
                case self::COLLATION:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5333);
                    $this->match(self::COLLATION);
                    break;
                case self::DATABASES:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5334);
                    $this->match(self::DATABASES);
                    break;
                case self::SCHEMAS:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5335);
                    $this->match(self::SCHEMAS);
                    break;
                case self::FUNCTION:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5336);
                    $this->match(self::FUNCTION);
                    $this->setState(5337);
                    $this->match(self::STATUS);
                    break;
                case self::PROCEDURE:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5338);
                    $this->match(self::PROCEDURE);
                    $this->setState(5339);
                    $this->match(self::STATUS);
                    break;
                case self::GLOBAL:
                case self::SESSION:
                case self::STATUS:
                case self::VARIABLES:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5341);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::GLOBAL || $_la === self::SESSION) {
                        $this->setState(5340);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::GLOBAL || $_la === self::SESSION)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(5343);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::STATUS || $_la === self::VARIABLES)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showFilter(): Context\ShowFilterContext
    {
        $localContext = new Context\ShowFilterContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 456, self::RULE_showFilter);

        try {
            $this->setState(5350);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LIKE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5346);
                    $this->match(self::LIKE);
                    $this->setState(5347);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::WHERE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5348);
                    $this->match(self::WHERE);
                    $this->setState(5349);
                    $this->recursiveExpression(0);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showGlobalInfoClause(): Context\ShowGlobalInfoClauseContext
    {
        $localContext = new Context\ShowGlobalInfoClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 458, self::RULE_showGlobalInfoClause);

        try {
            $this->setState(5369);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ENGINES:
                case self::STORAGE:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5353);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::STORAGE) {
                        $this->setState(5352);
                        $this->match(self::STORAGE);
                    }
                    $this->setState(5355);
                    $this->match(self::ENGINES);
                    break;
                case self::MASTER:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5356);
                    $this->match(self::MASTER);
                    $this->setState(5357);
                    $this->match(self::STATUS);
                    break;
                case self::PLUGINS:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5358);
                    $this->match(self::PLUGINS);
                    break;
                case self::PRIVILEGES:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5359);
                    $this->match(self::PRIVILEGES);
                    break;
                case self::FULL:
                case self::PROCESSLIST:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5361);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FULL) {
                        $this->setState(5360);
                        $this->match(self::FULL);
                    }
                    $this->setState(5363);
                    $this->match(self::PROCESSLIST);
                    break;
                case self::PROFILES:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5364);
                    $this->match(self::PROFILES);
                    break;
                case self::SLAVE:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5365);
                    $this->match(self::SLAVE);
                    $this->setState(5366);
                    $this->match(self::HOSTS);
                    break;
                case self::AUTHORS:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5367);
                    $this->match(self::AUTHORS);
                    break;
                case self::CONTRIBUTORS:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(5368);
                    $this->match(self::CONTRIBUTORS);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showSchemaEntity(): Context\ShowSchemaEntityContext
    {
        $localContext = new Context\ShowSchemaEntityContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 460, self::RULE_showSchemaEntity);

        try {
            $this->setState(5379);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::EVENTS:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5371);
                    $this->match(self::EVENTS);
                    break;
                case self::TABLE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5372);
                    $this->match(self::TABLE);
                    $this->setState(5373);
                    $this->match(self::STATUS);
                    break;
                case self::FULL:
                case self::TABLES:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5375);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FULL) {
                        $this->setState(5374);
                        $this->match(self::FULL);
                    }
                    $this->setState(5377);
                    $this->match(self::TABLES);
                    break;
                case self::TRIGGERS:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5378);
                    $this->match(self::TRIGGERS);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function showProfileType(): Context\ShowProfileTypeContext
    {
        $localContext = new Context\ShowProfileTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 462, self::RULE_showProfileType);

        try {
            $this->setState(5393);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::ALL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5381);
                    $this->match(self::ALL);
                    break;
                case self::BLOCK:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5382);
                    $this->match(self::BLOCK);
                    $this->setState(5383);
                    $this->match(self::IO);
                    break;
                case self::CONTEXT:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5384);
                    $this->match(self::CONTEXT);
                    $this->setState(5385);
                    $this->match(self::SWITCHES);
                    break;
                case self::CPU:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5386);
                    $this->match(self::CPU);
                    break;
                case self::IPC:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5387);
                    $this->match(self::IPC);
                    break;
                case self::MEMORY:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5388);
                    $this->match(self::MEMORY);
                    break;
                case self::PAGE:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5389);
                    $this->match(self::PAGE);
                    $this->setState(5390);
                    $this->match(self::FAULTS);
                    break;
                case self::SOURCE:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5391);
                    $this->match(self::SOURCE);
                    break;
                case self::SWAPS:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(5392);
                    $this->match(self::SWAPS);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function binlogStatement(): Context\BinlogStatementContext
    {
        $localContext = new Context\BinlogStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 464, self::RULE_binlogStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5395);
            $this->match(self::BINLOG);
            $this->setState(5396);
            $this->match(self::STRING_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function cacheIndexStatement(): Context\CacheIndexStatementContext
    {
        $localContext = new Context\CacheIndexStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 466, self::RULE_cacheIndexStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5398);
            $this->match(self::CACHE);
            $this->setState(5399);
            $this->match(self::INDEX);
            $this->setState(5400);
            $this->tableIndexes();
            $this->setState(5405);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(5401);
                $this->match(self::COMMA);
                $this->setState(5402);
                $this->tableIndexes();
                $this->setState(5407);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(5415);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(5408);
                $this->match(self::PARTITION);
                $this->setState(5409);
                $this->match(self::LR_BRACKET);
                $this->setState(5412);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::CURRENT:
                    case self::DATABASE:
                    case self::DIAGNOSTICS:
                    case self::EXCEPT:
                    case self::GROUP:
                    case self::LEFT:
                    case self::NUMBER:
                    case self::ORDER:
                    case self::RIGHT:
                    case self::SCHEMA:
                    case self::STACKED:
                    case self::DATE:
                    case self::TIME:
                    case self::TIMESTAMP:
                    case self::DATETIME:
                    case self::YEAR:
                    case self::BINARY:
                    case self::TEXT:
                    case self::ENUM:
                    case self::SERIAL:
                    case self::JSON_ARRAY:
                    case self::JSON_OBJECT:
                    case self::JSON_QUOTE:
                    case self::JSON_CONTAINS:
                    case self::JSON_CONTAINS_PATH:
                    case self::JSON_EXTRACT:
                    case self::JSON_KEYS:
                    case self::JSON_OVERLAPS:
                    case self::JSON_SEARCH:
                    case self::JSON_VALUE:
                    case self::JSON_ARRAY_APPEND:
                    case self::JSON_ARRAY_INSERT:
                    case self::JSON_INSERT:
                    case self::JSON_MERGE:
                    case self::JSON_MERGE_PATCH:
                    case self::JSON_MERGE_PRESERVE:
                    case self::JSON_REMOVE:
                    case self::JSON_REPLACE:
                    case self::JSON_SET:
                    case self::JSON_UNQUOTE:
                    case self::JSON_DEPTH:
                    case self::JSON_LENGTH:
                    case self::JSON_TYPE:
                    case self::JSON_VALID:
                    case self::JSON_TABLE:
                    case self::JSON_SCHEMA_VALID:
                    case self::JSON_SCHEMA_VALIDATION_REPORT:
                    case self::JSON_PRETTY:
                    case self::JSON_STORAGE_FREE:
                    case self::JSON_STORAGE_SIZE:
                    case self::JSON_ARRAYAGG:
                    case self::JSON_OBJECTAGG:
                    case self::AVG:
                    case self::BIT_AND:
                    case self::BIT_OR:
                    case self::BIT_XOR:
                    case self::COUNT:
                    case self::GROUP_CONCAT:
                    case self::MAX:
                    case self::MIN:
                    case self::STD:
                    case self::STDDEV:
                    case self::STDDEV_POP:
                    case self::STDDEV_SAMP:
                    case self::SUM:
                    case self::VAR_POP:
                    case self::VAR_SAMP:
                    case self::VARIANCE:
                    case self::POSITION:
                    case self::ACCOUNT:
                    case self::ACTION:
                    case self::AFTER:
                    case self::AGGREGATE:
                    case self::ALGORITHM:
                    case self::ANY:
                    case self::AT:
                    case self::AUTHORS:
                    case self::AUTOCOMMIT:
                    case self::AUTOEXTEND_SIZE:
                    case self::AUTO_INCREMENT:
                    case self::AVG_ROW_LENGTH:
                    case self::BEGIN:
                    case self::BINLOG:
                    case self::BIT:
                    case self::BLOCK:
                    case self::BOOL:
                    case self::BOOLEAN:
                    case self::BTREE:
                    case self::CACHE:
                    case self::CASCADED:
                    case self::CHAIN:
                    case self::CHANGED:
                    case self::CHANNEL:
                    case self::CHECKSUM:
                    case self::PAGE_CHECKSUM:
                    case self::CIPHER:
                    case self::CLASS_ORIGIN:
                    case self::CLIENT:
                    case self::CLOSE:
                    case self::COALESCE:
                    case self::CODE:
                    case self::COLUMNS:
                    case self::COLUMN_FORMAT:
                    case self::COLUMN_NAME:
                    case self::COMMENT:
                    case self::COMMIT:
                    case self::COMPACT:
                    case self::COMPLETION:
                    case self::COMPRESSED:
                    case self::COMPRESSION:
                    case self::CONCURRENT:
                    case self::CONNECT:
                    case self::CONNECTION:
                    case self::CONSISTENT:
                    case self::CONSTRAINT_CATALOG:
                    case self::CONSTRAINT_SCHEMA:
                    case self::CONSTRAINT_NAME:
                    case self::CONTAINS:
                    case self::CONTEXT:
                    case self::CONTRIBUTORS:
                    case self::COPY:
                    case self::CPU:
                    case self::CURSOR_NAME:
                    case self::DATA:
                    case self::DATAFILE:
                    case self::DEALLOCATE:
                    case self::DEFAULT_AUTH:
                    case self::DEFINER:
                    case self::DELAY_KEY_WRITE:
                    case self::DES_KEY_FILE:
                    case self::DIRECTORY:
                    case self::DISABLE:
                    case self::DISCARD:
                    case self::DISK:
                    case self::DO:
                    case self::DUMPFILE:
                    case self::DUPLICATE:
                    case self::DYNAMIC:
                    case self::ENABLE:
                    case self::ENCRYPTION:
                    case self::END:
                    case self::ENDS:
                    case self::ENGINE:
                    case self::ENGINES:
                    case self::ERROR:
                    case self::ERRORS:
                    case self::ESCAPE:
                    case self::EVEN:
                    case self::EVENT:
                    case self::EVENTS:
                    case self::EVERY:
                    case self::EXCHANGE:
                    case self::EXCLUSIVE:
                    case self::EXPIRE:
                    case self::EXPORT:
                    case self::EXTENDED:
                    case self::EXTENT_SIZE:
                    case self::FAST:
                    case self::FAULTS:
                    case self::FIELDS:
                    case self::FILE_BLOCK_SIZE:
                    case self::FILTER:
                    case self::FIRST:
                    case self::FIXED:
                    case self::FLUSH:
                    case self::FOLLOWS:
                    case self::FOUND:
                    case self::FULL:
                    case self::FUNCTION:
                    case self::GENERAL:
                    case self::GLOBAL:
                    case self::GRANTS:
                    case self::GROUP_REPLICATION:
                    case self::HANDLER:
                    case self::HASH:
                    case self::HELP:
                    case self::HOST:
                    case self::HOSTS:
                    case self::IDENTIFIED:
                    case self::IGNORE_SERVER_IDS:
                    case self::IMPORT:
                    case self::INDEXES:
                    case self::INITIAL_SIZE:
                    case self::INPLACE:
                    case self::INSERT_METHOD:
                    case self::INSTALL:
                    case self::INSTANCE:
                    case self::INVISIBLE:
                    case self::INVOKER:
                    case self::IO:
                    case self::IO_THREAD:
                    case self::IPC:
                    case self::ISOLATION:
                    case self::ISSUER:
                    case self::JSON:
                    case self::KEY_BLOCK_SIZE:
                    case self::LANGUAGE:
                    case self::LAST:
                    case self::LEAVES:
                    case self::LESS:
                    case self::LEVEL:
                    case self::LIST:
                    case self::LOCAL:
                    case self::LOGFILE:
                    case self::LOGS:
                    case self::MASTER:
                    case self::MASTER_AUTO_POSITION:
                    case self::MASTER_CONNECT_RETRY:
                    case self::MASTER_DELAY:
                    case self::MASTER_HEARTBEAT_PERIOD:
                    case self::MASTER_HOST:
                    case self::MASTER_LOG_FILE:
                    case self::MASTER_LOG_POS:
                    case self::MASTER_PASSWORD:
                    case self::MASTER_PORT:
                    case self::MASTER_RETRY_COUNT:
                    case self::MASTER_SSL:
                    case self::MASTER_SSL_CA:
                    case self::MASTER_SSL_CAPATH:
                    case self::MASTER_SSL_CERT:
                    case self::MASTER_SSL_CIPHER:
                    case self::MASTER_SSL_CRL:
                    case self::MASTER_SSL_CRLPATH:
                    case self::MASTER_SSL_KEY:
                    case self::MASTER_TLS_VERSION:
                    case self::MASTER_USER:
                    case self::MAX_CONNECTIONS_PER_HOUR:
                    case self::MAX_QUERIES_PER_HOUR:
                    case self::MAX_ROWS:
                    case self::MAX_SIZE:
                    case self::MAX_UPDATES_PER_HOUR:
                    case self::MAX_USER_CONNECTIONS:
                    case self::MEDIUM:
                    case self::MEMBER:
                    case self::MERGE:
                    case self::MESSAGE_TEXT:
                    case self::MID:
                    case self::MIGRATE:
                    case self::MIN_ROWS:
                    case self::MODE:
                    case self::MODIFY:
                    case self::MUTEX:
                    case self::MYSQL:
                    case self::MYSQL_ERRNO:
                    case self::NAME:
                    case self::NAMES:
                    case self::NCHAR:
                    case self::NEVER:
                    case self::NEXT:
                    case self::NO:
                    case self::NODEGROUP:
                    case self::NONE:
                    case self::ODBC:
                    case self::OFFLINE:
                    case self::OFFSET:
                    case self::OF:
                    case self::OJ:
                    case self::OLD_PASSWORD:
                    case self::ONE:
                    case self::ONLINE:
                    case self::ONLY:
                    case self::OPEN:
                    case self::OPTIMIZER_COSTS:
                    case self::OPTIONS:
                    case self::OWNER:
                    case self::PACK_KEYS:
                    case self::PAGE:
                    case self::PARSER:
                    case self::PARTIAL:
                    case self::PARTITIONING:
                    case self::PARTITIONS:
                    case self::PASSWORD:
                    case self::PHASE:
                    case self::PLUGIN:
                    case self::PLUGIN_DIR:
                    case self::PLUGINS:
                    case self::PORT:
                    case self::PRECEDES:
                    case self::PREPARE:
                    case self::PRESERVE:
                    case self::PREV:
                    case self::PROCESSLIST:
                    case self::PROFILE:
                    case self::PROFILES:
                    case self::PROXY:
                    case self::QUERY:
                    case self::QUICK:
                    case self::REBUILD:
                    case self::RECOVER:
                    case self::REDO_BUFFER_SIZE:
                    case self::REDUNDANT:
                    case self::RELAY:
                    case self::RELAY_LOG_FILE:
                    case self::RELAY_LOG_POS:
                    case self::RELAYLOG:
                    case self::REMOVE:
                    case self::REORGANIZE:
                    case self::REPAIR:
                    case self::REPLICATE_DO_DB:
                    case self::REPLICATE_DO_TABLE:
                    case self::REPLICATE_IGNORE_DB:
                    case self::REPLICATE_IGNORE_TABLE:
                    case self::REPLICATE_REWRITE_DB:
                    case self::REPLICATE_WILD_DO_TABLE:
                    case self::REPLICATE_WILD_IGNORE_TABLE:
                    case self::REPLICATION:
                    case self::RESET:
                    case self::RESUME:
                    case self::RETURNED_SQLSTATE:
                    case self::RETURNS:
                    case self::ROLE:
                    case self::ROLLBACK:
                    case self::ROLLUP:
                    case self::ROTATE:
                    case self::ROW:
                    case self::ROWS:
                    case self::ROW_FORMAT:
                    case self::SAVEPOINT:
                    case self::SCHEDULE:
                    case self::SECURITY:
                    case self::SERVER:
                    case self::SESSION:
                    case self::SHARE:
                    case self::SHARED:
                    case self::SIGNED:
                    case self::SIMPLE:
                    case self::SLAVE:
                    case self::SLOW:
                    case self::SNAPSHOT:
                    case self::SOCKET:
                    case self::SOME:
                    case self::SONAME:
                    case self::SOUNDS:
                    case self::SOURCE:
                    case self::SQL_AFTER_GTIDS:
                    case self::SQL_AFTER_MTS_GAPS:
                    case self::SQL_BEFORE_GTIDS:
                    case self::SQL_BUFFER_RESULT:
                    case self::SQL_CACHE:
                    case self::SQL_NO_CACHE:
                    case self::SQL_THREAD:
                    case self::START:
                    case self::STARTS:
                    case self::STATS_AUTO_RECALC:
                    case self::STATS_PERSISTENT:
                    case self::STATS_SAMPLE_PAGES:
                    case self::STATUS:
                    case self::STOP:
                    case self::STORAGE:
                    case self::STRING:
                    case self::SUBCLASS_ORIGIN:
                    case self::SUBJECT:
                    case self::SUBPARTITION:
                    case self::SUBPARTITIONS:
                    case self::SUSPEND:
                    case self::SWAPS:
                    case self::SWITCHES:
                    case self::TABLE_NAME:
                    case self::TABLESPACE:
                    case self::TEMPORARY:
                    case self::TEMPTABLE:
                    case self::THAN:
                    case self::TRADITIONAL:
                    case self::TRANSACTION:
                    case self::TRANSACTIONAL:
                    case self::TRIGGERS:
                    case self::TRUNCATE:
                    case self::UNDEFINED:
                    case self::UNDOFILE:
                    case self::UNDO_BUFFER_SIZE:
                    case self::UNINSTALL:
                    case self::UNKNOWN:
                    case self::UNTIL:
                    case self::UPGRADE:
                    case self::USER:
                    case self::USE_FRM:
                    case self::USER_RESOURCES:
                    case self::VALIDATION:
                    case self::VALUE:
                    case self::VARIABLES:
                    case self::VIEW:
                    case self::VISIBLE:
                    case self::WAIT:
                    case self::WARNINGS:
                    case self::WITHOUT:
                    case self::WORK:
                    case self::WRAPPER:
                    case self::X509:
                    case self::XA:
                    case self::XML:
                    case self::EUR:
                    case self::USA:
                    case self::JIS:
                    case self::ISO:
                    case self::INTERNAL:
                    case self::QUARTER:
                    case self::MONTH:
                    case self::DAY:
                    case self::HOUR:
                    case self::MINUTE:
                    case self::WEEK:
                    case self::SECOND:
                    case self::MICROSECOND:
                    case self::TABLES:
                    case self::ROUTINE:
                    case self::EXECUTE:
                    case self::FILE:
                    case self::PROCESS:
                    case self::RELOAD:
                    case self::SHUTDOWN:
                    case self::SUPER:
                    case self::PRIVILEGES:
                    case self::AUDIT_ADMIN:
                    case self::BACKUP_ADMIN:
                    case self::BINLOG_ADMIN:
                    case self::BINLOG_ENCRYPTION_ADMIN:
                    case self::CLONE_ADMIN:
                    case self::CONNECTION_ADMIN:
                    case self::ENCRYPTION_KEY_ADMIN:
                    case self::FIREWALL_ADMIN:
                    case self::FIREWALL_USER:
                    case self::GROUP_REPLICATION_ADMIN:
                    case self::INNODB_REDO_LOG_ARCHIVE:
                    case self::NDB_STORED_USER:
                    case self::PERSIST_RO_VARIABLES_ADMIN:
                    case self::REPLICATION_APPLIER:
                    case self::REPLICATION_SLAVE_ADMIN:
                    case self::RESOURCE_GROUP_ADMIN:
                    case self::RESOURCE_GROUP_USER:
                    case self::ROLE_ADMIN:
                    case self::SESSION_VARIABLES_ADMIN:
                    case self::SET_USER_ID:
                    case self::SHOW_ROUTINE:
                    case self::SYSTEM_VARIABLES_ADMIN:
                    case self::TABLE_ENCRYPTION_ADMIN:
                    case self::VERSION_TOKEN_ADMIN:
                    case self::XA_RECOVER_ADMIN:
                    case self::ARMSCII8:
                    case self::ASCII:
                    case self::BIG5:
                    case self::CP1250:
                    case self::CP1251:
                    case self::CP1256:
                    case self::CP1257:
                    case self::CP850:
                    case self::CP852:
                    case self::CP866:
                    case self::CP932:
                    case self::DEC8:
                    case self::EUCJPMS:
                    case self::EUCKR:
                    case self::GB18030:
                    case self::GB2312:
                    case self::GBK:
                    case self::GEOSTD8:
                    case self::GREEK:
                    case self::HEBREW:
                    case self::HP8:
                    case self::KEYBCS2:
                    case self::KOI8R:
                    case self::KOI8U:
                    case self::LATIN1:
                    case self::LATIN2:
                    case self::LATIN5:
                    case self::LATIN7:
                    case self::MACCE:
                    case self::MACROMAN:
                    case self::SJIS:
                    case self::SWE7:
                    case self::TIS620:
                    case self::UCS2:
                    case self::UJIS:
                    case self::UTF16:
                    case self::UTF16LE:
                    case self::UTF32:
                    case self::UTF8:
                    case self::UTF8MB3:
                    case self::UTF8MB4:
                    case self::ARCHIVE:
                    case self::BLACKHOLE:
                    case self::CSV:
                    case self::FEDERATED:
                    case self::INNODB:
                    case self::MEMORY:
                    case self::MRG_MYISAM:
                    case self::MYISAM:
                    case self::NDB:
                    case self::NDBCLUSTER:
                    case self::PERFORMANCE_SCHEMA:
                    case self::TOKUDB:
                    case self::REPEATABLE:
                    case self::COMMITTED:
                    case self::UNCOMMITTED:
                    case self::SERIALIZABLE:
                    case self::GEOMETRYCOLLECTION:
                    case self::LINESTRING:
                    case self::MULTILINESTRING:
                    case self::MULTIPOINT:
                    case self::MULTIPOLYGON:
                    case self::POINT:
                    case self::POLYGON:
                    case self::ABS:
                    case self::ACOS:
                    case self::ADDDATE:
                    case self::ADDTIME:
                    case self::AES_DECRYPT:
                    case self::AES_ENCRYPT:
                    case self::AREA:
                    case self::ASBINARY:
                    case self::ASIN:
                    case self::ASTEXT:
                    case self::ASWKB:
                    case self::ASWKT:
                    case self::ASYMMETRIC_DECRYPT:
                    case self::ASYMMETRIC_DERIVE:
                    case self::ASYMMETRIC_ENCRYPT:
                    case self::ASYMMETRIC_SIGN:
                    case self::ASYMMETRIC_VERIFY:
                    case self::ATAN:
                    case self::ATAN2:
                    case self::BENCHMARK:
                    case self::BIN:
                    case self::BIT_COUNT:
                    case self::BIT_LENGTH:
                    case self::BUFFER:
                    case self::CATALOG_NAME:
                    case self::CEIL:
                    case self::CEILING:
                    case self::CENTROID:
                    case self::CHARACTER_LENGTH:
                    case self::CHARSET:
                    case self::CHAR_LENGTH:
                    case self::COERCIBILITY:
                    case self::COLLATION:
                    case self::COMPRESS:
                    case self::CONCAT:
                    case self::CONCAT_WS:
                    case self::CONNECTION_ID:
                    case self::CONV:
                    case self::CONVERT_TZ:
                    case self::COS:
                    case self::COT:
                    case self::CRC32:
                    case self::CREATE_ASYMMETRIC_PRIV_KEY:
                    case self::CREATE_ASYMMETRIC_PUB_KEY:
                    case self::CREATE_DH_PARAMETERS:
                    case self::CREATE_DIGEST:
                    case self::CROSSES:
                    case self::DATEDIFF:
                    case self::DATE_FORMAT:
                    case self::DAYNAME:
                    case self::DAYOFMONTH:
                    case self::DAYOFWEEK:
                    case self::DAYOFYEAR:
                    case self::DECODE:
                    case self::DEGREES:
                    case self::DES_DECRYPT:
                    case self::DES_ENCRYPT:
                    case self::DIMENSION:
                    case self::DISJOINT:
                    case self::ELT:
                    case self::ENCODE:
                    case self::ENCRYPT:
                    case self::ENDPOINT:
                    case self::ENVELOPE:
                    case self::EQUALS:
                    case self::EXP:
                    case self::EXPORT_SET:
                    case self::EXTERIORRING:
                    case self::EXTRACTVALUE:
                    case self::FIELD:
                    case self::FIND_IN_SET:
                    case self::FLOOR:
                    case self::FORMAT:
                    case self::FOUND_ROWS:
                    case self::FROM_BASE64:
                    case self::FROM_DAYS:
                    case self::FROM_UNIXTIME:
                    case self::GEOMCOLLFROMTEXT:
                    case self::GEOMCOLLFROMWKB:
                    case self::GEOMETRYCOLLECTIONFROMTEXT:
                    case self::GEOMETRYCOLLECTIONFROMWKB:
                    case self::GEOMETRYFROMTEXT:
                    case self::GEOMETRYFROMWKB:
                    case self::GEOMETRYN:
                    case self::GEOMETRYTYPE:
                    case self::GEOMFROMTEXT:
                    case self::GEOMFROMWKB:
                    case self::GET_FORMAT:
                    case self::GET_LOCK:
                    case self::GLENGTH:
                    case self::GREATEST:
                    case self::GTID_SUBSET:
                    case self::GTID_SUBTRACT:
                    case self::HEX:
                    case self::IFNULL:
                    case self::INET6_ATON:
                    case self::INET6_NTOA:
                    case self::INET_ATON:
                    case self::INET_NTOA:
                    case self::INSTR:
                    case self::INTERIORRINGN:
                    case self::INTERSECTS:
                    case self::ISCLOSED:
                    case self::ISEMPTY:
                    case self::ISNULL:
                    case self::ISSIMPLE:
                    case self::IS_FREE_LOCK:
                    case self::IS_IPV4:
                    case self::IS_IPV4_COMPAT:
                    case self::IS_IPV4_MAPPED:
                    case self::IS_IPV6:
                    case self::IS_USED_LOCK:
                    case self::LAST_INSERT_ID:
                    case self::LCASE:
                    case self::LEAST:
                    case self::LENGTH:
                    case self::LINEFROMTEXT:
                    case self::LINEFROMWKB:
                    case self::LINESTRINGFROMTEXT:
                    case self::LINESTRINGFROMWKB:
                    case self::LN:
                    case self::LOAD_FILE:
                    case self::LOCATE:
                    case self::LOG:
                    case self::LOG10:
                    case self::LOG2:
                    case self::LOWER:
                    case self::LPAD:
                    case self::LTRIM:
                    case self::MAKEDATE:
                    case self::MAKETIME:
                    case self::MAKE_SET:
                    case self::MASTER_POS_WAIT:
                    case self::MBRCONTAINS:
                    case self::MBRDISJOINT:
                    case self::MBREQUAL:
                    case self::MBRINTERSECTS:
                    case self::MBROVERLAPS:
                    case self::MBRTOUCHES:
                    case self::MBRWITHIN:
                    case self::MD5:
                    case self::MLINEFROMTEXT:
                    case self::MLINEFROMWKB:
                    case self::MONTHNAME:
                    case self::MPOINTFROMTEXT:
                    case self::MPOINTFROMWKB:
                    case self::MPOLYFROMTEXT:
                    case self::MPOLYFROMWKB:
                    case self::MULTILINESTRINGFROMTEXT:
                    case self::MULTILINESTRINGFROMWKB:
                    case self::MULTIPOINTFROMTEXT:
                    case self::MULTIPOINTFROMWKB:
                    case self::MULTIPOLYGONFROMTEXT:
                    case self::MULTIPOLYGONFROMWKB:
                    case self::NAME_CONST:
                    case self::NULLIF:
                    case self::NUMGEOMETRIES:
                    case self::NUMINTERIORRINGS:
                    case self::NUMPOINTS:
                    case self::OCT:
                    case self::OCTET_LENGTH:
                    case self::ORD:
                    case self::OVERLAPS:
                    case self::PERIOD_ADD:
                    case self::PERIOD_DIFF:
                    case self::PI:
                    case self::POINTFROMTEXT:
                    case self::POINTFROMWKB:
                    case self::POINTN:
                    case self::POLYFROMTEXT:
                    case self::POLYFROMWKB:
                    case self::POLYGONFROMTEXT:
                    case self::POLYGONFROMWKB:
                    case self::POW:
                    case self::POWER:
                    case self::QUOTE:
                    case self::RADIANS:
                    case self::RAND:
                    case self::RANDOM_BYTES:
                    case self::RELEASE_LOCK:
                    case self::REVERSE:
                    case self::ROUND:
                    case self::ROW_COUNT:
                    case self::RPAD:
                    case self::RTRIM:
                    case self::SEC_TO_TIME:
                    case self::SESSION_USER:
                    case self::SHA:
                    case self::SHA1:
                    case self::SHA2:
                    case self::SCHEMA_NAME:
                    case self::SIGN:
                    case self::SIN:
                    case self::SLEEP:
                    case self::SOUNDEX:
                    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                    case self::SQRT:
                    case self::SRID:
                    case self::STARTPOINT:
                    case self::STRCMP:
                    case self::STR_TO_DATE:
                    case self::ST_AREA:
                    case self::ST_ASBINARY:
                    case self::ST_ASTEXT:
                    case self::ST_ASWKB:
                    case self::ST_ASWKT:
                    case self::ST_BUFFER:
                    case self::ST_CENTROID:
                    case self::ST_CONTAINS:
                    case self::ST_CROSSES:
                    case self::ST_DIFFERENCE:
                    case self::ST_DIMENSION:
                    case self::ST_DISJOINT:
                    case self::ST_DISTANCE:
                    case self::ST_ENDPOINT:
                    case self::ST_ENVELOPE:
                    case self::ST_EQUALS:
                    case self::ST_EXTERIORRING:
                    case self::ST_GEOMCOLLFROMTEXT:
                    case self::ST_GEOMCOLLFROMTXT:
                    case self::ST_GEOMCOLLFROMWKB:
                    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                    case self::ST_GEOMETRYFROMTEXT:
                    case self::ST_GEOMETRYFROMWKB:
                    case self::ST_GEOMETRYN:
                    case self::ST_GEOMETRYTYPE:
                    case self::ST_GEOMFROMTEXT:
                    case self::ST_GEOMFROMWKB:
                    case self::ST_INTERIORRINGN:
                    case self::ST_INTERSECTION:
                    case self::ST_INTERSECTS:
                    case self::ST_ISCLOSED:
                    case self::ST_ISEMPTY:
                    case self::ST_ISSIMPLE:
                    case self::ST_LINEFROMTEXT:
                    case self::ST_LINEFROMWKB:
                    case self::ST_LINESTRINGFROMTEXT:
                    case self::ST_LINESTRINGFROMWKB:
                    case self::ST_NUMGEOMETRIES:
                    case self::ST_NUMINTERIORRING:
                    case self::ST_NUMINTERIORRINGS:
                    case self::ST_NUMPOINTS:
                    case self::ST_OVERLAPS:
                    case self::ST_POINTFROMTEXT:
                    case self::ST_POINTFROMWKB:
                    case self::ST_POINTN:
                    case self::ST_POLYFROMTEXT:
                    case self::ST_POLYFROMWKB:
                    case self::ST_POLYGONFROMTEXT:
                    case self::ST_POLYGONFROMWKB:
                    case self::ST_SRID:
                    case self::ST_STARTPOINT:
                    case self::ST_SYMDIFFERENCE:
                    case self::ST_TOUCHES:
                    case self::ST_UNION:
                    case self::ST_WITHIN:
                    case self::ST_X:
                    case self::ST_Y:
                    case self::SUBDATE:
                    case self::SUBSTRING_INDEX:
                    case self::SUBTIME:
                    case self::SYSTEM_USER:
                    case self::TAN:
                    case self::TIMEDIFF:
                    case self::TIMESTAMPADD:
                    case self::TIMESTAMPDIFF:
                    case self::TIME_FORMAT:
                    case self::TIME_TO_SEC:
                    case self::TOUCHES:
                    case self::TO_BASE64:
                    case self::TO_DAYS:
                    case self::TO_SECONDS:
                    case self::UCASE:
                    case self::UNCOMPRESS:
                    case self::UNCOMPRESSED_LENGTH:
                    case self::UNHEX:
                    case self::UNIX_TIMESTAMP:
                    case self::UPDATEXML:
                    case self::UPPER:
                    case self::UUID:
                    case self::UUID_SHORT:
                    case self::VALIDATE_PASSWORD_STRENGTH:
                    case self::VERSION:
                    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case self::WEEKDAY:
                    case self::WEEKOFYEAR:
                    case self::WEIGHT_STRING:
                    case self::WITHIN:
                    case self::YEARWEEK:
                    case self::Y_FUNCTION:
                    case self::X_FUNCTION:
                    case self::MOD:
                    case self::CHARSET_REVERSE_QOUTE_STRING:
                    case self::STRING_LITERAL:
                    case self::ID:
                    case self::REVERSE_QUOTE_ID:
                    case self::OPTIONAL:
                        $this->setState(5410);
                        $this->uidList();
                        break;
                    case self::ALL:
                        $this->setState(5411);
                        $this->match(self::ALL);
                        break;
                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(5414);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(5417);
            $this->match(self::IN);
            $this->setState(5418);
            $localContext->schema = $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function flushStatement(): Context\FlushStatementContext
    {
        $localContext = new Context\FlushStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 468, self::RULE_flushStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5420);
            $this->match(self::FLUSH);
            $this->setState(5422);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL) {
                $this->setState(5421);

                $localContext->flushFormat = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::NO_WRITE_TO_BINLOG || $_la === self::LOCAL)) {
                    $localContext->flushFormat = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5424);
            $this->flushOption();
            $this->setState(5429);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(5425);
                $this->match(self::COMMA);
                $this->setState(5426);
                $this->flushOption();
                $this->setState(5431);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function killStatement(): Context\KillStatementContext
    {
        $localContext = new Context\KillStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 470, self::RULE_killStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5432);
            $this->match(self::KILL);
            $this->setState(5434);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CONNECTION || $_la === self::QUERY) {
                $this->setState(5433);

                $localContext->connectionFormat = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::CONNECTION || $_la === self::QUERY)) {
                    $localContext->connectionFormat = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5437);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(5436);
                $this->decimalLiteral();
                $this->setState(5439);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ((($_la - 1089) & ~0x3F) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::ZERO_DECIMAL - 1089)) | (1 << (self::ONE_DECIMAL - 1089)) | (1 << (self::TWO_DECIMAL - 1089)) | (1 << (self::DECIMAL_LITERAL - 1089)) | (1 << (self::REAL_LITERAL - 1089)))) !== 0);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function loadIndexIntoCache(): Context\LoadIndexIntoCacheContext
    {
        $localContext = new Context\LoadIndexIntoCacheContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 472, self::RULE_loadIndexIntoCache);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5441);
            $this->match(self::LOAD);
            $this->setState(5442);
            $this->match(self::INDEX);
            $this->setState(5443);
            $this->match(self::INTO);
            $this->setState(5444);
            $this->match(self::CACHE);
            $this->setState(5445);
            $this->loadedTableIndexes();
            $this->setState(5450);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(5446);
                $this->match(self::COMMA);
                $this->setState(5447);
                $this->loadedTableIndexes();
                $this->setState(5452);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function resetStatement(): Context\ResetStatementContext
    {
        $localContext = new Context\ResetStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 474, self::RULE_resetStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5453);
            $this->match(self::RESET);
            $this->setState(5454);
            $this->match(self::QUERY);
            $this->setState(5455);
            $this->match(self::CACHE);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function shutdownStatement(): Context\ShutdownStatementContext
    {
        $localContext = new Context\ShutdownStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 476, self::RULE_shutdownStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5457);
            $this->match(self::SHUTDOWN);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableIndexes(): Context\TableIndexesContext
    {
        $localContext = new Context\TableIndexesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 478, self::RULE_tableIndexes);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5459);
            $this->tableName();
            $this->setState(5467);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::INDEX || $_la === self::KEY || $_la === self::LR_BRACKET) {
                $this->setState(5461);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::INDEX || $_la === self::KEY) {
                    $this->setState(5460);

                    $localContext->indexFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::INDEX || $_la === self::KEY)) {
                        $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                }
                $this->setState(5463);
                $this->match(self::LR_BRACKET);
                $this->setState(5464);
                $this->uidList();
                $this->setState(5465);
                $this->match(self::RR_BRACKET);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function flushOption(): Context\FlushOptionContext
    {
        $localContext = new Context\FlushOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 480, self::RULE_flushOption);

        try {
            $this->setState(5499);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 789, $this->ctx)) {
                case 1:
                    $localContext = new Context\SimpleFlushOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5487);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::DES_KEY_FILE:
                            $this->setState(5469);
                            $this->match(self::DES_KEY_FILE);
                            break;
                        case self::HOSTS:
                            $this->setState(5470);
                            $this->match(self::HOSTS);
                            break;
                        case self::BINARY:
                        case self::ENGINE:
                        case self::ERROR:
                        case self::GENERAL:
                        case self::LOGS:
                        case self::RELAY:
                        case self::SLOW:
                            $this->setState(5472);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::BINARY || ((($_la - 391) & ~0x3F) === 0 && ((1 << ($_la - 391)) & ((1 << (self::ENGINE - 391)) | (1 << (self::ERROR - 391)) | (1 << (self::GENERAL - 391)))) !== 0) || $_la === self::RELAY || $_la === self::SLOW) {
                                $this->setState(5471);

                                $_la = $this->input->LA(1);

                                if (! ($_la === self::BINARY || ((($_la - 391) & ~0x3F) === 0 && ((1 << ($_la - 391)) & ((1 << (self::ENGINE - 391)) | (1 << (self::ERROR - 391)) | (1 << (self::GENERAL - 391)))) !== 0) || $_la === self::RELAY || $_la === self::SLOW)) {
                                    $this->errorHandler->recoverInline($this);
                                } else {
                                    if ($this->input->LA(1) === Token::EOF) {
                                        $this->matchedEOF = true;
                                    }

                                    $this->errorHandler->reportMatch($this);
                                    $this->consume();
                                }
                            }
                            $this->setState(5474);
                            $this->match(self::LOGS);
                            break;
                        case self::OPTIMIZER_COSTS:
                            $this->setState(5475);
                            $this->match(self::OPTIMIZER_COSTS);
                            break;
                        case self::PRIVILEGES:
                            $this->setState(5476);
                            $this->match(self::PRIVILEGES);
                            break;
                        case self::QUERY:
                            $this->setState(5477);
                            $this->match(self::QUERY);
                            $this->setState(5478);
                            $this->match(self::CACHE);
                            break;
                        case self::STATUS:
                            $this->setState(5479);
                            $this->match(self::STATUS);
                            break;
                        case self::USER_RESOURCES:
                            $this->setState(5480);
                            $this->match(self::USER_RESOURCES);
                            break;
                        case self::TABLES:
                            $this->setState(5481);
                            $this->match(self::TABLES);
                            $this->setState(5485);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::WITH) {
                                $this->setState(5482);
                                $this->match(self::WITH);
                                $this->setState(5483);
                                $this->match(self::READ);
                                $this->setState(5484);
                                $this->match(self::LOCK);
                            }
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case 2:
                    $localContext = new Context\ChannelFlushOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5489);
                    $this->match(self::RELAY);
                    $this->setState(5490);
                    $this->match(self::LOGS);
                    $this->setState(5492);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(5491);
                        $this->channelOption();
                    }
                    break;
                case 3:
                    $localContext = new Context\TableFlushOptionContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5494);
                    $this->match(self::TABLES);
                    $this->setState(5495);
                    $this->tableNames();
                    $this->setState(5497);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR || $_la === self::WITH) {
                        $this->setState(5496);
                        $this->flushTableOption();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function flushTableOption(): Context\FlushTableOptionContext
    {
        $localContext = new Context\FlushTableOptionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 482, self::RULE_flushTableOption);

        try {
            $this->setState(5506);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::WITH:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5501);
                    $this->match(self::WITH);
                    $this->setState(5502);
                    $this->match(self::READ);
                    $this->setState(5503);
                    $this->match(self::LOCK);
                    break;
                case self::FOR:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5504);
                    $this->match(self::FOR);
                    $this->setState(5505);
                    $this->match(self::EXPORT);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function loadedTableIndexes(): Context\LoadedTableIndexesContext
    {
        $localContext = new Context\LoadedTableIndexesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 484, self::RULE_loadedTableIndexes);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5508);
            $this->tableName();
            $this->setState(5516);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(5509);
                $this->match(self::PARTITION);
                $this->setState(5510);
                $this->match(self::LR_BRACKET);
                $this->setState(5513);
                $this->errorHandler->sync($this);

                switch ($this->input->LA(1)) {
                    case self::CURRENT:
                    case self::DATABASE:
                    case self::DIAGNOSTICS:
                    case self::EXCEPT:
                    case self::GROUP:
                    case self::LEFT:
                    case self::NUMBER:
                    case self::ORDER:
                    case self::RIGHT:
                    case self::SCHEMA:
                    case self::STACKED:
                    case self::DATE:
                    case self::TIME:
                    case self::TIMESTAMP:
                    case self::DATETIME:
                    case self::YEAR:
                    case self::BINARY:
                    case self::TEXT:
                    case self::ENUM:
                    case self::SERIAL:
                    case self::JSON_ARRAY:
                    case self::JSON_OBJECT:
                    case self::JSON_QUOTE:
                    case self::JSON_CONTAINS:
                    case self::JSON_CONTAINS_PATH:
                    case self::JSON_EXTRACT:
                    case self::JSON_KEYS:
                    case self::JSON_OVERLAPS:
                    case self::JSON_SEARCH:
                    case self::JSON_VALUE:
                    case self::JSON_ARRAY_APPEND:
                    case self::JSON_ARRAY_INSERT:
                    case self::JSON_INSERT:
                    case self::JSON_MERGE:
                    case self::JSON_MERGE_PATCH:
                    case self::JSON_MERGE_PRESERVE:
                    case self::JSON_REMOVE:
                    case self::JSON_REPLACE:
                    case self::JSON_SET:
                    case self::JSON_UNQUOTE:
                    case self::JSON_DEPTH:
                    case self::JSON_LENGTH:
                    case self::JSON_TYPE:
                    case self::JSON_VALID:
                    case self::JSON_TABLE:
                    case self::JSON_SCHEMA_VALID:
                    case self::JSON_SCHEMA_VALIDATION_REPORT:
                    case self::JSON_PRETTY:
                    case self::JSON_STORAGE_FREE:
                    case self::JSON_STORAGE_SIZE:
                    case self::JSON_ARRAYAGG:
                    case self::JSON_OBJECTAGG:
                    case self::AVG:
                    case self::BIT_AND:
                    case self::BIT_OR:
                    case self::BIT_XOR:
                    case self::COUNT:
                    case self::GROUP_CONCAT:
                    case self::MAX:
                    case self::MIN:
                    case self::STD:
                    case self::STDDEV:
                    case self::STDDEV_POP:
                    case self::STDDEV_SAMP:
                    case self::SUM:
                    case self::VAR_POP:
                    case self::VAR_SAMP:
                    case self::VARIANCE:
                    case self::POSITION:
                    case self::ACCOUNT:
                    case self::ACTION:
                    case self::AFTER:
                    case self::AGGREGATE:
                    case self::ALGORITHM:
                    case self::ANY:
                    case self::AT:
                    case self::AUTHORS:
                    case self::AUTOCOMMIT:
                    case self::AUTOEXTEND_SIZE:
                    case self::AUTO_INCREMENT:
                    case self::AVG_ROW_LENGTH:
                    case self::BEGIN:
                    case self::BINLOG:
                    case self::BIT:
                    case self::BLOCK:
                    case self::BOOL:
                    case self::BOOLEAN:
                    case self::BTREE:
                    case self::CACHE:
                    case self::CASCADED:
                    case self::CHAIN:
                    case self::CHANGED:
                    case self::CHANNEL:
                    case self::CHECKSUM:
                    case self::PAGE_CHECKSUM:
                    case self::CIPHER:
                    case self::CLASS_ORIGIN:
                    case self::CLIENT:
                    case self::CLOSE:
                    case self::COALESCE:
                    case self::CODE:
                    case self::COLUMNS:
                    case self::COLUMN_FORMAT:
                    case self::COLUMN_NAME:
                    case self::COMMENT:
                    case self::COMMIT:
                    case self::COMPACT:
                    case self::COMPLETION:
                    case self::COMPRESSED:
                    case self::COMPRESSION:
                    case self::CONCURRENT:
                    case self::CONNECT:
                    case self::CONNECTION:
                    case self::CONSISTENT:
                    case self::CONSTRAINT_CATALOG:
                    case self::CONSTRAINT_SCHEMA:
                    case self::CONSTRAINT_NAME:
                    case self::CONTAINS:
                    case self::CONTEXT:
                    case self::CONTRIBUTORS:
                    case self::COPY:
                    case self::CPU:
                    case self::CURSOR_NAME:
                    case self::DATA:
                    case self::DATAFILE:
                    case self::DEALLOCATE:
                    case self::DEFAULT_AUTH:
                    case self::DEFINER:
                    case self::DELAY_KEY_WRITE:
                    case self::DES_KEY_FILE:
                    case self::DIRECTORY:
                    case self::DISABLE:
                    case self::DISCARD:
                    case self::DISK:
                    case self::DO:
                    case self::DUMPFILE:
                    case self::DUPLICATE:
                    case self::DYNAMIC:
                    case self::ENABLE:
                    case self::ENCRYPTION:
                    case self::END:
                    case self::ENDS:
                    case self::ENGINE:
                    case self::ENGINES:
                    case self::ERROR:
                    case self::ERRORS:
                    case self::ESCAPE:
                    case self::EVEN:
                    case self::EVENT:
                    case self::EVENTS:
                    case self::EVERY:
                    case self::EXCHANGE:
                    case self::EXCLUSIVE:
                    case self::EXPIRE:
                    case self::EXPORT:
                    case self::EXTENDED:
                    case self::EXTENT_SIZE:
                    case self::FAST:
                    case self::FAULTS:
                    case self::FIELDS:
                    case self::FILE_BLOCK_SIZE:
                    case self::FILTER:
                    case self::FIRST:
                    case self::FIXED:
                    case self::FLUSH:
                    case self::FOLLOWS:
                    case self::FOUND:
                    case self::FULL:
                    case self::FUNCTION:
                    case self::GENERAL:
                    case self::GLOBAL:
                    case self::GRANTS:
                    case self::GROUP_REPLICATION:
                    case self::HANDLER:
                    case self::HASH:
                    case self::HELP:
                    case self::HOST:
                    case self::HOSTS:
                    case self::IDENTIFIED:
                    case self::IGNORE_SERVER_IDS:
                    case self::IMPORT:
                    case self::INDEXES:
                    case self::INITIAL_SIZE:
                    case self::INPLACE:
                    case self::INSERT_METHOD:
                    case self::INSTALL:
                    case self::INSTANCE:
                    case self::INVISIBLE:
                    case self::INVOKER:
                    case self::IO:
                    case self::IO_THREAD:
                    case self::IPC:
                    case self::ISOLATION:
                    case self::ISSUER:
                    case self::JSON:
                    case self::KEY_BLOCK_SIZE:
                    case self::LANGUAGE:
                    case self::LAST:
                    case self::LEAVES:
                    case self::LESS:
                    case self::LEVEL:
                    case self::LIST:
                    case self::LOCAL:
                    case self::LOGFILE:
                    case self::LOGS:
                    case self::MASTER:
                    case self::MASTER_AUTO_POSITION:
                    case self::MASTER_CONNECT_RETRY:
                    case self::MASTER_DELAY:
                    case self::MASTER_HEARTBEAT_PERIOD:
                    case self::MASTER_HOST:
                    case self::MASTER_LOG_FILE:
                    case self::MASTER_LOG_POS:
                    case self::MASTER_PASSWORD:
                    case self::MASTER_PORT:
                    case self::MASTER_RETRY_COUNT:
                    case self::MASTER_SSL:
                    case self::MASTER_SSL_CA:
                    case self::MASTER_SSL_CAPATH:
                    case self::MASTER_SSL_CERT:
                    case self::MASTER_SSL_CIPHER:
                    case self::MASTER_SSL_CRL:
                    case self::MASTER_SSL_CRLPATH:
                    case self::MASTER_SSL_KEY:
                    case self::MASTER_TLS_VERSION:
                    case self::MASTER_USER:
                    case self::MAX_CONNECTIONS_PER_HOUR:
                    case self::MAX_QUERIES_PER_HOUR:
                    case self::MAX_ROWS:
                    case self::MAX_SIZE:
                    case self::MAX_UPDATES_PER_HOUR:
                    case self::MAX_USER_CONNECTIONS:
                    case self::MEDIUM:
                    case self::MEMBER:
                    case self::MERGE:
                    case self::MESSAGE_TEXT:
                    case self::MID:
                    case self::MIGRATE:
                    case self::MIN_ROWS:
                    case self::MODE:
                    case self::MODIFY:
                    case self::MUTEX:
                    case self::MYSQL:
                    case self::MYSQL_ERRNO:
                    case self::NAME:
                    case self::NAMES:
                    case self::NCHAR:
                    case self::NEVER:
                    case self::NEXT:
                    case self::NO:
                    case self::NODEGROUP:
                    case self::NONE:
                    case self::ODBC:
                    case self::OFFLINE:
                    case self::OFFSET:
                    case self::OF:
                    case self::OJ:
                    case self::OLD_PASSWORD:
                    case self::ONE:
                    case self::ONLINE:
                    case self::ONLY:
                    case self::OPEN:
                    case self::OPTIMIZER_COSTS:
                    case self::OPTIONS:
                    case self::OWNER:
                    case self::PACK_KEYS:
                    case self::PAGE:
                    case self::PARSER:
                    case self::PARTIAL:
                    case self::PARTITIONING:
                    case self::PARTITIONS:
                    case self::PASSWORD:
                    case self::PHASE:
                    case self::PLUGIN:
                    case self::PLUGIN_DIR:
                    case self::PLUGINS:
                    case self::PORT:
                    case self::PRECEDES:
                    case self::PREPARE:
                    case self::PRESERVE:
                    case self::PREV:
                    case self::PROCESSLIST:
                    case self::PROFILE:
                    case self::PROFILES:
                    case self::PROXY:
                    case self::QUERY:
                    case self::QUICK:
                    case self::REBUILD:
                    case self::RECOVER:
                    case self::REDO_BUFFER_SIZE:
                    case self::REDUNDANT:
                    case self::RELAY:
                    case self::RELAY_LOG_FILE:
                    case self::RELAY_LOG_POS:
                    case self::RELAYLOG:
                    case self::REMOVE:
                    case self::REORGANIZE:
                    case self::REPAIR:
                    case self::REPLICATE_DO_DB:
                    case self::REPLICATE_DO_TABLE:
                    case self::REPLICATE_IGNORE_DB:
                    case self::REPLICATE_IGNORE_TABLE:
                    case self::REPLICATE_REWRITE_DB:
                    case self::REPLICATE_WILD_DO_TABLE:
                    case self::REPLICATE_WILD_IGNORE_TABLE:
                    case self::REPLICATION:
                    case self::RESET:
                    case self::RESUME:
                    case self::RETURNED_SQLSTATE:
                    case self::RETURNS:
                    case self::ROLE:
                    case self::ROLLBACK:
                    case self::ROLLUP:
                    case self::ROTATE:
                    case self::ROW:
                    case self::ROWS:
                    case self::ROW_FORMAT:
                    case self::SAVEPOINT:
                    case self::SCHEDULE:
                    case self::SECURITY:
                    case self::SERVER:
                    case self::SESSION:
                    case self::SHARE:
                    case self::SHARED:
                    case self::SIGNED:
                    case self::SIMPLE:
                    case self::SLAVE:
                    case self::SLOW:
                    case self::SNAPSHOT:
                    case self::SOCKET:
                    case self::SOME:
                    case self::SONAME:
                    case self::SOUNDS:
                    case self::SOURCE:
                    case self::SQL_AFTER_GTIDS:
                    case self::SQL_AFTER_MTS_GAPS:
                    case self::SQL_BEFORE_GTIDS:
                    case self::SQL_BUFFER_RESULT:
                    case self::SQL_CACHE:
                    case self::SQL_NO_CACHE:
                    case self::SQL_THREAD:
                    case self::START:
                    case self::STARTS:
                    case self::STATS_AUTO_RECALC:
                    case self::STATS_PERSISTENT:
                    case self::STATS_SAMPLE_PAGES:
                    case self::STATUS:
                    case self::STOP:
                    case self::STORAGE:
                    case self::STRING:
                    case self::SUBCLASS_ORIGIN:
                    case self::SUBJECT:
                    case self::SUBPARTITION:
                    case self::SUBPARTITIONS:
                    case self::SUSPEND:
                    case self::SWAPS:
                    case self::SWITCHES:
                    case self::TABLE_NAME:
                    case self::TABLESPACE:
                    case self::TEMPORARY:
                    case self::TEMPTABLE:
                    case self::THAN:
                    case self::TRADITIONAL:
                    case self::TRANSACTION:
                    case self::TRANSACTIONAL:
                    case self::TRIGGERS:
                    case self::TRUNCATE:
                    case self::UNDEFINED:
                    case self::UNDOFILE:
                    case self::UNDO_BUFFER_SIZE:
                    case self::UNINSTALL:
                    case self::UNKNOWN:
                    case self::UNTIL:
                    case self::UPGRADE:
                    case self::USER:
                    case self::USE_FRM:
                    case self::USER_RESOURCES:
                    case self::VALIDATION:
                    case self::VALUE:
                    case self::VARIABLES:
                    case self::VIEW:
                    case self::VISIBLE:
                    case self::WAIT:
                    case self::WARNINGS:
                    case self::WITHOUT:
                    case self::WORK:
                    case self::WRAPPER:
                    case self::X509:
                    case self::XA:
                    case self::XML:
                    case self::EUR:
                    case self::USA:
                    case self::JIS:
                    case self::ISO:
                    case self::INTERNAL:
                    case self::QUARTER:
                    case self::MONTH:
                    case self::DAY:
                    case self::HOUR:
                    case self::MINUTE:
                    case self::WEEK:
                    case self::SECOND:
                    case self::MICROSECOND:
                    case self::TABLES:
                    case self::ROUTINE:
                    case self::EXECUTE:
                    case self::FILE:
                    case self::PROCESS:
                    case self::RELOAD:
                    case self::SHUTDOWN:
                    case self::SUPER:
                    case self::PRIVILEGES:
                    case self::AUDIT_ADMIN:
                    case self::BACKUP_ADMIN:
                    case self::BINLOG_ADMIN:
                    case self::BINLOG_ENCRYPTION_ADMIN:
                    case self::CLONE_ADMIN:
                    case self::CONNECTION_ADMIN:
                    case self::ENCRYPTION_KEY_ADMIN:
                    case self::FIREWALL_ADMIN:
                    case self::FIREWALL_USER:
                    case self::GROUP_REPLICATION_ADMIN:
                    case self::INNODB_REDO_LOG_ARCHIVE:
                    case self::NDB_STORED_USER:
                    case self::PERSIST_RO_VARIABLES_ADMIN:
                    case self::REPLICATION_APPLIER:
                    case self::REPLICATION_SLAVE_ADMIN:
                    case self::RESOURCE_GROUP_ADMIN:
                    case self::RESOURCE_GROUP_USER:
                    case self::ROLE_ADMIN:
                    case self::SESSION_VARIABLES_ADMIN:
                    case self::SET_USER_ID:
                    case self::SHOW_ROUTINE:
                    case self::SYSTEM_VARIABLES_ADMIN:
                    case self::TABLE_ENCRYPTION_ADMIN:
                    case self::VERSION_TOKEN_ADMIN:
                    case self::XA_RECOVER_ADMIN:
                    case self::ARMSCII8:
                    case self::ASCII:
                    case self::BIG5:
                    case self::CP1250:
                    case self::CP1251:
                    case self::CP1256:
                    case self::CP1257:
                    case self::CP850:
                    case self::CP852:
                    case self::CP866:
                    case self::CP932:
                    case self::DEC8:
                    case self::EUCJPMS:
                    case self::EUCKR:
                    case self::GB18030:
                    case self::GB2312:
                    case self::GBK:
                    case self::GEOSTD8:
                    case self::GREEK:
                    case self::HEBREW:
                    case self::HP8:
                    case self::KEYBCS2:
                    case self::KOI8R:
                    case self::KOI8U:
                    case self::LATIN1:
                    case self::LATIN2:
                    case self::LATIN5:
                    case self::LATIN7:
                    case self::MACCE:
                    case self::MACROMAN:
                    case self::SJIS:
                    case self::SWE7:
                    case self::TIS620:
                    case self::UCS2:
                    case self::UJIS:
                    case self::UTF16:
                    case self::UTF16LE:
                    case self::UTF32:
                    case self::UTF8:
                    case self::UTF8MB3:
                    case self::UTF8MB4:
                    case self::ARCHIVE:
                    case self::BLACKHOLE:
                    case self::CSV:
                    case self::FEDERATED:
                    case self::INNODB:
                    case self::MEMORY:
                    case self::MRG_MYISAM:
                    case self::MYISAM:
                    case self::NDB:
                    case self::NDBCLUSTER:
                    case self::PERFORMANCE_SCHEMA:
                    case self::TOKUDB:
                    case self::REPEATABLE:
                    case self::COMMITTED:
                    case self::UNCOMMITTED:
                    case self::SERIALIZABLE:
                    case self::GEOMETRYCOLLECTION:
                    case self::LINESTRING:
                    case self::MULTILINESTRING:
                    case self::MULTIPOINT:
                    case self::MULTIPOLYGON:
                    case self::POINT:
                    case self::POLYGON:
                    case self::ABS:
                    case self::ACOS:
                    case self::ADDDATE:
                    case self::ADDTIME:
                    case self::AES_DECRYPT:
                    case self::AES_ENCRYPT:
                    case self::AREA:
                    case self::ASBINARY:
                    case self::ASIN:
                    case self::ASTEXT:
                    case self::ASWKB:
                    case self::ASWKT:
                    case self::ASYMMETRIC_DECRYPT:
                    case self::ASYMMETRIC_DERIVE:
                    case self::ASYMMETRIC_ENCRYPT:
                    case self::ASYMMETRIC_SIGN:
                    case self::ASYMMETRIC_VERIFY:
                    case self::ATAN:
                    case self::ATAN2:
                    case self::BENCHMARK:
                    case self::BIN:
                    case self::BIT_COUNT:
                    case self::BIT_LENGTH:
                    case self::BUFFER:
                    case self::CATALOG_NAME:
                    case self::CEIL:
                    case self::CEILING:
                    case self::CENTROID:
                    case self::CHARACTER_LENGTH:
                    case self::CHARSET:
                    case self::CHAR_LENGTH:
                    case self::COERCIBILITY:
                    case self::COLLATION:
                    case self::COMPRESS:
                    case self::CONCAT:
                    case self::CONCAT_WS:
                    case self::CONNECTION_ID:
                    case self::CONV:
                    case self::CONVERT_TZ:
                    case self::COS:
                    case self::COT:
                    case self::CRC32:
                    case self::CREATE_ASYMMETRIC_PRIV_KEY:
                    case self::CREATE_ASYMMETRIC_PUB_KEY:
                    case self::CREATE_DH_PARAMETERS:
                    case self::CREATE_DIGEST:
                    case self::CROSSES:
                    case self::DATEDIFF:
                    case self::DATE_FORMAT:
                    case self::DAYNAME:
                    case self::DAYOFMONTH:
                    case self::DAYOFWEEK:
                    case self::DAYOFYEAR:
                    case self::DECODE:
                    case self::DEGREES:
                    case self::DES_DECRYPT:
                    case self::DES_ENCRYPT:
                    case self::DIMENSION:
                    case self::DISJOINT:
                    case self::ELT:
                    case self::ENCODE:
                    case self::ENCRYPT:
                    case self::ENDPOINT:
                    case self::ENVELOPE:
                    case self::EQUALS:
                    case self::EXP:
                    case self::EXPORT_SET:
                    case self::EXTERIORRING:
                    case self::EXTRACTVALUE:
                    case self::FIELD:
                    case self::FIND_IN_SET:
                    case self::FLOOR:
                    case self::FORMAT:
                    case self::FOUND_ROWS:
                    case self::FROM_BASE64:
                    case self::FROM_DAYS:
                    case self::FROM_UNIXTIME:
                    case self::GEOMCOLLFROMTEXT:
                    case self::GEOMCOLLFROMWKB:
                    case self::GEOMETRYCOLLECTIONFROMTEXT:
                    case self::GEOMETRYCOLLECTIONFROMWKB:
                    case self::GEOMETRYFROMTEXT:
                    case self::GEOMETRYFROMWKB:
                    case self::GEOMETRYN:
                    case self::GEOMETRYTYPE:
                    case self::GEOMFROMTEXT:
                    case self::GEOMFROMWKB:
                    case self::GET_FORMAT:
                    case self::GET_LOCK:
                    case self::GLENGTH:
                    case self::GREATEST:
                    case self::GTID_SUBSET:
                    case self::GTID_SUBTRACT:
                    case self::HEX:
                    case self::IFNULL:
                    case self::INET6_ATON:
                    case self::INET6_NTOA:
                    case self::INET_ATON:
                    case self::INET_NTOA:
                    case self::INSTR:
                    case self::INTERIORRINGN:
                    case self::INTERSECTS:
                    case self::ISCLOSED:
                    case self::ISEMPTY:
                    case self::ISNULL:
                    case self::ISSIMPLE:
                    case self::IS_FREE_LOCK:
                    case self::IS_IPV4:
                    case self::IS_IPV4_COMPAT:
                    case self::IS_IPV4_MAPPED:
                    case self::IS_IPV6:
                    case self::IS_USED_LOCK:
                    case self::LAST_INSERT_ID:
                    case self::LCASE:
                    case self::LEAST:
                    case self::LENGTH:
                    case self::LINEFROMTEXT:
                    case self::LINEFROMWKB:
                    case self::LINESTRINGFROMTEXT:
                    case self::LINESTRINGFROMWKB:
                    case self::LN:
                    case self::LOAD_FILE:
                    case self::LOCATE:
                    case self::LOG:
                    case self::LOG10:
                    case self::LOG2:
                    case self::LOWER:
                    case self::LPAD:
                    case self::LTRIM:
                    case self::MAKEDATE:
                    case self::MAKETIME:
                    case self::MAKE_SET:
                    case self::MASTER_POS_WAIT:
                    case self::MBRCONTAINS:
                    case self::MBRDISJOINT:
                    case self::MBREQUAL:
                    case self::MBRINTERSECTS:
                    case self::MBROVERLAPS:
                    case self::MBRTOUCHES:
                    case self::MBRWITHIN:
                    case self::MD5:
                    case self::MLINEFROMTEXT:
                    case self::MLINEFROMWKB:
                    case self::MONTHNAME:
                    case self::MPOINTFROMTEXT:
                    case self::MPOINTFROMWKB:
                    case self::MPOLYFROMTEXT:
                    case self::MPOLYFROMWKB:
                    case self::MULTILINESTRINGFROMTEXT:
                    case self::MULTILINESTRINGFROMWKB:
                    case self::MULTIPOINTFROMTEXT:
                    case self::MULTIPOINTFROMWKB:
                    case self::MULTIPOLYGONFROMTEXT:
                    case self::MULTIPOLYGONFROMWKB:
                    case self::NAME_CONST:
                    case self::NULLIF:
                    case self::NUMGEOMETRIES:
                    case self::NUMINTERIORRINGS:
                    case self::NUMPOINTS:
                    case self::OCT:
                    case self::OCTET_LENGTH:
                    case self::ORD:
                    case self::OVERLAPS:
                    case self::PERIOD_ADD:
                    case self::PERIOD_DIFF:
                    case self::PI:
                    case self::POINTFROMTEXT:
                    case self::POINTFROMWKB:
                    case self::POINTN:
                    case self::POLYFROMTEXT:
                    case self::POLYFROMWKB:
                    case self::POLYGONFROMTEXT:
                    case self::POLYGONFROMWKB:
                    case self::POW:
                    case self::POWER:
                    case self::QUOTE:
                    case self::RADIANS:
                    case self::RAND:
                    case self::RANDOM_BYTES:
                    case self::RELEASE_LOCK:
                    case self::REVERSE:
                    case self::ROUND:
                    case self::ROW_COUNT:
                    case self::RPAD:
                    case self::RTRIM:
                    case self::SEC_TO_TIME:
                    case self::SESSION_USER:
                    case self::SHA:
                    case self::SHA1:
                    case self::SHA2:
                    case self::SCHEMA_NAME:
                    case self::SIGN:
                    case self::SIN:
                    case self::SLEEP:
                    case self::SOUNDEX:
                    case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                    case self::SQRT:
                    case self::SRID:
                    case self::STARTPOINT:
                    case self::STRCMP:
                    case self::STR_TO_DATE:
                    case self::ST_AREA:
                    case self::ST_ASBINARY:
                    case self::ST_ASTEXT:
                    case self::ST_ASWKB:
                    case self::ST_ASWKT:
                    case self::ST_BUFFER:
                    case self::ST_CENTROID:
                    case self::ST_CONTAINS:
                    case self::ST_CROSSES:
                    case self::ST_DIFFERENCE:
                    case self::ST_DIMENSION:
                    case self::ST_DISJOINT:
                    case self::ST_DISTANCE:
                    case self::ST_ENDPOINT:
                    case self::ST_ENVELOPE:
                    case self::ST_EQUALS:
                    case self::ST_EXTERIORRING:
                    case self::ST_GEOMCOLLFROMTEXT:
                    case self::ST_GEOMCOLLFROMTXT:
                    case self::ST_GEOMCOLLFROMWKB:
                    case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                    case self::ST_GEOMETRYFROMTEXT:
                    case self::ST_GEOMETRYFROMWKB:
                    case self::ST_GEOMETRYN:
                    case self::ST_GEOMETRYTYPE:
                    case self::ST_GEOMFROMTEXT:
                    case self::ST_GEOMFROMWKB:
                    case self::ST_INTERIORRINGN:
                    case self::ST_INTERSECTION:
                    case self::ST_INTERSECTS:
                    case self::ST_ISCLOSED:
                    case self::ST_ISEMPTY:
                    case self::ST_ISSIMPLE:
                    case self::ST_LINEFROMTEXT:
                    case self::ST_LINEFROMWKB:
                    case self::ST_LINESTRINGFROMTEXT:
                    case self::ST_LINESTRINGFROMWKB:
                    case self::ST_NUMGEOMETRIES:
                    case self::ST_NUMINTERIORRING:
                    case self::ST_NUMINTERIORRINGS:
                    case self::ST_NUMPOINTS:
                    case self::ST_OVERLAPS:
                    case self::ST_POINTFROMTEXT:
                    case self::ST_POINTFROMWKB:
                    case self::ST_POINTN:
                    case self::ST_POLYFROMTEXT:
                    case self::ST_POLYFROMWKB:
                    case self::ST_POLYGONFROMTEXT:
                    case self::ST_POLYGONFROMWKB:
                    case self::ST_SRID:
                    case self::ST_STARTPOINT:
                    case self::ST_SYMDIFFERENCE:
                    case self::ST_TOUCHES:
                    case self::ST_UNION:
                    case self::ST_WITHIN:
                    case self::ST_X:
                    case self::ST_Y:
                    case self::SUBDATE:
                    case self::SUBSTRING_INDEX:
                    case self::SUBTIME:
                    case self::SYSTEM_USER:
                    case self::TAN:
                    case self::TIMEDIFF:
                    case self::TIMESTAMPADD:
                    case self::TIMESTAMPDIFF:
                    case self::TIME_FORMAT:
                    case self::TIME_TO_SEC:
                    case self::TOUCHES:
                    case self::TO_BASE64:
                    case self::TO_DAYS:
                    case self::TO_SECONDS:
                    case self::UCASE:
                    case self::UNCOMPRESS:
                    case self::UNCOMPRESSED_LENGTH:
                    case self::UNHEX:
                    case self::UNIX_TIMESTAMP:
                    case self::UPDATEXML:
                    case self::UPPER:
                    case self::UUID:
                    case self::UUID_SHORT:
                    case self::VALIDATE_PASSWORD_STRENGTH:
                    case self::VERSION:
                    case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case self::WEEKDAY:
                    case self::WEEKOFYEAR:
                    case self::WEIGHT_STRING:
                    case self::WITHIN:
                    case self::YEARWEEK:
                    case self::Y_FUNCTION:
                    case self::X_FUNCTION:
                    case self::MOD:
                    case self::CHARSET_REVERSE_QOUTE_STRING:
                    case self::STRING_LITERAL:
                    case self::ID:
                    case self::REVERSE_QUOTE_ID:
                    case self::OPTIONAL:
                        $this->setState(5511);
                        $localContext->partitionList = $this->uidList();
                        break;
                    case self::ALL:
                        $this->setState(5512);
                        $this->match(self::ALL);
                        break;
                    default:
                        throw new NoViableAltException($this);
                }
                $this->setState(5515);
                $this->match(self::RR_BRACKET);
            }
            $this->setState(5525);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 794, $this->ctx)) {
                case 1:
                    $this->setState(5519);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INDEX || $_la === self::KEY) {
                        $this->setState(5518);

                        $localContext->indexFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::INDEX || $_la === self::KEY)) {
                            $localContext->indexFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                    }
                    $this->setState(5521);
                    $this->match(self::LR_BRACKET);
                    $this->setState(5522);
                    $localContext->indexList = $this->uidList();
                    $this->setState(5523);
                    $this->match(self::RR_BRACKET);
                    break;
            }
            $this->setState(5529);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::IGNORE) {
                $this->setState(5527);
                $this->match(self::IGNORE);
                $this->setState(5528);
                $this->match(self::LEAVES);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function simpleDescribeStatement(): Context\SimpleDescribeStatementContext
    {
        $localContext = new Context\SimpleDescribeStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 486, self::RULE_simpleDescribeStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5531);

            $localContext->command = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! (($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::EXPLAIN))) !== 0)) {
                $localContext->command = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(5532);
            $this->tableName();
            $this->setState(5535);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 796, $this->ctx)) {
                case 1:
                    $this->setState(5533);
                    $localContext->column = $this->uid();
                    break;
                case 2:
                    $this->setState(5534);
                    $localContext->pattern = $this->match(self::STRING_LITERAL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function fullDescribeStatement(): Context\FullDescribeStatementContext
    {
        $localContext = new Context\FullDescribeStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 488, self::RULE_fullDescribeStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5537);

            $localContext->command = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! (($_la & ~0x3F) === 0 && ((1 << $_la) & ((1 << self::DESC) | (1 << self::DESCRIBE) | (1 << self::EXPLAIN))) !== 0)) {
                $localContext->command = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(5541);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT) {
                $this->setState(5538);

                $localContext->formatType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::EXTENDED || $_la === self::PARTITIONS || $_la === self::FORMAT)) {
                    $localContext->formatType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
                $this->setState(5539);
                $this->match(self::EQUAL_SYMBOL);
                $this->setState(5540);

                $localContext->formatValue = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::JSON || $_la === self::TRADITIONAL)) {
                    $localContext->formatValue = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5543);
            $this->describeObjectClause();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function helpStatement(): Context\HelpStatementContext
    {
        $localContext = new Context\HelpStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 490, self::RULE_helpStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5545);
            $this->match(self::HELP);
            $this->setState(5546);
            $this->match(self::STRING_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function useStatement(): Context\UseStatementContext
    {
        $localContext = new Context\UseStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 492, self::RULE_useStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5548);
            $this->match(self::USE);
            $this->setState(5549);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function signalStatement(): Context\SignalStatementContext
    {
        $localContext = new Context\SignalStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 494, self::RULE_signalStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5551);
            $this->match(self::SIGNAL);
            $this->setState(5559);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SQLSTATE:
                    $this->setState(5552);
                    $this->match(self::SQLSTATE);
                    $this->setState(5554);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VALUE) {
                        $this->setState(5553);
                        $this->match(self::VALUE);
                    }
                    $this->setState(5556);
                    $this->stringLiteral();
                    break;
                case self::ID:
                    $this->setState(5557);
                    $this->match(self::ID);
                    break;
                case self::REVERSE_QUOTE_ID:
                    $this->setState(5558);
                    $this->match(self::REVERSE_QUOTE_ID);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(5570);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 801, $this->ctx)) {
                case 1:
                    $this->setState(5561);
                    $this->match(self::SET);
                    $this->setState(5562);
                    $this->signalConditionInformation();
                    $this->setState(5567);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5563);
                        $this->match(self::COMMA);
                        $this->setState(5564);
                        $this->signalConditionInformation();
                        $this->setState(5569);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function resignalStatement(): Context\ResignalStatementContext
    {
        $localContext = new Context\ResignalStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 496, self::RULE_resignalStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5572);
            $this->match(self::RESIGNAL);
            $this->setState(5580);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::SQLSTATE:
                    $this->setState(5573);
                    $this->match(self::SQLSTATE);
                    $this->setState(5575);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VALUE) {
                        $this->setState(5574);
                        $this->match(self::VALUE);
                    }
                    $this->setState(5577);
                    $this->stringLiteral();
                    break;
                case self::ID:
                    $this->setState(5578);
                    $this->match(self::ID);
                    break;
                case self::REVERSE_QUOTE_ID:
                    $this->setState(5579);
                    $this->match(self::REVERSE_QUOTE_ID);
                    break;
                case self::EOF:
                case self::ALTER:
                case self::ANALYZE:
                case self::CALL:
                case self::CHANGE:
                case self::CHECK:
                case self::CREATE:
                case self::DELETE:
                case self::DESC:
                case self::DESCRIBE:
                case self::DROP:
                case self::EXPLAIN:
                case self::GET:
                case self::GRANT:
                case self::INSERT:
                case self::KILL:
                case self::LOAD:
                case self::LOCK:
                case self::OPTIMIZE:
                case self::PURGE:
                case self::RELEASE:
                case self::RENAME:
                case self::REPLACE:
                case self::RESIGNAL:
                case self::REVOKE:
                case self::SELECT:
                case self::SET:
                case self::SHOW:
                case self::SIGNAL:
                case self::UNLOCK:
                case self::UPDATE:
                case self::USE:
                case self::BEGIN:
                case self::BINLOG:
                case self::CACHE:
                case self::CHECKSUM:
                case self::COMMIT:
                case self::DEALLOCATE:
                case self::DO:
                case self::FLUSH:
                case self::HANDLER:
                case self::HELP:
                case self::INSTALL:
                case self::PREPARE:
                case self::REPAIR:
                case self::RESET:
                case self::ROLLBACK:
                case self::SAVEPOINT:
                case self::START:
                case self::STOP:
                case self::TRUNCATE:
                case self::UNINSTALL:
                case self::XA:
                case self::EXECUTE:
                case self::SHUTDOWN:
                case self::MINUS:
                case self::LR_BRACKET:
                case self::SEMI:
                    break;
                default:
                    break;
            }
            $this->setState(5591);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 805, $this->ctx)) {
                case 1:
                    $this->setState(5582);
                    $this->match(self::SET);
                    $this->setState(5583);
                    $this->signalConditionInformation();
                    $this->setState(5588);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5584);
                        $this->match(self::COMMA);
                        $this->setState(5585);
                        $this->signalConditionInformation();
                        $this->setState(5590);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function signalConditionInformation(): Context\SignalConditionInformationContext
    {
        $localContext = new Context\SignalConditionInformationContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 498, self::RULE_signalConditionInformation);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5593);

            $_la = $this->input->LA(1);

            if (! (((($_la - 345) & ~0x3F) === 0 && ((1 << ($_la - 345)) & ((1 << (self::CLASS_ORIGIN - 345)) | (1 << (self::COLUMN_NAME - 345)) | (1 << (self::CONSTRAINT_CATALOG - 345)) | (1 << (self::CONSTRAINT_SCHEMA - 345)) | (1 << (self::CONSTRAINT_NAME - 345)) | (1 << (self::CURSOR_NAME - 345)))) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || $_la === self::SUBCLASS_ORIGIN || $_la === self::TABLE_NAME || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(5594);
            $this->match(self::EQUAL_SYMBOL);
            $this->setState(5599);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 806, $this->ctx)) {
                case 1:
                    $this->setState(5595);
                    $this->stringLiteral();
                    break;
                case 2:
                    $this->setState(5596);
                    $this->match(self::DECIMAL_LITERAL);
                    break;
                case 3:
                    $this->setState(5597);
                    $this->mysqlVariable();
                    break;
                case 4:
                    $this->setState(5598);
                    $this->simpleId();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function diagnosticsStatement(): Context\DiagnosticsStatementContext
    {
        $localContext = new Context\DiagnosticsStatementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 500, self::RULE_diagnosticsStatement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5601);
            $this->match(self::GET);
            $this->setState(5603);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::CURRENT || $_la === self::STACKED) {
                $this->setState(5602);

                $_la = $this->input->LA(1);

                if (! ($_la === self::CURRENT || $_la === self::STACKED)) {
                    $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
            $this->setState(5605);
            $this->match(self::DIAGNOSTICS);
            $this->setState(5637);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::AT_SIGN:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::LOCAL_ID:
                case self::GLOBAL_ID:
                case self::OPTIONAL:
                    $this->setState(5606);
                    $this->variableClause();
                    $this->setState(5607);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(5608);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5616);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5609);
                        $this->match(self::COMMA);
                        $this->setState(5610);
                        $this->variableClause();
                        $this->setState(5611);
                        $this->match(self::EQUAL_SYMBOL);
                        $this->setState(5612);

                        $_la = $this->input->LA(1);

                        if (! ($_la === self::NUMBER || $_la === self::ROW_COUNT)) {
                            $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(5618);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case self::CONDITION:
                    $this->setState(5619);
                    $this->match(self::CONDITION);
                    $this->setState(5622);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::ZERO_DECIMAL:
                        case self::ONE_DECIMAL:
                        case self::TWO_DECIMAL:
                        case self::DECIMAL_LITERAL:
                        case self::REAL_LITERAL:
                            $this->setState(5620);
                            $this->decimalLiteral();
                            break;
                        case self::CURRENT:
                        case self::DATABASE:
                        case self::DIAGNOSTICS:
                        case self::EXCEPT:
                        case self::GROUP:
                        case self::LEFT:
                        case self::NUMBER:
                        case self::ORDER:
                        case self::RIGHT:
                        case self::SCHEMA:
                        case self::STACKED:
                        case self::DATE:
                        case self::TIME:
                        case self::TIMESTAMP:
                        case self::DATETIME:
                        case self::YEAR:
                        case self::BINARY:
                        case self::TEXT:
                        case self::ENUM:
                        case self::SERIAL:
                        case self::JSON_ARRAY:
                        case self::JSON_OBJECT:
                        case self::JSON_QUOTE:
                        case self::JSON_CONTAINS:
                        case self::JSON_CONTAINS_PATH:
                        case self::JSON_EXTRACT:
                        case self::JSON_KEYS:
                        case self::JSON_OVERLAPS:
                        case self::JSON_SEARCH:
                        case self::JSON_VALUE:
                        case self::JSON_ARRAY_APPEND:
                        case self::JSON_ARRAY_INSERT:
                        case self::JSON_INSERT:
                        case self::JSON_MERGE:
                        case self::JSON_MERGE_PATCH:
                        case self::JSON_MERGE_PRESERVE:
                        case self::JSON_REMOVE:
                        case self::JSON_REPLACE:
                        case self::JSON_SET:
                        case self::JSON_UNQUOTE:
                        case self::JSON_DEPTH:
                        case self::JSON_LENGTH:
                        case self::JSON_TYPE:
                        case self::JSON_VALID:
                        case self::JSON_TABLE:
                        case self::JSON_SCHEMA_VALID:
                        case self::JSON_SCHEMA_VALIDATION_REPORT:
                        case self::JSON_PRETTY:
                        case self::JSON_STORAGE_FREE:
                        case self::JSON_STORAGE_SIZE:
                        case self::JSON_ARRAYAGG:
                        case self::JSON_OBJECTAGG:
                        case self::AVG:
                        case self::BIT_AND:
                        case self::BIT_OR:
                        case self::BIT_XOR:
                        case self::COUNT:
                        case self::GROUP_CONCAT:
                        case self::MAX:
                        case self::MIN:
                        case self::STD:
                        case self::STDDEV:
                        case self::STDDEV_POP:
                        case self::STDDEV_SAMP:
                        case self::SUM:
                        case self::VAR_POP:
                        case self::VAR_SAMP:
                        case self::VARIANCE:
                        case self::POSITION:
                        case self::ACCOUNT:
                        case self::ACTION:
                        case self::AFTER:
                        case self::AGGREGATE:
                        case self::ALGORITHM:
                        case self::ANY:
                        case self::AT:
                        case self::AUTHORS:
                        case self::AUTOCOMMIT:
                        case self::AUTOEXTEND_SIZE:
                        case self::AUTO_INCREMENT:
                        case self::AVG_ROW_LENGTH:
                        case self::BEGIN:
                        case self::BINLOG:
                        case self::BIT:
                        case self::BLOCK:
                        case self::BOOL:
                        case self::BOOLEAN:
                        case self::BTREE:
                        case self::CACHE:
                        case self::CASCADED:
                        case self::CHAIN:
                        case self::CHANGED:
                        case self::CHANNEL:
                        case self::CHECKSUM:
                        case self::PAGE_CHECKSUM:
                        case self::CIPHER:
                        case self::CLASS_ORIGIN:
                        case self::CLIENT:
                        case self::CLOSE:
                        case self::COALESCE:
                        case self::CODE:
                        case self::COLUMNS:
                        case self::COLUMN_FORMAT:
                        case self::COLUMN_NAME:
                        case self::COMMENT:
                        case self::COMMIT:
                        case self::COMPACT:
                        case self::COMPLETION:
                        case self::COMPRESSED:
                        case self::COMPRESSION:
                        case self::CONCURRENT:
                        case self::CONNECT:
                        case self::CONNECTION:
                        case self::CONSISTENT:
                        case self::CONSTRAINT_CATALOG:
                        case self::CONSTRAINT_SCHEMA:
                        case self::CONSTRAINT_NAME:
                        case self::CONTAINS:
                        case self::CONTEXT:
                        case self::CONTRIBUTORS:
                        case self::COPY:
                        case self::CPU:
                        case self::CURSOR_NAME:
                        case self::DATA:
                        case self::DATAFILE:
                        case self::DEALLOCATE:
                        case self::DEFAULT_AUTH:
                        case self::DEFINER:
                        case self::DELAY_KEY_WRITE:
                        case self::DES_KEY_FILE:
                        case self::DIRECTORY:
                        case self::DISABLE:
                        case self::DISCARD:
                        case self::DISK:
                        case self::DO:
                        case self::DUMPFILE:
                        case self::DUPLICATE:
                        case self::DYNAMIC:
                        case self::ENABLE:
                        case self::ENCRYPTION:
                        case self::END:
                        case self::ENDS:
                        case self::ENGINE:
                        case self::ENGINES:
                        case self::ERROR:
                        case self::ERRORS:
                        case self::ESCAPE:
                        case self::EVEN:
                        case self::EVENT:
                        case self::EVENTS:
                        case self::EVERY:
                        case self::EXCHANGE:
                        case self::EXCLUSIVE:
                        case self::EXPIRE:
                        case self::EXPORT:
                        case self::EXTENDED:
                        case self::EXTENT_SIZE:
                        case self::FAST:
                        case self::FAULTS:
                        case self::FIELDS:
                        case self::FILE_BLOCK_SIZE:
                        case self::FILTER:
                        case self::FIRST:
                        case self::FIXED:
                        case self::FLUSH:
                        case self::FOLLOWS:
                        case self::FOUND:
                        case self::FULL:
                        case self::FUNCTION:
                        case self::GENERAL:
                        case self::GLOBAL:
                        case self::GRANTS:
                        case self::GROUP_REPLICATION:
                        case self::HANDLER:
                        case self::HASH:
                        case self::HELP:
                        case self::HOST:
                        case self::HOSTS:
                        case self::IDENTIFIED:
                        case self::IGNORE_SERVER_IDS:
                        case self::IMPORT:
                        case self::INDEXES:
                        case self::INITIAL_SIZE:
                        case self::INPLACE:
                        case self::INSERT_METHOD:
                        case self::INSTALL:
                        case self::INSTANCE:
                        case self::INVISIBLE:
                        case self::INVOKER:
                        case self::IO:
                        case self::IO_THREAD:
                        case self::IPC:
                        case self::ISOLATION:
                        case self::ISSUER:
                        case self::JSON:
                        case self::KEY_BLOCK_SIZE:
                        case self::LANGUAGE:
                        case self::LAST:
                        case self::LEAVES:
                        case self::LESS:
                        case self::LEVEL:
                        case self::LIST:
                        case self::LOCAL:
                        case self::LOGFILE:
                        case self::LOGS:
                        case self::MASTER:
                        case self::MASTER_AUTO_POSITION:
                        case self::MASTER_CONNECT_RETRY:
                        case self::MASTER_DELAY:
                        case self::MASTER_HEARTBEAT_PERIOD:
                        case self::MASTER_HOST:
                        case self::MASTER_LOG_FILE:
                        case self::MASTER_LOG_POS:
                        case self::MASTER_PASSWORD:
                        case self::MASTER_PORT:
                        case self::MASTER_RETRY_COUNT:
                        case self::MASTER_SSL:
                        case self::MASTER_SSL_CA:
                        case self::MASTER_SSL_CAPATH:
                        case self::MASTER_SSL_CERT:
                        case self::MASTER_SSL_CIPHER:
                        case self::MASTER_SSL_CRL:
                        case self::MASTER_SSL_CRLPATH:
                        case self::MASTER_SSL_KEY:
                        case self::MASTER_TLS_VERSION:
                        case self::MASTER_USER:
                        case self::MAX_CONNECTIONS_PER_HOUR:
                        case self::MAX_QUERIES_PER_HOUR:
                        case self::MAX_ROWS:
                        case self::MAX_SIZE:
                        case self::MAX_UPDATES_PER_HOUR:
                        case self::MAX_USER_CONNECTIONS:
                        case self::MEDIUM:
                        case self::MEMBER:
                        case self::MERGE:
                        case self::MESSAGE_TEXT:
                        case self::MID:
                        case self::MIGRATE:
                        case self::MIN_ROWS:
                        case self::MODE:
                        case self::MODIFY:
                        case self::MUTEX:
                        case self::MYSQL:
                        case self::MYSQL_ERRNO:
                        case self::NAME:
                        case self::NAMES:
                        case self::NCHAR:
                        case self::NEVER:
                        case self::NEXT:
                        case self::NO:
                        case self::NODEGROUP:
                        case self::NONE:
                        case self::ODBC:
                        case self::OFFLINE:
                        case self::OFFSET:
                        case self::OF:
                        case self::OJ:
                        case self::OLD_PASSWORD:
                        case self::ONE:
                        case self::ONLINE:
                        case self::ONLY:
                        case self::OPEN:
                        case self::OPTIMIZER_COSTS:
                        case self::OPTIONS:
                        case self::OWNER:
                        case self::PACK_KEYS:
                        case self::PAGE:
                        case self::PARSER:
                        case self::PARTIAL:
                        case self::PARTITIONING:
                        case self::PARTITIONS:
                        case self::PASSWORD:
                        case self::PHASE:
                        case self::PLUGIN:
                        case self::PLUGIN_DIR:
                        case self::PLUGINS:
                        case self::PORT:
                        case self::PRECEDES:
                        case self::PREPARE:
                        case self::PRESERVE:
                        case self::PREV:
                        case self::PROCESSLIST:
                        case self::PROFILE:
                        case self::PROFILES:
                        case self::PROXY:
                        case self::QUERY:
                        case self::QUICK:
                        case self::REBUILD:
                        case self::RECOVER:
                        case self::REDO_BUFFER_SIZE:
                        case self::REDUNDANT:
                        case self::RELAY:
                        case self::RELAY_LOG_FILE:
                        case self::RELAY_LOG_POS:
                        case self::RELAYLOG:
                        case self::REMOVE:
                        case self::REORGANIZE:
                        case self::REPAIR:
                        case self::REPLICATE_DO_DB:
                        case self::REPLICATE_DO_TABLE:
                        case self::REPLICATE_IGNORE_DB:
                        case self::REPLICATE_IGNORE_TABLE:
                        case self::REPLICATE_REWRITE_DB:
                        case self::REPLICATE_WILD_DO_TABLE:
                        case self::REPLICATE_WILD_IGNORE_TABLE:
                        case self::REPLICATION:
                        case self::RESET:
                        case self::RESUME:
                        case self::RETURNED_SQLSTATE:
                        case self::RETURNS:
                        case self::ROLE:
                        case self::ROLLBACK:
                        case self::ROLLUP:
                        case self::ROTATE:
                        case self::ROW:
                        case self::ROWS:
                        case self::ROW_FORMAT:
                        case self::SAVEPOINT:
                        case self::SCHEDULE:
                        case self::SECURITY:
                        case self::SERVER:
                        case self::SESSION:
                        case self::SHARE:
                        case self::SHARED:
                        case self::SIGNED:
                        case self::SIMPLE:
                        case self::SLAVE:
                        case self::SLOW:
                        case self::SNAPSHOT:
                        case self::SOCKET:
                        case self::SOME:
                        case self::SONAME:
                        case self::SOUNDS:
                        case self::SOURCE:
                        case self::SQL_AFTER_GTIDS:
                        case self::SQL_AFTER_MTS_GAPS:
                        case self::SQL_BEFORE_GTIDS:
                        case self::SQL_BUFFER_RESULT:
                        case self::SQL_CACHE:
                        case self::SQL_NO_CACHE:
                        case self::SQL_THREAD:
                        case self::START:
                        case self::STARTS:
                        case self::STATS_AUTO_RECALC:
                        case self::STATS_PERSISTENT:
                        case self::STATS_SAMPLE_PAGES:
                        case self::STATUS:
                        case self::STOP:
                        case self::STORAGE:
                        case self::STRING:
                        case self::SUBCLASS_ORIGIN:
                        case self::SUBJECT:
                        case self::SUBPARTITION:
                        case self::SUBPARTITIONS:
                        case self::SUSPEND:
                        case self::SWAPS:
                        case self::SWITCHES:
                        case self::TABLE_NAME:
                        case self::TABLESPACE:
                        case self::TEMPORARY:
                        case self::TEMPTABLE:
                        case self::THAN:
                        case self::TRADITIONAL:
                        case self::TRANSACTION:
                        case self::TRANSACTIONAL:
                        case self::TRIGGERS:
                        case self::TRUNCATE:
                        case self::UNDEFINED:
                        case self::UNDOFILE:
                        case self::UNDO_BUFFER_SIZE:
                        case self::UNINSTALL:
                        case self::UNKNOWN:
                        case self::UNTIL:
                        case self::UPGRADE:
                        case self::USER:
                        case self::USE_FRM:
                        case self::USER_RESOURCES:
                        case self::VALIDATION:
                        case self::VALUE:
                        case self::VARIABLES:
                        case self::VIEW:
                        case self::VISIBLE:
                        case self::WAIT:
                        case self::WARNINGS:
                        case self::WITHOUT:
                        case self::WORK:
                        case self::WRAPPER:
                        case self::X509:
                        case self::XA:
                        case self::XML:
                        case self::EUR:
                        case self::USA:
                        case self::JIS:
                        case self::ISO:
                        case self::INTERNAL:
                        case self::QUARTER:
                        case self::MONTH:
                        case self::DAY:
                        case self::HOUR:
                        case self::MINUTE:
                        case self::WEEK:
                        case self::SECOND:
                        case self::MICROSECOND:
                        case self::TABLES:
                        case self::ROUTINE:
                        case self::EXECUTE:
                        case self::FILE:
                        case self::PROCESS:
                        case self::RELOAD:
                        case self::SHUTDOWN:
                        case self::SUPER:
                        case self::PRIVILEGES:
                        case self::AUDIT_ADMIN:
                        case self::BACKUP_ADMIN:
                        case self::BINLOG_ADMIN:
                        case self::BINLOG_ENCRYPTION_ADMIN:
                        case self::CLONE_ADMIN:
                        case self::CONNECTION_ADMIN:
                        case self::ENCRYPTION_KEY_ADMIN:
                        case self::FIREWALL_ADMIN:
                        case self::FIREWALL_USER:
                        case self::GROUP_REPLICATION_ADMIN:
                        case self::INNODB_REDO_LOG_ARCHIVE:
                        case self::NDB_STORED_USER:
                        case self::PERSIST_RO_VARIABLES_ADMIN:
                        case self::REPLICATION_APPLIER:
                        case self::REPLICATION_SLAVE_ADMIN:
                        case self::RESOURCE_GROUP_ADMIN:
                        case self::RESOURCE_GROUP_USER:
                        case self::ROLE_ADMIN:
                        case self::SESSION_VARIABLES_ADMIN:
                        case self::SET_USER_ID:
                        case self::SHOW_ROUTINE:
                        case self::SYSTEM_VARIABLES_ADMIN:
                        case self::TABLE_ENCRYPTION_ADMIN:
                        case self::VERSION_TOKEN_ADMIN:
                        case self::XA_RECOVER_ADMIN:
                        case self::ARMSCII8:
                        case self::ASCII:
                        case self::BIG5:
                        case self::CP1250:
                        case self::CP1251:
                        case self::CP1256:
                        case self::CP1257:
                        case self::CP850:
                        case self::CP852:
                        case self::CP866:
                        case self::CP932:
                        case self::DEC8:
                        case self::EUCJPMS:
                        case self::EUCKR:
                        case self::GB18030:
                        case self::GB2312:
                        case self::GBK:
                        case self::GEOSTD8:
                        case self::GREEK:
                        case self::HEBREW:
                        case self::HP8:
                        case self::KEYBCS2:
                        case self::KOI8R:
                        case self::KOI8U:
                        case self::LATIN1:
                        case self::LATIN2:
                        case self::LATIN5:
                        case self::LATIN7:
                        case self::MACCE:
                        case self::MACROMAN:
                        case self::SJIS:
                        case self::SWE7:
                        case self::TIS620:
                        case self::UCS2:
                        case self::UJIS:
                        case self::UTF16:
                        case self::UTF16LE:
                        case self::UTF32:
                        case self::UTF8:
                        case self::UTF8MB3:
                        case self::UTF8MB4:
                        case self::ARCHIVE:
                        case self::BLACKHOLE:
                        case self::CSV:
                        case self::FEDERATED:
                        case self::INNODB:
                        case self::MEMORY:
                        case self::MRG_MYISAM:
                        case self::MYISAM:
                        case self::NDB:
                        case self::NDBCLUSTER:
                        case self::PERFORMANCE_SCHEMA:
                        case self::TOKUDB:
                        case self::REPEATABLE:
                        case self::COMMITTED:
                        case self::UNCOMMITTED:
                        case self::SERIALIZABLE:
                        case self::GEOMETRYCOLLECTION:
                        case self::LINESTRING:
                        case self::MULTILINESTRING:
                        case self::MULTIPOINT:
                        case self::MULTIPOLYGON:
                        case self::POINT:
                        case self::POLYGON:
                        case self::ABS:
                        case self::ACOS:
                        case self::ADDDATE:
                        case self::ADDTIME:
                        case self::AES_DECRYPT:
                        case self::AES_ENCRYPT:
                        case self::AREA:
                        case self::ASBINARY:
                        case self::ASIN:
                        case self::ASTEXT:
                        case self::ASWKB:
                        case self::ASWKT:
                        case self::ASYMMETRIC_DECRYPT:
                        case self::ASYMMETRIC_DERIVE:
                        case self::ASYMMETRIC_ENCRYPT:
                        case self::ASYMMETRIC_SIGN:
                        case self::ASYMMETRIC_VERIFY:
                        case self::ATAN:
                        case self::ATAN2:
                        case self::BENCHMARK:
                        case self::BIN:
                        case self::BIT_COUNT:
                        case self::BIT_LENGTH:
                        case self::BUFFER:
                        case self::CATALOG_NAME:
                        case self::CEIL:
                        case self::CEILING:
                        case self::CENTROID:
                        case self::CHARACTER_LENGTH:
                        case self::CHARSET:
                        case self::CHAR_LENGTH:
                        case self::COERCIBILITY:
                        case self::COLLATION:
                        case self::COMPRESS:
                        case self::CONCAT:
                        case self::CONCAT_WS:
                        case self::CONNECTION_ID:
                        case self::CONV:
                        case self::CONVERT_TZ:
                        case self::COS:
                        case self::COT:
                        case self::CRC32:
                        case self::CREATE_ASYMMETRIC_PRIV_KEY:
                        case self::CREATE_ASYMMETRIC_PUB_KEY:
                        case self::CREATE_DH_PARAMETERS:
                        case self::CREATE_DIGEST:
                        case self::CROSSES:
                        case self::DATEDIFF:
                        case self::DATE_FORMAT:
                        case self::DAYNAME:
                        case self::DAYOFMONTH:
                        case self::DAYOFWEEK:
                        case self::DAYOFYEAR:
                        case self::DECODE:
                        case self::DEGREES:
                        case self::DES_DECRYPT:
                        case self::DES_ENCRYPT:
                        case self::DIMENSION:
                        case self::DISJOINT:
                        case self::ELT:
                        case self::ENCODE:
                        case self::ENCRYPT:
                        case self::ENDPOINT:
                        case self::ENVELOPE:
                        case self::EQUALS:
                        case self::EXP:
                        case self::EXPORT_SET:
                        case self::EXTERIORRING:
                        case self::EXTRACTVALUE:
                        case self::FIELD:
                        case self::FIND_IN_SET:
                        case self::FLOOR:
                        case self::FORMAT:
                        case self::FOUND_ROWS:
                        case self::FROM_BASE64:
                        case self::FROM_DAYS:
                        case self::FROM_UNIXTIME:
                        case self::GEOMCOLLFROMTEXT:
                        case self::GEOMCOLLFROMWKB:
                        case self::GEOMETRYCOLLECTIONFROMTEXT:
                        case self::GEOMETRYCOLLECTIONFROMWKB:
                        case self::GEOMETRYFROMTEXT:
                        case self::GEOMETRYFROMWKB:
                        case self::GEOMETRYN:
                        case self::GEOMETRYTYPE:
                        case self::GEOMFROMTEXT:
                        case self::GEOMFROMWKB:
                        case self::GET_FORMAT:
                        case self::GET_LOCK:
                        case self::GLENGTH:
                        case self::GREATEST:
                        case self::GTID_SUBSET:
                        case self::GTID_SUBTRACT:
                        case self::HEX:
                        case self::IFNULL:
                        case self::INET6_ATON:
                        case self::INET6_NTOA:
                        case self::INET_ATON:
                        case self::INET_NTOA:
                        case self::INSTR:
                        case self::INTERIORRINGN:
                        case self::INTERSECTS:
                        case self::ISCLOSED:
                        case self::ISEMPTY:
                        case self::ISNULL:
                        case self::ISSIMPLE:
                        case self::IS_FREE_LOCK:
                        case self::IS_IPV4:
                        case self::IS_IPV4_COMPAT:
                        case self::IS_IPV4_MAPPED:
                        case self::IS_IPV6:
                        case self::IS_USED_LOCK:
                        case self::LAST_INSERT_ID:
                        case self::LCASE:
                        case self::LEAST:
                        case self::LENGTH:
                        case self::LINEFROMTEXT:
                        case self::LINEFROMWKB:
                        case self::LINESTRINGFROMTEXT:
                        case self::LINESTRINGFROMWKB:
                        case self::LN:
                        case self::LOAD_FILE:
                        case self::LOCATE:
                        case self::LOG:
                        case self::LOG10:
                        case self::LOG2:
                        case self::LOWER:
                        case self::LPAD:
                        case self::LTRIM:
                        case self::MAKEDATE:
                        case self::MAKETIME:
                        case self::MAKE_SET:
                        case self::MASTER_POS_WAIT:
                        case self::MBRCONTAINS:
                        case self::MBRDISJOINT:
                        case self::MBREQUAL:
                        case self::MBRINTERSECTS:
                        case self::MBROVERLAPS:
                        case self::MBRTOUCHES:
                        case self::MBRWITHIN:
                        case self::MD5:
                        case self::MLINEFROMTEXT:
                        case self::MLINEFROMWKB:
                        case self::MONTHNAME:
                        case self::MPOINTFROMTEXT:
                        case self::MPOINTFROMWKB:
                        case self::MPOLYFROMTEXT:
                        case self::MPOLYFROMWKB:
                        case self::MULTILINESTRINGFROMTEXT:
                        case self::MULTILINESTRINGFROMWKB:
                        case self::MULTIPOINTFROMTEXT:
                        case self::MULTIPOINTFROMWKB:
                        case self::MULTIPOLYGONFROMTEXT:
                        case self::MULTIPOLYGONFROMWKB:
                        case self::NAME_CONST:
                        case self::NULLIF:
                        case self::NUMGEOMETRIES:
                        case self::NUMINTERIORRINGS:
                        case self::NUMPOINTS:
                        case self::OCT:
                        case self::OCTET_LENGTH:
                        case self::ORD:
                        case self::OVERLAPS:
                        case self::PERIOD_ADD:
                        case self::PERIOD_DIFF:
                        case self::PI:
                        case self::POINTFROMTEXT:
                        case self::POINTFROMWKB:
                        case self::POINTN:
                        case self::POLYFROMTEXT:
                        case self::POLYFROMWKB:
                        case self::POLYGONFROMTEXT:
                        case self::POLYGONFROMWKB:
                        case self::POW:
                        case self::POWER:
                        case self::QUOTE:
                        case self::RADIANS:
                        case self::RAND:
                        case self::RANDOM_BYTES:
                        case self::RELEASE_LOCK:
                        case self::REVERSE:
                        case self::ROUND:
                        case self::ROW_COUNT:
                        case self::RPAD:
                        case self::RTRIM:
                        case self::SEC_TO_TIME:
                        case self::SESSION_USER:
                        case self::SHA:
                        case self::SHA1:
                        case self::SHA2:
                        case self::SCHEMA_NAME:
                        case self::SIGN:
                        case self::SIN:
                        case self::SLEEP:
                        case self::SOUNDEX:
                        case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                        case self::SQRT:
                        case self::SRID:
                        case self::STARTPOINT:
                        case self::STRCMP:
                        case self::STR_TO_DATE:
                        case self::ST_AREA:
                        case self::ST_ASBINARY:
                        case self::ST_ASTEXT:
                        case self::ST_ASWKB:
                        case self::ST_ASWKT:
                        case self::ST_BUFFER:
                        case self::ST_CENTROID:
                        case self::ST_CONTAINS:
                        case self::ST_CROSSES:
                        case self::ST_DIFFERENCE:
                        case self::ST_DIMENSION:
                        case self::ST_DISJOINT:
                        case self::ST_DISTANCE:
                        case self::ST_ENDPOINT:
                        case self::ST_ENVELOPE:
                        case self::ST_EQUALS:
                        case self::ST_EXTERIORRING:
                        case self::ST_GEOMCOLLFROMTEXT:
                        case self::ST_GEOMCOLLFROMTXT:
                        case self::ST_GEOMCOLLFROMWKB:
                        case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                        case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                        case self::ST_GEOMETRYFROMTEXT:
                        case self::ST_GEOMETRYFROMWKB:
                        case self::ST_GEOMETRYN:
                        case self::ST_GEOMETRYTYPE:
                        case self::ST_GEOMFROMTEXT:
                        case self::ST_GEOMFROMWKB:
                        case self::ST_INTERIORRINGN:
                        case self::ST_INTERSECTION:
                        case self::ST_INTERSECTS:
                        case self::ST_ISCLOSED:
                        case self::ST_ISEMPTY:
                        case self::ST_ISSIMPLE:
                        case self::ST_LINEFROMTEXT:
                        case self::ST_LINEFROMWKB:
                        case self::ST_LINESTRINGFROMTEXT:
                        case self::ST_LINESTRINGFROMWKB:
                        case self::ST_NUMGEOMETRIES:
                        case self::ST_NUMINTERIORRING:
                        case self::ST_NUMINTERIORRINGS:
                        case self::ST_NUMPOINTS:
                        case self::ST_OVERLAPS:
                        case self::ST_POINTFROMTEXT:
                        case self::ST_POINTFROMWKB:
                        case self::ST_POINTN:
                        case self::ST_POLYFROMTEXT:
                        case self::ST_POLYFROMWKB:
                        case self::ST_POLYGONFROMTEXT:
                        case self::ST_POLYGONFROMWKB:
                        case self::ST_SRID:
                        case self::ST_STARTPOINT:
                        case self::ST_SYMDIFFERENCE:
                        case self::ST_TOUCHES:
                        case self::ST_UNION:
                        case self::ST_WITHIN:
                        case self::ST_X:
                        case self::ST_Y:
                        case self::SUBDATE:
                        case self::SUBSTRING_INDEX:
                        case self::SUBTIME:
                        case self::SYSTEM_USER:
                        case self::TAN:
                        case self::TIMEDIFF:
                        case self::TIMESTAMPADD:
                        case self::TIMESTAMPDIFF:
                        case self::TIME_FORMAT:
                        case self::TIME_TO_SEC:
                        case self::TOUCHES:
                        case self::TO_BASE64:
                        case self::TO_DAYS:
                        case self::TO_SECONDS:
                        case self::UCASE:
                        case self::UNCOMPRESS:
                        case self::UNCOMPRESSED_LENGTH:
                        case self::UNHEX:
                        case self::UNIX_TIMESTAMP:
                        case self::UPDATEXML:
                        case self::UPPER:
                        case self::UUID:
                        case self::UUID_SHORT:
                        case self::VALIDATE_PASSWORD_STRENGTH:
                        case self::VERSION:
                        case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                        case self::WEEKDAY:
                        case self::WEEKOFYEAR:
                        case self::WEIGHT_STRING:
                        case self::WITHIN:
                        case self::YEARWEEK:
                        case self::Y_FUNCTION:
                        case self::X_FUNCTION:
                        case self::MOD:
                        case self::AT_SIGN:
                        case self::CHARSET_REVERSE_QOUTE_STRING:
                        case self::STRING_LITERAL:
                        case self::ID:
                        case self::REVERSE_QUOTE_ID:
                        case self::LOCAL_ID:
                        case self::GLOBAL_ID:
                        case self::OPTIONAL:
                            $this->setState(5621);
                            $this->variableClause();
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(5624);
                    $this->variableClause();
                    $this->setState(5625);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(5626);
                    $this->diagnosticsConditionInformationName();
                    $this->setState(5634);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(5627);
                        $this->match(self::COMMA);
                        $this->setState(5628);
                        $this->variableClause();
                        $this->setState(5629);
                        $this->match(self::EQUAL_SYMBOL);
                        $this->setState(5630);
                        $this->diagnosticsConditionInformationName();
                        $this->setState(5636);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function diagnosticsConditionInformationName(): Context\DiagnosticsConditionInformationNameContext
    {
        $localContext = new Context\DiagnosticsConditionInformationNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 502, self::RULE_diagnosticsConditionInformationName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5639);

            $_la = $this->input->LA(1);

            if (! (((($_la - 345) & ~0x3F) === 0 && ((1 << ($_la - 345)) & ((1 << (self::CLASS_ORIGIN - 345)) | (1 << (self::COLUMN_NAME - 345)) | (1 << (self::CONSTRAINT_CATALOG - 345)) | (1 << (self::CONSTRAINT_SCHEMA - 345)) | (1 << (self::CONSTRAINT_NAME - 345)) | (1 << (self::CURSOR_NAME - 345)))) !== 0) || $_la === self::MESSAGE_TEXT || $_la === self::MYSQL_ERRNO || ((($_la - 559) & ~0x3F) === 0 && ((1 << ($_la - 559)) & ((1 << (self::RETURNED_SQLSTATE - 559)) | (1 << (self::SUBCLASS_ORIGIN - 559)) | (1 << (self::TABLE_NAME - 559)))) !== 0) || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function describeObjectClause(): Context\DescribeObjectClauseContext
    {
        $localContext = new Context\DescribeObjectClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 504, self::RULE_describeObjectClause);

        try {
            $this->setState(5651);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DELETE:
                case self::INSERT:
                case self::REPLACE:
                case self::SELECT:
                case self::UPDATE:
                case self::LR_BRACKET:
                    $localContext = new Context\DescribeStatementsContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5646);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::SELECT:
                        case self::LR_BRACKET:
                            $this->setState(5641);
                            $this->selectStatement();
                            break;
                        case self::DELETE:
                            $this->setState(5642);
                            $this->deleteStatement();
                            break;
                        case self::INSERT:
                            $this->setState(5643);
                            $this->insertStatement();
                            break;
                        case self::REPLACE:
                            $this->setState(5644);
                            $this->replaceStatement();
                            break;
                        case self::UPDATE:
                            $this->setState(5645);
                            $this->updateStatement();
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    break;
                case self::FOR:
                    $localContext = new Context\DescribeConnectionContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5648);
                    $this->match(self::FOR);
                    $this->setState(5649);
                    $this->match(self::CONNECTION);
                    $this->setState(5650);
                    $this->uid();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function fullId(): Context\FullIdContext
    {
        $localContext = new Context\FullIdContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 506, self::RULE_fullId);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5653);
            $this->uid();
            $this->setState(5657);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 814, $this->ctx)) {
                case 1:
                    $this->setState(5654);
                    $this->match(self::DOT_ID);
                    break;
                case 2:
                    $this->setState(5655);
                    $this->match(self::DOT);
                    $this->setState(5656);
                    $this->uid();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableName(): Context\TableNameContext
    {
        $localContext = new Context\TableNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 508, self::RULE_tableName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5659);
            $this->fullId();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function fullColumnName(): Context\FullColumnNameContext
    {
        $localContext = new Context\FullColumnNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 510, self::RULE_fullColumnName);

        try {
            $this->setState(5673);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 818, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5661);
                    $this->uid();
                    $this->setState(5666);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 816, $this->ctx)) {
                        case 1:
                            $this->setState(5662);
                            $this->dottedId();
                            $this->setState(5664);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 815, $this->ctx)) {
                                case 1:
                                    $this->setState(5663);
                                    $this->dottedId();
                                    break;
                            }
                            break;
                    }
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5668);
                    $this->matchWildcard();
                    $this->setState(5669);
                    $this->dottedId();
                    $this->setState(5671);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 817, $this->ctx)) {
                        case 1:
                            $this->setState(5670);
                            $this->dottedId();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexColumnName(): Context\IndexColumnNameContext
    {
        $localContext = new Context\IndexColumnNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 512, self::RULE_indexColumnName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5686);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 821, $this->ctx)) {
                case 1:
                    $this->setState(5677);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 819, $this->ctx)) {
                        case 1:
                            $this->setState(5675);
                            $this->uid();
                            break;
                        case 2:
                            $this->setState(5676);
                            $this->match(self::STRING_LITERAL);
                            break;
                    }
                    $this->setState(5683);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(5679);
                        $this->match(self::LR_BRACKET);
                        $this->setState(5680);
                        $this->decimalLiteral();
                        $this->setState(5681);
                        $this->match(self::RR_BRACKET);
                    }
                    break;
                case 2:
                    $this->setState(5685);
                    $this->recursiveExpression(0);
                    break;
            }
            $this->setState(5689);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ASC || $_la === self::DESC) {
                $this->setState(5688);

                $localContext->sortType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::ASC || $_la === self::DESC)) {
                    $localContext->sortType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userName(): Context\UserNameContext
    {
        $localContext = new Context\UserNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 514, self::RULE_userName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5691);

            $_la = $this->input->LA(1);

            if (! ((($_la - 1099) & ~0x3F) === 0 && ((1 << ($_la - 1099)) & ((1 << (self::STRING_LITERAL - 1099)) | (1 << (self::ID - 1099)) | (1 << (self::STRING_USER_NAME - 1099)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function mysqlVariable(): Context\MysqlVariableContext
    {
        $localContext = new Context\MysqlVariableContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 516, self::RULE_mysqlVariable);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5693);

            $_la = $this->input->LA(1);

            if (! ($_la === self::LOCAL_ID || $_la === self::GLOBAL_ID)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function charsetName(): Context\CharsetNameContext
    {
        $localContext = new Context\CharsetNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 518, self::RULE_charsetName);

        try {
            $this->setState(5699);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 823, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5695);
                    $this->match(self::BINARY);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5696);
                    $this->charsetNameBase();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5697);
                    $this->match(self::STRING_LITERAL);
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5698);
                    $this->match(self::CHARSET_REVERSE_QOUTE_STRING);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function collationName(): Context\CollationNameContext
    {
        $localContext = new Context\CollationNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 520, self::RULE_collationName);

        try {
            $this->setState(5703);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 824, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5701);
                    $this->uid();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5702);
                    $this->match(self::STRING_LITERAL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function engineName(): Context\EngineNameContext
    {
        $localContext = new Context\EngineNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 522, self::RULE_engineName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5705);

            $_la = $this->input->LA(1);

            if (! ($_la === self::CONNECT || ((($_la - 742) & ~0x3F) === 0 && ((1 << ($_la - 742)) & ((1 << (self::ARCHIVE - 742)) | (1 << (self::BLACKHOLE - 742)) | (1 << (self::CSV - 742)) | (1 << (self::FEDERATED - 742)) | (1 << (self::INNODB - 742)) | (1 << (self::MEMORY - 742)) | (1 << (self::MRG_MYISAM - 742)) | (1 << (self::MYISAM - 742)) | (1 << (self::NDB - 742)) | (1 << (self::NDBCLUSTER - 742)) | (1 << (self::PERFORMANCE_SCHEMA - 742)) | (1 << (self::TOKUDB - 742)))) !== 0) || ((($_la - 1099) & ~0x3F) === 0 && ((1 << ($_la - 1099)) & ((1 << (self::STRING_LITERAL - 1099)) | (1 << (self::ID - 1099)) | (1 << (self::REVERSE_QUOTE_ID - 1099)))) !== 0))) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function uuidSet(): Context\UuidSetContext
    {
        $localContext = new Context\UuidSetContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 524, self::RULE_uuidSet);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5707);
            $this->decimalLiteral();
            $this->setState(5708);
            $this->match(self::MINUS);
            $this->setState(5709);
            $this->decimalLiteral();
            $this->setState(5710);
            $this->match(self::MINUS);
            $this->setState(5711);
            $this->decimalLiteral();
            $this->setState(5712);
            $this->match(self::MINUS);
            $this->setState(5713);
            $this->decimalLiteral();
            $this->setState(5714);
            $this->match(self::MINUS);
            $this->setState(5715);
            $this->decimalLiteral();
            $this->setState(5721);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            do {
                $this->setState(5716);
                $this->match(self::COLON_SYMB);
                $this->setState(5717);
                $this->decimalLiteral();
                $this->setState(5718);
                $this->match(self::MINUS);
                $this->setState(5719);
                $this->decimalLiteral();
                $this->setState(5723);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            } while ($_la === self::COLON_SYMB);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xid(): Context\XidContext
    {
        $localContext = new Context\XidContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 526, self::RULE_xid);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5725);
            $localContext->globalTableUid = $this->xuidStringId();
            $this->setState(5732);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMA) {
                $this->setState(5726);
                $this->match(self::COMMA);
                $this->setState(5727);
                $localContext->qualifier = $this->xuidStringId();
                $this->setState(5730);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);

                if ($_la === self::COMMA) {
                    $this->setState(5728);
                    $this->match(self::COMMA);
                    $this->setState(5729);
                    $localContext->idFormat = $this->decimalLiteral();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function xuidStringId(): Context\XuidStringIdContext
    {
        $localContext = new Context\XuidStringIdContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 528, self::RULE_xuidStringId);

        try {
            $this->setState(5741);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::STRING_LITERAL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5734);
                    $this->match(self::STRING_LITERAL);
                    break;
                case self::BIT_STRING:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5735);
                    $this->match(self::BIT_STRING);
                    break;
                case self::HEXADECIMAL_LITERAL:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5737);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(5736);
                        $this->match(self::HEXADECIMAL_LITERAL);
                        $this->setState(5739);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::HEXADECIMAL_LITERAL);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function authPlugin(): Context\AuthPluginContext
    {
        $localContext = new Context\AuthPluginContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 530, self::RULE_authPlugin);

        try {
            $this->setState(5745);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 830, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5743);
                    $this->uid();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5744);
                    $this->match(self::STRING_LITERAL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function uid(): Context\UidContext
    {
        $localContext = new Context\UidContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 532, self::RULE_uid);

        try {
            $this->setState(5750);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 831, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5747);
                    $this->simpleId();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5748);
                    $this->match(self::REVERSE_QUOTE_ID);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5749);
                    $this->match(self::CHARSET_REVERSE_QOUTE_STRING);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function simpleId(): Context\SimpleIdContext
    {
        $localContext = new Context\SimpleIdContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 534, self::RULE_simpleId);

        try {
            $this->setState(5761);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 832, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5752);
                    $this->match(self::ID);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5753);
                    $this->charsetNameBase();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5754);
                    $this->transactionLevelBase();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5755);
                    $this->engineName();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5756);
                    $this->privilegesBase();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5757);
                    $this->intervalTypeBase();
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5758);
                    $this->dataTypeBase();
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5759);
                    $this->keywordsCanBeId();
                    break;
                case 9:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(5760);
                    $this->functionNameBase();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dottedId(): Context\DottedIdContext
    {
        $localContext = new Context\DottedIdContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 536, self::RULE_dottedId);

        try {
            $this->setState(5766);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DOT_ID:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5763);
                    $this->match(self::DOT_ID);
                    break;
                case self::DOT:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5764);
                    $this->match(self::DOT);
                    $this->setState(5765);
                    $this->uid();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function decimalLiteral(): Context\DecimalLiteralContext
    {
        $localContext = new Context\DecimalLiteralContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 538, self::RULE_decimalLiteral);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5768);

            $_la = $this->input->LA(1);

            if (! ((($_la - 1089) & ~0x3F) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::ZERO_DECIMAL - 1089)) | (1 << (self::ONE_DECIMAL - 1089)) | (1 << (self::TWO_DECIMAL - 1089)) | (1 << (self::DECIMAL_LITERAL - 1089)) | (1 << (self::REAL_LITERAL - 1089)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function fileSizeLiteral(): Context\FileSizeLiteralContext
    {
        $localContext = new Context\FileSizeLiteralContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 540, self::RULE_fileSizeLiteral);

        try {
            $this->setState(5772);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::FILESIZE_LITERAL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5770);
                    $this->match(self::FILESIZE_LITERAL);
                    break;
                case self::ZERO_DECIMAL:
                case self::ONE_DECIMAL:
                case self::TWO_DECIMAL:
                case self::DECIMAL_LITERAL:
                case self::REAL_LITERAL:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5771);
                    $this->decimalLiteral();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function stringLiteral(): Context\StringLiteralContext
    {
        $localContext = new Context\StringLiteralContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 542, self::RULE_stringLiteral);

        try {
            $this->setState(5797);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 841, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5779);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::STRING_LITERAL:
                        case self::STRING_CHARSET_NAME:
                            $this->setState(5775);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::STRING_CHARSET_NAME) {
                                $this->setState(5774);
                                $this->match(self::STRING_CHARSET_NAME);
                            }
                            $this->setState(5777);
                            $this->match(self::STRING_LITERAL);
                            break;
                        case self::START_NATIONAL_STRING_LITERAL:
                            $this->setState(5778);
                            $this->match(self::START_NATIONAL_STRING_LITERAL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(5782);
                    $this->errorHandler->sync($this);

                    $alt = 1;

                    do {
                        switch ($alt) {
                            case 1:
                                $this->setState(5781);
                                $this->match(self::STRING_LITERAL);
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }

                        $this->setState(5784);
                        $this->errorHandler->sync($this);

                        $alt = $this->getInterpreter()->adaptivePredict($this->input, 837, $this->ctx);
                    } while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5791);
                    $this->errorHandler->sync($this);

                    switch ($this->input->LA(1)) {
                        case self::STRING_LITERAL:
                        case self::STRING_CHARSET_NAME:
                            $this->setState(5787);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::STRING_CHARSET_NAME) {
                                $this->setState(5786);
                                $this->match(self::STRING_CHARSET_NAME);
                            }
                            $this->setState(5789);
                            $this->match(self::STRING_LITERAL);
                            break;
                        case self::START_NATIONAL_STRING_LITERAL:
                            $this->setState(5790);
                            $this->match(self::START_NATIONAL_STRING_LITERAL);
                            break;
                        default:
                            throw new NoViableAltException($this);
                    }
                    $this->setState(5795);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 840, $this->ctx)) {
                        case 1:
                            $this->setState(5793);
                            $this->match(self::COLLATE);
                            $this->setState(5794);
                            $this->collationName();
                            break;
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function booleanLiteral(): Context\BooleanLiteralContext
    {
        $localContext = new Context\BooleanLiteralContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 544, self::RULE_booleanLiteral);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5799);

            $_la = $this->input->LA(1);

            if (! ($_la === self::FALSE || $_la === self::TRUE)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function hexadecimalLiteral(): Context\HexadecimalLiteralContext
    {
        $localContext = new Context\HexadecimalLiteralContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 546, self::RULE_hexadecimalLiteral);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5802);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::STRING_CHARSET_NAME) {
                $this->setState(5801);
                $this->match(self::STRING_CHARSET_NAME);
            }
            $this->setState(5804);
            $this->match(self::HEXADECIMAL_LITERAL);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function nullNotnull(): Context\NullNotnullContext
    {
        $localContext = new Context\NullNotnullContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 548, self::RULE_nullNotnull);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5807);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::NOT) {
                $this->setState(5806);
                $this->match(self::NOT);
            }
            $this->setState(5809);

            $_la = $this->input->LA(1);

            if (! ($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function constant(): Context\ConstantContext
    {
        $localContext = new Context\ConstantContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 550, self::RULE_constant);

        try {
            $this->setState(5823);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 845, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5811);
                    $this->stringLiteral();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5812);
                    $this->decimalLiteral();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5813);
                    $this->match(self::MINUS);
                    $this->setState(5814);
                    $this->decimalLiteral();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5815);
                    $this->hexadecimalLiteral();
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5816);
                    $this->booleanLiteral();
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5817);
                    $this->match(self::REAL_LITERAL);
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5818);
                    $this->match(self::BIT_STRING);
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5820);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NOT) {
                        $this->setState(5819);
                        $this->match(self::NOT);
                    }
                    $this->setState(5822);

                    $localContext->nullLiteral = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::NULL_LITERAL || $_la === self::NULL_SPEC_LITERAL)) {
                        $localContext->nullLiteral = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dataType(): Context\DataTypeContext
    {
        $localContext = new Context\DataTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 552, self::RULE_dataType);

        try {
            $this->setState(5956);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 880, $this->ctx)) {
                case 1:
                    $localContext = new Context\StringDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(5825);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CHARACTER || ((($_la - 211) & ~0x3F) === 0 && ((1 << ($_la - 211)) & ((1 << (self::CHAR - 211)) | (1 << (self::VARCHAR - 211)) | (1 << (self::NVARCHAR - 211)) | (1 << (self::LONG - 211)) | (1 << (self::TINYTEXT - 211)) | (1 << (self::TEXT - 211)) | (1 << (self::MEDIUMTEXT - 211)) | (1 << (self::LONGTEXT - 211)))) !== 0) || $_la === self::NCHAR)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5827);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VARYING) {
                        $this->setState(5826);
                        $this->match(self::VARYING);
                    }
                    $this->setState(5830);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 847, $this->ctx)) {
                        case 1:
                            $this->setState(5829);
                            $this->lengthOneDimension();
                            break;
                    }
                    $this->setState(5833);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 848, $this->ctx)) {
                        case 1:
                            $this->setState(5832);
                            $this->match(self::BINARY);
                            break;
                    }
                    $this->setState(5841);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 850, $this->ctx)) {
                        case 1:
                            $this->setState(5838);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::CHARACTER:
                                    $this->setState(5835);
                                    $this->match(self::CHARACTER);
                                    $this->setState(5836);
                                    $this->match(self::SET);
                                    break;
                                case self::CHARSET:
                                    $this->setState(5837);
                                    $this->match(self::CHARSET);
                                    break;
                                default:
                                    throw new NoViableAltException($this);
                            }
                            $this->setState(5840);
                            $this->charsetName();
                            break;
                    }
                    $this->setState(5846);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 851, $this->ctx)) {
                        case 1:
                            $this->setState(5843);
                            $this->match(self::COLLATE);
                            $this->setState(5844);
                            $this->collationName();
                            break;
                        case 2:
                            $this->setState(5845);
                            $this->match(self::BINARY);
                            break;
                    }
                    break;
                case 2:
                    $localContext = new Context\NationalStringDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(5848);
                    $this->match(self::NATIONAL);
                    $this->setState(5849);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CHARACTER || $_la === self::VARCHAR)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5851);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 852, $this->ctx)) {
                        case 1:
                            $this->setState(5850);
                            $this->lengthOneDimension();
                            break;
                    }
                    $this->setState(5854);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 853, $this->ctx)) {
                        case 1:
                            $this->setState(5853);
                            $this->match(self::BINARY);
                            break;
                    }
                    break;
                case 3:
                    $localContext = new Context\NationalStringDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(5856);
                    $this->match(self::NCHAR);
                    $this->setState(5857);
                    $localContext->typeName = $this->match(self::VARCHAR);
                    $this->setState(5859);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 854, $this->ctx)) {
                        case 1:
                            $this->setState(5858);
                            $this->lengthOneDimension();
                            break;
                    }
                    $this->setState(5862);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 855, $this->ctx)) {
                        case 1:
                            $this->setState(5861);
                            $this->match(self::BINARY);
                            break;
                    }
                    break;
                case 4:
                    $localContext = new Context\NationalVaryingStringDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(5864);
                    $this->match(self::NATIONAL);
                    $this->setState(5865);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CHARACTER || $_la === self::CHAR)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5866);
                    $this->match(self::VARYING);
                    $this->setState(5868);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 856, $this->ctx)) {
                        case 1:
                            $this->setState(5867);
                            $this->lengthOneDimension();
                            break;
                    }
                    $this->setState(5871);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 857, $this->ctx)) {
                        case 1:
                            $this->setState(5870);
                            $this->match(self::BINARY);
                            break;
                    }
                    break;
                case 5:
                    $localContext = new Context\DimensionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(5873);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ((($_la - 185) & ~0x3F) === 0 && ((1 << ($_la - 185)) & ((1 << (self::TINYINT - 185)) | (1 << (self::SMALLINT - 185)) | (1 << (self::MEDIUMINT - 185)) | (1 << (self::MIDDLEINT - 185)) | (1 << (self::INT - 185)) | (1 << (self::INT1 - 185)) | (1 << (self::INT2 - 185)) | (1 << (self::INT3 - 185)) | (1 << (self::INT4 - 185)) | (1 << (self::INT8 - 185)) | (1 << (self::INTEGER - 185)) | (1 << (self::BIGINT - 185)))) !== 0)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5875);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 858, $this->ctx)) {
                        case 1:
                            $this->setState(5874);
                            $this->lengthOneDimension();
                            break;
                    }
                    $this->setState(5878);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 859, $this->ctx)) {
                        case 1:
                            $this->setState(5877);

                            $_la = $this->input->LA(1);

                            if (! ($_la === self::UNSIGNED || $_la === self::SIGNED)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(5881);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ZEROFILL) {
                        $this->setState(5880);
                        $this->match(self::ZEROFILL);
                    }
                    break;
                case 6:
                    $localContext = new Context\DimensionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(5883);
                    $localContext->typeName = $this->match(self::REAL);
                    $this->setState(5885);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 861, $this->ctx)) {
                        case 1:
                            $this->setState(5884);
                            $this->lengthTwoDimension();
                            break;
                    }
                    $this->setState(5888);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 862, $this->ctx)) {
                        case 1:
                            $this->setState(5887);

                            $_la = $this->input->LA(1);

                            if (! ($_la === self::UNSIGNED || $_la === self::SIGNED)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(5891);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ZEROFILL) {
                        $this->setState(5890);
                        $this->match(self::ZEROFILL);
                    }
                    break;
                case 7:
                    $localContext = new Context\DimensionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(5893);
                    $localContext->typeName = $this->match(self::DOUBLE);
                    $this->setState(5895);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::PRECISION) {
                        $this->setState(5894);
                        $this->match(self::PRECISION);
                    }
                    $this->setState(5898);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 865, $this->ctx)) {
                        case 1:
                            $this->setState(5897);
                            $this->lengthTwoDimension();
                            break;
                    }
                    $this->setState(5901);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 866, $this->ctx)) {
                        case 1:
                            $this->setState(5900);

                            $_la = $this->input->LA(1);

                            if (! ($_la === self::UNSIGNED || $_la === self::SIGNED)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(5904);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ZEROFILL) {
                        $this->setState(5903);
                        $this->match(self::ZEROFILL);
                    }
                    break;
                case 8:
                    $localContext = new Context\DimensionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(5906);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! (((($_la - 200) & ~0x3F) === 0 && ((1 << ($_la - 200)) & ((1 << (self::FLOAT - 200)) | (1 << (self::FLOAT4 - 200)) | (1 << (self::FLOAT8 - 200)) | (1 << (self::DECIMAL - 200)) | (1 << (self::DEC - 200)) | (1 << (self::NUMERIC - 200)))) !== 0) || $_la === self::FIXED)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5908);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 868, $this->ctx)) {
                        case 1:
                            $this->setState(5907);
                            $this->lengthTwoOptionalDimension();
                            break;
                    }
                    $this->setState(5911);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 869, $this->ctx)) {
                        case 1:
                            $this->setState(5910);

                            $_la = $this->input->LA(1);

                            if (! ($_la === self::UNSIGNED || $_la === self::SIGNED)) {
                                $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(5914);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ZEROFILL) {
                        $this->setState(5913);
                        $this->match(self::ZEROFILL);
                    }
                    break;
                case 9:
                    $localContext = new Context\SimpleDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(5916);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! (((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TINYBLOB - 206)) | (1 << (self::MEDIUMBLOB - 206)) | (1 << (self::LONGBLOB - 206)) | (1 << (self::SERIAL - 206)))) !== 0) || $_la === self::BOOL || $_la === self::BOOLEAN)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 10:
                    $localContext = new Context\DimensionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(5917);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! (((($_la - 207) & ~0x3F) === 0 && ((1 << ($_la - 207)) & ((1 << (self::TIME - 207)) | (1 << (self::TIMESTAMP - 207)) | (1 << (self::DATETIME - 207)) | (1 << (self::YEAR - 207)) | (1 << (self::BINARY - 207)) | (1 << (self::VARBINARY - 207)) | (1 << (self::BLOB - 207)))) !== 0) || $_la === self::BIT)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5919);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 871, $this->ctx)) {
                        case 1:
                            $this->setState(5918);
                            $this->lengthOneDimension();
                            break;
                    }
                    break;
                case 11:
                    $localContext = new Context\CollectionDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(5921);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::SET || $_la === self::ENUM)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5922);
                    $this->collectionOptions();
                    $this->setState(5924);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 872, $this->ctx)) {
                        case 1:
                            $this->setState(5923);
                            $this->match(self::BINARY);
                            break;
                    }
                    $this->setState(5932);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 874, $this->ctx)) {
                        case 1:
                            $this->setState(5929);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::CHARACTER:
                                    $this->setState(5926);
                                    $this->match(self::CHARACTER);
                                    $this->setState(5927);
                                    $this->match(self::SET);
                                    break;
                                case self::CHARSET:
                                    $this->setState(5928);
                                    $this->match(self::CHARSET);
                                    break;
                                default:
                                    throw new NoViableAltException($this);
                            }
                            $this->setState(5931);
                            $this->charsetName();
                            break;
                    }
                    break;
                case 12:
                    $localContext = new Context\SpatialDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(5934);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::JSON || ((($_la - 758) & ~0x3F) === 0 && ((1 << ($_la - 758)) & ((1 << (self::GEOMETRYCOLLECTION - 758)) | (1 << (self::GEOMCOLLECTION - 758)) | (1 << (self::GEOMETRY - 758)) | (1 << (self::LINESTRING - 758)) | (1 << (self::MULTILINESTRING - 758)) | (1 << (self::MULTIPOINT - 758)) | (1 << (self::MULTIPOLYGON - 758)) | (1 << (self::POINT - 758)) | (1 << (self::POLYGON - 758)))) !== 0))) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 13:
                    $localContext = new Context\LongVarcharDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(5935);
                    $localContext->typeName = $this->match(self::LONG);
                    $this->setState(5937);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::VARCHAR) {
                        $this->setState(5936);
                        $this->match(self::VARCHAR);
                    }
                    $this->setState(5940);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 876, $this->ctx)) {
                        case 1:
                            $this->setState(5939);
                            $this->match(self::BINARY);
                            break;
                    }
                    $this->setState(5948);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 878, $this->ctx)) {
                        case 1:
                            $this->setState(5945);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::CHARACTER:
                                    $this->setState(5942);
                                    $this->match(self::CHARACTER);
                                    $this->setState(5943);
                                    $this->match(self::SET);
                                    break;
                                case self::CHARSET:
                                    $this->setState(5944);
                                    $this->match(self::CHARSET);
                                    break;
                                default:
                                    throw new NoViableAltException($this);
                            }
                            $this->setState(5947);
                            $this->charsetName();
                            break;
                    }
                    $this->setState(5952);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 879, $this->ctx)) {
                        case 1:
                            $this->setState(5950);
                            $this->match(self::COLLATE);
                            $this->setState(5951);
                            $this->collationName();
                            break;
                    }
                    break;
                case 14:
                    $localContext = new Context\LongVarbinaryDataTypeContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(5954);
                    $this->match(self::LONG);
                    $this->setState(5955);
                    $this->match(self::VARBINARY);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function collectionOptions(): Context\CollectionOptionsContext
    {
        $localContext = new Context\CollectionOptionsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 554, self::RULE_collectionOptions);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5958);
            $this->match(self::LR_BRACKET);
            $this->setState(5959);
            $this->match(self::STRING_LITERAL);
            $this->setState(5964);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(5960);
                $this->match(self::COMMA);
                $this->setState(5961);
                $this->match(self::STRING_LITERAL);
                $this->setState(5966);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(5967);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function convertedDataType(): Context\ConvertedDataTypeContext
    {
        $localContext = new Context\ConvertedDataTypeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 556, self::RULE_convertedDataType);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5994);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::BINARY:
                case self::NCHAR:
                    $this->setState(5969);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::BINARY || $_la === self::NCHAR)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5971);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(5970);
                        $this->lengthOneDimension();
                    }
                    break;
                case self::CHAR:
                    $this->setState(5973);
                    $localContext->typeName = $this->match(self::CHAR);
                    $this->setState(5975);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(5974);
                        $this->lengthOneDimension();
                    }
                    $this->setState(5983);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::CHARACTER || $_la === self::CHARSET) {
                        $this->setState(5980);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::CHARACTER:
                                $this->setState(5977);
                                $this->match(self::CHARACTER);
                                $this->setState(5978);
                                $this->match(self::SET);
                                break;
                            case self::CHARSET:
                                $this->setState(5979);
                                $this->match(self::CHARSET);
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(5982);
                        $this->charsetName();
                    }
                    break;
                case self::INT:
                case self::INTEGER:
                case self::DATE:
                case self::TIME:
                case self::DATETIME:
                case self::JSON:
                    $this->setState(5985);

                    $localContext->typeName = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! (((($_la - 189) & ~0x3F) === 0 && ((1 << ($_la - 189)) & ((1 << (self::INT - 189)) | (1 << (self::INTEGER - 189)) | (1 << (self::DATE - 189)) | (1 << (self::TIME - 189)) | (1 << (self::DATETIME - 189)))) !== 0) || $_la === self::JSON)) {
                        $localContext->typeName = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case self::DECIMAL:
                    $this->setState(5986);
                    $localContext->typeName = $this->match(self::DECIMAL);
                    $this->setState(5988);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LR_BRACKET) {
                        $this->setState(5987);
                        $this->lengthTwoOptionalDimension();
                    }
                    break;
                case self::UNSIGNED:
                case self::SIGNED:
                    $this->setState(5990);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::UNSIGNED || $_la === self::SIGNED)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(5992);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::INTEGER) {
                        $this->setState(5991);
                        $this->match(self::INTEGER);
                    }
                    break;
                default:
                    throw new NoViableAltException($this);
            }
            $this->setState(5997);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ARRAY) {
                $this->setState(5996);
                $this->match(self::ARRAY);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lengthOneDimension(): Context\LengthOneDimensionContext
    {
        $localContext = new Context\LengthOneDimensionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 558, self::RULE_lengthOneDimension);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(5999);
            $this->match(self::LR_BRACKET);
            $this->setState(6000);
            $this->decimalLiteral();
            $this->setState(6001);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lengthTwoDimension(): Context\LengthTwoDimensionContext
    {
        $localContext = new Context\LengthTwoDimensionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 560, self::RULE_lengthTwoDimension);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6003);
            $this->match(self::LR_BRACKET);
            $this->setState(6004);
            $this->decimalLiteral();
            $this->setState(6005);
            $this->match(self::COMMA);
            $this->setState(6006);
            $this->decimalLiteral();
            $this->setState(6007);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function lengthTwoOptionalDimension(): Context\LengthTwoOptionalDimensionContext
    {
        $localContext = new Context\LengthTwoOptionalDimensionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 562, self::RULE_lengthTwoOptionalDimension);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6009);
            $this->match(self::LR_BRACKET);
            $this->setState(6010);
            $this->decimalLiteral();
            $this->setState(6013);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::COMMA) {
                $this->setState(6011);
                $this->match(self::COMMA);
                $this->setState(6012);
                $this->decimalLiteral();
            }
            $this->setState(6015);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function uidList(): Context\UidListContext
    {
        $localContext = new Context\UidListContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 564, self::RULE_uidList);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6017);
            $this->uid();
            $this->setState(6022);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 891, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(6018);
                    $this->match(self::COMMA);
                    $this->setState(6019);
                    $this->uid();
                }

                $this->setState(6024);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 891, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tables(): Context\TablesContext
    {
        $localContext = new Context\TablesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 566, self::RULE_tables);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6025);
            $this->tableName();
            $this->setState(6030);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6026);
                $this->match(self::COMMA);
                $this->setState(6027);
                $this->tableName();
                $this->setState(6032);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function tableNames(): Context\TableNamesContext
    {
        $localContext = new Context\TableNamesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 568, self::RULE_tableNames);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6033);
            $this->tableName();
            $this->setState(6038);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 893, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    $this->setState(6034);
                    $this->match(self::COMMA);
                    $this->setState(6035);
                    $this->tableName();
                }

                $this->setState(6040);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 893, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function indexColumnNames(): Context\IndexColumnNamesContext
    {
        $localContext = new Context\IndexColumnNamesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 570, self::RULE_indexColumnNames);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6041);
            $this->match(self::LR_BRACKET);
            $this->setState(6042);
            $this->indexColumnName();
            $this->setState(6047);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6043);
                $this->match(self::COMMA);
                $this->setState(6044);
                $this->indexColumnName();
                $this->setState(6049);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
            $this->setState(6050);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function expressions(): Context\ExpressionsContext
    {
        $localContext = new Context\ExpressionsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 572, self::RULE_expressions);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6052);
            $this->recursiveExpression(0);
            $this->setState(6057);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6053);
                $this->match(self::COMMA);
                $this->setState(6054);
                $this->recursiveExpression(0);
                $this->setState(6059);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function expressionsWithDefaults(): Context\ExpressionsWithDefaultsContext
    {
        $localContext = new Context\ExpressionsWithDefaultsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 574, self::RULE_expressionsWithDefaults);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6060);
            $this->expressionOrDefault();
            $this->setState(6065);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6061);
                $this->match(self::COMMA);
                $this->setState(6062);
                $this->expressionOrDefault();
                $this->setState(6067);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function constants(): Context\ConstantsContext
    {
        $localContext = new Context\ConstantsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 576, self::RULE_constants);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6068);
            $this->constant();
            $this->setState(6073);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6069);
                $this->match(self::COMMA);
                $this->setState(6070);
                $this->constant();
                $this->setState(6075);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function simpleStrings(): Context\SimpleStringsContext
    {
        $localContext = new Context\SimpleStringsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 578, self::RULE_simpleStrings);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6076);
            $this->match(self::STRING_LITERAL);
            $this->setState(6081);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6077);
                $this->match(self::COMMA);
                $this->setState(6078);
                $this->match(self::STRING_LITERAL);
                $this->setState(6083);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function userVariables(): Context\UserVariablesContext
    {
        $localContext = new Context\UserVariablesContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 580, self::RULE_userVariables);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6084);
            $this->match(self::LOCAL_ID);
            $this->setState(6089);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6085);
                $this->match(self::COMMA);
                $this->setState(6086);
                $this->match(self::LOCAL_ID);
                $this->setState(6091);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function defaultValue(): Context\DefaultValueContext
    {
        $localContext = new Context\DefaultValueContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 582, self::RULE_defaultValue);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6102);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 901, $this->ctx)) {
                case 1:
                    $this->setState(6092);
                    $this->match(self::NULL_LITERAL);
                    break;
                case 2:
                    $this->setState(6094);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 900, $this->ctx)) {
                        case 1:
                            $this->setState(6093);
                            $this->unaryOperator();
                            break;
                    }
                    $this->setState(6096);
                    $this->constant();
                    break;
                case 3:
                    $this->setState(6097);
                    $this->currentTimestamp();
                    break;
                case 4:
                    $this->setState(6098);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6099);
                    $this->recursiveExpression(0);
                    $this->setState(6100);
                    $this->match(self::RR_BRACKET);
                    break;
            }
            $this->setState(6107);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 902, $this->ctx)) {
                case 1:
                    $this->setState(6104);
                    $this->match(self::ON);
                    $this->setState(6105);
                    $this->match(self::UPDATE);
                    $this->setState(6106);
                    $this->currentTimestamp();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function currentTimestamp(): Context\CurrentTimestampContext
    {
        $localContext = new Context\CurrentTimestampContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 584, self::RULE_currentTimestamp);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6123);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::CURRENT_TIMESTAMP:
                case self::LOCALTIME:
                case self::LOCALTIMESTAMP:
                    $this->setState(6109);

                    $_la = $this->input->LA(1);

                    if (! ((($_la - 301) & ~0x3F) === 0 && ((1 << ($_la - 301)) & ((1 << (self::CURRENT_TIMESTAMP - 301)) | (1 << (self::LOCALTIME - 301)) | (1 << (self::LOCALTIMESTAMP - 301)))) !== 0)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6115);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 904, $this->ctx)) {
                        case 1:
                            $this->setState(6110);
                            $this->match(self::LR_BRACKET);
                            $this->setState(6112);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ((($_la - 1089) & ~0x3F) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::ZERO_DECIMAL - 1089)) | (1 << (self::ONE_DECIMAL - 1089)) | (1 << (self::TWO_DECIMAL - 1089)) | (1 << (self::DECIMAL_LITERAL - 1089)) | (1 << (self::REAL_LITERAL - 1089)))) !== 0) {
                                $this->setState(6111);
                                $this->decimalLiteral();
                            }
                            $this->setState(6114);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    break;
                case self::NOW:
                    $this->setState(6117);
                    $this->match(self::NOW);
                    $this->setState(6118);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6120);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ((($_la - 1089) & ~0x3F) === 0 && ((1 << ($_la - 1089)) & ((1 << (self::ZERO_DECIMAL - 1089)) | (1 << (self::ONE_DECIMAL - 1089)) | (1 << (self::TWO_DECIMAL - 1089)) | (1 << (self::DECIMAL_LITERAL - 1089)) | (1 << (self::REAL_LITERAL - 1089)))) !== 0) {
                        $this->setState(6119);
                        $this->decimalLiteral();
                    }
                    $this->setState(6122);
                    $this->match(self::RR_BRACKET);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function expressionOrDefault(): Context\ExpressionOrDefaultContext
    {
        $localContext = new Context\ExpressionOrDefaultContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 586, self::RULE_expressionOrDefault);

        try {
            $this->setState(6127);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 907, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6125);
                    $this->recursiveExpression(0);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6126);
                    $this->match(self::DEFAULT);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ifExists(): Context\IfExistsContext
    {
        $localContext = new Context\IfExistsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 588, self::RULE_ifExists);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6129);
            $this->match(self::IF);
            $this->setState(6130);
            $this->match(self::EXISTS);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function ifNotExists(): Context\IfNotExistsContext
    {
        $localContext = new Context\IfNotExistsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 590, self::RULE_ifNotExists);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6132);
            $this->match(self::IF);
            $this->setState(6133);
            $this->match(self::NOT);
            $this->setState(6134);
            $this->match(self::EXISTS);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function functionCall(): Context\FunctionCallContext
    {
        $localContext = new Context\FunctionCallContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 592, self::RULE_functionCall);

        try {
            $this->setState(6154);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 910, $this->ctx)) {
                case 1:
                    $localContext = new Context\SpecificFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6136);
                    $this->specificFunction();
                    break;
                case 2:
                    $localContext = new Context\AggregateFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6137);
                    $this->aggregateWindowedFunction();
                    break;
                case 3:
                    $localContext = new Context\NonAggregateFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6138);
                    $this->nonAggregateWindowedFunction();
                    break;
                case 4:
                    $localContext = new Context\ScalarFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6139);
                    $this->scalarFunctionName();
                    $this->setState(6140);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6142);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 908, $this->ctx)) {
                        case 1:
                            $this->setState(6141);
                            $this->functionArgs();
                            break;
                    }
                    $this->setState(6144);
                    $this->match(self::RR_BRACKET);
                    break;
                case 5:
                    $localContext = new Context\UdfFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6146);
                    $this->fullId();
                    $this->setState(6147);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6149);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 909, $this->ctx)) {
                        case 1:
                            $this->setState(6148);
                            $this->functionArgs();
                            break;
                    }
                    $this->setState(6151);
                    $this->match(self::RR_BRACKET);
                    break;
                case 6:
                    $localContext = new Context\PasswordFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(6153);
                    $this->passwordFunctionClause();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function specificFunction(): Context\SpecificFunctionContext
    {
        $localContext = new Context\SpecificFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 594, self::RULE_specificFunction);

        try {
            $this->setState(6348);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 936, $this->ctx)) {
                case 1:
                    $localContext = new Context\SimpleFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6156);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::CURRENT_USER || ((($_la - 299) & ~0x3F) === 0 && ((1 << ($_la - 299)) & ((1 << (self::CURRENT_DATE - 299)) | (1 << (self::CURRENT_TIME - 299)) | (1 << (self::CURRENT_TIMESTAMP - 299)) | (1 << (self::LOCALTIME - 299)))) !== 0))) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6159);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 911, $this->ctx)) {
                        case 1:
                            $this->setState(6157);
                            $this->match(self::LR_BRACKET);
                            $this->setState(6158);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                    break;
                case 2:
                    $localContext = new Context\DataTypeFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6161);
                    $this->match(self::CONVERT);
                    $this->setState(6162);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6163);
                    $this->recursiveExpression(0);
                    $this->setState(6164);
                    $localContext->separator = $this->match(self::COMMA);
                    $this->setState(6165);
                    $this->convertedDataType();
                    $this->setState(6166);
                    $this->match(self::RR_BRACKET);
                    break;
                case 3:
                    $localContext = new Context\DataTypeFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6168);
                    $this->match(self::CONVERT);
                    $this->setState(6169);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6170);
                    $this->recursiveExpression(0);
                    $this->setState(6171);
                    $this->match(self::USING);
                    $this->setState(6172);
                    $this->charsetName();
                    $this->setState(6173);
                    $this->match(self::RR_BRACKET);
                    break;
                case 4:
                    $localContext = new Context\DataTypeFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6175);
                    $this->match(self::CAST);
                    $this->setState(6176);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6177);
                    $this->recursiveExpression(0);
                    $this->setState(6178);
                    $this->match(self::AS);
                    $this->setState(6179);
                    $this->convertedDataType();
                    $this->setState(6180);
                    $this->match(self::RR_BRACKET);
                    break;
                case 5:
                    $localContext = new Context\ValuesFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6182);
                    $this->match(self::VALUES);
                    $this->setState(6183);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6184);
                    $this->fullColumnName();
                    $this->setState(6185);
                    $this->match(self::RR_BRACKET);
                    break;
                case 6:
                    $localContext = new Context\CaseExpressionFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(6187);
                    $this->match(self::CASE);
                    $this->setState(6188);
                    $this->recursiveExpression(0);
                    $this->setState(6190);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(6189);
                        $this->caseFuncAlternative();
                        $this->setState(6192);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::WHEN);
                    $this->setState(6196);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ELSE) {
                        $this->setState(6194);
                        $this->match(self::ELSE);
                        $this->setState(6195);
                        $localContext->elseArg = $this->functionArg();
                    }
                    $this->setState(6198);
                    $this->match(self::END);
                    break;
                case 7:
                    $localContext = new Context\CaseFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(6200);
                    $this->match(self::CASE);
                    $this->setState(6202);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(6201);
                        $this->caseFuncAlternative();
                        $this->setState(6204);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::WHEN);
                    $this->setState(6208);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ELSE) {
                        $this->setState(6206);
                        $this->match(self::ELSE);
                        $this->setState(6207);
                        $localContext->elseArg = $this->functionArg();
                    }
                    $this->setState(6210);
                    $this->match(self::END);
                    break;
                case 8:
                    $localContext = new Context\CharFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(6212);
                    $this->match(self::CHAR);
                    $this->setState(6213);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6214);
                    $this->functionArgs();
                    $this->setState(6217);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::USING) {
                        $this->setState(6215);
                        $this->match(self::USING);
                        $this->setState(6216);
                        $this->charsetName();
                    }
                    $this->setState(6219);
                    $this->match(self::RR_BRACKET);
                    break;
                case 9:
                    $localContext = new Context\PositionFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(6221);
                    $this->match(self::POSITION);
                    $this->setState(6222);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6225);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 917, $this->ctx)) {
                        case 1:
                            $this->setState(6223);
                            $localContext->positionString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6224);
                            $localContext->positionExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6227);
                    $this->match(self::IN);
                    $this->setState(6230);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 918, $this->ctx)) {
                        case 1:
                            $this->setState(6228);
                            $localContext->inString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6229);
                            $localContext->inExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6232);
                    $this->match(self::RR_BRACKET);
                    break;
                case 10:
                    $localContext = new Context\SubstrFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(6234);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::SUBSTR || $_la === self::SUBSTRING)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6235);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6238);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 919, $this->ctx)) {
                        case 1:
                            $this->setState(6236);
                            $localContext->sourceString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6237);
                            $localContext->sourceExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6240);
                    $this->match(self::FROM);
                    $this->setState(6243);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 920, $this->ctx)) {
                        case 1:
                            $this->setState(6241);
                            $localContext->fromDecimal = $this->decimalLiteral();
                            break;
                        case 2:
                            $this->setState(6242);
                            $localContext->fromExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6250);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::FOR) {
                        $this->setState(6245);
                        $this->match(self::FOR);
                        $this->setState(6248);
                        $this->errorHandler->sync($this);

                        switch ($this->getInterpreter()->adaptivePredict($this->input, 921, $this->ctx)) {
                            case 1:
                                $this->setState(6246);
                                $localContext->forDecimal = $this->decimalLiteral();
                                break;
                            case 2:
                                $this->setState(6247);
                                $localContext->forExpression = $this->recursiveExpression(0);
                                break;
                        }
                    }
                    $this->setState(6252);
                    $this->match(self::RR_BRACKET);
                    break;
                case 11:
                    $localContext = new Context\TrimFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(6254);
                    $this->match(self::TRIM);
                    $this->setState(6255);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6256);

                    $localContext->positioinForm = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::BOTH || $_la === self::LEADING || $_la === self::TRAILING)) {
                        $localContext->positioinForm = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6259);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 923, $this->ctx)) {
                        case 1:
                            $this->setState(6257);
                            $localContext->sourceString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6258);
                            $localContext->sourceExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6261);
                    $this->match(self::FROM);
                    $this->setState(6264);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 924, $this->ctx)) {
                        case 1:
                            $this->setState(6262);
                            $localContext->fromString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6263);
                            $localContext->fromExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6266);
                    $this->match(self::RR_BRACKET);
                    break;
                case 12:
                    $localContext = new Context\TrimFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(6268);
                    $this->match(self::TRIM);
                    $this->setState(6269);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6272);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 925, $this->ctx)) {
                        case 1:
                            $this->setState(6270);
                            $localContext->sourceString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6271);
                            $localContext->sourceExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6274);
                    $this->match(self::FROM);
                    $this->setState(6277);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 926, $this->ctx)) {
                        case 1:
                            $this->setState(6275);
                            $localContext->fromString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6276);
                            $localContext->fromExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6279);
                    $this->match(self::RR_BRACKET);
                    break;
                case 13:
                    $localContext = new Context\WeightFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(6281);
                    $this->match(self::WEIGHT_STRING);
                    $this->setState(6282);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6285);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 927, $this->ctx)) {
                        case 1:
                            $this->setState(6283);
                            $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6284);
                            $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6293);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::AS) {
                        $this->setState(6287);
                        $this->match(self::AS);
                        $this->setState(6288);

                        $localContext->stringFormat = $this->input->LT(1);
                        $_la = $this->input->LA(1);

                        if (! ($_la === self::CHAR || $_la === self::BINARY)) {
                            $localContext->stringFormat = $this->errorHandler->recoverInline($this);
                        } else {
                            if ($this->input->LA(1) === Token::EOF) {
                                $this->matchedEOF = true;
                            }

                            $this->errorHandler->reportMatch($this);
                            $this->consume();
                        }
                        $this->setState(6289);
                        $this->match(self::LR_BRACKET);
                        $this->setState(6290);
                        $this->decimalLiteral();
                        $this->setState(6291);
                        $this->match(self::RR_BRACKET);
                    }
                    $this->setState(6296);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::LEVEL) {
                        $this->setState(6295);
                        $this->levelsInWeightString();
                    }
                    $this->setState(6298);
                    $this->match(self::RR_BRACKET);
                    break;
                case 14:
                    $localContext = new Context\ExtractFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(6300);
                    $this->match(self::EXTRACT);
                    $this->setState(6301);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6302);
                    $this->intervalType();
                    $this->setState(6303);
                    $this->match(self::FROM);
                    $this->setState(6306);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 930, $this->ctx)) {
                        case 1:
                            $this->setState(6304);
                            $localContext->sourceString = $this->stringLiteral();
                            break;
                        case 2:
                            $this->setState(6305);
                            $localContext->sourceExpression = $this->recursiveExpression(0);
                            break;
                    }
                    $this->setState(6308);
                    $this->match(self::RR_BRACKET);
                    break;
                case 15:
                    $localContext = new Context\GetFormatFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(6310);
                    $this->match(self::GET_FORMAT);
                    $this->setState(6311);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6312);

                    $localContext->datetimeFormat = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::DATETIME - 206)))) !== 0)) {
                        $localContext->datetimeFormat = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6313);
                    $this->match(self::COMMA);
                    $this->setState(6314);
                    $this->stringLiteral();
                    $this->setState(6315);
                    $this->match(self::RR_BRACKET);
                    break;
                case 16:
                    $localContext = new Context\JsonValueFunctionCallContext($localContext);
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(6317);
                    $this->match(self::JSON_VALUE);
                    $this->setState(6318);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6319);
                    $this->recursiveExpression(0);
                    $this->setState(6320);
                    $this->match(self::COMMA);
                    $this->setState(6321);
                    $this->recursiveExpression(0);
                    $this->setState(6324);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::RETURNING) {
                        $this->setState(6322);
                        $this->match(self::RETURNING);
                        $this->setState(6323);
                        $this->convertedDataType();
                    }
                    $this->setState(6334);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 933, $this->ctx)) {
                        case 1:
                            $this->setState(6330);
                            $this->errorHandler->sync($this);

                            switch ($this->input->LA(1)) {
                                case self::NULL_LITERAL:
                                    $this->setState(6326);
                                    $this->match(self::NULL_LITERAL);
                                    break;
                                case self::ERROR:
                                    $this->setState(6327);
                                    $this->match(self::ERROR);
                                    break;
                                case self::DEFAULT:
                                    $this->setState(6328);
                                    $this->match(self::DEFAULT);
                                    $this->setState(6329);
                                    $this->defaultValue();
                                    break;
                                default:
                                    throw new NoViableAltException($this);
                            }
                            $this->setState(6332);
                            $this->match(self::ON);
                            $this->setState(6333);
                            $this->match(self::EMPTY);
                            break;
                    }
                    $this->setState(6344);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::DEFAULT || $_la === self::NULL_LITERAL || $_la === self::ERROR) {
                        $this->setState(6340);
                        $this->errorHandler->sync($this);

                        switch ($this->input->LA(1)) {
                            case self::NULL_LITERAL:
                                $this->setState(6336);
                                $this->match(self::NULL_LITERAL);
                                break;
                            case self::ERROR:
                                $this->setState(6337);
                                $this->match(self::ERROR);
                                break;
                            case self::DEFAULT:
                                $this->setState(6338);
                                $this->match(self::DEFAULT);
                                $this->setState(6339);
                                $this->defaultValue();
                                break;
                            default:
                                throw new NoViableAltException($this);
                        }
                        $this->setState(6342);
                        $this->match(self::ON);
                        $this->setState(6343);
                        $this->match(self::ERROR);
                    }
                    $this->setState(6346);
                    $this->match(self::RR_BRACKET);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function caseFuncAlternative(): Context\CaseFuncAlternativeContext
    {
        $localContext = new Context\CaseFuncAlternativeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 596, self::RULE_caseFuncAlternative);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6350);
            $this->match(self::WHEN);
            $this->setState(6351);
            $localContext->condition = $this->functionArg();
            $this->setState(6352);
            $this->match(self::THEN);
            $this->setState(6353);
            $localContext->consequent = $this->functionArg();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function levelsInWeightString(): Context\LevelsInWeightStringContext
    {
        $localContext = new Context\LevelsInWeightStringContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 598, self::RULE_levelsInWeightString);

        try {
            $this->setState(6369);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 938, $this->ctx)) {
                case 1:
                    $localContext = new Context\LevelWeightListContext($localContext);
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6355);
                    $this->match(self::LEVEL);
                    $this->setState(6356);
                    $this->levelInWeightListElement();
                    $this->setState(6361);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6357);
                        $this->match(self::COMMA);
                        $this->setState(6358);
                        $this->levelInWeightListElement();
                        $this->setState(6363);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    break;
                case 2:
                    $localContext = new Context\LevelWeightRangeContext($localContext);
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6364);
                    $this->match(self::LEVEL);
                    $this->setState(6365);
                    $localContext->firstLevel = $this->decimalLiteral();
                    $this->setState(6366);
                    $this->match(self::MINUS);
                    $this->setState(6367);
                    $localContext->lastLevel = $this->decimalLiteral();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function levelInWeightListElement(): Context\LevelInWeightListElementContext
    {
        $localContext = new Context\LevelInWeightListElementContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 600, self::RULE_levelInWeightListElement);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6371);
            $this->decimalLiteral();
            $this->setState(6373);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE) {
                $this->setState(6372);

                $localContext->orderType = $this->input->LT(1);
                $_la = $this->input->LA(1);

                if (! ($_la === self::ASC || $_la === self::DESC || $_la === self::REVERSE)) {
                    $localContext->orderType = $this->errorHandler->recoverInline($this);
                } else {
                    if ($this->input->LA(1) === Token::EOF) {
                        $this->matchedEOF = true;
                    }

                    $this->errorHandler->reportMatch($this);
                    $this->consume();
                }
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function aggregateWindowedFunction(): Context\AggregateWindowedFunctionContext
    {
        $localContext = new Context\AggregateWindowedFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 602, self::RULE_aggregateWindowedFunction);

        try {
            $this->setState(6434);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::AVG:
                case self::MAX:
                case self::MIN:
                case self::SUM:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6375);

                    $_la = $this->input->LA(1);

                    if (! ((($_la - 272) & ~0x3F) === 0 && ((1 << ($_la - 272)) & ((1 << (self::AVG - 272)) | (1 << (self::MAX - 272)) | (1 << (self::MIN - 272)) | (1 << (self::SUM - 272)))) !== 0)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6376);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6378);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 940, $this->ctx)) {
                        case 1:
                            $this->setState(6377);

                            $localContext->aggregator = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::ALL || $_la === self::DISTINCT)) {
                                $localContext->aggregator = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            break;
                    }
                    $this->setState(6380);
                    $this->functionArg();
                    $this->setState(6381);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6383);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 941, $this->ctx)) {
                        case 1:
                            $this->setState(6382);
                            $this->overClause();
                            break;
                    }
                    break;
                case self::COUNT:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6385);
                    $this->match(self::COUNT);
                    $this->setState(6386);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6394);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 943, $this->ctx)) {
                        case 1:
                            $this->setState(6387);
                            $localContext->starArg = $this->match(self::STAR);
                            break;
                        case 2:
                            $this->setState(6389);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 942, $this->ctx)) {
                                case 1:
                                    $this->setState(6388);
                                    $localContext->aggregator = $this->match(self::ALL);
                                    break;
                            }
                            $this->setState(6391);
                            $this->functionArg();
                            break;
                        case 3:
                            $this->setState(6392);
                            $localContext->aggregator = $this->match(self::DISTINCT);
                            $this->setState(6393);
                            $this->functionArgs();
                            break;
                    }
                    $this->setState(6396);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6398);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 944, $this->ctx)) {
                        case 1:
                            $this->setState(6397);
                            $this->overClause();
                            break;
                    }
                    break;
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6400);

                    $_la = $this->input->LA(1);

                    if (! ((($_la - 273) & ~0x3F) === 0 && ((1 << ($_la - 273)) & ((1 << (self::BIT_AND - 273)) | (1 << (self::BIT_OR - 273)) | (1 << (self::BIT_XOR - 273)) | (1 << (self::STD - 273)) | (1 << (self::STDDEV - 273)) | (1 << (self::STDDEV_POP - 273)) | (1 << (self::STDDEV_SAMP - 273)) | (1 << (self::VAR_POP - 273)) | (1 << (self::VAR_SAMP - 273)) | (1 << (self::VARIANCE - 273)))) !== 0)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6401);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6403);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 945, $this->ctx)) {
                        case 1:
                            $this->setState(6402);
                            $localContext->aggregator = $this->match(self::ALL);
                            break;
                    }
                    $this->setState(6405);
                    $this->functionArg();
                    $this->setState(6406);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6408);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 946, $this->ctx)) {
                        case 1:
                            $this->setState(6407);
                            $this->overClause();
                            break;
                    }
                    break;
                case self::GROUP_CONCAT:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6410);
                    $this->match(self::GROUP_CONCAT);
                    $this->setState(6411);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6413);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 947, $this->ctx)) {
                        case 1:
                            $this->setState(6412);
                            $localContext->aggregator = $this->match(self::DISTINCT);
                            break;
                    }
                    $this->setState(6415);
                    $this->functionArgs();
                    $this->setState(6426);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::ORDER) {
                        $this->setState(6416);
                        $this->match(self::ORDER);
                        $this->setState(6417);
                        $this->match(self::BY);
                        $this->setState(6418);
                        $this->orderByExpression();
                        $this->setState(6423);
                        $this->errorHandler->sync($this);

                        $_la = $this->input->LA(1);
                        while ($_la === self::COMMA) {
                            $this->setState(6419);
                            $this->match(self::COMMA);
                            $this->setState(6420);
                            $this->orderByExpression();
                            $this->setState(6425);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);
                        }
                    }
                    $this->setState(6430);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::SEPARATOR) {
                        $this->setState(6428);
                        $this->match(self::SEPARATOR);
                        $this->setState(6429);
                        $localContext->separator = $this->match(self::STRING_LITERAL);
                    }
                    $this->setState(6432);
                    $this->match(self::RR_BRACKET);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function nonAggregateWindowedFunction(): Context\NonAggregateWindowedFunctionContext
    {
        $localContext = new Context\NonAggregateWindowedFunctionContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 604, self::RULE_nonAggregateWindowedFunction);

        try {
            $this->setState(6474);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LAG:
                case self::LEAD:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6436);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::LAG || $_la === self::LEAD)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6437);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6438);
                    $this->recursiveExpression(0);
                    $this->setState(6441);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 952, $this->ctx)) {
                        case 1:
                            $this->setState(6439);
                            $this->match(self::COMMA);
                            $this->setState(6440);
                            $this->decimalLiteral();
                            break;
                    }
                    $this->setState(6445);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::COMMA) {
                        $this->setState(6443);
                        $this->match(self::COMMA);
                        $this->setState(6444);
                        $this->decimalLiteral();
                    }
                    $this->setState(6447);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6448);
                    $this->overClause();
                    break;
                case self::FIRST_VALUE:
                case self::LAST_VALUE:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6450);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FIRST_VALUE || $_la === self::LAST_VALUE)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6451);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6452);
                    $this->recursiveExpression(0);
                    $this->setState(6453);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6454);
                    $this->overClause();
                    break;
                case self::CUME_DIST:
                case self::DENSE_RANK:
                case self::PERCENT_RANK:
                case self::RANK:
                case self::ROW_NUMBER:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6456);

                    $_la = $this->input->LA(1);

                    if (! ((($_la - 277) & ~0x3F) === 0 && ((1 << ($_la - 277)) & ((1 << (self::CUME_DIST - 277)) | (1 << (self::DENSE_RANK - 277)) | (1 << (self::PERCENT_RANK - 277)) | (1 << (self::RANK - 277)) | (1 << (self::ROW_NUMBER - 277)))) !== 0)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6457);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6458);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6459);
                    $this->overClause();
                    break;
                case self::NTH_VALUE:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6460);
                    $this->match(self::NTH_VALUE);
                    $this->setState(6461);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6462);
                    $this->recursiveExpression(0);
                    $this->setState(6463);
                    $this->match(self::COMMA);
                    $this->setState(6464);
                    $this->decimalLiteral();
                    $this->setState(6465);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6466);
                    $this->overClause();
                    break;
                case self::NTILE:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6468);
                    $this->match(self::NTILE);
                    $this->setState(6469);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6470);
                    $this->decimalLiteral();
                    $this->setState(6471);
                    $this->match(self::RR_BRACKET);
                    $this->setState(6472);
                    $this->overClause();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function overClause(): Context\OverClauseContext
    {
        $localContext = new Context\OverClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 606, self::RULE_overClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6476);
            $this->match(self::OVER);
            $this->setState(6483);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LR_BRACKET:
                    $this->setState(6477);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6479);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 955, $this->ctx)) {
                        case 1:
                            $this->setState(6478);
                            $this->windowSpec();
                            break;
                    }
                    $this->setState(6481);
                    $this->match(self::RR_BRACKET);
                    break;
                case self::CURRENT:
                case self::DATABASE:
                case self::DIAGNOSTICS:
                case self::EXCEPT:
                case self::GROUP:
                case self::LEFT:
                case self::NUMBER:
                case self::ORDER:
                case self::RIGHT:
                case self::SCHEMA:
                case self::STACKED:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::DATETIME:
                case self::YEAR:
                case self::BINARY:
                case self::TEXT:
                case self::ENUM:
                case self::SERIAL:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::AVG:
                case self::BIT_AND:
                case self::BIT_OR:
                case self::BIT_XOR:
                case self::COUNT:
                case self::GROUP_CONCAT:
                case self::MAX:
                case self::MIN:
                case self::STD:
                case self::STDDEV:
                case self::STDDEV_POP:
                case self::STDDEV_SAMP:
                case self::SUM:
                case self::VAR_POP:
                case self::VAR_SAMP:
                case self::VARIANCE:
                case self::POSITION:
                case self::ACCOUNT:
                case self::ACTION:
                case self::AFTER:
                case self::AGGREGATE:
                case self::ALGORITHM:
                case self::ANY:
                case self::AT:
                case self::AUTHORS:
                case self::AUTOCOMMIT:
                case self::AUTOEXTEND_SIZE:
                case self::AUTO_INCREMENT:
                case self::AVG_ROW_LENGTH:
                case self::BEGIN:
                case self::BINLOG:
                case self::BIT:
                case self::BLOCK:
                case self::BOOL:
                case self::BOOLEAN:
                case self::BTREE:
                case self::CACHE:
                case self::CASCADED:
                case self::CHAIN:
                case self::CHANGED:
                case self::CHANNEL:
                case self::CHECKSUM:
                case self::PAGE_CHECKSUM:
                case self::CIPHER:
                case self::CLASS_ORIGIN:
                case self::CLIENT:
                case self::CLOSE:
                case self::COALESCE:
                case self::CODE:
                case self::COLUMNS:
                case self::COLUMN_FORMAT:
                case self::COLUMN_NAME:
                case self::COMMENT:
                case self::COMMIT:
                case self::COMPACT:
                case self::COMPLETION:
                case self::COMPRESSED:
                case self::COMPRESSION:
                case self::CONCURRENT:
                case self::CONNECT:
                case self::CONNECTION:
                case self::CONSISTENT:
                case self::CONSTRAINT_CATALOG:
                case self::CONSTRAINT_SCHEMA:
                case self::CONSTRAINT_NAME:
                case self::CONTAINS:
                case self::CONTEXT:
                case self::CONTRIBUTORS:
                case self::COPY:
                case self::CPU:
                case self::CURSOR_NAME:
                case self::DATA:
                case self::DATAFILE:
                case self::DEALLOCATE:
                case self::DEFAULT_AUTH:
                case self::DEFINER:
                case self::DELAY_KEY_WRITE:
                case self::DES_KEY_FILE:
                case self::DIRECTORY:
                case self::DISABLE:
                case self::DISCARD:
                case self::DISK:
                case self::DO:
                case self::DUMPFILE:
                case self::DUPLICATE:
                case self::DYNAMIC:
                case self::ENABLE:
                case self::ENCRYPTION:
                case self::END:
                case self::ENDS:
                case self::ENGINE:
                case self::ENGINES:
                case self::ERROR:
                case self::ERRORS:
                case self::ESCAPE:
                case self::EVEN:
                case self::EVENT:
                case self::EVENTS:
                case self::EVERY:
                case self::EXCHANGE:
                case self::EXCLUSIVE:
                case self::EXPIRE:
                case self::EXPORT:
                case self::EXTENDED:
                case self::EXTENT_SIZE:
                case self::FAST:
                case self::FAULTS:
                case self::FIELDS:
                case self::FILE_BLOCK_SIZE:
                case self::FILTER:
                case self::FIRST:
                case self::FIXED:
                case self::FLUSH:
                case self::FOLLOWS:
                case self::FOUND:
                case self::FULL:
                case self::FUNCTION:
                case self::GENERAL:
                case self::GLOBAL:
                case self::GRANTS:
                case self::GROUP_REPLICATION:
                case self::HANDLER:
                case self::HASH:
                case self::HELP:
                case self::HOST:
                case self::HOSTS:
                case self::IDENTIFIED:
                case self::IGNORE_SERVER_IDS:
                case self::IMPORT:
                case self::INDEXES:
                case self::INITIAL_SIZE:
                case self::INPLACE:
                case self::INSERT_METHOD:
                case self::INSTALL:
                case self::INSTANCE:
                case self::INVISIBLE:
                case self::INVOKER:
                case self::IO:
                case self::IO_THREAD:
                case self::IPC:
                case self::ISOLATION:
                case self::ISSUER:
                case self::JSON:
                case self::KEY_BLOCK_SIZE:
                case self::LANGUAGE:
                case self::LAST:
                case self::LEAVES:
                case self::LESS:
                case self::LEVEL:
                case self::LIST:
                case self::LOCAL:
                case self::LOGFILE:
                case self::LOGS:
                case self::MASTER:
                case self::MASTER_AUTO_POSITION:
                case self::MASTER_CONNECT_RETRY:
                case self::MASTER_DELAY:
                case self::MASTER_HEARTBEAT_PERIOD:
                case self::MASTER_HOST:
                case self::MASTER_LOG_FILE:
                case self::MASTER_LOG_POS:
                case self::MASTER_PASSWORD:
                case self::MASTER_PORT:
                case self::MASTER_RETRY_COUNT:
                case self::MASTER_SSL:
                case self::MASTER_SSL_CA:
                case self::MASTER_SSL_CAPATH:
                case self::MASTER_SSL_CERT:
                case self::MASTER_SSL_CIPHER:
                case self::MASTER_SSL_CRL:
                case self::MASTER_SSL_CRLPATH:
                case self::MASTER_SSL_KEY:
                case self::MASTER_TLS_VERSION:
                case self::MASTER_USER:
                case self::MAX_CONNECTIONS_PER_HOUR:
                case self::MAX_QUERIES_PER_HOUR:
                case self::MAX_ROWS:
                case self::MAX_SIZE:
                case self::MAX_UPDATES_PER_HOUR:
                case self::MAX_USER_CONNECTIONS:
                case self::MEDIUM:
                case self::MEMBER:
                case self::MERGE:
                case self::MESSAGE_TEXT:
                case self::MID:
                case self::MIGRATE:
                case self::MIN_ROWS:
                case self::MODE:
                case self::MODIFY:
                case self::MUTEX:
                case self::MYSQL:
                case self::MYSQL_ERRNO:
                case self::NAME:
                case self::NAMES:
                case self::NCHAR:
                case self::NEVER:
                case self::NEXT:
                case self::NO:
                case self::NODEGROUP:
                case self::NONE:
                case self::ODBC:
                case self::OFFLINE:
                case self::OFFSET:
                case self::OF:
                case self::OJ:
                case self::OLD_PASSWORD:
                case self::ONE:
                case self::ONLINE:
                case self::ONLY:
                case self::OPEN:
                case self::OPTIMIZER_COSTS:
                case self::OPTIONS:
                case self::OWNER:
                case self::PACK_KEYS:
                case self::PAGE:
                case self::PARSER:
                case self::PARTIAL:
                case self::PARTITIONING:
                case self::PARTITIONS:
                case self::PASSWORD:
                case self::PHASE:
                case self::PLUGIN:
                case self::PLUGIN_DIR:
                case self::PLUGINS:
                case self::PORT:
                case self::PRECEDES:
                case self::PREPARE:
                case self::PRESERVE:
                case self::PREV:
                case self::PROCESSLIST:
                case self::PROFILE:
                case self::PROFILES:
                case self::PROXY:
                case self::QUERY:
                case self::QUICK:
                case self::REBUILD:
                case self::RECOVER:
                case self::REDO_BUFFER_SIZE:
                case self::REDUNDANT:
                case self::RELAY:
                case self::RELAY_LOG_FILE:
                case self::RELAY_LOG_POS:
                case self::RELAYLOG:
                case self::REMOVE:
                case self::REORGANIZE:
                case self::REPAIR:
                case self::REPLICATE_DO_DB:
                case self::REPLICATE_DO_TABLE:
                case self::REPLICATE_IGNORE_DB:
                case self::REPLICATE_IGNORE_TABLE:
                case self::REPLICATE_REWRITE_DB:
                case self::REPLICATE_WILD_DO_TABLE:
                case self::REPLICATE_WILD_IGNORE_TABLE:
                case self::REPLICATION:
                case self::RESET:
                case self::RESUME:
                case self::RETURNED_SQLSTATE:
                case self::RETURNS:
                case self::ROLE:
                case self::ROLLBACK:
                case self::ROLLUP:
                case self::ROTATE:
                case self::ROW:
                case self::ROWS:
                case self::ROW_FORMAT:
                case self::SAVEPOINT:
                case self::SCHEDULE:
                case self::SECURITY:
                case self::SERVER:
                case self::SESSION:
                case self::SHARE:
                case self::SHARED:
                case self::SIGNED:
                case self::SIMPLE:
                case self::SLAVE:
                case self::SLOW:
                case self::SNAPSHOT:
                case self::SOCKET:
                case self::SOME:
                case self::SONAME:
                case self::SOUNDS:
                case self::SOURCE:
                case self::SQL_AFTER_GTIDS:
                case self::SQL_AFTER_MTS_GAPS:
                case self::SQL_BEFORE_GTIDS:
                case self::SQL_BUFFER_RESULT:
                case self::SQL_CACHE:
                case self::SQL_NO_CACHE:
                case self::SQL_THREAD:
                case self::START:
                case self::STARTS:
                case self::STATS_AUTO_RECALC:
                case self::STATS_PERSISTENT:
                case self::STATS_SAMPLE_PAGES:
                case self::STATUS:
                case self::STOP:
                case self::STORAGE:
                case self::STRING:
                case self::SUBCLASS_ORIGIN:
                case self::SUBJECT:
                case self::SUBPARTITION:
                case self::SUBPARTITIONS:
                case self::SUSPEND:
                case self::SWAPS:
                case self::SWITCHES:
                case self::TABLE_NAME:
                case self::TABLESPACE:
                case self::TEMPORARY:
                case self::TEMPTABLE:
                case self::THAN:
                case self::TRADITIONAL:
                case self::TRANSACTION:
                case self::TRANSACTIONAL:
                case self::TRIGGERS:
                case self::TRUNCATE:
                case self::UNDEFINED:
                case self::UNDOFILE:
                case self::UNDO_BUFFER_SIZE:
                case self::UNINSTALL:
                case self::UNKNOWN:
                case self::UNTIL:
                case self::UPGRADE:
                case self::USER:
                case self::USE_FRM:
                case self::USER_RESOURCES:
                case self::VALIDATION:
                case self::VALUE:
                case self::VARIABLES:
                case self::VIEW:
                case self::VISIBLE:
                case self::WAIT:
                case self::WARNINGS:
                case self::WITHOUT:
                case self::WORK:
                case self::WRAPPER:
                case self::X509:
                case self::XA:
                case self::XML:
                case self::EUR:
                case self::USA:
                case self::JIS:
                case self::ISO:
                case self::INTERNAL:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::TABLES:
                case self::ROUTINE:
                case self::EXECUTE:
                case self::FILE:
                case self::PROCESS:
                case self::RELOAD:
                case self::SHUTDOWN:
                case self::SUPER:
                case self::PRIVILEGES:
                case self::AUDIT_ADMIN:
                case self::BACKUP_ADMIN:
                case self::BINLOG_ADMIN:
                case self::BINLOG_ENCRYPTION_ADMIN:
                case self::CLONE_ADMIN:
                case self::CONNECTION_ADMIN:
                case self::ENCRYPTION_KEY_ADMIN:
                case self::FIREWALL_ADMIN:
                case self::FIREWALL_USER:
                case self::GROUP_REPLICATION_ADMIN:
                case self::INNODB_REDO_LOG_ARCHIVE:
                case self::NDB_STORED_USER:
                case self::PERSIST_RO_VARIABLES_ADMIN:
                case self::REPLICATION_APPLIER:
                case self::REPLICATION_SLAVE_ADMIN:
                case self::RESOURCE_GROUP_ADMIN:
                case self::RESOURCE_GROUP_USER:
                case self::ROLE_ADMIN:
                case self::SESSION_VARIABLES_ADMIN:
                case self::SET_USER_ID:
                case self::SHOW_ROUTINE:
                case self::SYSTEM_VARIABLES_ADMIN:
                case self::TABLE_ENCRYPTION_ADMIN:
                case self::VERSION_TOKEN_ADMIN:
                case self::XA_RECOVER_ADMIN:
                case self::ARMSCII8:
                case self::ASCII:
                case self::BIG5:
                case self::CP1250:
                case self::CP1251:
                case self::CP1256:
                case self::CP1257:
                case self::CP850:
                case self::CP852:
                case self::CP866:
                case self::CP932:
                case self::DEC8:
                case self::EUCJPMS:
                case self::EUCKR:
                case self::GB18030:
                case self::GB2312:
                case self::GBK:
                case self::GEOSTD8:
                case self::GREEK:
                case self::HEBREW:
                case self::HP8:
                case self::KEYBCS2:
                case self::KOI8R:
                case self::KOI8U:
                case self::LATIN1:
                case self::LATIN2:
                case self::LATIN5:
                case self::LATIN7:
                case self::MACCE:
                case self::MACROMAN:
                case self::SJIS:
                case self::SWE7:
                case self::TIS620:
                case self::UCS2:
                case self::UJIS:
                case self::UTF16:
                case self::UTF16LE:
                case self::UTF32:
                case self::UTF8:
                case self::UTF8MB3:
                case self::UTF8MB4:
                case self::ARCHIVE:
                case self::BLACKHOLE:
                case self::CSV:
                case self::FEDERATED:
                case self::INNODB:
                case self::MEMORY:
                case self::MRG_MYISAM:
                case self::MYISAM:
                case self::NDB:
                case self::NDBCLUSTER:
                case self::PERFORMANCE_SCHEMA:
                case self::TOKUDB:
                case self::REPEATABLE:
                case self::COMMITTED:
                case self::UNCOMMITTED:
                case self::SERIALIZABLE:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CATALOG_NAME:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SCHEMA_NAME:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                case self::CHARSET_REVERSE_QOUTE_STRING:
                case self::STRING_LITERAL:
                case self::ID:
                case self::REVERSE_QUOTE_ID:
                case self::OPTIONAL:
                    $this->setState(6482);
                    $this->windowName();
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function windowSpec(): Context\WindowSpecContext
    {
        $localContext = new Context\WindowSpecContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 608, self::RULE_windowSpec);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6486);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 957, $this->ctx)) {
                case 1:
                    $this->setState(6485);
                    $this->windowName();
                    break;
            }
            $this->setState(6489);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::PARTITION) {
                $this->setState(6488);
                $this->partitionClause();
            }
            $this->setState(6492);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::ORDER) {
                $this->setState(6491);
                $this->orderByClause();
            }
            $this->setState(6495);
            $this->errorHandler->sync($this);
            $_la = $this->input->LA(1);

            if ($_la === self::RANGE || $_la === self::ROWS) {
                $this->setState(6494);
                $this->frameClause();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function windowName(): Context\WindowNameContext
    {
        $localContext = new Context\WindowNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 610, self::RULE_windowName);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6497);
            $this->uid();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function frameClause(): Context\FrameClauseContext
    {
        $localContext = new Context\FrameClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 612, self::RULE_frameClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6499);
            $this->frameUnits();
            $this->setState(6500);
            $this->frameExtent();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function frameUnits(): Context\FrameUnitsContext
    {
        $localContext = new Context\FrameUnitsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 614, self::RULE_frameUnits);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6502);

            $_la = $this->input->LA(1);

            if (! ($_la === self::RANGE || $_la === self::ROWS)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function frameExtent(): Context\FrameExtentContext
    {
        $localContext = new Context\FrameExtentContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 616, self::RULE_frameExtent);

        try {
            $this->setState(6506);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 961, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6504);
                    $this->frameRange();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6505);
                    $this->frameBetween();
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function frameBetween(): Context\FrameBetweenContext
    {
        $localContext = new Context\FrameBetweenContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 618, self::RULE_frameBetween);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6508);
            $this->match(self::BETWEEN);
            $this->setState(6509);
            $this->frameRange();
            $this->setState(6510);
            $this->match(self::AND);
            $this->setState(6511);
            $this->frameRange();
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function frameRange(): Context\FrameRangeContext
    {
        $localContext = new Context\FrameRangeContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 620, self::RULE_frameRange);

        try {
            $this->setState(6520);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 962, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6513);
                    $this->match(self::CURRENT);
                    $this->setState(6514);
                    $this->match(self::ROW);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6515);
                    $this->match(self::UNBOUNDED);
                    $this->setState(6516);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FOLLOWING || $_la === self::PRECEDING)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6517);
                    $this->recursiveExpression(0);
                    $this->setState(6518);

                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FOLLOWING || $_la === self::PRECEDING)) {
                        $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function partitionClause(): Context\PartitionClauseContext
    {
        $localContext = new Context\PartitionClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 622, self::RULE_partitionClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6522);
            $this->match(self::PARTITION);
            $this->setState(6523);
            $this->match(self::BY);
            $this->setState(6524);
            $this->recursiveExpression(0);
            $this->setState(6529);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6525);
                $this->match(self::COMMA);
                $this->setState(6526);
                $this->recursiveExpression(0);
                $this->setState(6531);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function scalarFunctionName(): Context\ScalarFunctionNameContext
    {
        $localContext = new Context\ScalarFunctionNameContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 624, self::RULE_scalarFunctionName);

        try {
            $this->setState(6555);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::DATABASE:
                case self::LEFT:
                case self::RIGHT:
                case self::SCHEMA:
                case self::DATE:
                case self::TIME:
                case self::TIMESTAMP:
                case self::YEAR:
                case self::JSON_ARRAY:
                case self::JSON_OBJECT:
                case self::JSON_QUOTE:
                case self::JSON_CONTAINS:
                case self::JSON_CONTAINS_PATH:
                case self::JSON_EXTRACT:
                case self::JSON_KEYS:
                case self::JSON_OVERLAPS:
                case self::JSON_SEARCH:
                case self::JSON_VALUE:
                case self::JSON_ARRAY_APPEND:
                case self::JSON_ARRAY_INSERT:
                case self::JSON_INSERT:
                case self::JSON_MERGE:
                case self::JSON_MERGE_PATCH:
                case self::JSON_MERGE_PRESERVE:
                case self::JSON_REMOVE:
                case self::JSON_REPLACE:
                case self::JSON_SET:
                case self::JSON_UNQUOTE:
                case self::JSON_DEPTH:
                case self::JSON_LENGTH:
                case self::JSON_TYPE:
                case self::JSON_VALID:
                case self::JSON_TABLE:
                case self::JSON_SCHEMA_VALID:
                case self::JSON_SCHEMA_VALIDATION_REPORT:
                case self::JSON_PRETTY:
                case self::JSON_STORAGE_FREE:
                case self::JSON_STORAGE_SIZE:
                case self::JSON_ARRAYAGG:
                case self::JSON_OBJECTAGG:
                case self::COUNT:
                case self::POSITION:
                case self::INVISIBLE:
                case self::VISIBLE:
                case self::QUARTER:
                case self::MONTH:
                case self::DAY:
                case self::HOUR:
                case self::MINUTE:
                case self::WEEK:
                case self::SECOND:
                case self::MICROSECOND:
                case self::SESSION_VARIABLES_ADMIN:
                case self::GEOMETRYCOLLECTION:
                case self::LINESTRING:
                case self::MULTILINESTRING:
                case self::MULTIPOINT:
                case self::MULTIPOLYGON:
                case self::POINT:
                case self::POLYGON:
                case self::ABS:
                case self::ACOS:
                case self::ADDDATE:
                case self::ADDTIME:
                case self::AES_DECRYPT:
                case self::AES_ENCRYPT:
                case self::AREA:
                case self::ASBINARY:
                case self::ASIN:
                case self::ASTEXT:
                case self::ASWKB:
                case self::ASWKT:
                case self::ASYMMETRIC_DECRYPT:
                case self::ASYMMETRIC_DERIVE:
                case self::ASYMMETRIC_ENCRYPT:
                case self::ASYMMETRIC_SIGN:
                case self::ASYMMETRIC_VERIFY:
                case self::ATAN:
                case self::ATAN2:
                case self::BENCHMARK:
                case self::BIN:
                case self::BIT_COUNT:
                case self::BIT_LENGTH:
                case self::BUFFER:
                case self::CEIL:
                case self::CEILING:
                case self::CENTROID:
                case self::CHARACTER_LENGTH:
                case self::CHARSET:
                case self::CHAR_LENGTH:
                case self::COERCIBILITY:
                case self::COLLATION:
                case self::COMPRESS:
                case self::CONCAT:
                case self::CONCAT_WS:
                case self::CONNECTION_ID:
                case self::CONV:
                case self::CONVERT_TZ:
                case self::COS:
                case self::COT:
                case self::CRC32:
                case self::CREATE_ASYMMETRIC_PRIV_KEY:
                case self::CREATE_ASYMMETRIC_PUB_KEY:
                case self::CREATE_DH_PARAMETERS:
                case self::CREATE_DIGEST:
                case self::CROSSES:
                case self::DATEDIFF:
                case self::DATE_FORMAT:
                case self::DAYNAME:
                case self::DAYOFMONTH:
                case self::DAYOFWEEK:
                case self::DAYOFYEAR:
                case self::DECODE:
                case self::DEGREES:
                case self::DES_DECRYPT:
                case self::DES_ENCRYPT:
                case self::DIMENSION:
                case self::DISJOINT:
                case self::ELT:
                case self::ENCODE:
                case self::ENCRYPT:
                case self::ENDPOINT:
                case self::ENVELOPE:
                case self::EQUALS:
                case self::EXP:
                case self::EXPORT_SET:
                case self::EXTERIORRING:
                case self::EXTRACTVALUE:
                case self::FIELD:
                case self::FIND_IN_SET:
                case self::FLOOR:
                case self::FORMAT:
                case self::FOUND_ROWS:
                case self::FROM_BASE64:
                case self::FROM_DAYS:
                case self::FROM_UNIXTIME:
                case self::GEOMCOLLFROMTEXT:
                case self::GEOMCOLLFROMWKB:
                case self::GEOMETRYCOLLECTIONFROMTEXT:
                case self::GEOMETRYCOLLECTIONFROMWKB:
                case self::GEOMETRYFROMTEXT:
                case self::GEOMETRYFROMWKB:
                case self::GEOMETRYN:
                case self::GEOMETRYTYPE:
                case self::GEOMFROMTEXT:
                case self::GEOMFROMWKB:
                case self::GET_FORMAT:
                case self::GET_LOCK:
                case self::GLENGTH:
                case self::GREATEST:
                case self::GTID_SUBSET:
                case self::GTID_SUBTRACT:
                case self::HEX:
                case self::IFNULL:
                case self::INET6_ATON:
                case self::INET6_NTOA:
                case self::INET_ATON:
                case self::INET_NTOA:
                case self::INSTR:
                case self::INTERIORRINGN:
                case self::INTERSECTS:
                case self::ISCLOSED:
                case self::ISEMPTY:
                case self::ISNULL:
                case self::ISSIMPLE:
                case self::IS_FREE_LOCK:
                case self::IS_IPV4:
                case self::IS_IPV4_COMPAT:
                case self::IS_IPV4_MAPPED:
                case self::IS_IPV6:
                case self::IS_USED_LOCK:
                case self::LAST_INSERT_ID:
                case self::LCASE:
                case self::LEAST:
                case self::LENGTH:
                case self::LINEFROMTEXT:
                case self::LINEFROMWKB:
                case self::LINESTRINGFROMTEXT:
                case self::LINESTRINGFROMWKB:
                case self::LN:
                case self::LOAD_FILE:
                case self::LOCATE:
                case self::LOG:
                case self::LOG10:
                case self::LOG2:
                case self::LOWER:
                case self::LPAD:
                case self::LTRIM:
                case self::MAKEDATE:
                case self::MAKETIME:
                case self::MAKE_SET:
                case self::MASTER_POS_WAIT:
                case self::MBRCONTAINS:
                case self::MBRDISJOINT:
                case self::MBREQUAL:
                case self::MBRINTERSECTS:
                case self::MBROVERLAPS:
                case self::MBRTOUCHES:
                case self::MBRWITHIN:
                case self::MD5:
                case self::MLINEFROMTEXT:
                case self::MLINEFROMWKB:
                case self::MONTHNAME:
                case self::MPOINTFROMTEXT:
                case self::MPOINTFROMWKB:
                case self::MPOLYFROMTEXT:
                case self::MPOLYFROMWKB:
                case self::MULTILINESTRINGFROMTEXT:
                case self::MULTILINESTRINGFROMWKB:
                case self::MULTIPOINTFROMTEXT:
                case self::MULTIPOINTFROMWKB:
                case self::MULTIPOLYGONFROMTEXT:
                case self::MULTIPOLYGONFROMWKB:
                case self::NAME_CONST:
                case self::NULLIF:
                case self::NUMGEOMETRIES:
                case self::NUMINTERIORRINGS:
                case self::NUMPOINTS:
                case self::OCT:
                case self::OCTET_LENGTH:
                case self::ORD:
                case self::OVERLAPS:
                case self::PERIOD_ADD:
                case self::PERIOD_DIFF:
                case self::PI:
                case self::POINTFROMTEXT:
                case self::POINTFROMWKB:
                case self::POINTN:
                case self::POLYFROMTEXT:
                case self::POLYFROMWKB:
                case self::POLYGONFROMTEXT:
                case self::POLYGONFROMWKB:
                case self::POW:
                case self::POWER:
                case self::QUOTE:
                case self::RADIANS:
                case self::RAND:
                case self::RANDOM_BYTES:
                case self::RELEASE_LOCK:
                case self::REVERSE:
                case self::ROUND:
                case self::ROW_COUNT:
                case self::RPAD:
                case self::RTRIM:
                case self::SEC_TO_TIME:
                case self::SESSION_USER:
                case self::SHA:
                case self::SHA1:
                case self::SHA2:
                case self::SIGN:
                case self::SIN:
                case self::SLEEP:
                case self::SOUNDEX:
                case self::SQL_THREAD_WAIT_AFTER_GTIDS:
                case self::SQRT:
                case self::SRID:
                case self::STARTPOINT:
                case self::STRCMP:
                case self::STR_TO_DATE:
                case self::ST_AREA:
                case self::ST_ASBINARY:
                case self::ST_ASTEXT:
                case self::ST_ASWKB:
                case self::ST_ASWKT:
                case self::ST_BUFFER:
                case self::ST_CENTROID:
                case self::ST_CONTAINS:
                case self::ST_CROSSES:
                case self::ST_DIFFERENCE:
                case self::ST_DIMENSION:
                case self::ST_DISJOINT:
                case self::ST_DISTANCE:
                case self::ST_ENDPOINT:
                case self::ST_ENVELOPE:
                case self::ST_EQUALS:
                case self::ST_EXTERIORRING:
                case self::ST_GEOMCOLLFROMTEXT:
                case self::ST_GEOMCOLLFROMTXT:
                case self::ST_GEOMCOLLFROMWKB:
                case self::ST_GEOMETRYCOLLECTIONFROMTEXT:
                case self::ST_GEOMETRYCOLLECTIONFROMWKB:
                case self::ST_GEOMETRYFROMTEXT:
                case self::ST_GEOMETRYFROMWKB:
                case self::ST_GEOMETRYN:
                case self::ST_GEOMETRYTYPE:
                case self::ST_GEOMFROMTEXT:
                case self::ST_GEOMFROMWKB:
                case self::ST_INTERIORRINGN:
                case self::ST_INTERSECTION:
                case self::ST_INTERSECTS:
                case self::ST_ISCLOSED:
                case self::ST_ISEMPTY:
                case self::ST_ISSIMPLE:
                case self::ST_LINEFROMTEXT:
                case self::ST_LINEFROMWKB:
                case self::ST_LINESTRINGFROMTEXT:
                case self::ST_LINESTRINGFROMWKB:
                case self::ST_NUMGEOMETRIES:
                case self::ST_NUMINTERIORRING:
                case self::ST_NUMINTERIORRINGS:
                case self::ST_NUMPOINTS:
                case self::ST_OVERLAPS:
                case self::ST_POINTFROMTEXT:
                case self::ST_POINTFROMWKB:
                case self::ST_POINTN:
                case self::ST_POLYFROMTEXT:
                case self::ST_POLYFROMWKB:
                case self::ST_POLYGONFROMTEXT:
                case self::ST_POLYGONFROMWKB:
                case self::ST_SRID:
                case self::ST_STARTPOINT:
                case self::ST_SYMDIFFERENCE:
                case self::ST_TOUCHES:
                case self::ST_UNION:
                case self::ST_WITHIN:
                case self::ST_X:
                case self::ST_Y:
                case self::SUBDATE:
                case self::SUBSTRING_INDEX:
                case self::SUBTIME:
                case self::SYSTEM_USER:
                case self::TAN:
                case self::TIMEDIFF:
                case self::TIMESTAMPADD:
                case self::TIMESTAMPDIFF:
                case self::TIME_FORMAT:
                case self::TIME_TO_SEC:
                case self::TOUCHES:
                case self::TO_BASE64:
                case self::TO_DAYS:
                case self::TO_SECONDS:
                case self::UCASE:
                case self::UNCOMPRESS:
                case self::UNCOMPRESSED_LENGTH:
                case self::UNHEX:
                case self::UNIX_TIMESTAMP:
                case self::UPDATEXML:
                case self::UPPER:
                case self::UUID:
                case self::UUID_SHORT:
                case self::VALIDATE_PASSWORD_STRENGTH:
                case self::VERSION:
                case self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case self::WEEKDAY:
                case self::WEEKOFYEAR:
                case self::WEIGHT_STRING:
                case self::WITHIN:
                case self::YEARWEEK:
                case self::Y_FUNCTION:
                case self::X_FUNCTION:
                case self::MOD:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6532);
                    $this->functionNameBase();
                    break;
                case self::ASCII:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6533);
                    $this->match(self::ASCII);
                    break;
                case self::CURDATE:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6534);
                    $this->match(self::CURDATE);
                    break;
                case self::CURRENT_DATE:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6535);
                    $this->match(self::CURRENT_DATE);
                    break;
                case self::CURRENT_TIME:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6536);
                    $this->match(self::CURRENT_TIME);
                    break;
                case self::CURRENT_TIMESTAMP:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(6537);
                    $this->match(self::CURRENT_TIMESTAMP);
                    break;
                case self::CURTIME:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(6538);
                    $this->match(self::CURTIME);
                    break;
                case self::DATE_ADD:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(6539);
                    $this->match(self::DATE_ADD);
                    break;
                case self::DATE_SUB:
                    $this->enterOuterAlt($localContext, 9);
                    $this->setState(6540);
                    $this->match(self::DATE_SUB);
                    break;
                case self::IF:
                    $this->enterOuterAlt($localContext, 10);
                    $this->setState(6541);
                    $this->match(self::IF);
                    break;
                case self::INSERT:
                    $this->enterOuterAlt($localContext, 11);
                    $this->setState(6542);
                    $this->match(self::INSERT);
                    break;
                case self::LOCALTIME:
                    $this->enterOuterAlt($localContext, 12);
                    $this->setState(6543);
                    $this->match(self::LOCALTIME);
                    break;
                case self::LOCALTIMESTAMP:
                    $this->enterOuterAlt($localContext, 13);
                    $this->setState(6544);
                    $this->match(self::LOCALTIMESTAMP);
                    break;
                case self::MID:
                    $this->enterOuterAlt($localContext, 14);
                    $this->setState(6545);
                    $this->match(self::MID);
                    break;
                case self::NOW:
                    $this->enterOuterAlt($localContext, 15);
                    $this->setState(6546);
                    $this->match(self::NOW);
                    break;
                case self::REPLACE:
                    $this->enterOuterAlt($localContext, 16);
                    $this->setState(6547);
                    $this->match(self::REPLACE);
                    break;
                case self::SUBSTR:
                    $this->enterOuterAlt($localContext, 17);
                    $this->setState(6548);
                    $this->match(self::SUBSTR);
                    break;
                case self::SUBSTRING:
                    $this->enterOuterAlt($localContext, 18);
                    $this->setState(6549);
                    $this->match(self::SUBSTRING);
                    break;
                case self::SYSDATE:
                    $this->enterOuterAlt($localContext, 19);
                    $this->setState(6550);
                    $this->match(self::SYSDATE);
                    break;
                case self::TRIM:
                    $this->enterOuterAlt($localContext, 20);
                    $this->setState(6551);
                    $this->match(self::TRIM);
                    break;
                case self::UTC_DATE:
                    $this->enterOuterAlt($localContext, 21);
                    $this->setState(6552);
                    $this->match(self::UTC_DATE);
                    break;
                case self::UTC_TIME:
                    $this->enterOuterAlt($localContext, 22);
                    $this->setState(6553);
                    $this->match(self::UTC_TIME);
                    break;
                case self::UTC_TIMESTAMP:
                    $this->enterOuterAlt($localContext, 23);
                    $this->setState(6554);
                    $this->match(self::UTC_TIMESTAMP);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function passwordFunctionClause(): Context\PasswordFunctionClauseContext
    {
        $localContext = new Context\PasswordFunctionClauseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 626, self::RULE_passwordFunctionClause);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6557);

            $localContext->functionName = $this->input->LT(1);
            $_la = $this->input->LA(1);

            if (! ($_la === self::OLD_PASSWORD || $_la === self::PASSWORD)) {
                $localContext->functionName = $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
            $this->setState(6558);
            $this->match(self::LR_BRACKET);
            $this->setState(6559);
            $this->functionArg();
            $this->setState(6560);
            $this->match(self::RR_BRACKET);
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function functionArgs(): Context\FunctionArgsContext
    {
        $localContext = new Context\FunctionArgsContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 628, self::RULE_functionArgs);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6566);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 965, $this->ctx)) {
                case 1:
                    $this->setState(6562);
                    $this->constant();
                    break;
                case 2:
                    $this->setState(6563);
                    $this->fullColumnName();
                    break;
                case 3:
                    $this->setState(6564);
                    $this->functionCall();
                    break;
                case 4:
                    $this->setState(6565);
                    $this->recursiveExpression(0);
                    break;
            }
            $this->setState(6577);
            $this->errorHandler->sync($this);

            $_la = $this->input->LA(1);
            while ($_la === self::COMMA) {
                $this->setState(6568);
                $this->match(self::COMMA);
                $this->setState(6573);
                $this->errorHandler->sync($this);

                switch ($this->getInterpreter()->adaptivePredict($this->input, 966, $this->ctx)) {
                    case 1:
                        $this->setState(6569);
                        $this->constant();
                        break;
                    case 2:
                        $this->setState(6570);
                        $this->fullColumnName();
                        break;
                    case 3:
                        $this->setState(6571);
                        $this->functionCall();
                        break;
                    case 4:
                        $this->setState(6572);
                        $this->recursiveExpression(0);
                        break;
                }
                $this->setState(6579);
                $this->errorHandler->sync($this);
                $_la = $this->input->LA(1);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function functionArg(): Context\FunctionArgContext
    {
        $localContext = new Context\FunctionArgContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 630, self::RULE_functionArg);

        try {
            $this->setState(6584);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 968, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6580);
                    $this->constant();
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6581);
                    $this->fullColumnName();
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6582);
                    $this->functionCall();
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6583);
                    $this->recursiveExpression(0);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function expression(): Context\ExpressionContext
    {
        return $this->recursiveExpression(0);
    }

    /**
     * @throws RecognitionException
     */
    public function predicate(): Context\PredicateContext
    {
        return $this->recursivePredicate(0);
    }

    /**
     * @throws RecognitionException
     */
    public function expressionAtom(): Context\ExpressionAtomContext
    {
        return $this->recursiveExpressionAtom(0);
    }

    /**
     * @throws RecognitionException
     */
    public function unaryOperator(): Context\UnaryOperatorContext
    {
        $localContext = new Context\UnaryOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 638, self::RULE_unaryOperator);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6749);

            $_la = $this->input->LA(1);

            if (! ($_la === self::NOT || ((($_la - 1071) & ~0x3F) === 0 && ((1 << ($_la - 1071)) & ((1 << (self::PLUS - 1071)) | (1 << (self::MINUS - 1071)) | (1 << (self::EXCLAMATION_SYMBOL - 1071)) | (1 << (self::BIT_NOT_OP - 1071)))) !== 0))) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function comparisonOperator(): Context\ComparisonOperatorContext
    {
        $localContext = new Context\ComparisonOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 640, self::RULE_comparisonOperator);

        try {
            $this->setState(6765);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 986, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6751);
                    $this->match(self::EQUAL_SYMBOL);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6752);
                    $this->match(self::GREATER_SYMBOL);
                    break;
                case 3:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6753);
                    $this->match(self::LESS_SYMBOL);
                    break;
                case 4:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6754);
                    $this->match(self::LESS_SYMBOL);
                    $this->setState(6755);
                    $this->match(self::EQUAL_SYMBOL);
                    break;
                case 5:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6756);
                    $this->match(self::GREATER_SYMBOL);
                    $this->setState(6757);
                    $this->match(self::EQUAL_SYMBOL);
                    break;
                case 6:
                    $this->enterOuterAlt($localContext, 6);
                    $this->setState(6758);
                    $this->match(self::LESS_SYMBOL);
                    $this->setState(6759);
                    $this->match(self::GREATER_SYMBOL);
                    break;
                case 7:
                    $this->enterOuterAlt($localContext, 7);
                    $this->setState(6760);
                    $this->match(self::EXCLAMATION_SYMBOL);
                    $this->setState(6761);
                    $this->match(self::EQUAL_SYMBOL);
                    break;
                case 8:
                    $this->enterOuterAlt($localContext, 8);
                    $this->setState(6762);
                    $this->match(self::LESS_SYMBOL);
                    $this->setState(6763);
                    $this->match(self::EQUAL_SYMBOL);
                    $this->setState(6764);
                    $this->match(self::GREATER_SYMBOL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function logicalOperator(): Context\LogicalOperatorContext
    {
        $localContext = new Context\LogicalOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 642, self::RULE_logicalOperator);

        try {
            $this->setState(6774);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::AND:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6767);
                    $this->match(self::AND);
                    break;
                case self::BIT_AND_OP:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6768);
                    $this->match(self::BIT_AND_OP);
                    $this->setState(6769);
                    $this->match(self::BIT_AND_OP);
                    break;
                case self::XOR:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6770);
                    $this->match(self::XOR);
                    break;
                case self::OR:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6771);
                    $this->match(self::OR);
                    break;
                case self::BIT_OR_OP:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6772);
                    $this->match(self::BIT_OR_OP);
                    $this->setState(6773);
                    $this->match(self::BIT_OR_OP);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function bitOperator(): Context\BitOperatorContext
    {
        $localContext = new Context\BitOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 644, self::RULE_bitOperator);

        try {
            $this->setState(6783);
            $this->errorHandler->sync($this);

            switch ($this->input->LA(1)) {
                case self::LESS_SYMBOL:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6776);
                    $this->match(self::LESS_SYMBOL);
                    $this->setState(6777);
                    $this->match(self::LESS_SYMBOL);
                    break;
                case self::GREATER_SYMBOL:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6778);
                    $this->match(self::GREATER_SYMBOL);
                    $this->setState(6779);
                    $this->match(self::GREATER_SYMBOL);
                    break;
                case self::BIT_AND_OP:
                    $this->enterOuterAlt($localContext, 3);
                    $this->setState(6780);
                    $this->match(self::BIT_AND_OP);
                    break;
                case self::BIT_XOR_OP:
                    $this->enterOuterAlt($localContext, 4);
                    $this->setState(6781);
                    $this->match(self::BIT_XOR_OP);
                    break;
                case self::BIT_OR_OP:
                    $this->enterOuterAlt($localContext, 5);
                    $this->setState(6782);
                    $this->match(self::BIT_OR_OP);
                    break;
                default:
                    throw new NoViableAltException($this);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function mathOperator(): Context\MathOperatorContext
    {
        $localContext = new Context\MathOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 646, self::RULE_mathOperator);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6785);

            $_la = $this->input->LA(1);

            if (! ((($_la - 1068) & ~0x3F) === 0 && ((1 << ($_la - 1068)) & ((1 << (self::STAR - 1068)) | (1 << (self::DIVIDE - 1068)) | (1 << (self::MODULE - 1068)) | (1 << (self::PLUS - 1068)) | (1 << (self::MINUS - 1068)) | (1 << (self::DIV - 1068)) | (1 << (self::MOD - 1068)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function jsonOperator(): Context\JsonOperatorContext
    {
        $localContext = new Context\JsonOperatorContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 648, self::RULE_jsonOperator);

        try {
            $this->setState(6792);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 989, $this->ctx)) {
                case 1:
                    $this->enterOuterAlt($localContext, 1);
                    $this->setState(6787);
                    $this->match(self::MINUS);
                    $this->setState(6788);
                    $this->match(self::GREATER_SYMBOL);
                    break;
                case 2:
                    $this->enterOuterAlt($localContext, 2);
                    $this->setState(6789);
                    $this->match(self::MINUS);
                    $this->setState(6790);
                    $this->match(self::GREATER_SYMBOL);
                    $this->setState(6791);
                    $this->match(self::GREATER_SYMBOL);
                    break;
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function charsetNameBase(): Context\CharsetNameBaseContext
    {
        $localContext = new Context\CharsetNameBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 650, self::RULE_charsetNameBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6794);

            $_la = $this->input->LA(1);

            if (! ($_la === self::BINARY || ((($_la - 701) & ~0x3F) === 0 && ((1 << ($_la - 701)) & ((1 << (self::ARMSCII8 - 701)) | (1 << (self::ASCII - 701)) | (1 << (self::BIG5 - 701)) | (1 << (self::CP1250 - 701)) | (1 << (self::CP1251 - 701)) | (1 << (self::CP1256 - 701)) | (1 << (self::CP1257 - 701)) | (1 << (self::CP850 - 701)) | (1 << (self::CP852 - 701)) | (1 << (self::CP866 - 701)) | (1 << (self::CP932 - 701)) | (1 << (self::DEC8 - 701)) | (1 << (self::EUCJPMS - 701)) | (1 << (self::EUCKR - 701)) | (1 << (self::GB18030 - 701)) | (1 << (self::GB2312 - 701)) | (1 << (self::GBK - 701)) | (1 << (self::GEOSTD8 - 701)) | (1 << (self::GREEK - 701)) | (1 << (self::HEBREW - 701)) | (1 << (self::HP8 - 701)) | (1 << (self::KEYBCS2 - 701)) | (1 << (self::KOI8R - 701)) | (1 << (self::KOI8U - 701)) | (1 << (self::LATIN1 - 701)) | (1 << (self::LATIN2 - 701)) | (1 << (self::LATIN5 - 701)) | (1 << (self::LATIN7 - 701)) | (1 << (self::MACCE - 701)) | (1 << (self::MACROMAN - 701)) | (1 << (self::SJIS - 701)) | (1 << (self::SWE7 - 701)) | (1 << (self::TIS620 - 701)) | (1 << (self::UCS2 - 701)) | (1 << (self::UJIS - 701)) | (1 << (self::UTF16 - 701)) | (1 << (self::UTF16LE - 701)) | (1 << (self::UTF32 - 701)) | (1 << (self::UTF8 - 701)) | (1 << (self::UTF8MB3 - 701)) | (1 << (self::UTF8MB4 - 701)))) !== 0))) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function transactionLevelBase(): Context\TransactionLevelBaseContext
    {
        $localContext = new Context\TransactionLevelBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 652, self::RULE_transactionLevelBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6796);

            $_la = $this->input->LA(1);

            if (! ((($_la - 754) & ~0x3F) === 0 && ((1 << ($_la - 754)) & ((1 << (self::REPEATABLE - 754)) | (1 << (self::COMMITTED - 754)) | (1 << (self::UNCOMMITTED - 754)) | (1 << (self::SERIALIZABLE - 754)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function privilegesBase(): Context\PrivilegesBaseContext
    {
        $localContext = new Context\PrivilegesBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 654, self::RULE_privilegesBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6798);

            $_la = $this->input->LA(1);

            if (! ((($_la - 660) & ~0x3F) === 0 && ((1 << ($_la - 660)) & ((1 << (self::TABLES - 660)) | (1 << (self::ROUTINE - 660)) | (1 << (self::EXECUTE - 660)) | (1 << (self::FILE - 660)) | (1 << (self::PROCESS - 660)) | (1 << (self::RELOAD - 660)) | (1 << (self::SHUTDOWN - 660)) | (1 << (self::SUPER - 660)) | (1 << (self::PRIVILEGES - 660)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function intervalTypeBase(): Context\IntervalTypeBaseContext
    {
        $localContext = new Context\IntervalTypeBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 656, self::RULE_intervalTypeBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6800);

            $_la = $this->input->LA(1);

            if (! ((($_la - 652) & ~0x3F) === 0 && ((1 << ($_la - 652)) & ((1 << (self::QUARTER - 652)) | (1 << (self::MONTH - 652)) | (1 << (self::DAY - 652)) | (1 << (self::HOUR - 652)) | (1 << (self::MINUTE - 652)) | (1 << (self::WEEK - 652)) | (1 << (self::SECOND - 652)) | (1 << (self::MICROSECOND - 652)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function dataTypeBase(): Context\DataTypeBaseContext
    {
        $localContext = new Context\DataTypeBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 658, self::RULE_dataTypeBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6802);

            $_la = $this->input->LA(1);

            if (! ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::DATETIME - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::TEXT - 206)) | (1 << (self::ENUM - 206)))) !== 0)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function keywordsCanBeId(): Context\KeywordsCanBeIdContext
    {
        $localContext = new Context\KeywordsCanBeIdContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 660, self::RULE_keywordsCanBeId);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6804);

            $_la = $this->input->LA(1);

            if (! (((($_la - 34) & ~0x3F) === 0 && ((1 << ($_la - 34)) & ((1 << (self::CURRENT - 34)) | (1 << (self::DIAGNOSTICS - 34)) | (1 << (self::EXCEPT - 34)) | (1 << (self::GROUP - 34)))) !== 0) || ((($_la - 110) & ~0x3F) === 0 && ((1 << ($_la - 110)) & ((1 << (self::NUMBER - 110)) | (1 << (self::ORDER - 110)) | (1 << (self::STACKED - 110)))) !== 0) || ((($_la - 228) & ~0x3F) === 0 && ((1 << ($_la - 228)) & ((1 << (self::SERIAL - 228)) | (1 << (self::AVG - 228)) | (1 << (self::BIT_AND - 228)) | (1 << (self::BIT_OR - 228)) | (1 << (self::BIT_XOR - 228)) | (1 << (self::COUNT - 228)) | (1 << (self::GROUP_CONCAT - 228)) | (1 << (self::MAX - 228)) | (1 << (self::MIN - 228)) | (1 << (self::STD - 228)))) !== 0) || ((($_la - 292) & ~0x3F) === 0 && ((1 << ($_la - 292)) & ((1 << (self::STDDEV - 292)) | (1 << (self::STDDEV_POP - 292)) | (1 << (self::STDDEV_SAMP - 292)) | (1 << (self::SUM - 292)) | (1 << (self::VAR_POP - 292)) | (1 << (self::VAR_SAMP - 292)) | (1 << (self::VARIANCE - 292)) | (1 << (self::ACCOUNT - 292)) | (1 << (self::ACTION - 292)) | (1 << (self::AFTER - 292)) | (1 << (self::AGGREGATE - 292)) | (1 << (self::ALGORITHM - 292)) | (1 << (self::ANY - 292)) | (1 << (self::AT - 292)) | (1 << (self::AUTHORS - 292)) | (1 << (self::AUTOCOMMIT - 292)) | (1 << (self::AUTOEXTEND_SIZE - 292)) | (1 << (self::AUTO_INCREMENT - 292)) | (1 << (self::AVG_ROW_LENGTH - 292)) | (1 << (self::BEGIN - 292)) | (1 << (self::BINLOG - 292)) | (1 << (self::BIT - 292)) | (1 << (self::BLOCK - 292)) | (1 << (self::BOOL - 292)) | (1 << (self::BOOLEAN - 292)) | (1 << (self::BTREE - 292)) | (1 << (self::CACHE - 292)) | (1 << (self::CASCADED - 292)) | (1 << (self::CHAIN - 292)) | (1 << (self::CHANGED - 292)) | (1 << (self::CHANNEL - 292)) | (1 << (self::CHECKSUM - 292)) | (1 << (self::PAGE_CHECKSUM - 292)) | (1 << (self::CIPHER - 292)) | (1 << (self::CLASS_ORIGIN - 292)) | (1 << (self::CLIENT - 292)) | (1 << (self::CLOSE - 292)) | (1 << (self::COALESCE - 292)) | (1 << (self::CODE - 292)) | (1 << (self::COLUMNS - 292)) | (1 << (self::COLUMN_FORMAT - 292)) | (1 << (self::COLUMN_NAME - 292)) | (1 << (self::COMMENT - 292)) | (1 << (self::COMMIT - 292)) | (1 << (self::COMPACT - 292)))) !== 0) || ((($_la - 356) & ~0x3F) === 0 && ((1 << ($_la - 356)) & ((1 << (self::COMPLETION - 356)) | (1 << (self::COMPRESSED - 356)) | (1 << (self::COMPRESSION - 356)) | (1 << (self::CONCURRENT - 356)) | (1 << (self::CONNECT - 356)) | (1 << (self::CONNECTION - 356)) | (1 << (self::CONSISTENT - 356)) | (1 << (self::CONSTRAINT_CATALOG - 356)) | (1 << (self::CONSTRAINT_SCHEMA - 356)) | (1 << (self::CONSTRAINT_NAME - 356)) | (1 << (self::CONTAINS - 356)) | (1 << (self::CONTEXT - 356)) | (1 << (self::CONTRIBUTORS - 356)) | (1 << (self::COPY - 356)) | (1 << (self::CPU - 356)) | (1 << (self::CURSOR_NAME - 356)) | (1 << (self::DATA - 356)) | (1 << (self::DATAFILE - 356)) | (1 << (self::DEALLOCATE - 356)) | (1 << (self::DEFAULT_AUTH - 356)) | (1 << (self::DEFINER - 356)) | (1 << (self::DELAY_KEY_WRITE - 356)) | (1 << (self::DES_KEY_FILE - 356)) | (1 << (self::DIRECTORY - 356)) | (1 << (self::DISABLE - 356)) | (1 << (self::DISCARD - 356)) | (1 << (self::DISK - 356)) | (1 << (self::DO - 356)) | (1 << (self::DUMPFILE - 356)) | (1 << (self::DUPLICATE - 356)) | (1 << (self::DYNAMIC - 356)) | (1 << (self::ENABLE - 356)) | (1 << (self::ENCRYPTION - 356)) | (1 << (self::END - 356)) | (1 << (self::ENDS - 356)) | (1 << (self::ENGINE - 356)) | (1 << (self::ENGINES - 356)) | (1 << (self::ERROR - 356)) | (1 << (self::ERRORS - 356)) | (1 << (self::ESCAPE - 356)) | (1 << (self::EVEN - 356)) | (1 << (self::EVENT - 356)) | (1 << (self::EVENTS - 356)) | (1 << (self::EVERY - 356)) | (1 << (self::EXCHANGE - 356)) | (1 << (self::EXCLUSIVE - 356)) | (1 << (self::EXPIRE - 356)) | (1 << (self::EXPORT - 356)) | (1 << (self::EXTENDED - 356)) | (1 << (self::EXTENT_SIZE - 356)) | (1 << (self::FAST - 356)) | (1 << (self::FAULTS - 356)) | (1 << (self::FIELDS - 356)) | (1 << (self::FILE_BLOCK_SIZE - 356)) | (1 << (self::FILTER - 356)) | (1 << (self::FIRST - 356)) | (1 << (self::FIXED - 356)) | (1 << (self::FLUSH - 356)) | (1 << (self::FOLLOWS - 356)) | (1 << (self::FOUND - 356)) | (1 << (self::FULL - 356)) | (1 << (self::FUNCTION - 356)) | (1 << (self::GENERAL - 356)))) !== 0) || ((($_la - 420) & ~0x3F) === 0 && ((1 << ($_la - 420)) & ((1 << (self::GLOBAL - 420)) | (1 << (self::GRANTS - 420)) | (1 << (self::GROUP_REPLICATION - 420)) | (1 << (self::HANDLER - 420)) | (1 << (self::HASH - 420)) | (1 << (self::HELP - 420)) | (1 << (self::HOST - 420)) | (1 << (self::HOSTS - 420)) | (1 << (self::IDENTIFIED - 420)) | (1 << (self::IGNORE_SERVER_IDS - 420)) | (1 << (self::IMPORT - 420)) | (1 << (self::INDEXES - 420)) | (1 << (self::INITIAL_SIZE - 420)) | (1 << (self::INPLACE - 420)) | (1 << (self::INSERT_METHOD - 420)) | (1 << (self::INSTALL - 420)) | (1 << (self::INSTANCE - 420)) | (1 << (self::INVOKER - 420)) | (1 << (self::IO - 420)) | (1 << (self::IO_THREAD - 420)) | (1 << (self::IPC - 420)) | (1 << (self::ISOLATION - 420)) | (1 << (self::ISSUER - 420)) | (1 << (self::JSON - 420)) | (1 << (self::KEY_BLOCK_SIZE - 420)) | (1 << (self::LANGUAGE - 420)) | (1 << (self::LAST - 420)) | (1 << (self::LEAVES - 420)) | (1 << (self::LESS - 420)) | (1 << (self::LEVEL - 420)) | (1 << (self::LIST - 420)) | (1 << (self::LOCAL - 420)) | (1 << (self::LOGFILE - 420)) | (1 << (self::LOGS - 420)) | (1 << (self::MASTER - 420)) | (1 << (self::MASTER_AUTO_POSITION - 420)) | (1 << (self::MASTER_CONNECT_RETRY - 420)) | (1 << (self::MASTER_DELAY - 420)) | (1 << (self::MASTER_HEARTBEAT_PERIOD - 420)) | (1 << (self::MASTER_HOST - 420)) | (1 << (self::MASTER_LOG_FILE - 420)) | (1 << (self::MASTER_LOG_POS - 420)) | (1 << (self::MASTER_PASSWORD - 420)) | (1 << (self::MASTER_PORT - 420)) | (1 << (self::MASTER_RETRY_COUNT - 420)) | (1 << (self::MASTER_SSL - 420)) | (1 << (self::MASTER_SSL_CA - 420)) | (1 << (self::MASTER_SSL_CAPATH - 420)) | (1 << (self::MASTER_SSL_CERT - 420)) | (1 << (self::MASTER_SSL_CIPHER - 420)) | (1 << (self::MASTER_SSL_CRL - 420)) | (1 << (self::MASTER_SSL_CRLPATH - 420)) | (1 << (self::MASTER_SSL_KEY - 420)) | (1 << (self::MASTER_TLS_VERSION - 420)) | (1 << (self::MASTER_USER - 420)) | (1 << (self::MAX_CONNECTIONS_PER_HOUR - 420)) | (1 << (self::MAX_QUERIES_PER_HOUR - 420)) | (1 << (self::MAX_ROWS - 420)) | (1 << (self::MAX_SIZE - 420)) | (1 << (self::MAX_UPDATES_PER_HOUR - 420)) | (1 << (self::MAX_USER_CONNECTIONS - 420)) | (1 << (self::MEDIUM - 420)) | (1 << (self::MEMBER - 420)))) !== 0) || ((($_la - 484) & ~0x3F) === 0 && ((1 << ($_la - 484)) & ((1 << (self::MERGE - 484)) | (1 << (self::MESSAGE_TEXT - 484)) | (1 << (self::MID - 484)) | (1 << (self::MIGRATE - 484)) | (1 << (self::MIN_ROWS - 484)) | (1 << (self::MODE - 484)) | (1 << (self::MODIFY - 484)) | (1 << (self::MUTEX - 484)) | (1 << (self::MYSQL - 484)) | (1 << (self::MYSQL_ERRNO - 484)) | (1 << (self::NAME - 484)) | (1 << (self::NAMES - 484)) | (1 << (self::NCHAR - 484)) | (1 << (self::NEVER - 484)) | (1 << (self::NEXT - 484)) | (1 << (self::NO - 484)) | (1 << (self::NODEGROUP - 484)) | (1 << (self::NONE - 484)) | (1 << (self::ODBC - 484)) | (1 << (self::OFFLINE - 484)) | (1 << (self::OFFSET - 484)) | (1 << (self::OF - 484)) | (1 << (self::OJ - 484)) | (1 << (self::OLD_PASSWORD - 484)) | (1 << (self::ONE - 484)) | (1 << (self::ONLINE - 484)) | (1 << (self::ONLY - 484)) | (1 << (self::OPEN - 484)) | (1 << (self::OPTIMIZER_COSTS - 484)) | (1 << (self::OPTIONS - 484)) | (1 << (self::OWNER - 484)) | (1 << (self::PACK_KEYS - 484)) | (1 << (self::PAGE - 484)) | (1 << (self::PARSER - 484)) | (1 << (self::PARTIAL - 484)) | (1 << (self::PARTITIONING - 484)) | (1 << (self::PARTITIONS - 484)) | (1 << (self::PASSWORD - 484)) | (1 << (self::PHASE - 484)) | (1 << (self::PLUGIN - 484)) | (1 << (self::PLUGIN_DIR - 484)) | (1 << (self::PLUGINS - 484)) | (1 << (self::PORT - 484)) | (1 << (self::PRECEDES - 484)) | (1 << (self::PREPARE - 484)) | (1 << (self::PRESERVE - 484)) | (1 << (self::PREV - 484)) | (1 << (self::PROCESSLIST - 484)) | (1 << (self::PROFILE - 484)) | (1 << (self::PROFILES - 484)) | (1 << (self::PROXY - 484)) | (1 << (self::QUERY - 484)) | (1 << (self::QUICK - 484)) | (1 << (self::REBUILD - 484)) | (1 << (self::RECOVER - 484)) | (1 << (self::REDO_BUFFER_SIZE - 484)) | (1 << (self::REDUNDANT - 484)) | (1 << (self::RELAY - 484)) | (1 << (self::RELAY_LOG_FILE - 484)) | (1 << (self::RELAY_LOG_POS - 484)) | (1 << (self::RELAYLOG - 484)) | (1 << (self::REMOVE - 484)) | (1 << (self::REORGANIZE - 484)))) !== 0) || ((($_la - 548) & ~0x3F) === 0 && ((1 << ($_la - 548)) & ((1 << (self::REPAIR - 548)) | (1 << (self::REPLICATE_DO_DB - 548)) | (1 << (self::REPLICATE_DO_TABLE - 548)) | (1 << (self::REPLICATE_IGNORE_DB - 548)) | (1 << (self::REPLICATE_IGNORE_TABLE - 548)) | (1 << (self::REPLICATE_REWRITE_DB - 548)) | (1 << (self::REPLICATE_WILD_DO_TABLE - 548)) | (1 << (self::REPLICATE_WILD_IGNORE_TABLE - 548)) | (1 << (self::REPLICATION - 548)) | (1 << (self::RESET - 548)) | (1 << (self::RESUME - 548)) | (1 << (self::RETURNED_SQLSTATE - 548)) | (1 << (self::RETURNS - 548)) | (1 << (self::ROLE - 548)) | (1 << (self::ROLLBACK - 548)) | (1 << (self::ROLLUP - 548)) | (1 << (self::ROTATE - 548)) | (1 << (self::ROW - 548)) | (1 << (self::ROWS - 548)) | (1 << (self::ROW_FORMAT - 548)) | (1 << (self::SAVEPOINT - 548)) | (1 << (self::SCHEDULE - 548)) | (1 << (self::SECURITY - 548)) | (1 << (self::SERVER - 548)) | (1 << (self::SESSION - 548)) | (1 << (self::SHARE - 548)) | (1 << (self::SHARED - 548)) | (1 << (self::SIGNED - 548)) | (1 << (self::SIMPLE - 548)) | (1 << (self::SLAVE - 548)) | (1 << (self::SLOW - 548)) | (1 << (self::SNAPSHOT - 548)) | (1 << (self::SOCKET - 548)) | (1 << (self::SOME - 548)) | (1 << (self::SONAME - 548)) | (1 << (self::SOUNDS - 548)) | (1 << (self::SOURCE - 548)) | (1 << (self::SQL_AFTER_GTIDS - 548)) | (1 << (self::SQL_AFTER_MTS_GAPS - 548)) | (1 << (self::SQL_BEFORE_GTIDS - 548)) | (1 << (self::SQL_BUFFER_RESULT - 548)) | (1 << (self::SQL_CACHE - 548)) | (1 << (self::SQL_NO_CACHE - 548)) | (1 << (self::SQL_THREAD - 548)) | (1 << (self::START - 548)) | (1 << (self::STARTS - 548)) | (1 << (self::STATS_AUTO_RECALC - 548)) | (1 << (self::STATS_PERSISTENT - 548)) | (1 << (self::STATS_SAMPLE_PAGES - 548)) | (1 << (self::STATUS - 548)) | (1 << (self::STOP - 548)) | (1 << (self::STORAGE - 548)) | (1 << (self::STRING - 548)) | (1 << (self::SUBCLASS_ORIGIN - 548)) | (1 << (self::SUBJECT - 548)) | (1 << (self::SUBPARTITION - 548)) | (1 << (self::SUBPARTITIONS - 548)) | (1 << (self::SUSPEND - 548)) | (1 << (self::SWAPS - 548)) | (1 << (self::SWITCHES - 548)) | (1 << (self::TABLE_NAME - 548)) | (1 << (self::TABLESPACE - 548)))) !== 0) || ((($_la - 613) & ~0x3F) === 0 && ((1 << ($_la - 613)) & ((1 << (self::TEMPORARY - 613)) | (1 << (self::TEMPTABLE - 613)) | (1 << (self::THAN - 613)) | (1 << (self::TRADITIONAL - 613)) | (1 << (self::TRANSACTION - 613)) | (1 << (self::TRANSACTIONAL - 613)) | (1 << (self::TRIGGERS - 613)) | (1 << (self::TRUNCATE - 613)) | (1 << (self::UNDEFINED - 613)) | (1 << (self::UNDOFILE - 613)) | (1 << (self::UNDO_BUFFER_SIZE - 613)) | (1 << (self::UNINSTALL - 613)) | (1 << (self::UNKNOWN - 613)) | (1 << (self::UNTIL - 613)) | (1 << (self::UPGRADE - 613)) | (1 << (self::USER - 613)) | (1 << (self::USE_FRM - 613)) | (1 << (self::USER_RESOURCES - 613)) | (1 << (self::VALIDATION - 613)) | (1 << (self::VALUE - 613)) | (1 << (self::VARIABLES - 613)) | (1 << (self::VIEW - 613)) | (1 << (self::WAIT - 613)) | (1 << (self::WARNINGS - 613)) | (1 << (self::WITHOUT - 613)) | (1 << (self::WORK - 613)) | (1 << (self::WRAPPER - 613)) | (1 << (self::X509 - 613)) | (1 << (self::XA - 613)) | (1 << (self::XML - 613)) | (1 << (self::EUR - 613)) | (1 << (self::USA - 613)) | (1 << (self::JIS - 613)) | (1 << (self::ISO - 613)) | (1 << (self::INTERNAL - 613)) | (1 << (self::AUDIT_ADMIN - 613)) | (1 << (self::BACKUP_ADMIN - 613)) | (1 << (self::BINLOG_ADMIN - 613)) | (1 << (self::BINLOG_ENCRYPTION_ADMIN - 613)) | (1 << (self::CLONE_ADMIN - 613)) | (1 << (self::CONNECTION_ADMIN - 613)) | (1 << (self::ENCRYPTION_KEY_ADMIN - 613)))) !== 0) || ((($_la - 677) & ~0x3F) === 0 && ((1 << ($_la - 677)) & ((1 << (self::FIREWALL_ADMIN - 677)) | (1 << (self::FIREWALL_USER - 677)) | (1 << (self::GROUP_REPLICATION_ADMIN - 677)) | (1 << (self::INNODB_REDO_LOG_ARCHIVE - 677)) | (1 << (self::NDB_STORED_USER - 677)) | (1 << (self::PERSIST_RO_VARIABLES_ADMIN - 677)) | (1 << (self::REPLICATION_APPLIER - 677)) | (1 << (self::REPLICATION_SLAVE_ADMIN - 677)) | (1 << (self::RESOURCE_GROUP_ADMIN - 677)) | (1 << (self::RESOURCE_GROUP_USER - 677)) | (1 << (self::ROLE_ADMIN - 677)) | (1 << (self::SESSION_VARIABLES_ADMIN - 677)) | (1 << (self::SET_USER_ID - 677)) | (1 << (self::SHOW_ROUTINE - 677)) | (1 << (self::SYSTEM_VARIABLES_ADMIN - 677)) | (1 << (self::TABLE_ENCRYPTION_ADMIN - 677)) | (1 << (self::VERSION_TOKEN_ADMIN - 677)) | (1 << (self::XA_RECOVER_ADMIN - 677)))) !== 0) || $_la === self::MEMORY || $_la === self::CATALOG_NAME || $_la === self::SCHEMA_NAME || $_la === self::OPTIONAL)) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    public function functionNameBase(): Context\FunctionNameBaseContext
    {
        $localContext = new Context\FunctionNameBaseContext($this->ctx, $this->getState());

        $this->enterRule($localContext, 662, self::RULE_functionNameBase);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6806);

            $_la = $this->input->LA(1);

            if (! ($_la === self::DATABASE || ((($_la - 92) & ~0x3F) === 0 && ((1 << ($_la - 92)) & ((1 << (self::LEFT - 92)) | (1 << (self::RIGHT - 92)) | (1 << (self::SCHEMA - 92)))) !== 0) || ((($_la - 206) & ~0x3F) === 0 && ((1 << ($_la - 206)) & ((1 << (self::DATE - 206)) | (1 << (self::TIME - 206)) | (1 << (self::TIMESTAMP - 206)) | (1 << (self::YEAR - 206)) | (1 << (self::JSON_ARRAY - 206)) | (1 << (self::JSON_OBJECT - 206)) | (1 << (self::JSON_QUOTE - 206)) | (1 << (self::JSON_CONTAINS - 206)) | (1 << (self::JSON_CONTAINS_PATH - 206)) | (1 << (self::JSON_EXTRACT - 206)) | (1 << (self::JSON_KEYS - 206)) | (1 << (self::JSON_OVERLAPS - 206)) | (1 << (self::JSON_SEARCH - 206)) | (1 << (self::JSON_VALUE - 206)) | (1 << (self::JSON_ARRAY_APPEND - 206)) | (1 << (self::JSON_ARRAY_INSERT - 206)) | (1 << (self::JSON_INSERT - 206)) | (1 << (self::JSON_MERGE - 206)) | (1 << (self::JSON_MERGE_PATCH - 206)) | (1 << (self::JSON_MERGE_PRESERVE - 206)) | (1 << (self::JSON_REMOVE - 206)) | (1 << (self::JSON_REPLACE - 206)) | (1 << (self::JSON_SET - 206)) | (1 << (self::JSON_UNQUOTE - 206)) | (1 << (self::JSON_DEPTH - 206)) | (1 << (self::JSON_LENGTH - 206)) | (1 << (self::JSON_TYPE - 206)) | (1 << (self::JSON_VALID - 206)) | (1 << (self::JSON_TABLE - 206)) | (1 << (self::JSON_SCHEMA_VALID - 206)) | (1 << (self::JSON_SCHEMA_VALIDATION_REPORT - 206)) | (1 << (self::JSON_PRETTY - 206)) | (1 << (self::JSON_STORAGE_FREE - 206)) | (1 << (self::JSON_STORAGE_SIZE - 206)))) !== 0) || ((($_la - 270) & ~0x3F) === 0 && ((1 << ($_la - 270)) & ((1 << (self::JSON_ARRAYAGG - 270)) | (1 << (self::JSON_OBJECTAGG - 270)) | (1 << (self::COUNT - 270)) | (1 << (self::POSITION - 270)))) !== 0) || $_la === self::INVISIBLE || ((($_la - 637) & ~0x3F) === 0 && ((1 << ($_la - 637)) & ((1 << (self::VISIBLE - 637)) | (1 << (self::QUARTER - 637)) | (1 << (self::MONTH - 637)) | (1 << (self::DAY - 637)) | (1 << (self::HOUR - 637)) | (1 << (self::MINUTE - 637)) | (1 << (self::WEEK - 637)) | (1 << (self::SECOND - 637)) | (1 << (self::MICROSECOND - 637)) | (1 << (self::SESSION_VARIABLES_ADMIN - 637)))) !== 0) || ((($_la - 758) & ~0x3F) === 0 && ((1 << ($_la - 758)) & ((1 << (self::GEOMETRYCOLLECTION - 758)) | (1 << (self::LINESTRING - 758)) | (1 << (self::MULTILINESTRING - 758)) | (1 << (self::MULTIPOINT - 758)) | (1 << (self::MULTIPOLYGON - 758)) | (1 << (self::POINT - 758)) | (1 << (self::POLYGON - 758)) | (1 << (self::ABS - 758)) | (1 << (self::ACOS - 758)) | (1 << (self::ADDDATE - 758)) | (1 << (self::ADDTIME - 758)) | (1 << (self::AES_DECRYPT - 758)) | (1 << (self::AES_ENCRYPT - 758)) | (1 << (self::AREA - 758)) | (1 << (self::ASBINARY - 758)) | (1 << (self::ASIN - 758)) | (1 << (self::ASTEXT - 758)) | (1 << (self::ASWKB - 758)) | (1 << (self::ASWKT - 758)) | (1 << (self::ASYMMETRIC_DECRYPT - 758)) | (1 << (self::ASYMMETRIC_DERIVE - 758)) | (1 << (self::ASYMMETRIC_ENCRYPT - 758)) | (1 << (self::ASYMMETRIC_SIGN - 758)) | (1 << (self::ASYMMETRIC_VERIFY - 758)) | (1 << (self::ATAN - 758)) | (1 << (self::ATAN2 - 758)) | (1 << (self::BENCHMARK - 758)) | (1 << (self::BIN - 758)) | (1 << (self::BIT_COUNT - 758)) | (1 << (self::BIT_LENGTH - 758)) | (1 << (self::BUFFER - 758)) | (1 << (self::CEIL - 758)) | (1 << (self::CEILING - 758)) | (1 << (self::CENTROID - 758)) | (1 << (self::CHARACTER_LENGTH - 758)) | (1 << (self::CHARSET - 758)) | (1 << (self::CHAR_LENGTH - 758)) | (1 << (self::COERCIBILITY - 758)) | (1 << (self::COLLATION - 758)) | (1 << (self::COMPRESS - 758)) | (1 << (self::CONCAT - 758)) | (1 << (self::CONCAT_WS - 758)) | (1 << (self::CONNECTION_ID - 758)) | (1 << (self::CONV - 758)) | (1 << (self::CONVERT_TZ - 758)) | (1 << (self::COS - 758)) | (1 << (self::COT - 758)) | (1 << (self::CRC32 - 758)) | (1 << (self::CREATE_ASYMMETRIC_PRIV_KEY - 758)) | (1 << (self::CREATE_ASYMMETRIC_PUB_KEY - 758)) | (1 << (self::CREATE_DH_PARAMETERS - 758)) | (1 << (self::CREATE_DIGEST - 758)) | (1 << (self::CROSSES - 758)) | (1 << (self::DATEDIFF - 758)) | (1 << (self::DATE_FORMAT - 758)) | (1 << (self::DAYNAME - 758)) | (1 << (self::DAYOFMONTH - 758)) | (1 << (self::DAYOFWEEK - 758)) | (1 << (self::DAYOFYEAR - 758)) | (1 << (self::DECODE - 758)) | (1 << (self::DEGREES - 758)))) !== 0) || ((($_la - 822) & ~0x3F) === 0 && ((1 << ($_la - 822)) & ((1 << (self::DES_DECRYPT - 822)) | (1 << (self::DES_ENCRYPT - 822)) | (1 << (self::DIMENSION - 822)) | (1 << (self::DISJOINT - 822)) | (1 << (self::ELT - 822)) | (1 << (self::ENCODE - 822)) | (1 << (self::ENCRYPT - 822)) | (1 << (self::ENDPOINT - 822)) | (1 << (self::ENVELOPE - 822)) | (1 << (self::EQUALS - 822)) | (1 << (self::EXP - 822)) | (1 << (self::EXPORT_SET - 822)) | (1 << (self::EXTERIORRING - 822)) | (1 << (self::EXTRACTVALUE - 822)) | (1 << (self::FIELD - 822)) | (1 << (self::FIND_IN_SET - 822)) | (1 << (self::FLOOR - 822)) | (1 << (self::FORMAT - 822)) | (1 << (self::FOUND_ROWS - 822)) | (1 << (self::FROM_BASE64 - 822)) | (1 << (self::FROM_DAYS - 822)) | (1 << (self::FROM_UNIXTIME - 822)) | (1 << (self::GEOMCOLLFROMTEXT - 822)) | (1 << (self::GEOMCOLLFROMWKB - 822)) | (1 << (self::GEOMETRYCOLLECTIONFROMTEXT - 822)) | (1 << (self::GEOMETRYCOLLECTIONFROMWKB - 822)) | (1 << (self::GEOMETRYFROMTEXT - 822)) | (1 << (self::GEOMETRYFROMWKB - 822)) | (1 << (self::GEOMETRYN - 822)) | (1 << (self::GEOMETRYTYPE - 822)) | (1 << (self::GEOMFROMTEXT - 822)) | (1 << (self::GEOMFROMWKB - 822)) | (1 << (self::GET_FORMAT - 822)) | (1 << (self::GET_LOCK - 822)) | (1 << (self::GLENGTH - 822)) | (1 << (self::GREATEST - 822)) | (1 << (self::GTID_SUBSET - 822)) | (1 << (self::GTID_SUBTRACT - 822)) | (1 << (self::HEX - 822)) | (1 << (self::IFNULL - 822)) | (1 << (self::INET6_ATON - 822)) | (1 << (self::INET6_NTOA - 822)) | (1 << (self::INET_ATON - 822)) | (1 << (self::INET_NTOA - 822)) | (1 << (self::INSTR - 822)) | (1 << (self::INTERIORRINGN - 822)) | (1 << (self::INTERSECTS - 822)) | (1 << (self::ISCLOSED - 822)) | (1 << (self::ISEMPTY - 822)) | (1 << (self::ISNULL - 822)) | (1 << (self::ISSIMPLE - 822)) | (1 << (self::IS_FREE_LOCK - 822)) | (1 << (self::IS_IPV4 - 822)) | (1 << (self::IS_IPV4_COMPAT - 822)) | (1 << (self::IS_IPV4_MAPPED - 822)) | (1 << (self::IS_IPV6 - 822)) | (1 << (self::IS_USED_LOCK - 822)) | (1 << (self::LAST_INSERT_ID - 822)) | (1 << (self::LCASE - 822)) | (1 << (self::LEAST - 822)) | (1 << (self::LENGTH - 822)) | (1 << (self::LINEFROMTEXT - 822)) | (1 << (self::LINEFROMWKB - 822)) | (1 << (self::LINESTRINGFROMTEXT - 822)))) !== 0) || ((($_la - 886) & ~0x3F) === 0 && ((1 << ($_la - 886)) & ((1 << (self::LINESTRINGFROMWKB - 886)) | (1 << (self::LN - 886)) | (1 << (self::LOAD_FILE - 886)) | (1 << (self::LOCATE - 886)) | (1 << (self::LOG - 886)) | (1 << (self::LOG10 - 886)) | (1 << (self::LOG2 - 886)) | (1 << (self::LOWER - 886)) | (1 << (self::LPAD - 886)) | (1 << (self::LTRIM - 886)) | (1 << (self::MAKEDATE - 886)) | (1 << (self::MAKETIME - 886)) | (1 << (self::MAKE_SET - 886)) | (1 << (self::MASTER_POS_WAIT - 886)) | (1 << (self::MBRCONTAINS - 886)) | (1 << (self::MBRDISJOINT - 886)) | (1 << (self::MBREQUAL - 886)) | (1 << (self::MBRINTERSECTS - 886)) | (1 << (self::MBROVERLAPS - 886)) | (1 << (self::MBRTOUCHES - 886)) | (1 << (self::MBRWITHIN - 886)) | (1 << (self::MD5 - 886)) | (1 << (self::MLINEFROMTEXT - 886)) | (1 << (self::MLINEFROMWKB - 886)) | (1 << (self::MONTHNAME - 886)) | (1 << (self::MPOINTFROMTEXT - 886)) | (1 << (self::MPOINTFROMWKB - 886)) | (1 << (self::MPOLYFROMTEXT - 886)) | (1 << (self::MPOLYFROMWKB - 886)) | (1 << (self::MULTILINESTRINGFROMTEXT - 886)) | (1 << (self::MULTILINESTRINGFROMWKB - 886)) | (1 << (self::MULTIPOINTFROMTEXT - 886)) | (1 << (self::MULTIPOINTFROMWKB - 886)) | (1 << (self::MULTIPOLYGONFROMTEXT - 886)) | (1 << (self::MULTIPOLYGONFROMWKB - 886)) | (1 << (self::NAME_CONST - 886)) | (1 << (self::NULLIF - 886)) | (1 << (self::NUMGEOMETRIES - 886)) | (1 << (self::NUMINTERIORRINGS - 886)) | (1 << (self::NUMPOINTS - 886)) | (1 << (self::OCT - 886)) | (1 << (self::OCTET_LENGTH - 886)) | (1 << (self::ORD - 886)) | (1 << (self::OVERLAPS - 886)) | (1 << (self::PERIOD_ADD - 886)) | (1 << (self::PERIOD_DIFF - 886)) | (1 << (self::PI - 886)) | (1 << (self::POINTFROMTEXT - 886)) | (1 << (self::POINTFROMWKB - 886)) | (1 << (self::POINTN - 886)) | (1 << (self::POLYFROMTEXT - 886)) | (1 << (self::POLYFROMWKB - 886)) | (1 << (self::POLYGONFROMTEXT - 886)) | (1 << (self::POLYGONFROMWKB - 886)) | (1 << (self::POW - 886)) | (1 << (self::POWER - 886)) | (1 << (self::QUOTE - 886)) | (1 << (self::RADIANS - 886)) | (1 << (self::RAND - 886)) | (1 << (self::RANDOM_BYTES - 886)) | (1 << (self::RELEASE_LOCK - 886)) | (1 << (self::REVERSE - 886)) | (1 << (self::ROUND - 886)) | (1 << (self::ROW_COUNT - 886)))) !== 0) || ((($_la - 950) & ~0x3F) === 0 && ((1 << ($_la - 950)) & ((1 << (self::RPAD - 950)) | (1 << (self::RTRIM - 950)) | (1 << (self::SEC_TO_TIME - 950)) | (1 << (self::SESSION_USER - 950)) | (1 << (self::SHA - 950)) | (1 << (self::SHA1 - 950)) | (1 << (self::SHA2 - 950)) | (1 << (self::SIGN - 950)) | (1 << (self::SIN - 950)) | (1 << (self::SLEEP - 950)) | (1 << (self::SOUNDEX - 950)) | (1 << (self::SQL_THREAD_WAIT_AFTER_GTIDS - 950)) | (1 << (self::SQRT - 950)) | (1 << (self::SRID - 950)) | (1 << (self::STARTPOINT - 950)) | (1 << (self::STRCMP - 950)) | (1 << (self::STR_TO_DATE - 950)) | (1 << (self::ST_AREA - 950)) | (1 << (self::ST_ASBINARY - 950)) | (1 << (self::ST_ASTEXT - 950)) | (1 << (self::ST_ASWKB - 950)) | (1 << (self::ST_ASWKT - 950)) | (1 << (self::ST_BUFFER - 950)) | (1 << (self::ST_CENTROID - 950)) | (1 << (self::ST_CONTAINS - 950)) | (1 << (self::ST_CROSSES - 950)) | (1 << (self::ST_DIFFERENCE - 950)) | (1 << (self::ST_DIMENSION - 950)) | (1 << (self::ST_DISJOINT - 950)) | (1 << (self::ST_DISTANCE - 950)) | (1 << (self::ST_ENDPOINT - 950)) | (1 << (self::ST_ENVELOPE - 950)) | (1 << (self::ST_EQUALS - 950)) | (1 << (self::ST_EXTERIORRING - 950)) | (1 << (self::ST_GEOMCOLLFROMTEXT - 950)) | (1 << (self::ST_GEOMCOLLFROMTXT - 950)) | (1 << (self::ST_GEOMCOLLFROMWKB - 950)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMTEXT - 950)) | (1 << (self::ST_GEOMETRYCOLLECTIONFROMWKB - 950)) | (1 << (self::ST_GEOMETRYFROMTEXT - 950)) | (1 << (self::ST_GEOMETRYFROMWKB - 950)) | (1 << (self::ST_GEOMETRYN - 950)) | (1 << (self::ST_GEOMETRYTYPE - 950)) | (1 << (self::ST_GEOMFROMTEXT - 950)) | (1 << (self::ST_GEOMFROMWKB - 950)) | (1 << (self::ST_INTERIORRINGN - 950)) | (1 << (self::ST_INTERSECTION - 950)) | (1 << (self::ST_INTERSECTS - 950)) | (1 << (self::ST_ISCLOSED - 950)) | (1 << (self::ST_ISEMPTY - 950)) | (1 << (self::ST_ISSIMPLE - 950)) | (1 << (self::ST_LINEFROMTEXT - 950)) | (1 << (self::ST_LINEFROMWKB - 950)) | (1 << (self::ST_LINESTRINGFROMTEXT - 950)) | (1 << (self::ST_LINESTRINGFROMWKB - 950)) | (1 << (self::ST_NUMGEOMETRIES - 950)) | (1 << (self::ST_NUMINTERIORRING - 950)) | (1 << (self::ST_NUMINTERIORRINGS - 950)) | (1 << (self::ST_NUMPOINTS - 950)) | (1 << (self::ST_OVERLAPS - 950)) | (1 << (self::ST_POINTFROMTEXT - 950)) | (1 << (self::ST_POINTFROMWKB - 950)) | (1 << (self::ST_POINTN - 950)))) !== 0) || ((($_la - 1014) & ~0x3F) === 0 && ((1 << ($_la - 1014)) & ((1 << (self::ST_POLYFROMTEXT - 1014)) | (1 << (self::ST_POLYFROMWKB - 1014)) | (1 << (self::ST_POLYGONFROMTEXT - 1014)) | (1 << (self::ST_POLYGONFROMWKB - 1014)) | (1 << (self::ST_SRID - 1014)) | (1 << (self::ST_STARTPOINT - 1014)) | (1 << (self::ST_SYMDIFFERENCE - 1014)) | (1 << (self::ST_TOUCHES - 1014)) | (1 << (self::ST_UNION - 1014)) | (1 << (self::ST_WITHIN - 1014)) | (1 << (self::ST_X - 1014)) | (1 << (self::ST_Y - 1014)) | (1 << (self::SUBDATE - 1014)) | (1 << (self::SUBSTRING_INDEX - 1014)) | (1 << (self::SUBTIME - 1014)) | (1 << (self::SYSTEM_USER - 1014)) | (1 << (self::TAN - 1014)) | (1 << (self::TIMEDIFF - 1014)) | (1 << (self::TIMESTAMPADD - 1014)) | (1 << (self::TIMESTAMPDIFF - 1014)) | (1 << (self::TIME_FORMAT - 1014)) | (1 << (self::TIME_TO_SEC - 1014)) | (1 << (self::TOUCHES - 1014)) | (1 << (self::TO_BASE64 - 1014)) | (1 << (self::TO_DAYS - 1014)) | (1 << (self::TO_SECONDS - 1014)) | (1 << (self::UCASE - 1014)) | (1 << (self::UNCOMPRESS - 1014)) | (1 << (self::UNCOMPRESSED_LENGTH - 1014)) | (1 << (self::UNHEX - 1014)) | (1 << (self::UNIX_TIMESTAMP - 1014)) | (1 << (self::UPDATEXML - 1014)) | (1 << (self::UPPER - 1014)) | (1 << (self::UUID - 1014)) | (1 << (self::UUID_SHORT - 1014)) | (1 << (self::VALIDATE_PASSWORD_STRENGTH - 1014)) | (1 << (self::VERSION - 1014)) | (1 << (self::WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1014)) | (1 << (self::WEEKDAY - 1014)) | (1 << (self::WEEKOFYEAR - 1014)) | (1 << (self::WEIGHT_STRING - 1014)) | (1 << (self::WITHIN - 1014)) | (1 << (self::YEARWEEK - 1014)) | (1 << (self::Y_FUNCTION - 1014)) | (1 << (self::X_FUNCTION - 1014)) | (1 << (self::MOD - 1014)))) !== 0))) {
                $this->errorHandler->recoverInline($this);
            } else {
                if ($this->input->LA(1) === Token::EOF) {
                    $this->matchedEOF = true;
                }

                $this->errorHandler->reportMatch($this);
                $this->consume();
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->exitRule();
        }

        return $localContext;
    }

    public function sempred(?RuleContext $localContext, int $ruleIndex, int $predicateIndex): bool
    {
        switch ($ruleIndex) {
            case 316:
                return $this->sempredExpression($localContext, $predicateIndex);
            case 317:
                return $this->sempredPredicate($localContext, $predicateIndex);
            case 318:
                return $this->sempredExpressionAtom($localContext, $predicateIndex);
            default:
                return true;
        }
    }

    private static function initialize(): void
    {
        if (self::$atn !== null) {
            return;
        }

        RuntimeMetaData::checkVersion('4.9', RuntimeMetaData::VERSION);

        $atn = (new ATNDeserializer())->deserialize(self::SERIALIZED_ATN);

        $decisionToDFA = [];
        for ($i = 0, $count = $atn->getNumberOfDecisions(); $i < $count; ++$i) {
            $decisionToDFA[] = new DFA($atn->getDecisionState($i), $i);
        }

        self::$atn = $atn;
        self::$decisionToDFA = $decisionToDFA;
        self::$sharedContextCache = new PredictionContextCache();
    }

    /**
     * @throws RecognitionException
     */
    private function recursiveExpression(int $precedence): Context\ExpressionContext
    {
        $parentContext = $this->ctx;
        $parentState = $this->getState();
        $localContext = new Context\ExpressionContext($this->ctx, $parentState);
        $previousContext = $localContext;
        $startState = 632;
        $this->enterRecursionRule($localContext, 632, self::RULE_expression, $precedence);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6597);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 970, $this->ctx)) {
                case 1:
                    $localContext = new Context\NotExpressionContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;

                    $this->setState(6587);

                    $localContext->notOperator = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::NOT || $_la === self::EXCLAMATION_SYMBOL)) {
                        $localContext->notOperator = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    $this->setState(6588);
                    $this->recursiveExpression(4);
                    break;
                case 2:
                    $localContext = new Context\IsExpressionContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6589);
                    $this->recursivePredicate(0);
                    $this->setState(6590);
                    $this->match(self::IS);
                    $this->setState(6592);
                    $this->errorHandler->sync($this);
                    $_la = $this->input->LA(1);

                    if ($_la === self::NOT) {
                        $this->setState(6591);
                        $this->match(self::NOT);
                    }
                    $this->setState(6594);

                    $localContext->testValue = $this->input->LT(1);
                    $_la = $this->input->LA(1);

                    if (! ($_la === self::FALSE || $_la === self::TRUE || $_la === self::UNKNOWN)) {
                        $localContext->testValue = $this->errorHandler->recoverInline($this);
                    } else {
                        if ($this->input->LA(1) === Token::EOF) {
                            $this->matchedEOF = true;
                        }

                        $this->errorHandler->reportMatch($this);
                        $this->consume();
                    }
                    break;
                case 3:
                    $localContext = new Context\PredicateExpressionContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6596);
                    $this->recursivePredicate(0);
                    break;
            }
            $this->ctx->stop = $this->input->LT(-1);
            $this->setState(6605);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 971, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    if ($this->getParseListeners() !== null) {
                        $this->triggerExitRuleEvent();
                    }

                    $previousContext = $localContext;
                    $localContext = new Context\LogicalExpressionContext(new Context\ExpressionContext($parentContext, $parentState));
                    $this->pushNewRecursionContext($localContext, $startState, self::RULE_expression);
                    $this->setState(6599);

                    if (! $this->precpred($this->ctx, 3)) {
                        throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 3)');
                    }
                    $this->setState(6600);
                    $this->logicalOperator();
                    $this->setState(6601);
                    $this->recursiveExpression(4);
                }

                $this->setState(6607);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 971, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->unrollRecursionContexts($parentContext);
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    private function recursivePredicate(int $precedence): Context\PredicateContext
    {
        $parentContext = $this->ctx;
        $parentState = $this->getState();
        $localContext = new Context\PredicateContext($this->ctx, $parentState);
        $previousContext = $localContext;
        $startState = 634;
        $this->enterRecursionRule($localContext, 634, self::RULE_predicate, $precedence);

        try {
            $this->enterOuterAlt($localContext, 1);
            $localContext = new Context\ExpressionAtomPredicateContext($localContext);
            $this->ctx = $localContext;
            $previousContext = $localContext;

            $this->setState(6611);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 972, $this->ctx)) {
                case 1:
                    $this->setState(6609);
                    $this->match(self::LOCAL_ID);
                    $this->setState(6610);
                    $this->match(self::VAR_ASSIGN);
                    break;
            }
            $this->setState(6613);
            $this->recursiveExpressionAtom(0);
            $this->ctx->stop = $this->input->LT(-1);
            $this->setState(6679);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 980, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    if ($this->getParseListeners() !== null) {
                        $this->triggerExitRuleEvent();
                    }

                    $previousContext = $localContext;
                    $this->setState(6677);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 979, $this->ctx)) {
                        case 1:
                            $localContext = new Context\BinaryComparisonPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $localContext->left = $previousContext;

                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6615);

                            if (! $this->precpred($this->ctx, 8)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 8)');
                            }
                            $this->setState(6616);
                            $this->comparisonOperator();
                            $this->setState(6617);
                            $localContext->right = $this->recursivePredicate(9);
                            break;
                        case 2:
                            $localContext = new Context\BetweenPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6619);

                            if (! $this->precpred($this->ctx, 6)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 6)');
                            }
                            $this->setState(6621);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::NOT) {
                                $this->setState(6620);
                                $this->match(self::NOT);
                            }
                            $this->setState(6623);
                            $this->match(self::BETWEEN);
                            $this->setState(6624);
                            $this->recursivePredicate(0);
                            $this->setState(6625);
                            $this->match(self::AND);
                            $this->setState(6626);
                            $this->recursivePredicate(7);
                            break;
                        case 3:
                            $localContext = new Context\SoundsLikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6628);

                            if (! $this->precpred($this->ctx, 5)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 5)');
                            }
                            $this->setState(6629);
                            $this->match(self::SOUNDS);
                            $this->setState(6630);
                            $this->match(self::LIKE);
                            $this->setState(6631);
                            $this->recursivePredicate(6);
                            break;
                        case 4:
                            $localContext = new Context\RegexpPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6632);

                            if (! $this->precpred($this->ctx, 3)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 3)');
                            }
                            $this->setState(6634);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::NOT) {
                                $this->setState(6633);
                                $this->match(self::NOT);
                            }
                            $this->setState(6636);

                            $localContext->regex = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::REGEXP || $_la === self::RLIKE)) {
                                $localContext->regex = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            $this->setState(6637);
                            $this->recursivePredicate(4);
                            break;
                        case 5:
                            $localContext = new Context\InPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6638);

                            if (! $this->precpred($this->ctx, 10)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 10)');
                            }
                            $this->setState(6640);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::NOT) {
                                $this->setState(6639);
                                $this->match(self::NOT);
                            }
                            $this->setState(6642);
                            $this->match(self::IN);
                            $this->setState(6643);
                            $this->match(self::LR_BRACKET);
                            $this->setState(6646);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 976, $this->ctx)) {
                                case 1:
                                    $this->setState(6644);
                                    $this->selectStatement();
                                    break;
                                case 2:
                                    $this->setState(6645);
                                    $this->expressions();
                                    break;
                            }
                            $this->setState(6648);
                            $this->match(self::RR_BRACKET);
                            break;
                        case 6:
                            $localContext = new Context\IsNullPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6650);

                            if (! $this->precpred($this->ctx, 9)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 9)');
                            }
                            $this->setState(6651);
                            $this->match(self::IS);
                            $this->setState(6652);
                            $this->nullNotnull();
                            break;
                        case 7:
                            $localContext = new Context\SubqueryComparisonPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6653);

                            if (! $this->precpred($this->ctx, 7)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 7)');
                            }
                            $this->setState(6654);
                            $this->comparisonOperator();
                            $this->setState(6655);

                            $localContext->quantifier = $this->input->LT(1);
                            $_la = $this->input->LA(1);

                            if (! ($_la === self::ALL || $_la === self::ANY || $_la === self::SOME)) {
                                $localContext->quantifier = $this->errorHandler->recoverInline($this);
                            } else {
                                if ($this->input->LA(1) === Token::EOF) {
                                    $this->matchedEOF = true;
                                }

                                $this->errorHandler->reportMatch($this);
                                $this->consume();
                            }
                            $this->setState(6656);
                            $this->match(self::LR_BRACKET);
                            $this->setState(6657);
                            $this->selectStatement();
                            $this->setState(6658);
                            $this->match(self::RR_BRACKET);
                            break;
                        case 8:
                            $localContext = new Context\LikePredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6660);

                            if (! $this->precpred($this->ctx, 4)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 4)');
                            }
                            $this->setState(6662);
                            $this->errorHandler->sync($this);
                            $_la = $this->input->LA(1);

                            if ($_la === self::NOT) {
                                $this->setState(6661);
                                $this->match(self::NOT);
                            }
                            $this->setState(6664);
                            $this->match(self::LIKE);
                            $this->setState(6665);
                            $this->recursivePredicate(0);
                            $this->setState(6668);
                            $this->errorHandler->sync($this);

                            switch ($this->getInterpreter()->adaptivePredict($this->input, 978, $this->ctx)) {
                                case 1:
                                    $this->setState(6666);
                                    $this->match(self::ESCAPE);
                                    $this->setState(6667);
                                    $this->match(self::STRING_LITERAL);
                                    break;
                            }
                            break;
                        case 9:
                            $localContext = new Context\JsonMemberOfPredicateContext(new Context\PredicateContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_predicate);
                            $this->setState(6670);

                            if (! $this->precpred($this->ctx, 1)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 1)');
                            }
                            $this->setState(6671);
                            $this->match(self::MEMBER);
                            $this->setState(6672);
                            $this->match(self::OF);
                            $this->setState(6673);
                            $this->match(self::LR_BRACKET);
                            $this->setState(6674);
                            $this->recursivePredicate(0);
                            $this->setState(6675);
                            $this->match(self::RR_BRACKET);
                            break;
                    }
                }

                $this->setState(6681);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 980, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->unrollRecursionContexts($parentContext);
        }

        return $localContext;
    }

    /**
     * @throws RecognitionException
     */
    private function recursiveExpressionAtom(int $precedence): Context\ExpressionAtomContext
    {
        $parentContext = $this->ctx;
        $parentState = $this->getState();
        $localContext = new Context\ExpressionAtomContext($this->ctx, $parentState);
        $previousContext = $localContext;
        $startState = 636;
        $this->enterRecursionRule($localContext, 636, self::RULE_expressionAtom, $precedence);

        try {
            $this->enterOuterAlt($localContext, 1);
            $this->setState(6727);
            $this->errorHandler->sync($this);

            switch ($this->getInterpreter()->adaptivePredict($this->input, 983, $this->ctx)) {
                case 1:
                    $localContext = new Context\ConstantExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;

                    $this->setState(6683);
                    $this->constant();
                    break;
                case 2:
                    $localContext = new Context\FullColumnNameExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6684);
                    $this->fullColumnName();
                    break;
                case 3:
                    $localContext = new Context\FunctionCallExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6685);
                    $this->functionCall();
                    break;
                case 4:
                    $localContext = new Context\MysqlVariableExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6686);
                    $this->mysqlVariable();
                    break;
                case 5:
                    $localContext = new Context\UnaryExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6687);
                    $this->unaryOperator();
                    $this->setState(6688);
                    $this->recursiveExpressionAtom(10);
                    break;
                case 6:
                    $localContext = new Context\BinaryExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6690);
                    $this->match(self::BINARY);
                    $this->setState(6691);
                    $this->recursiveExpressionAtom(9);
                    break;
                case 7:
                    $localContext = new Context\NestedExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6692);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6693);
                    $this->recursiveExpression(0);
                    $this->setState(6698);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    while ($_la === self::COMMA) {
                        $this->setState(6694);
                        $this->match(self::COMMA);
                        $this->setState(6695);
                        $this->recursiveExpression(0);
                        $this->setState(6700);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    }
                    $this->setState(6701);
                    $this->match(self::RR_BRACKET);
                    break;
                case 8:
                    $localContext = new Context\NestedRowExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6703);
                    $this->match(self::ROW);
                    $this->setState(6704);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6705);
                    $this->recursiveExpression(0);
                    $this->setState(6708);
                    $this->errorHandler->sync($this);

                    $_la = $this->input->LA(1);
                    do {
                        $this->setState(6706);
                        $this->match(self::COMMA);
                        $this->setState(6707);
                        $this->recursiveExpression(0);
                        $this->setState(6710);
                        $this->errorHandler->sync($this);
                        $_la = $this->input->LA(1);
                    } while ($_la === self::COMMA);
                    $this->setState(6712);
                    $this->match(self::RR_BRACKET);
                    break;
                case 9:
                    $localContext = new Context\ExistsExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6714);
                    $this->match(self::EXISTS);
                    $this->setState(6715);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6716);
                    $this->selectStatement();
                    $this->setState(6717);
                    $this->match(self::RR_BRACKET);
                    break;
                case 10:
                    $localContext = new Context\SubqueryExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6719);
                    $this->match(self::LR_BRACKET);
                    $this->setState(6720);
                    $this->selectStatement();
                    $this->setState(6721);
                    $this->match(self::RR_BRACKET);
                    break;
                case 11:
                    $localContext = new Context\IntervalExpressionAtomContext($localContext);
                    $this->ctx = $localContext;
                    $previousContext = $localContext;
                    $this->setState(6723);
                    $this->match(self::INTERVAL);
                    $this->setState(6724);
                    $this->recursiveExpression(0);
                    $this->setState(6725);
                    $this->intervalType();
                    break;
            }
            $this->ctx->stop = $this->input->LT(-1);
            $this->setState(6746);
            $this->errorHandler->sync($this);

            $alt = $this->getInterpreter()->adaptivePredict($this->input, 985, $this->ctx);

            while ($alt !== 2 && $alt !== ATN::INVALID_ALT_NUMBER) {
                if ($alt === 1) {
                    if ($this->getParseListeners() !== null) {
                        $this->triggerExitRuleEvent();
                    }

                    $previousContext = $localContext;
                    $this->setState(6744);
                    $this->errorHandler->sync($this);

                    switch ($this->getInterpreter()->adaptivePredict($this->input, 984, $this->ctx)) {
                        case 1:
                            $localContext = new Context\BitExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
                            $localContext->left = $previousContext;

                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
                            $this->setState(6729);

                            if (! $this->precpred($this->ctx, 3)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 3)');
                            }
                            $this->setState(6730);
                            $this->bitOperator();
                            $this->setState(6731);
                            $localContext->right = $this->recursiveExpressionAtom(4);
                            break;
                        case 2:
                            $localContext = new Context\MathExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
                            $localContext->left = $previousContext;

                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
                            $this->setState(6733);

                            if (! $this->precpred($this->ctx, 2)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 2)');
                            }
                            $this->setState(6734);
                            $this->mathOperator();
                            $this->setState(6735);
                            $localContext->right = $this->recursiveExpressionAtom(3);
                            break;
                        case 3:
                            $localContext = new Context\JsonExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
                            $localContext->left = $previousContext;

                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
                            $this->setState(6737);

                            if (! $this->precpred($this->ctx, 1)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 1)');
                            }
                            $this->setState(6738);
                            $this->jsonOperator();
                            $this->setState(6739);
                            $localContext->right = $this->recursiveExpressionAtom(2);
                            break;
                        case 4:
                            $localContext = new Context\CollateExpressionAtomContext(new Context\ExpressionAtomContext($parentContext, $parentState));
                            $this->pushNewRecursionContext($localContext, $startState, self::RULE_expressionAtom);
                            $this->setState(6741);

                            if (! $this->precpred($this->ctx, 12)) {
                                throw new FailedPredicateException($this, '\\$this->precpred(\\$this->ctx, 12)');
                            }
                            $this->setState(6742);
                            $this->match(self::COLLATE);
                            $this->setState(6743);
                            $this->collationName();
                            break;
                    }
                }

                $this->setState(6748);
                $this->errorHandler->sync($this);

                $alt = $this->getInterpreter()->adaptivePredict($this->input, 985, $this->ctx);
            }
        } catch (RecognitionException $exception) {
            $localContext->exception = $exception;
            $this->errorHandler->reportError($this, $exception);
            $this->errorHandler->recover($this, $exception);
        } finally {
            $this->unrollRecursionContexts($parentContext);
        }

        return $localContext;
    }

    private function sempredExpression(?Context\ExpressionContext $localContext, int $predicateIndex): bool
    {
        switch ($predicateIndex) {
            case 0:
                return $this->precpred($this->ctx, 3);
        }

        return true;
    }

    private function sempredPredicate(?Context\PredicateContext $localContext, int $predicateIndex): bool
    {
        switch ($predicateIndex) {
            case 1:
                return $this->precpred($this->ctx, 8);
            case 2:
                return $this->precpred($this->ctx, 6);
            case 3:
                return $this->precpred($this->ctx, 5);
            case 4:
                return $this->precpred($this->ctx, 3);
            case 5:
                return $this->precpred($this->ctx, 10);
            case 6:
                return $this->precpred($this->ctx, 9);
            case 7:
                return $this->precpred($this->ctx, 7);
            case 8:
                return $this->precpred($this->ctx, 4);
            case 9:
                return $this->precpred($this->ctx, 1);
        }

        return true;
    }

    private function sempredExpressionAtom(?Context\ExpressionAtomContext $localContext, int $predicateIndex): bool
    {
        switch ($predicateIndex) {
            case 10:
                return $this->precpred($this->ctx, 3);
            case 11:
                return $this->precpred($this->ctx, 2);
            case 12:
                return $this->precpred($this->ctx, 1);
            case 13:
                return $this->precpred($this->ctx, 12);
        }

        return true;
    }
}
